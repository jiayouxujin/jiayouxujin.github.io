<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git的基本原理与多人协作常见场景</title>
    <url>/2020-02-22-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%B8%8E%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<h2 id="Git的基本原理"><a href="#Git的基本原理" class="headerlink" title="Git的基本原理"></a>Git的基本原理</h2><p>Git分为<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897271968352576" target="_blank" rel="noopener" title="Git的工作区和暂存区的基本概念">工作区和暂存区</a>的概念，学习Git首先要懂得这两个基本概念.我们<strong>本机</strong>的目录就是<strong>工作区</strong>，但是.git目录不算工作区，而是Git的版本库。</p>
<p>Git的版本库里面有一个stage或者是index叫做<strong>暂存区</strong>，当我们执行<code>git add</code>就会将工作区的内容添加到暂存区里，然后我们执行<code>git commit</code>的时候就会将暂存区的内容全部提交到当前分支。</p>
<p>并且<a href="https://blog.csdn.net/stpeace/article/details/84351160" target="_blank" rel="noopener" title="Git工作区和暂存区与分支的关系"><strong>工作区</strong>和<strong>暂存区</strong>是所有分支所共有</a>的，如果没有<code>git commit</code>就不会将其提交到某个分支。</p>
<p>想到某个<strong>场景</strong>，如果开发的时候，没有执行<code>git checkout branch</code>切换到自己的feature的分支上也没有关系，因为还没有提交到具体的某个分支。</p>
<h3 id="关于工作区的实践"><a href="#关于工作区的实践" class="headerlink" title="关于工作区的实践"></a>关于工作区的实践</h3><p>首先执行<code>git branch -av</code>查看所有分支【刚刚处理七牛云的bug费了好长时间】</p>
<p><img src="http://cdn.xuxiaojin.com/202002220958_219.png" alt=""></p>
<p>本地有一个默认的master分支，远程三个分支。现在我们来体验一下工作区和暂存区</p>
<p><img src="http://cdn.xuxiaojin.com/202002221000_559.png" alt=""></p>
<p>首先我们建立一个<code>feature/xj</code>的本地分支。</p>
<p><code>git branch feature/xj origin/feature/xj</code>是指在<code>origin/feature/xj</code>以这个分支为基础建立一个名为<code>feature/xj</code>的分支</p>
<p>现在建立好分支了，但是我们不执行<code>git checout feature/xj</code>我们所在的地方还是<code>master</code>的分支，进行简单修改。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221005_652.png" alt=""></p>
<p>我简单的修改了readme.en.md这个文件，然后现在我要把这个修改的提交到<code>feature/xj</code>这个分支上。但是现在我还是在<code>master</code>的分支上。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221009_573.png" alt=""></p>
<p><img src="http://cdn.xuxiaojin.com/202002221011_989.png" alt=""></p>
<p>如果<strong>工作区</strong>是共享的，所以我直接切换到<code>feature/xj</code>,并提交。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221040_888.png" alt=""></p>
<p>然后继续切换到<code>master</code>分支，查看status</p>
<p><img src="http://cdn.xuxiaojin.com/202002221042_385.png" alt=""></p>
<p>发现原本在master分支下修改的，已经在master里面看不到了。这可以验证<strong>工作区</strong>是共享的。【所以有时候，在某个分支下修改了，如果执行<code>git checkout -b branch basebranch</code>会提示是否需要将本地修改的先保存<code>git stash</code>一下，否则会出现丢失的情况】</p>
<p>现在验证<strong>暂存区是共享的</strong>。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221405_48.png" alt=""></p>
<p>通过这上面这张图，我们可以看到，通过<code>git add .</code>会将工作区里的文件提交到暂存区里。所以如果是共享的话，那么我在<code>master</code>分支下，执行<code>git add .</code>会将我的修改提交到暂存区里，然后我切换分支，会看到暂存区里的修改。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221407_455.png" alt=""></p>
<p>我在<code>master</code>做了修改，现在来验证一下，这个结论是否正确？</p>
<p><img src="http://cdn.xuxiaojin.com/202002221408_842.png" alt=""></p>
<p><code>master</code>分支下可以看到我提交到<strong>暂存区</strong>里的文件了，现在切换分支Git</p>
<p><img src="http://cdn.xuxiaojin.com/202002221411_84.png" alt=""></p>
<p>但是发现无法切换报错。但是通过<strong>报错</strong>信息我们可以知道这个结论是正确的，以为信息提示我们如果切换会被覆盖。也就是说共用一个<strong>暂存区</strong>，如果不是共用一个暂存区，那么就不会出现被覆盖的现象。</p>
<p>只不过，跟我想象的不一样的是，虽然共用一个<strong>暂存区</strong>，所以我可以随意切换分支，然后执行<code>git commit</code>将它提交，Git没有这么做可能是为了安全着想吧。【我猜的】</p>
<p>##Git应用场景</p>
<p>学习Git无非就是命令行啥的，但是如果只看命令行，是很难去应用的。最好的学习方式就是在场景下去应用。</p>
<p>###场景1</p>
<p>如果当前你正在某个分支上开发，然后突然接到任务，需要到某个分支里面去解决临时的任务，但是当前开发还没做完，所以不能提交。这个时候需要<a href="https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning" target="_blank" rel="noopener" title="Git stash"><code>git stash</code></a></p>
<p>先来看当前git仓库的分支情况</p>
<p><img src="http://cdn.xuxiaojin.com/202002221428_945.png" alt=""></p>
<p>然后我们在<code>dev</code>下面进行修改。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221429_764.png" alt=""></p>
<p>这个时候，突然接到任务需要到另外一个分支下面<code>feature/xj</code>下面进行修改某个任务</p>
<p><img src="http://cdn.xuxiaojin.com/202002221431_162.png" alt=""></p>
<p>如果，我们直接切换的话，会报错。所以你需要将工作区和暂存区清理一下。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221435_74.png" alt=""></p>
<p>这个意思相当于，暂时将做的修改保存起来。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221436_635.png" alt=""></p>
<p>然后我们就可以切换分支了，并且在这个分支下做修改，然后提交到远程。</p>
<p>做完这个工作后，我们需要切回<code>dev</code>分支并且将刚才临时保存的东西拿出来，继续开发。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221438_661.png" alt=""></p>
<p>对于<strong>恢复</strong>有两种方法</p>
<ol>
<li>用<code>git stash apply</code>命令来恢复，但是这种恢复，<code>stash</code>内容并不会被删除，需要执行<code>git stash drop</code>来删除。【如果有多个stash，需要恢复指定的stash,可以在命令尾部加上id <code>git stash apply stash@{0}</code>】</li>
<li>用<code>git stash pop</code>命令，恢复的同时会将stash的内容也删除了。</li>
</ol>
<p><img src="http://cdn.xuxiaojin.com/202002221445_710.png" alt=""></p>
<p>我原本stash只有一条记录，然后我在添加一下，为了测试如果不写id，恢复的是的第几个的记录。通过验证，发现stash是一个<strong>栈</strong>的结构，先进后出。恢复顶部的记录。然后也正是了git stash apply确实不会删除掉记录。然后如果执行<code>git statsh pop</code>确实会将其删除掉。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221452_315.png" alt=""></p>
<h3 id="工作流简述"><a href="#工作流简述" class="headerlink" title="工作流简述"></a>工作流简述</h3><p>现在进入分支管理,对于git来说，分支是它很强大的一种功能，如果只知道在<code>master</code>分支上工作，那是无法用好这种源代码管理工作进行多人协作的，所以我们需要进行<code>分支管理</code>，并且很多人摸索出一些<a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener" title="Git工作流">工作流</a></p>
<p><img src="http://cdn.xuxiaojin.com/202002221503_237.png" alt=""></p>
<p>这里对于小团队来说，可以用一些简单的工作流方式。</p>
<p><code>master</code>分支和<code>develop</code>分支共存，然后没开发一个功能就是从<code>develop</code>分支上开辟一个分支出来，然后写完之后合并到<code>develop</code>分支上，然后删除掉这个<code>feture</code>分支当<code>develop</code>分支上的版本比较稳定的时候，就可以将其合并到<code>master</code>分支上。</p>
<p><strong>分支的一些常用用法</strong></p>
<p>查看本地所有分支：<code>git branch</code></p>
<p><img src="http://cdn.xuxiaojin.com/202002221513_587.png" alt=""></p>
<p>查看所有分支包括远程分支:<code>git branch -av</code></p>
<p><img src="http://cdn.xuxiaojin.com/202002221513_99.png" alt=""></p>
<p>创建分支:<code>git branch &lt;name&gt;</code></p>
<p><img src="http://cdn.xuxiaojin.com/202002221542_746.png" alt=""></p>
<p>如果没有指定基于那个分支的话，默认基于当前<code>HEAD</code>分支。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221543_100.png" alt=""></p>
<p>切换分支:<code>git checkout &lt;name&gt;</code></p>
<p><img src="http://cdn.xuxiaojin.com/202002221545_194.png" alt=""></p>
<p><strong>合并某分支到当前分支</strong>：<code>git merge &lt;name&gt;</code></p>
<p>这个操作很常用的，需要注意</p>
<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
<p>这个操作也挺经常用的，如果不删除分支的话，那么一个项目开发下来，分支也太多了。</p>
<p><a href="https://www.atlassian.com/git/tutorials/syncing/git-fetch" target="_blank" rel="noopener" title="Git 远程操作"><strong>与远程相关的的一些操作</strong></a></p>
<p><code>git remote</code>列出你的git仓库远程连接的仓库</p>
<p><img src="http://cdn.xuxiaojin.com/202002221551_764.png" alt=""></p>
<p><code>git fetch</code>命令会从远程仓库下载commit的文件，但是并不会合并这些改变在你本地的环境</p>
<p><code>git push</code>命令将你本地的改变推送到远程仓库</p>
<p><code>git pull</code>命令是远程协作经常使用的命令，这个相当于<code>git fetch</code>和<code>git merge</code>这两条命令，会进行合并，但是合并也会带来冲突，这个在下面的场景中进行讲解。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221648_672.png" alt=""></p>
<h4 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h4><p>不同人修改不同的地方</p>
<p>记住每个人开发前都需要执行<code>git pull</code>以获取最新的代码</p>
<blockquote>
<p>git pull</p>
<p>先查看本地是否有develop分支，如果没有的话需要建立一个</p>
<p>git checkout -b develop origin/develop</p>
<p>git checkout -b feature develop</p>
<p>开发</p>
<p>git add .</p>
<p>git commit -m</p>
<p>git checkout develop</p>
<p>git merge feature</p>
<p>git pull</p>
<p>git push</p>
</blockquote>
<p><strong>开发者A</strong></p>
<p><img src="http://cdn.xuxiaojin.com/202002221655_688.png" alt=""></p>
<p>这个是在featuer分支上完成了开发，然后需要去develop分支上，然后git merge一下，在提交到远程的develop分支上。</p>
<p><strong>开发者B</strong></p>
<p>如果开发者B，在开发者A提交之后才进行<code>git pull</code>这个时候不会出现什么问题，但是我们假设两个开发者同时进行<code>git pull</code>，只不过提交的顺序是开发者A的提交顺序比较靠前。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221659_422.png" alt=""></p>
<p>git 还是比较聪明的，修改不同的地方会自己进行合并。这里需要区分<strong>合并</strong>和<strong>覆盖</strong></p>
<p>合并的意思就是将不同的地方就是整合起来，也就是如果有三个文件</p>
<p>A改了1,2</p>
<p>B改了2,3</p>
<p>那么当B执行了<code>git pull</code>的时候A修改的1中的部分会自动合并到，只不过文件2会发生冲突，需要手动合并。</p>
<p>覆盖的意思就是将A的所有文件覆盖到B上面。</p>
<h4 id="场景3"><a href="#场景3" class="headerlink" title="场景3"></a>场景3</h4><p>不同人修改了同文件的不同区域。</p>
<blockquote>
<p>git pull</p>
<p>git checkout -b feature develop</p>
<p>修改</p>
<p>git add .</p>
<p>git commit -m”修改的地方”</p>
<p>git checkout develop</p>
<p>git merge feature</p>
<p>git pull</p>
<p>git push</p>
</blockquote>
<p><strong>开发者A</strong></p>
<p><img src="http://cdn.xuxiaojin.com/202002221733_45.png" alt=""></p>
<p>对于开发者A来说，就是简单的操作。</p>
<p><strong>开发者B</strong></p>
<p><img src="http://cdn.xuxiaojin.com/202002221734_10.png" alt=""></p>
<p>开发者B在要push之前，执行<code>git pull</code>Git会自动将开发者A在readme里面修改的合并。Git还是比较智能的。</p>
<h4 id="场景4"><a href="#场景4" class="headerlink" title="场景4"></a>场景4</h4><p>不同人修改同一文件的同一地方</p>
<blockquote>
</blockquote>
<p><strong>开发者A</strong></p>
<p>开发者A还是正常开发，因为比开发者B先提交，所以不需要解决冲突</p>
<p><img src="http://cdn.xuxiaojin.com/202002221745_422.png" alt=""></p>
<p><strong>开发者B</strong></p>
<p>开发者B，在开发完自己的功能之后，然后需要git merge这个一切都是正常的。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221747_338.png" alt=""></p>
<p>然后要<code>git push</code>之前先执行<code>git pull</code>获取最新的代码时候就会出现冲突，可以通过<code>git status</code>来查看冲突的文件。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221749_358.png" alt=""></p>
<p>从错误提示可以看到是都修改了README.md，所以需要进入到这个文件里，自己取舍哪些需要保留。然后执行<code>git add .</code>和<code>git commit -m</code>在提交上去</p>
<p><img src="http://cdn.xuxiaojin.com/202002221751_958.png" alt=""></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在学习GIT的时候发现其实很多东西不是很懂，这次也是为了理清自己在GIT上面的思路。当然这上面的工作流其实自己很纠结，因为我看到一些文章有一个git merge，如果在本地上没有develop的分支，好像没有mrege这个操作，不知道有没有想错。</p>
<p>可能需要后面继续深入学习的时候才会懂得如果去用。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>希望下周更好一点</title>
    <url>/2020-02-16-%E5%B8%8C%E6%9C%9B%E4%B8%8B%E5%91%A8%E6%9B%B4%E5%A5%BD%E4%B8%80%E7%82%B9/</url>
    <content><![CDATA[<hr>
<p>如果没有疫情，明天应该开学了。</p>
<p>现在疫情没有结束，我还在家里。</p>
<p>过去一周算是<strong>恢复性</strong>周期吧。慢慢调整自己的状态。如果给过去一周打分应该是80分左右。因为我发现自己还可以做得更好一点。</p>
<p>最后希望疫情早点结束，真的不能在拖了。</p>
<p>下面是wakatime的代码时间，我还是比较满意的。</p>
<p><img src="http://cdn.xuxiaojin.com/202002162355_899.png" alt=""></p>
]]></content>
      <tags>
        <tag>自省</tag>
      </tags>
  </entry>
  <entry>
    <title>一些VIM的命令</title>
    <url>/2020-02-12-%E4%B8%80%E4%BA%9BVIM%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<hr>
<p>讲个笑话，怎样产生一个随机字符串？</p>
<p>让一个不会使用VIM的人打开VIM并且尝试退出</p>
<p><strong>常用命令</strong></p>
<ul>
<li>x-删除不想要的字符</li>
<li>u-恢复上一个命令的操作结果</li>
<li>O-在本行上面添加一个空行并进入编辑模式</li>
<li>A-光标移动到行尾</li>
<li>b-移到单词的开头</li>
<li>l-往右移动</li>
<li>0-到行头</li>
<li>$-到行尾</li>
<li>/pattern 搜索pattern的字符串，如果搜索出多个匹配，可按n键到下一个</li>
<li>nG 移动到第n行</li>
</ul>
<p><strong>拷贝粘贴</strong></p>
<ul>
<li>p-粘贴 p/P都可以，p表示在当前位置之后，P表示在当前位置之前</li>
<li>yy-拷贝当前行</li>
</ul>
<hr>
<p>想学习vim的，但是发现我的场景。直接通过idea之类的快捷键就可以完成！</p>
]]></content>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>每周英文阅读</title>
    <url>/2020-02-12-%E6%AF%8F%E5%91%A8%E8%8B%B1%E6%96%87%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<hr>
<p><a href="https://hackernoon.com/how-to-use-html-sematic-like-a-hero-08o736g9" target="_blank" rel="noopener">How To Use HTML Semantics like a HERO</a></p>
<p>这篇文章讲的是，使用带有语义的标签，例如<strong><form></strong>，不要被<div>这种没有语义的标签所欺骗。不过说实话自己写代码的时候就是喜欢div,span。可能是一个习惯吧！</p>
<p><a href="https://medium.com/edureka/pycharm-tutorial-d0ec9ce6fb60" target="_blank" rel="noopener">pycharm some tips</a></p>
<p>这篇文章介绍pycharm怎么用啥的，主要是看了一些tips。里面有一个发现了新大陆</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alt+shift+c</span><br></pre></td></tr></table></figure>

<p>可以查看最近修改的时间，并且翻录时间可以看到改了哪里</p>
<p><a href="https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started" target="_blank" rel="noopener">some basic commands</a></p>
<p>讲的是vim的操作，慢慢刻意练习。学习vim，提高日后的编程效率</p>
]]></content>
      <tags>
        <tag>英文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>Git相关命令与场景</title>
    <url>/2020-02-08-Git%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E4%B8%8E%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对git还是不是很熟悉，所以趁这个机会在学习下。又学习了一些新的知识点。</p>
<h3 id="配置user信息"><a href="#配置user信息" class="headerlink" title="配置user信息"></a>配置user信息</h3><p>可以用来确认和联系当前提交是谁提交的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &#39;yourname&#39;</span><br><span class="line">git config --global user.email &#39;your_email@domain.com&#39;</span><br></pre></td></tr></table></figure>

<h4 id="config作用域"><a href="#config作用域" class="headerlink" title="config作用域"></a>config作用域</h4><p>local只针对某个仓库</p>
<p>global针对用户所有仓库有效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --local</span><br><span class="line">git config --global</span><br><span class="line">git config --sytem [--list]</span><br></pre></td></tr></table></figure>

<p>–list查看当前所有配置</p>
<h3 id="建Git仓库"><a href="#建Git仓库" class="headerlink" title="建Git仓库"></a>建Git仓库</h3><h4 id="将已有的项目代码纳入git管理"><a href="#将已有的项目代码纳入git管理" class="headerlink" title="将已有的项目代码纳入git管理"></a>将已有的项目代码纳入git管理</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd 项目所在文件夹</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>

<h4 id="新建项目git管理"><a href="#新建项目git管理" class="headerlink" title="新建项目git管理"></a>新建项目git管理</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd 某个文件夹</span><br><span class="line">git init projectname</span><br><span class="line">cd projectname</span><br></pre></td></tr></table></figure>

<h3 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h3><p>工作目录 </p>
<ul>
<li>git add</li>
</ul>
<p>暂存区[可以回退，当有多个方案的时候，可以先git add]</p>
<ul>
<li>git commit</li>
</ul>
<p>版本历史</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add -u //对已经跟踪的文件，直接通过-u提交更新的</span><br></pre></td></tr></table></figure>

<h3 id="文件重命名"><a href="#文件重命名" class="headerlink" title="文件重命名"></a>文件重命名</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git mv oldfilename newfilename</span><br></pre></td></tr></table></figure>

<h3 id="版本历史"><a href="#版本历史" class="headerlink" title="版本历史"></a>版本历史</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log --onelien</span><br><span class="line">git log --all</span><br><span class="line">git log --graph</span><br></pre></td></tr></table></figure>

<h4 id="图形界面查看历史记录"><a href="#图形界面查看历史记录" class="headerlink" title="图形界面查看历史记录"></a>图形界面查看历史记录</h4><p>通过gitk查看版本历史</p>
<h3 id="目录-git"><a href="#目录-git" class="headerlink" title="目录.git"></a>目录.git</h3><p><strong>HEAD</strong>指向当前分支,工作到那个分支</p>
<p><strong>config</strong>一些配置信息  git config –local –list 【跟本地仓库相关的信息】</p>
<p><strong>refs</strong> 里面有heads就是分支的作用 tags就是里程碑</p>
<p>###commit、tree和blob</p>
<p>只要文件相同，就是同一个blob</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git cat-file -p hash</span><br></pre></td></tr></table></figure>

<p>可以看到内容</p>
<h3 id="理解HEAD和branch"><a href="#理解HEAD和branch" class="headerlink" title="理解HEAD和branch"></a>理解HEAD和branch</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b fix_readme</span><br><span class="line">git diff HEAD HEAD^</span><br></pre></td></tr></table></figure>

<h3 id="假想中的实战"><a href="#假想中的实战" class="headerlink" title="假想中的实战"></a>假想中的实战</h3><p><strong>删除不需要分支</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -d hash</span><br></pre></td></tr></table></figure>

<p><strong>修改最近commit的message</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>

<p><strong>修改老旧的commit的message</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rebase -i hash(父hash)</span><br></pre></td></tr></table></figure>

<p><strong>连续多个commit整理成1个</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rebase -i hash</span><br><span class="line"></span><br><span class="line">s merge previous commit</span><br></pre></td></tr></table></figure>

<p><strong>怎么比较暂存区和head所含文件的差异</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure>

<p><strong>比较工作区和暂存区的文件差异</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git diff -- filename</span><br></pre></td></tr></table></figure>

<p><strong>如何让暂存区恢复成head一样</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset HEAD</span><br><span class="line"></span><br><span class="line">git diff --cached</span><br></pre></td></tr></table></figure>

<p><strong>如何让工作区的文件恢复成暂存区一样</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -- filename</span><br></pre></td></tr></table></figure>

<p><strong>取消暂存区部分文件的更改</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset HEAD -- filename</span><br></pre></td></tr></table></figure>

<p><strong>消除最近的几次提交</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard hash</span><br></pre></td></tr></table></figure>

<p><strong>看看不同提交的指定文件的差异</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git diff temp master -- filename</span><br></pre></td></tr></table></figure>

<p><strong>正确删除文件的方式</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rm filename</span><br></pre></td></tr></table></figure>

<p><strong>临时加塞紧急任务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line"></span><br><span class="line">git stash apply  #堆栈区里的数据还在</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<p><strong>指定不需要git管理的文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitignore</span><br></pre></td></tr></table></figure>

<p><strong>Git备份</strong></p>
<p><img src="http://cdn.xuxiaojin.com/202002062218_269.png" alt=""></p>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p><strong>本地仓库同步到Github</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">git remote add remotename ssh</span><br><span class="line">git push remotename --all</span><br><span class="line">git fetch remotename  //不会拉倒工作区</span><br><span class="line">git checkout master</span><br><span class="line">git merge github/master</span><br></pre></td></tr></table></figure>

<p><strong>处理no faster的</strong></p>
<p>git merge branch –allow-unrelated-histories</p>
<p><strong>不同人修改了不同文件如何处理</strong></p>
<p>第一个人</p>
<ol>
<li>现在github的master分支上新建一个feature/function</li>
<li>git clone ssh gitname</li>
<li>git config –local user.name ‘newusername’</li>
<li>git config –local user.email ‘newemail’</li>
<li>git branch -av</li>
<li>git checkout -b branchname basebranchname</li>
<li>git push origin localbranch:remotebranch</li>
</ol>
<p>第二个人</p>
<ol>
<li>git fetch</li>
<li>git branch -av</li>
<li>git checkout -b branchname basebranchname</li>
<li>git add .</li>
<li>git commit -m</li>
<li>git fetch</li>
<li>git merge branchname</li>
<li>git push</li>
</ol>
<p><strong>不同人修改同一文件的不同区域</strong></p>
<p>第一个人</p>
<ol>
<li>git pull 更新</li>
<li>修改</li>
<li>git push</li>
</ol>
<p>第二个人</p>
<ol>
<li>git pull</li>
<li>git merge branchname</li>
<li>git push</li>
</ol>
<p><strong>不同人修改同文件的同一区域</strong></p>
<p>第一个人</p>
<ol>
<li>git pull</li>
<li>git push</li>
</ol>
<p>第二个人</p>
<ol>
<li>git pull</li>
<li>git push</li>
<li>git fetch</li>
<li>git merge</li>
<li>vi confict file and resolve</li>
<li>git status</li>
<li>git commit -am”comment”</li>
<li>git status</li>
<li>git push</li>
</ol>
<p><strong>同时变更了文件名和文件内容如何处理</strong></p>
<p>git会自动识别文件名和修改</p>
<p>第一个人</p>
<ol>
<li>git pull</li>
<li>git rm oldfilename newfilename</li>
<li>git push</li>
</ol>
<p>第二个人</p>
<ol>
<li>git pull</li>
<li>git push</li>
<li>git pull</li>
<li>git push</li>
</ol>
<p><strong>不准使用</strong></p>
<p>git push -f</p>
<h3 id="Github优秀仓库"><a href="#Github优秀仓库" class="headerlink" title="Github优秀仓库"></a>Github优秀仓库</h3><blockquote>
<p>关键词 in:readme starts:&gt;1000</p>
<p>‘code ‘ filename:.gitlab</p>
</blockquote>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>备战蓝桥杯</title>
    <url>/2020-02-07-%E5%A4%87%E6%88%98%E8%93%9D%E6%A1%A5%E6%9D%AF/</url>
    <content><![CDATA[<hr>
<p>备战蓝桥杯，以及做点算法题动动脑子。先从简单的入手。</p>
<p><a href="http://oj.ecustacm.cn/problem.php?id=1250" target="_blank" rel="noopener">方程整数解</a></p>
<blockquote>
<p>方程: a^2 + b^2 + c^2 = 1000<br>这个方程有正整数解吗？有：a,b,c=6,8,30 就是一组解。<br>求出 a^2 + b^2 + c^2 = n(1&lt;=n&lt;=10000)的所有解，解要保证c&gt;=b&gt;=a&gt;=1。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/* run this program using the console pauser or add your own getch, system("pause") or input loop */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">		<span class="keyword">int</span> a,b,c;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(a=<span class="number">1</span>;a&lt;=<span class="built_in">sqrt</span>(n);a++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="number">3</span>*a*a&lt;=n)&#123;</span><br><span class="line">				<span class="keyword">for</span>(b=a;b&lt;=<span class="built_in">sqrt</span>(n);b++)&#123;</span><br><span class="line">					<span class="keyword">if</span>(a*a+<span class="number">2</span>*b*b&lt;=n)&#123;</span><br><span class="line">						<span class="keyword">for</span>(c=b;c&lt;=<span class="built_in">sqrt</span>(n);c++)&#123;</span><br><span class="line">							<span class="keyword">if</span>(a*a+b*b+c*c==n)&#123;</span><br><span class="line">								flag=<span class="literal">true</span>;</span><br><span class="line">								<span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>&lt;&lt;b&lt;&lt;<span class="string">" "</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"No Solution"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://oj.ecustacm.cn/problem.php?id=1251" target="_blank" rel="noopener">星系炸弹</a></p>
<blockquote>
<p>在X星系的广袤空间中漂浮着许多X星人造“炸弹”，用来作为宇宙中的路标。<br>每个炸弹都可以设定多少天之后爆炸。<br>比如：阿尔法炸弹2015年1月1日放置，定时为15天，则它在2015年1月16日爆炸。<br>有一个贝塔炸弹，a年b月c日放置，定时为n天，请你计算它爆炸的准确日期。</p>
</blockquote>
<p>这道题其实是一个年份的判断，不过一开始不知道如何下手。学会<strong>自顶向下</strong>编程法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/* run this program using the console pauser or add your own getch, system("pause") or input loop */</span></span><br><span class="line"><span class="keyword">int</span> month[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isleayear</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>((n%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;n%<span class="number">100</span>!=<span class="number">0</span>)||(n%<span class="number">400</span>==<span class="number">0</span>))&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changtowmonthday</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(isleayear(n))&#123;</span><br><span class="line">		month[<span class="number">2</span>]=<span class="number">29</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		month[<span class="number">2</span>]=<span class="number">28</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">	 <span class="keyword">int</span> y,m,d,n;</span><br><span class="line">	 <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;y,&amp;m,&amp;d,&amp;n)!=EOF)&#123;</span><br><span class="line">	 	changtowmonthday(y);</span><br><span class="line">	 	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">	 		d+=<span class="number">1</span>;</span><br><span class="line">	 		<span class="keyword">if</span>(d&gt;month[m])&#123;</span><br><span class="line">	 			d=<span class="number">1</span>;</span><br><span class="line">				m++;</span><br><span class="line">			 &#125;</span><br><span class="line">			<span class="keyword">if</span>(m&gt;<span class="number">12</span>)&#123;</span><br><span class="line">			  m=<span class="number">1</span>;</span><br><span class="line">			  y++;</span><br><span class="line">			  changtowmonthday(y);</span><br><span class="line">			&#125;</span><br><span class="line">		 &#125;</span><br><span class="line">		 <span class="built_in">cout</span>&lt;&lt;y&lt;&lt;<span class="string">"-"</span>;</span><br><span class="line">		 <span class="keyword">if</span>(m&lt;<span class="number">10</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;m&lt;&lt;<span class="string">"-"</span>;</span><br><span class="line">		 <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;m&lt;&lt;<span class="string">"-"</span>;</span><br><span class="line">		 <span class="keyword">if</span>(d&lt;<span class="number">10</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		 <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>每日一题</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>恢复mysql数据库</title>
    <url>/2020-02-04-%E6%81%A2%E5%A4%8Dmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天数据库一直被偷，然后必应如何恢复。发现自己的安全意识太弱。</p>
<p>然后重装服务器系统，权限限制，密码增强。</p>
<p>并且学一下备份数据，还有就是binlog恢复数据</p>
<h3 id="MYSQL安全"><a href="#MYSQL安全" class="headerlink" title="MYSQL安全"></a>MYSQL安全</h3><h4 id="相关信息"><a href="#相关信息" class="headerlink" title="相关信息"></a>相关信息</h4><p>MYSQL将用户的相关信息(认证信息，权限信息)都存储在了mysql.user的这个系统表中，在这个系统表中可以通过增删改查操作，来定义和管理用户的认证信息，权限列表等。</p>
<h4 id="授权机制"><a href="#授权机制" class="headerlink" title="授权机制"></a>授权机制</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> db.table <span class="keyword">to</span> <span class="keyword">user</span>@<span class="string">"127.0.0.1"</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">"password"</span></span><br></pre></td></tr></table></figure>

<p>主体是通过用户名,ip和密码这三个部分信息组合起来进行标记的</p>
<p>客体是数据库和表</p>
<h3 id="通过binlog恢复数据库数据"><a href="#通过binlog恢复数据库数据" class="headerlink" title="通过binlog恢复数据库数据"></a>通过binlog恢复数据库数据</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%log_bin%'</span>;  //查看binlog是否打开</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">logs</span>; //查看所有binlog日志文件列表</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">status</span>; //查看最后一个操作事件pos结束点的值</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">logs</span>; //刷新日志，此刻开始产生一个新编号的binlog文件</span><br></pre></td></tr></table></figure>

<h4 id="查看binlog文件内容"><a href="#查看binlog文件内容" class="headerlink" title="查看binlog文件内容"></a>查看binlog文件内容</h4><h5 id="mysqlbinlog"><a href="#mysqlbinlog" class="headerlink" title="mysqlbinlog"></a>mysqlbinlog</h5><p>首先进入mysql，设置binlog的格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">set global binlog_format&#x3D;&#39;ROW&#39;</span><br></pre></td></tr></table></figure>

<p>然后进入<code>var/lib/mysql</code></p>
<p>通过mysqlbinlog查看数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqlbinlog --base64-output&#x3D;&quot;decode-row&quot; binlog.000016 --stop-datetime&#x3D;&#39;时间&#39;</span><br></pre></td></tr></table></figure>

<p>这个时间跟北京时间大概差6个小时</p>
<h3 id="Mysqldump数据备份"><a href="#Mysqldump数据备份" class="headerlink" title="Mysqldump数据备份"></a>Mysqldump数据备份</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -p  [databasename] &gt;[dump file]</span><br></pre></td></tr></table></figure>

<p>上述命令将制定的数据库备份到dump文件中，包含生成数据库结构哦，和插入数据的insert语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -p test -F  &gt; test.sql</span><br><span class="line"></span><br><span class="line">-F刷新日志</span><br></pre></td></tr></table></figure>

<h4 id="只备份表结构"><a href="#只备份表结构" class="headerlink" title="只备份表结构"></a>只备份表结构</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump --no-data --databases mydatabase1 mydatabase2 &gt;test.dump</span><br></pre></td></tr></table></figure>

<h4 id="从备份文件恢复数据库"><a href="#从备份文件恢复数据库" class="headerlink" title="从备份文件恢复数据库"></a>从备份文件恢复数据库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql [databasename]&lt;[backup file name]</span><br><span class="line">mysql -uroot -p databasename -f &lt;test.sql</span><br><span class="line"></span><br><span class="line">-f指中间发生错误，可以skip过去，继续执行下面语句</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>D3.js力导向图</title>
    <url>/2020-02-04-D3.js%E5%8A%9B%E5%AF%BC%E5%90%91%E5%9B%BE/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>需要图形化neo4j的项目需求</p>
<p>###力导向图</p>
<p>就是讲有节点和线组成，当鼠标拖拽一个节点时，其他节点都会受到影响。用来可视化neo4j图数据库。</p>
<p><a href="https://medium.com/@sxywu/understanding-the-force-ef1237017d5" target="_blank" rel="noopener">相关链接</a></p>
<blockquote>
<ul>
<li>The sum of the forces acting on each node by all other nodes</li>
<li>The force pushing and pulling between two linked nodes</li>
<li>The force pulling each node to a focal point, usually the center of the user-defined space</li>
</ul>
</blockquote>
<h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><blockquote>
<p>d3.forceSimulations([nodes])&lt;&gt;</p>
<p>新建一个力导向图。如果没有提供nodes，默认是空数组。</p>
<p>当simulatio运行的时候simulations.on来监听点击事件</p>
</blockquote>
<blockquote>
<p>d3.forceSimulation().force() 添加或者移除一个力</p>
<p>If <em>force</em> is specified, assigns the <a href="https://github.com/d3/d3-force#forces" target="_blank" rel="noopener">force</a> for the specified <em>name</em> and returns this simulation. If <em>force</em> is not specified, returns the force with the specified name, or undefined if there is no such force. (By default, new simulations have no forces.) For example, to create a new simulation to layout a graph, you might say:</p>
</blockquote>
<p>d3.forceSimulation().force(name)当force只有一个参数，这个参数就是某个力的名称，那么这段代码返回的是某个具体的力。例如 d3.forceSimulation().force(“link”) 则返回的是d3.forceLink()</p>
<blockquote>
<p>d3.forceSimulation().nodes() 输入的是一个数组，然后将这个输入的数组进行一定的数据转换，例如添加坐标什么的。</p>
<p>d3.forceSimulation().links()这里输入的是一个数组(边集),然后对输入的边集进行转换</p>
<p>tick函数，需要不断更新节点和连线的位置</p>
<p>d3.drag()是力导向图可以被拖动</p>
</blockquote>
<h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> marge = &#123;<span class="attr">top</span>:<span class="number">60</span>,<span class="attr">bottom</span>:<span class="number">60</span>,<span class="attr">left</span>:<span class="number">60</span>,<span class="attr">right</span>:<span class="number">60</span>&#125;</span><br><span class="line">    	<span class="keyword">var</span> svg = d3.select(<span class="string">"svg"</span>)</span><br><span class="line">    	<span class="keyword">var</span> width = svg.attr(<span class="string">"width"</span>)</span><br><span class="line">    	<span class="keyword">var</span> height = svg.attr(<span class="string">"height"</span>)</span><br><span class="line">    	<span class="keyword">var</span> g = svg.append(<span class="string">"g"</span>)</span><br><span class="line">    		.attr(<span class="string">"transform"</span>,<span class="string">"translate("</span>+marge.top+<span class="string">","</span>+marge.left+<span class="string">")"</span>);</span><br><span class="line">    		</span><br><span class="line">    	<span class="comment">//准备数据</span></span><br><span class="line">    	<span class="keyword">var</span> nodes = [<span class="comment">//节点集</span></span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"湖南邵阳"</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"山东莱州"</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"广东阳江"</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"山东枣庄"</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"泽"</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"恒"</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"鑫"</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"明山"</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"班长"</span>&#125;</span><br><span class="line">    	];</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">var</span> edges = [<span class="comment">//边集</span></span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">0</span>,<span class="attr">target</span>:<span class="number">4</span>,<span class="attr">relation</span>:<span class="string">"籍贯"</span>,<span class="attr">value</span>:<span class="number">1.3</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">4</span>,<span class="attr">target</span>:<span class="number">5</span>,<span class="attr">relation</span>:<span class="string">"舍友"</span>,<span class="attr">value</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">4</span>,<span class="attr">target</span>:<span class="number">6</span>,<span class="attr">relation</span>:<span class="string">"舍友"</span>,<span class="attr">value</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">4</span>,<span class="attr">target</span>:<span class="number">7</span>,<span class="attr">relation</span>:<span class="string">"舍友"</span>,<span class="attr">value</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">1</span>,<span class="attr">target</span>:<span class="number">6</span>,<span class="attr">relation</span>:<span class="string">"籍贯"</span>,<span class="attr">value</span>:<span class="number">2</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">2</span>,<span class="attr">target</span>:<span class="number">5</span>,<span class="attr">relation</span>:<span class="string">"籍贯"</span>,<span class="attr">value</span>:<span class="number">0.9</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">3</span>,<span class="attr">target</span>:<span class="number">7</span>,<span class="attr">relation</span>:<span class="string">"籍贯"</span>,<span class="attr">value</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">5</span>,<span class="attr">target</span>:<span class="number">6</span>,<span class="attr">relation</span>:<span class="string">"同学"</span>,<span class="attr">value</span>:<span class="number">1.6</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">6</span>,<span class="attr">target</span>:<span class="number">7</span>,<span class="attr">relation</span>:<span class="string">"朋友"</span>,<span class="attr">value</span>:<span class="number">0.7</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">6</span>,<span class="attr">target</span>:<span class="number">8</span>,<span class="attr">relation</span>:<span class="string">"职责"</span>,<span class="attr">value</span>:<span class="number">2</span>&#125;</span><br><span class="line">    	];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>svg标签用来可以用来构建图像</p>
<p>g是svg的容器元素。<strong>添加到g元素上的变换都会应用其所有的子元素上</strong></p>
<p>点必须要有特殊的ids</p>
<p>边的数据必须有source和target</p>
</blockquote>
<p>上面数据渲染后</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">g</span> <span class="attr">transform</span>=<span class="string">"translate(146.3477113893629,263.7985425399116)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">"10"</span> <span class="attr">fill</span>=<span class="string">"#7f7f7f"</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"-10"</span> <span class="attr">y</span>=<span class="string">"-20"</span> <span class="attr">dy</span>=<span class="string">"10"</span>&gt;</span>明山<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置颜色比例尺"><a href="#设置颜色比例尺" class="headerlink" title="设置颜色比例尺"></a>设置颜色比例尺</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colorScale = d3.scaleOrdinal()</span><br><span class="line">    		.domain(d3.range(nodes.length))</span><br><span class="line">    		.range(d3.schemeCategory10);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Even better, you don’t have to know in advance which things the scale will encounter, as that correspondance can be built incrementally with incoming data.</p>
</blockquote>
<p>相当于给一个颜色尺子，对于来的数据，进行涂色</p>
<h3 id="新建一个力导向图"><a href="#新建一个力导向图" class="headerlink" title="新建一个力导向图"></a>新建一个力导向图</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> forceSimulation = d3.forceSimulation()</span><br><span class="line">    		.force(<span class="string">"link"</span>,d3.forceLink())</span><br><span class="line">    		.force(<span class="string">"charge"</span>,d3.forceManyBody())</span><br><span class="line">    		.force(<span class="string">"center"</span>,d3.forceCenter());</span><br></pre></td></tr></table></figure>

<p>这个是官网提供的，建立一个空的力导向图</p>
<p><strong>center</strong>把所有节点都放到center</p>
<p><strong>charge</strong>防止节点之间相互重叠</p>
<p><strong>link</strong>表名id是link变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> simulation = d3.forceSimulation()</span><br><span class="line">              .force(<span class="string">"center"</span>, d3.forceCenter(width/<span class="number">2</span>, height/<span class="number">2</span>))                  </span><br><span class="line">              .force(<span class="string">"charge"</span>, d3.forceManyBody())</span><br><span class="line">              .force(<span class="string">"link"</span>, d3.forceLink().id(<span class="function"><span class="keyword">function</span>(<span class="params">d =&gt;   d.id</span>)</span></span><br><span class="line"><span class="function">			<span class="title">simulation</span>.<span class="title">stop</span>(<span class="params"></span>)</span></span><br></pre></td></tr></table></figure>

<h3 id="生成节点数据"><a href="#生成节点数据" class="headerlink" title="生成节点数据"></a>生成节点数据</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">forceSimulation.nodes(nodes)</span><br><span class="line">    		.on(<span class="string">"tick"</span>,ticked);</span><br></pre></td></tr></table></figure>

<h3 id="生成边的数据"><a href="#生成边的数据" class="headerlink" title="生成边的数据"></a>生成边的数据</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">forceSimulation.force(<span class="string">"link"</span>)</span><br><span class="line">    		.links(edges)</span><br><span class="line">    		.distance(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    			<span class="keyword">return</span> d.value*<span class="number">100</span>;   <span class="comment">//对应边的长度</span></span><br><span class="line">    		&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="设置图形中心的位置"><a href="#设置图形中心的位置" class="headerlink" title="设置图形中心的位置"></a>设置图形中心的位置</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">forceSimulation.force(<span class="string">"center"</span>)</span><br><span class="line">    		.x(width/<span class="number">2</span>)</span><br><span class="line">    		.y(height/<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h3 id="绘制边"><a href="#绘制边" class="headerlink" title="绘制边"></a>绘制边</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> links = g.append(<span class="string">"g"</span>)</span><br><span class="line">	.selectAll(<span class="string">"line"</span>)</span><br><span class="line">	.data(edges)</span><br><span class="line">	.enter()</span><br><span class="line">	.append(<span class="string">"line"</span>)</span><br><span class="line">	.attr(<span class="string">"stroke"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> colorScale(i);   <span class="comment">//颜色</span></span><br><span class="line">	&#125;)</span><br><span class="line">	.attr(<span class="string">"stroke-width"</span>,<span class="number">1</span>);  <span class="comment">//宽度</span></span><br></pre></td></tr></table></figure>

<h3 id="边上的文字"><a href="#边上的文字" class="headerlink" title="边上的文字"></a>边上的文字</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> linksText = g.append(<span class="string">"g"</span>)</span><br><span class="line">    		.selectAll(<span class="string">"text"</span>)</span><br><span class="line">    		.data(edges)</span><br><span class="line">    		.enter()</span><br><span class="line">    		.append(<span class="string">"text"</span>)</span><br><span class="line">    		.text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    			<span class="keyword">return</span> d.relation;</span><br><span class="line">    		&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="建立用来放每个节点和文字的分组g"><a href="#建立用来放每个节点和文字的分组g" class="headerlink" title="建立用来放每个节点和文字的分组g"></a>建立用来放每个节点和文字的分组g</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gs = g.selectAll(<span class="string">".circleText"</span>)</span><br><span class="line">    		.data(nodes)</span><br><span class="line">    		.enter()</span><br><span class="line">    		.append(<span class="string">"g"</span>)</span><br><span class="line">    		.attr(<span class="string">"transform"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</span><br><span class="line">    			<span class="keyword">var</span> cirX = d.x;</span><br><span class="line">    			<span class="keyword">var</span> cirY = d.y;</span><br><span class="line">    			<span class="keyword">return</span> <span class="string">"translate("</span>+cirX+<span class="string">","</span>+cirY+<span class="string">")"</span>;</span><br><span class="line">    		&#125;)</span><br><span class="line">    		.call(d3.drag()</span><br><span class="line">    			.on(<span class="string">"start"</span>,started)</span><br><span class="line">    			.on(<span class="string">"drag"</span>,dragged)</span><br><span class="line">    			.on(<span class="string">"end"</span>,ended)</span><br><span class="line">    		);</span><br></pre></td></tr></table></figure>

<h3 id="节点和文字"><a href="#节点和文字" class="headerlink" title="节点和文字"></a>节点和文字</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gs.append(<span class="string">"circle"</span>)</span><br><span class="line">    		.attr(<span class="string">"r"</span>,<span class="number">15</span>)</span><br><span class="line">    		.attr(<span class="string">"fill"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</span><br><span class="line">    			<span class="keyword">return</span> colorScale(i);</span><br><span class="line">    		&#125;)</span><br><span class="line">    	<span class="comment">//文字</span></span><br><span class="line">    		gs.append(<span class="string">"text"</span>)</span><br><span class="line">    			.attr(<span class="string">"x"</span>,<span class="number">-10</span>)</span><br><span class="line">    			.attr(<span class="string">"y"</span>,<span class="number">-20</span>)</span><br><span class="line">    			.attr(<span class="string">"dy"</span>,<span class="number">10</span>)</span><br><span class="line">    			.text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    				<span class="keyword">return</span> d.name;</span><br><span class="line">				&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ticked</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    		links</span><br><span class="line">    			.attr(<span class="string">"x1"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> d.source.x;&#125;)</span><br><span class="line">    			.attr(<span class="string">"y1"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> d.source.y;&#125;)</span><br><span class="line">    			.attr(<span class="string">"x2"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> d.target.x;&#125;)</span><br><span class="line">    			.attr(<span class="string">"y2"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> d.target.y;&#125;);</span><br><span class="line">    			</span><br><span class="line">    		linksText</span><br><span class="line">    			.attr(<span class="string">"x"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    			<span class="keyword">return</span> (d.source.x+d.target.x)/<span class="number">2</span>;</span><br><span class="line">    		&#125;)</span><br><span class="line">    		.attr(<span class="string">"y"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    			<span class="keyword">return</span> (d.source.y+d.target.y)/<span class="number">2</span>;</span><br><span class="line">    		&#125;);</span><br><span class="line">    			</span><br><span class="line">    		gs</span><br><span class="line">    			.attr(<span class="string">"transform"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> <span class="string">"translate("</span> + d.x + <span class="string">","</span> + d.y + <span class="string">")"</span>; &#125;);</span><br><span class="line"></span><br><span class="line">    		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">started</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    		<span class="keyword">if</span>(!d3.event.active)&#123;</span><br><span class="line">    			forceSimulation.alphaTarget(<span class="number">0.8</span>).restart();</span><br><span class="line">    		&#125;</span><br><span class="line">    		d.fx = d.x;</span><br><span class="line">    		d.fy = d.y;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="function"><span class="keyword">function</span> <span class="title">dragged</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    		d.fx = d3.event.x;</span><br><span class="line">    		d.fy = d3.event.y;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="function"><span class="keyword">function</span> <span class="title">ended</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    		<span class="keyword">if</span>(!d3.event.active)&#123;</span><br><span class="line">    			forceSimulation.alphaTarget(<span class="number">0</span>);</span><br><span class="line">    		&#125;</span><br><span class="line">    		d.fx = <span class="literal">null</span>;</span><br><span class="line">    		d.fy = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>D3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://d3js.org/d3.v5.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">		</span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> marge = &#123;top:<span class="number">60</span>,bottom:<span class="number">60</span>,left:<span class="number">60</span>,right:<span class="number">60</span>&#125;</span></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> svg = d3.select(<span class="string">"svg"</span>)</span></span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"width"</span>,<span class="number">400</span>)</span></span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"height"</span>,<span class="number">600</span>)</span></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> width = svg.attr(<span class="string">"width"</span>)</span></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> height = svg.attr(<span class="string">"height"</span>)</span></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> g = svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">    		.attr(<span class="string">"transform"</span>,<span class="string">"translate("</span>+marge.top+<span class="string">","</span>+marge.left+<span class="string">")"</span>);</span></span><br><span class="line">    		</span><br><span class="line"><span class="actionscript">    	<span class="comment">//准备数据</span></span></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> nodes = [<span class="comment">//节点集</span></span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"湖南邵阳"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"山东莱州"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"广东阳江"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"山东枣庄"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"泽"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"恒"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"鑫"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"明山"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"班长"</span>&#125;</span></span><br><span class="line">    	];</span><br><span class="line">    	</span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> edges = [<span class="comment">//边集</span></span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">0</span>,target:<span class="number">4</span>,relation:<span class="string">"籍贯"</span>,value:<span class="number">1.3</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">4</span>,target:<span class="number">5</span>,relation:<span class="string">"舍友"</span>,value:<span class="number">1</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">4</span>,target:<span class="number">6</span>,relation:<span class="string">"舍友"</span>,value:<span class="number">1</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">4</span>,target:<span class="number">7</span>,relation:<span class="string">"舍友"</span>,value:<span class="number">1</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">1</span>,target:<span class="number">6</span>,relation:<span class="string">"籍贯"</span>,value:<span class="number">2</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">2</span>,target:<span class="number">5</span>,relation:<span class="string">"籍贯"</span>,value:<span class="number">0.9</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">3</span>,target:<span class="number">7</span>,relation:<span class="string">"籍贯"</span>,value:<span class="number">1</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">5</span>,target:<span class="number">6</span>,relation:<span class="string">"同学"</span>,value:<span class="number">1.6</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">6</span>,target:<span class="number">7</span>,relation:<span class="string">"朋友"</span>,value:<span class="number">0.7</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">6</span>,target:<span class="number">8</span>,relation:<span class="string">"职责"</span>,value:<span class="number">2</span>&#125;</span></span><br><span class="line">    	];</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    	<span class="comment">//设置一个color的颜色比例尺，为了让不同的扇形呈现不同的颜色</span></span></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> colorScale = d3.scaleOrdinal()</span></span><br><span class="line">    		.domain(d3.range(nodes.length))</span><br><span class="line">    		.range(d3.schemeCategory10);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> forceSimulation = d3.forceSimulation()</span></span><br><span class="line"><span class="actionscript">    		.force(<span class="string">"link"</span>,d3.forceLink())</span></span><br><span class="line"><span class="actionscript">    		.force(<span class="string">"charge"</span>,d3.forceManyBody())</span></span><br><span class="line"><span class="actionscript">    		.force(<span class="string">"center"</span>,d3.forceCenter());</span></span><br><span class="line"></span><br><span class="line">    	forceSimulation.nodes(nodes)</span><br><span class="line"><span class="actionscript">    		.on(<span class="string">"tick"</span>,ticked);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    	forceSimulation.force(<span class="string">"link"</span>)</span></span><br><span class="line">    		.links(edges)</span><br><span class="line"><span class="actionscript">    		.distance(<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">return</span> d.value*<span class="number">100</span>;</span></span><br><span class="line">    		&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    	forceSimulation.force(<span class="string">"center"</span>)</span></span><br><span class="line">    		.x(width/2)</span><br><span class="line">    		.y(height/2);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    	<span class="built_in">console</span>.log(nodes)</span></span><br><span class="line"><span class="javascript">    	<span class="built_in">console</span>.log(edges)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> links = g.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">    		.selectAll(<span class="string">"line"</span>)</span></span><br><span class="line">    		.data(edges)</span><br><span class="line">    		.enter()</span><br><span class="line"><span class="actionscript">    		.append(<span class="string">"line"</span>)</span></span><br><span class="line"><span class="actionscript">    		.attr(<span class="string">"stroke"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d,i)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">return</span> colorScale(i);</span></span><br><span class="line">    		&#125;)</span><br><span class="line"><span class="actionscript">    		.attr(<span class="string">"stroke-width"</span>,<span class="number">1</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> linksText = g.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">    		.selectAll(<span class="string">"text"</span>)</span></span><br><span class="line">    		.data(edges)</span><br><span class="line">    		.enter()</span><br><span class="line"><span class="actionscript">    		.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">    		.text(<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">return</span> <span class="string">'COVER'</span>;</span></span><br><span class="line">    		&#125;)</span><br><span class="line">   </span><br><span class="line">		</span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> gs = g.selectAll(<span class="string">".circleText"</span>)</span></span><br><span class="line">    		.data(nodes)</span><br><span class="line">    		.enter()</span><br><span class="line"><span class="actionscript">    		.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">    		.attr(<span class="string">"transform"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d,i)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">var</span> cirX = d.x;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">var</span> cirY = d.y;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">return</span> <span class="string">"translate("</span>+cirX+<span class="string">","</span>+cirY+<span class="string">")"</span>;</span></span><br><span class="line">    		&#125;)</span><br><span class="line">    		.call(d3.drag()</span><br><span class="line"><span class="actionscript">    			.on(<span class="string">"start"</span>,started)</span></span><br><span class="line"><span class="actionscript">    			.on(<span class="string">"drag"</span>,dragged)</span></span><br><span class="line"><span class="actionscript">    			.on(<span class="string">"end"</span>,ended)</span></span><br><span class="line">    		);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    		gs.append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">    		.attr(<span class="string">"r"</span>,<span class="number">15</span>)</span></span><br><span class="line"><span class="actionscript">    		.attr(<span class="string">"fill"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d,i)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">return</span> colorScale(i);</span></span><br><span class="line">    		&#125;)</span><br><span class="line"><span class="actionscript">    	<span class="comment">//文字</span></span></span><br><span class="line"><span class="actionscript">    		gs.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"x"</span>,<span class="number">-10</span>)</span></span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"y"</span>,<span class="number">-20</span>)</span></span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"dy"</span>,<span class="number">10</span>)</span></span><br><span class="line"><span class="actionscript">    			.text(<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    				<span class="keyword">return</span> d.name;</span></span><br><span class="line">				&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">ticked</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">    		links</span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"x1"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d.source.x;&#125;)</span></span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"y1"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d.source.y;&#125;)</span></span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"x2"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d.target.x;&#125;)</span></span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"y2"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d.target.y;&#125;);</span></span><br><span class="line">    			</span><br><span class="line">    		linksText</span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"x"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">return</span> (d.source.x+d.target.x)/<span class="number">2</span>;</span></span><br><span class="line">    		&#125;)</span><br><span class="line"><span class="actionscript">    		.attr(<span class="string">"y"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">return</span> (d.source.y+d.target.y)/<span class="number">2</span>;</span></span><br><span class="line">    		&#125;);</span><br><span class="line">    			</span><br><span class="line">    		gs</span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"transform"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> <span class="string">"translate("</span> + d.x + <span class="string">","</span> + d.y + <span class="string">")"</span>; &#125;);</span></span><br><span class="line"></span><br><span class="line">    		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">started</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line">    		if(!d3.event.active)&#123;</span><br><span class="line">    			forceSimulation.alphaTarget(0.8).restart();</span><br><span class="line">    		&#125;</span><br><span class="line">    		d.fx = d.x;</span><br><span class="line">    		d.fy = d.y;</span><br><span class="line">    	&#125;</span><br><span class="line"><span class="actionscript">    	<span class="function"><span class="keyword">function</span> <span class="title">dragged</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line">    		d.fx = d3.event.x;</span><br><span class="line">    		d.fy = d3.event.y;</span><br><span class="line">    	&#125;</span><br><span class="line"><span class="actionscript">    	<span class="function"><span class="keyword">function</span> <span class="title">ended</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line">    		if(!d3.event.active)&#123;</span><br><span class="line">    			forceSimulation.alphaTarget(0);</span><br><span class="line">    		&#125;</span><br><span class="line"><span class="actionscript">    		d.fx = <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">    		d.fy = <span class="literal">null</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>D3.js</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫基础知识入门</title>
    <url>/2020-01-31-%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近玩心很重，收收心，恢复一下状态。</p>
<h3 id="初始网络爬虫"><a href="#初始网络爬虫" class="headerlink" title="初始网络爬虫"></a>初始网络爬虫</h3><p><strong>urlopen</strong>用来打开并读取一个从网络获取的远程对象。因为它是一个非常通用的库，可以轻松的读取HTML文件、图像文件、或其他任何文件流</p>
<p><strong>BeautifulSoup</strong>通过定位HTML标签来格式化和组织复杂的网络信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html=urlopen(<span class="string">"http://www.pythonscraping.com/pages/page1.html"</span>)</span><br><span class="line">bsObj=BeautifulSoup(html.read())</span><br><span class="line">print(bsObj.h1)</span><br></pre></td></tr></table></figure>

<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>用上try…except…</p>
<h3 id="复杂的HTML解析"><a href="#复杂的HTML解析" class="headerlink" title="复杂的HTML解析"></a>复杂的HTML解析</h3><p>findAll和find</p>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><ul>
<li>字母a至少出现一次 aa*   a星表示a可以是0次或者是多次，这样保证a至少出现一次</li>
<li>字母c重复任意偶数次 (cc)*有括号进行编组表示有任意此两个c也可以是0次</li>
<li>最后一位是字母d也可以没有 (d|) 竖线表示这个或那个，增加一个后面跟着空格的d，或者只有一个空格</li>
<li>邮箱地址 [A-Za-z0-9._+]+ A-Z表示任意A~Z的大写字母，把所有可能的序列都放到中括号中，最后一个+号表示这些符号都可以出现多次，但是至少出现1次</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>含义</th>
<th>例子</th>
<th>匹配结果</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配前面的字符，子表达式或括号里的字符0次或多次</td>
<td>a*</td>
<td>aaaa,aa</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面的字符，子表达式或括号里的字符至少一次</td>
<td>a+b+</td>
<td>ab,aaab,abbb</td>
</tr>
<tr>
<td>[]</td>
<td>匹配任意一个字符，相当于任意选一个</td>
<td>[A-Z]*</td>
<td>APPLE,</td>
</tr>
<tr>
<td>()</td>
<td>表达式编组，会优先运行</td>
<td>(a*b)星号</td>
<td>b,ababab,aabaab</td>
</tr>
<tr>
<td>{m,n}</td>
<td>匹配前面的字符，子表达式或括号里的字符m次或n次</td>
<td>a{2,3}</td>
<td>aa,aaa</td>
</tr>
<tr>
<td>[^]</td>
<td>匹配任意一个不在中括号里的字符</td>
<td>[^A-Z]*</td>
<td>apple</td>
</tr>
<tr>
<td>|</td>
<td>匹配任意一个由竖线分割的字符</td>
<td>b(a|i|e)d</td>
<td>bad,bid,bed</td>
</tr>
<tr>
<td>.</td>
<td>匹配任意单个字符</td>
<td>b.d</td>
<td>b$d,</td>
</tr>
<tr>
<td>^</td>
<td>指字符串开始位置的字符或子表达式</td>
<td>^a</td>
<td>apple</td>
</tr>
<tr>
<td>\</td>
<td>转义字符 把特殊字符转为字面字符</td>
<td>.</td>
<td>.</td>
</tr>
<tr>
<td>$</td>
<td>^的反义词，从末尾开始匹配</td>
<td>[A-Z]*$</td>
<td></td>
</tr>
</tbody></table>
<p>例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">"http://www.pythonscraping.com/pages/page3.html"</span>)</span><br><span class="line">bsObj=BeautifulSoup(html)</span><br><span class="line">images=bsObj.findAll(<span class="string">"img"</span>,&#123;<span class="string">"src"</span>:re.compile(<span class="string">"\.\.\/img\/gifts/img.*\.jpg"</span>)&#125;)</span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">    print(image[<span class="string">'src'</span>])</span><br></pre></td></tr></table></figure>

<h4 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h4><p>有时候并不需要得到全部的标签的内容，我们只需要得到标签里面的属性就可以，<strong>myTag.attrs</strong>这个是python字典的形式，通过[“src”]拿到想要的属性的内容</p>
<h4 id="其他的库"><a href="#其他的库" class="headerlink" title="其他的库"></a>其他的库</h4><p>lxml</p>
<p>HTML parser</p>
]]></content>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题</title>
    <url>/2020-01-06-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<hr>
<h2 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h2><h3 id="01-06"><a href="#01-06" class="headerlink" title="01-06"></a>01-06</h3><p>[leetcode 279]</p>
<p>这道题是动态规划</p>
<p>假设dp[n]=m 表示n由m个完全平方数的组合</p>
<p>然后可以分解成某个完全平方数和1的总和</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=279 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [279] 完全平方数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            dp[i]=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j*j&lt;=i;j++)</span><br><span class="line">                dp[i]=min(dp[i],dp[i-j*j]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h3 id="01-07"><a href="#01-07" class="headerlink" title="01-07"></a>01-07</h3><p>[leetcode 744]</p>
<p>一个循环的字母表，找到比目标大的字母。</p>
<p>自己想到遍历。</p>
<p>看了题解原来可以有<strong>二分</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=744 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [744] 寻找比目标字母大的最小字母</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">nextGreatestLetter</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&amp; letters, <span class="keyword">char</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=letters.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(target&gt;=letters[r]||target&lt;letters[l]) <span class="keyword">return</span> letters[l];</span><br><span class="line">        <span class="keyword">while</span>(l+<span class="number">1</span>&lt;r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mide=l+(r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(letters[mide]&gt;target) r=mide;</span><br><span class="line">            <span class="keyword">else</span> l=mide;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> letters[r];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h3 id="01-08"><a href="#01-08" class="headerlink" title="01-08"></a>01-08</h3><p>[leetcode 877]</p>
<p>这道题是石子问题，两个人依次取石子，看最后谁取的多。</p>
<p>可以看出来第一个人取的肯定是多的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=877 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [877] 石子游戏</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">stoneGame</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; piles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N=piles.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> dp[N+<span class="number">2</span>][N+<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> size=<span class="number">1</span>;size&lt;=N;++size)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=size<span class="number">-1</span>;j&lt;N;++i,++j)&#123;</span><br><span class="line">                <span class="keyword">int</span> parity=(j+i+N)%<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(parity==<span class="number">1</span>)</span><br><span class="line">                    dp[i+<span class="number">1</span>][j+<span class="number">1</span>]=max(piles[i]+dp[i+<span class="number">2</span>][j+<span class="number">1</span>],piles[j]+dp[i+<span class="number">1</span>][j]);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i+<span class="number">1</span>][j+<span class="number">1</span>]=min(-piles[i]+dp[i+<span class="number">2</span>][j+<span class="number">1</span>],-piles[j]+dp[i+<span class="number">1</span>][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">1</span>][N]&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h3 id="01-09"><a href="#01-09" class="headerlink" title="01-09"></a>01-09</h3><p>[leetcode 101]</p>
<p>镜像，所以可以拆解成两棵树</p>
<p>首先根节点的值要一样</p>
<p>然后A的右子树跟B的左子树一样，A的左子树跟B的右子树一样</p>
<p><strong>递归</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=101 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [101] 对称二叉树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isMirror(root,root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMirror</span><span class="params">(TreeNode* t1,TreeNode* t2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t1==<span class="literal">NULL</span>&amp;&amp;t2==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(t1==<span class="literal">NULL</span>||t2==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> (t1-&gt;val==t2-&gt;val)&amp;&amp;isMirror(t1-&gt;right,t2-&gt;left)&amp;&amp;isMirror(t1-&gt;left,t2-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h3 id="01-10"><a href="#01-10" class="headerlink" title="01-10"></a>01-10</h3><p>[leetcode 310]</p>
<p>这道题是找到树中最大值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">largestValues</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">         <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> levelSize=q.size();</span><br><span class="line">            <span class="keyword">int</span> levelMax=INT_MIN;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;levelSize;i++)&#123;</span><br><span class="line">                TreeNode* curNode=q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                levelMax=max(curNode-&gt;val,levelMax);</span><br><span class="line">                <span class="keyword">if</span>(curNode-&gt;left) q.push(curNode-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(curNode-&gt;right) q.push(curNode-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.push_back(levelMax);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="01-11"><a href="#01-11" class="headerlink" title="01-11"></a>01-11</h3><p>[leetcode 130]</p>
<p>这道是被围绕的区域</p>
<p>其实这道做的很差，因为现在是23:27分，我已经写了12个小时的代码，并且不包括查资料，如果加上查资料，应该工作14-15个小时了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">First, check the four border of the matrix. If there is a element is</span></span><br><span class="line"><span class="comment">'O', alter it and all its nei***or 'O' elements to '1'.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Then ,alter all the 'O' to 'X'</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">At last,alter all the '1' to 'O'</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">For example:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         X X X X           X X X X             X X X X</span></span><br><span class="line"><span class="comment">         X X O X  -&gt;       X X O X    -&gt;       X X X X</span></span><br><span class="line"><span class="comment">         X O X X           X 1 X X             X O X X</span></span><br><span class="line"><span class="comment">         X O X X           X 1 X X             X O X X</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(board.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> rows=board.size(),cols=board[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)&#123;</span><br><span class="line">            dfs(board,i,<span class="number">0</span>);</span><br><span class="line">            dfs(board,i,cols<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;cols<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            dfs(board,<span class="number">0</span>,j);</span><br><span class="line">            dfs(board,rows<span class="number">-1</span>,j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j]==<span class="string">'1'</span>)&#123;</span><br><span class="line">                    board[i][j]=<span class="string">'O'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    board[i][j]=<span class="string">'X'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">0</span>&amp;&amp;i&lt;board.size()&amp;&amp;j&gt;=<span class="number">0</span>&amp;&amp;j&lt;board[<span class="number">0</span>].size()&amp;&amp;board[i][j]==<span class="string">'O'</span>)&#123;</span><br><span class="line">            board[i][j]=<span class="string">'1'</span>;</span><br><span class="line">            dfs(board,i<span class="number">-1</span>,j);</span><br><span class="line">            dfs(board,i+<span class="number">1</span>,j);</span><br><span class="line">            dfs(board,i,j<span class="number">-1</span>);</span><br><span class="line">            dfs(board,i,j+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="01-12"><a href="#01-12" class="headerlink" title="01-12"></a>01-12</h3><p>[leetcode 599]</p>
<p>这题是N叉树的最大深度，通过递归可以解决</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Node* it:root-&gt;children)</span><br><span class="line">            m=max(m,maxDepth(it));</span><br><span class="line">        m++;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题</title>
    <url>/2020-01-05-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<hr>
<h2 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h2><p>[leetcode 435]</p>
<p>这道题是去除区间，使得结果没有重叠。</p>
<p>可以先通过排序，然后取得第一个区间。</p>
<p>判断，如果left&lt;下一个区间的左边的值，那么久直接移动</p>
<p>如果left&gt;大于的话，那么就要去掉一个，并且left要取右边界最小的值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=435 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [435] 无重叠区间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(intervals.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       sort(intervals.begin(),intervals.end());</span><br><span class="line">       <span class="keyword">int</span> left=intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">       <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;intervals.size();i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(left&gt;intervals[i][<span class="number">0</span>])&#123;</span><br><span class="line">               res++;</span><br><span class="line">               left=min(intervals[i][<span class="number">1</span>],left);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               left=intervals[i][<span class="number">1</span>];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每周英文阅读</title>
    <url>/2020-01-05-%E6%AF%8F%E5%91%A8%E8%8B%B1%E6%96%87%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<hr>
<p>这周主要是学习vue，所以看得一些资料都是vue有关的资料。但是鉴于最近比较忙，所以没有输出blog，欠着。先把自己看得资料放上来</p>
<h2 id="Vue-CLI单组件文件"><a href="#Vue-CLI单组件文件" class="headerlink" title="Vue-CLI单组件文件"></a>Vue-CLI单组件文件</h2><p><a href="https://medium.com/js-dojo/vue-js-single-file-components-vue-cli-and-example-of-how-to-build-reusable-components-cf0991adbc2f" target="_blank" rel="noopener">原文链接</a></p>
<p>介绍了每个vue文件中template script style分别表示什么</p>
<p>如何全局注册</p>
<p>如果复用小组件</p>
<h2 id="Vue-Form规则"><a href="#Vue-Form规则" class="headerlink" title="Vue Form规则"></a>Vue Form规则</h2><p><a href="https://medium.com/js-dojo/form-validation-with-vuetify-in-a-vue-app-d72e3d9b65db" target="_blank" rel="noopener">原文链接</a></p>
<p>介绍如何定义表单规则</p>
<p>这个在项目中没有用到过</p>
<h2 id="Vue-router基本使用"><a href="#Vue-router基本使用" class="headerlink" title="Vue-router基本使用"></a>Vue-router基本使用</h2><p><a href="https://www.cnblogs.com/SamWeb/p/6610733.html" target="_blank" rel="noopener">原文链接</a></p>
<p>这是一篇中文博客，自己一开始都没有懂得vue-router怎么用，看了中文博客后，才慢慢懂得</p>
<h2 id="Vue使用Bootstrap"><a href="#Vue使用Bootstrap" class="headerlink" title="Vue使用Bootstrap"></a>Vue使用Bootstrap</h2><p><a href="https://travishorn.com/adding-bootstrap-to-a-vue-cli-project-98c2a30e0ed0" target="_blank" rel="noopener">原文链接</a></p>
<p>这篇文章讲如何在vue中使用bootstrap,同理可以推到jquery等等</p>
<h2 id="Vuex保存登录权限"><a href="#Vuex保存登录权限" class="headerlink" title="Vuex保存登录权限"></a>Vuex保存登录权限</h2><p><a href="https://scotch.io/tutorials/handling-authentication-in-vue-using-vuex" target="_blank" rel="noopener">原文链接</a></p>
<p>讲如何通过store来保存权限，虽然自己没有用到</p>
<h2 id="Vue使用localstorage"><a href="#Vue使用localstorage" class="headerlink" title="Vue使用localstorage"></a>Vue使用localstorage</h2><p><a href="https://www.cnblogs.com/houzheng/p/9067110.html" target="_blank" rel="noopener">原文链接</a></p>
<p>这是一篇中文博客，localstorage就是自己在项目中用来做路由权限管理的</p>
<h2 id="Vue使用props"><a href="#Vue使用props" class="headerlink" title="Vue使用props"></a>Vue使用props</h2><p><a href="https://michaelnthiessen.com/vue-props-ultimate-guide" target="_blank" rel="noopener">原文链接</a></p>
<p>这一篇讲解使用props,自己在项目中也确实用到了，那种复用的感觉很舒服</p>
<h2 id="Vue官方文档"><a href="#Vue官方文档" class="headerlink" title="Vue官方文档"></a>Vue官方文档</h2><p>…</p>
]]></content>
      <tags>
        <tag>英文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题</title>
    <url>/2020-01-04-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<hr>
<h2 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h2><p>[leetcode 402]</p>
<p>这道题是将一个字符串，移除k个数字，使得结果最小。如果直接使用暴力的，会超时，效果并不是很好。</p>
<p>参考<strong>题解</strong>，讲了一个思路就是单调栈，在栈中就是保证最小的数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=402 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [402] 移掉K位数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">removeKdigits</span><span class="params">(<span class="built_in">string</span> num, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c:num)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!st.empty()&amp;&amp;st.top()&gt;c&amp;&amp;k&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                st.pop();</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(st.empty()&amp;&amp;c==<span class="string">'0'</span>) <span class="keyword">continue</span>;</span><br><span class="line">            st.push(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!st.empty()&amp;&amp;k&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            st.pop();</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">            res+=st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reverse(res.begin(),res.end());</span><br><span class="line">        <span class="keyword">return</span> res.empty()?<span class="string">"0"</span>:res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题</title>
    <url>/2020-01-03-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<hr>
<h2 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h2><p><a href="https://leetcode-cn.com/problems/wildcard-matching/submissions/" target="_blank" rel="noopener">leetcode 44</a></p>
<p>通配符匹配问题，就是*匹配多个字符，?匹配一个字符</p>
<p>通过双指针，三种情况</p>
<p>如果s[i]==p[j]或者p[j]==’?’ 那就i与j都自增</p>
<p>如果p[j]==’*’ 那就标记此时的i，j的位置，然后j往下走</p>
<p>如果*的下个字符，都无法匹配到i，那么就表示会匹配星号，然后将i,j都往星号的后面一个。如果j的下个字符可以匹配到i那么就不匹配星号</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,istart=<span class="number">-1</span>,jstart=<span class="number">-1</span>,m=s.size(),n=p.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i&lt;m)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;n&amp;&amp;(s[i]==p[j]||p[j]==<span class="string">'?'</span>))&#123;</span><br><span class="line">                i++;j++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j&lt;n&amp;&amp;p[j]==<span class="string">'*'</span>)&#123;</span><br><span class="line">                istart=i;</span><br><span class="line">                jstart=j++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(istart&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                i=++istart;</span><br><span class="line">                j=jstart+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(j&lt;n&amp;&amp;p[j]==<span class="string">'*'</span>) j++;</span><br><span class="line">        <span class="keyword">return</span> j==n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="学到了"><a href="#学到了" class="headerlink" title="学到了"></a>学到了</h3><p>匹配的一种想法</p>
]]></content>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题</title>
    <url>/2020-01-02-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<hr>
<h2 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h2><p><a href="https://leetcode-cn.com/problems/two-city-scheduling/submissions/" target="_blank" rel="noopener">leetcode 1029</a></p>
<p>这道题是两地调度，一开始没有思路，不知道怎么做比较好。</p>
<p>看了<strong>题解</strong>，发现可以将全部人都放到B地，然后找到A-B差值(有正有负)最小的N个人，在总费用中加上这笔费用就可以。就可以算出最优的费用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">twoCitySchedCost</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; costs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; diff;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;costs.size();i++)&#123;</span><br><span class="line">            diff.push_back(costs[i][<span class="number">0</span>]-costs[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(diff.begin(),diff.end());</span><br><span class="line">        <span class="keyword">int</span> half=diff.size()/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;costs.size();i++)&#123;</span><br><span class="line">            ans+=costs[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i&lt;half) ans+=diff[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="学到了"><a href="#学到了" class="headerlink" title="学到了"></a>学到了</h3><p>这道题解法很妙，自己一开始想不出来。不过看了题解又有中好酷的感觉。</p>
]]></content>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题</title>
    <url>/2020-01-01-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<hr>
<h2 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h2><p><a href="https://leetcode-cn.com/problems/last-stone-weight/submissions/" target="_blank" rel="noopener">leetcode 1046</a></p>
<p>这道题是粉碎石头</p>
<p>有一种解法就是每次都排序一下，然后粉碎最大的两个。在排序。</p>
<p>最后一个的结果就是答案。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lastStoneWeight</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> stonesSize=stones.size();</span><br><span class="line">       <span class="keyword">if</span>(stonesSize&lt;=<span class="number">1</span>) <span class="keyword">return</span> stones[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;stonesSize;i++)&#123;</span><br><span class="line">           sort(stones.begin(),stones.end());</span><br><span class="line">           stones[stonesSize<span class="number">-1</span>]-=stones[stonesSize<span class="number">-2</span>];</span><br><span class="line">           stones[stonesSize<span class="number">-2</span>]=<span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> stones[stonesSize<span class="number">-1</span>];</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>还有一种方法就是不需要每次排序，因为可以通过<strong>堆</strong>啦完成，每次取最大值，然后push进去等操作，很符合最大堆。</p>
<p>所以可以使用c++提供的<strong>优先队列</strong>priority_queue</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lastStoneWeight</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> ston:stones)</span><br><span class="line">            que.push(ston);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max1=<span class="number">0</span>,max2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(que.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            max1=que.top();</span><br><span class="line">            que.pop();</span><br><span class="line">            max2=que.top();</span><br><span class="line">            que.pop();</span><br><span class="line">            <span class="keyword">if</span>(max1!=max2)&#123;</span><br><span class="line">                que.push(max1-max2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(que.size()==<span class="number">1</span>) <span class="keyword">return</span> que.top();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="学到了"><a href="#学到了" class="headerlink" title="学到了"></a>学到了</h3><p>优先队列,即堆的一种应用.</p>
]]></content>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题</title>
    <url>/2019-12-31-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<hr>
<h2 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h2><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/submissions/" target="_blank" rel="noopener">leetcode 122</a></p>
<p>这道题是股票买卖，没有手续费。所以只有后一天比前一天贵，就买入然后卖出。</p>
<p>注意处理 prices的size小于等于1时</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> curfee=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(prices.size()&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prices.size()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[i+<span class="number">1</span>]&gt;prices[i])&#123;</span><br><span class="line">                curfee+=prices[i+<span class="number">1</span>]-prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curfee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/submissions/" target="_blank" rel="noopener">leetcode 714</a></p>
<p>这道也是买卖股票的，不过现在不能无限买卖，因为有手续费，所以要保证不亏钱。</p>
<p>所以跟上面差不多的就是</p>
<p>也是看谷峰。首先找到一个低谷，然后判断买进来并且卖出去是否赚了，然后在以此为谷底</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices, <span class="keyword">int</span> fee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> curans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(prices.size()&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> vally=prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;prices.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vally&gt;prices[i])&#123;</span><br><span class="line">                vally=prices[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(prices[i]-fee&gt;vally)&#123;</span><br><span class="line">                curans+=prices[i]-vally-fee;</span><br><span class="line">                vally=prices[i]-fee;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="学到了"><a href="#学到了" class="headerlink" title="学到了"></a>学到了</h3><p>画图，找一下谷底，就是不断判断。</p>
]]></content>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题</title>
    <url>/2019-12-30-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<hr>
<h2 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h2><p><a href="https://leetcode-cn.com/problems/group-the-people-given-the-group-size-they-belong-to/submissions/" target="_blank" rel="noopener">leetcode 1282</a></p>
<p>这道题是贪心算法，刚开始有点想复杂了。没有想到用一个map就能够标记。</p>
<p>参考<strong>题解</strong>主要用一个Map来映射。判断是否到达次数了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">groupThePeople</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; groupSizes)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">map</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;groupSizes.size();i++)&#123;</span><br><span class="line">            <span class="built_in">map</span>[groupSizes[i]].push_back(i);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[groupSizes[i]].size()==groupSizes[i])&#123;</span><br><span class="line">                ans.push_back(<span class="built_in">map</span>[groupSizes[i]]);</span><br><span class="line">                <span class="built_in">map</span>[groupSizes[i]]=&#123;&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每周英文阅读</title>
    <url>/2019-12-29-%E6%AF%8F%E5%91%A8%E8%8B%B1%E6%96%87%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<hr>
<p>这周因为复习看技术资料比较少，不过英语学习没有停下来，入了推特的坑，发现很多好的东西。</p>
<p>更多休闲时间是在youtube上看一下英语教学视频，发现自己慢慢听懂了。这个也是应该要慢慢训练的。</p>
<p>昨天晚上看了<strong>springboot mybaits如何调用存储过程</strong></p>
<p><a href="https://dzone.com/articles/ibatis-mybatis-working-stored" target="_blank" rel="noopener">原文链接</a></p>
]]></content>
      <tags>
        <tag>英文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题</title>
    <url>/2019-12-29-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<hr>
<h2 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h2><p><a href="https://leetcode-cn.com/problems/combination-sum-iii/submissions/" target="_blank" rel="noopener">leetcode 216</a></p>
<p><strong>回溯</strong>专题训练一周后，终于自己做出来一题了。太舒服了。</p>
<p>其实回溯是有套路的</p>
<p>就是先取，然后计算，然后返回 pop_back()</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">combinationSum3</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        solve(k,n,<span class="number">1</span>,<span class="number">0</span>,tmp);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> n,<span class="keyword">int</span> index,<span class="keyword">int</span> cursum,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cursum==n&amp;&amp;tmp.size()==k) ans.push_back(tmp);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cursum&gt;n||tmp.size()&gt;k) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=index;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">                tmp.push_back(i);</span><br><span class="line">                solve(k,n,i+<span class="number">1</span>,cursum+i,tmp);</span><br><span class="line">                tmp.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="学到了"><a href="#学到了" class="headerlink" title="学到了"></a>学到了</h3><p>这种训练的成果，带给我的<strong>满足感</strong></p>
]]></content>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题</title>
    <url>/2019-12-28-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<hr>
<h2 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h2><p><a href="https://leetcode-cn.com/problems/combinations/submissions/" target="_blank" rel="noopener">leetcode 77</a></p>
<p>这道题是回溯法，自己写了一半。我对于回溯法的感觉还是不是很好。如果不取的话不需要在算一次，会自动往下算，不然就会出现<strong>重复</strong>的解</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">combine</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        solve(n,k,<span class="number">0</span>,tmp,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k,<span class="keyword">int</span> cur,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp,<span class="keyword">int</span> curindex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==k) ans.push_back(tmp);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=curindex;i&lt;=n;i++)&#123;</span><br><span class="line">                tmp.push_back(i);</span><br><span class="line">                solve(n,k,cur+<span class="number">1</span>,tmp,i+<span class="number">1</span>);</span><br><span class="line">                tmp.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="学到了"><a href="#学到了" class="headerlink" title="学到了"></a>学到了</h3><p>可能再次理清回溯法吧</p>
]]></content>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题</title>
    <url>/2019-12-27-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<hr>
<h2 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h2><p><a href="https://leetcode-cn.com/problems/subsets/submissions/" target="_blank" rel="noopener">leetcode 78</a></p>
<p>子集，这道题还是有点回溯法的影子。但是自己的想法是，每个数都有取或者不取的情况，所以当一个数取了返回。但是这种思路不正确，做出来的结果不对。</p>
<p>先来看一种比较厉害的解法</p>
<p>就是通过标记1代表有这个数，0表示没有这个数 例如 1,2,3 如果要判断1这个数有没有在这里面，这个时候就需要判断 1&amp;(1&lt;&lt;3-0-1) 1跟100与 <strong>这个1不是表示数字1，而是表示个数1</strong></p>
<p>1,2,3三个数 全排列是 8个对吧</p>
<p>第0个数 0&amp;与下去</p>
<p>最后一个 判断1  8&amp;(1&lt;&lt;3-0-1) 判断2 8&amp;(1&lt;&lt;3-1-1) 判断 3 8&amp;(1&lt;&lt;3-2-1) </p>
<p>发现这三个数都取到了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">subsets</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> len=nums.size();</span><br><span class="line">        <span class="keyword">int</span> last=<span class="number">1</span>&lt;&lt;len;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;last;i++)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nums.size();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;len-j<span class="number">-1</span>))&#123;</span><br><span class="line">                    tmp.push_back(nums[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>还有一个思路，就是没碰到一个数，就与前面的集合合并成一个新的集合放到结果后面</p>
<p>例如 1,2,3</p>
<p>刚开始返回集为空</p>
<p>1 组成 [空,1]</p>
<p>2组成 [空,1,2,12,]</p>
<p>依次类推</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">subsets</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">ans</span><span class="params">(<span class="number">1</span>)</span></span>;  <span class="comment">//技巧</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> anssize=ans.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;anssize;j++)&#123;</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp=ans[j];</span><br><span class="line">                tmp.push_back(nums[i]);</span><br><span class="line">                ans.push_back(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>好吧刚刚想到一个方法但是没有成功</p>
<h3 id="学到了"><a href="#学到了" class="headerlink" title="学到了"></a>学到了</h3><p>学到了集合如何判断，以及可以使用一个东西来标记。</p>
]]></content>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题</title>
    <url>/2019-12-26-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<hr>
<h2 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h2><p><a href="https://leetcode-cn.com/problems/combination-sum-ii/submissions/" target="_blank" rel="noopener">leetcode 40</a></p>
<p>这道题跟昨天的差不多，我按着昨天的那个思路写了一个，不要重复的那就是i+1而不是i，但是碰到几个问题，因为回溯法，如果没有<strong>排序</strong>会导致解少了，然后就是如果数组里面有多个重复的数字，会产生重复的解，所以再次碰到重复的数字跳过就可以。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">combinationSum2</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candidates, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        sort(candidates.begin(),candidates.end());</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">        solve(candidates,tmp,ans,<span class="number">0</span>,target);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candidates,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;ans,<span class="keyword">int</span> index,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>) ans.push_back(tmp);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=index;i&lt;candidates.size();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;index&amp;&amp;candidates[i]==candidates[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(target-candidates[i]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    tmp.push_back(candidates[i]);</span><br><span class="line">                    solve(candidates,tmp,ans,i+<span class="number">1</span>,target-candidates[i]);</span><br><span class="line">                    tmp.pop_back();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candidates,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;ans,<span class="keyword">int</span> index,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>) ans.push_back(tmp);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=index;i&lt;candidates.size();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;index&amp;&amp;candidates[i]==candidates[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(target-candidates[i]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    tmp.push_back(candidates[i]);</span><br><span class="line">                    solve(candidates,tmp,ans,i+<span class="number">1</span>,target-candidates[i]);</span><br><span class="line">                    tmp.pop_back();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">combinationSum2</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candidates, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        sort(candidates.begin(),candidates.end());</span><br><span class="line">        solve(candidates,tmp,ans,<span class="number">0</span>,target);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="学到了"><a href="#学到了" class="headerlink" title="学到了"></a>学到了</h3><p>去重，就是数字再一次碰到一样的跳过就可以了</p>
]]></content>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题</title>
    <url>/2019-12-25-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<hr>
<h2 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h2><p><a href="https://leetcode-cn.com/problems/combination-sum/submissions/" target="_blank" rel="noopener">leetcode 39</a></p>
<p>题目就是讲一组数，组成一个target并且数可以无限的用</p>
<p>思路是回溯法，当前这个数选择，判断。</p>
<p>但是我发现自己的回溯法有点bug，就是有点用到了0-1背包，我的想法是当前是否取，或者不取。这个不太对</p>
<p>正确的回溯法，就是取，如果不满足退回到上一步。</p>
<p>参考了<strong>题解</strong>，才再一次懂得回溯法的奥妙</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candidates,<span class="keyword">int</span> target,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>||l&gt;r) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>) ans.push_back(tmp);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">                tmp.push_back(candidates[i]);</span><br><span class="line">                solve(candidates,target-candidates[i],i,r);</span><br><span class="line">                tmp.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">combinationSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candidates, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        solve(candidates,target,<span class="number">0</span>,candidates.size()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="学到了"><a href="#学到了" class="headerlink" title="学到了"></a>学到了</h3><p>再次理清自己脑中对于回溯法的思路</p>
<p>tmp.pop_back()就是<strong>回溯</strong>这一步</p>
]]></content>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题</title>
    <url>/2019-12-24-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<hr>
<h2 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h2><p><a href="https://leetcode-cn.com/problems/letter-case-permutation/submissions/" target="_blank" rel="noopener">leetcode 784</a></p>
<p>题目是要求将一个只有数字和字母组成的字符串，其中字母可以大小写转换。排列组合</p>
<p>一开始，没看好题目。以为这个只有统计个数，马上想到2^n</p>
<p>但是细看发现不是这样的，需要排列组合出新的字符串。</p>
<p>然后因为tag是回溯法，所以想到回溯法的经典做法，就是当前是字母可以通过回溯大写，小写。但是自己对语言功底不足，所以也没有写出来。</p>
<p>参考了<strong>题解</strong>，发现很简单，就是通过判断如果是字母，那就加上大小写</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">letterCasePermutation</span><span class="params">(<span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size=S.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">        </span><br><span class="line">        ans.push_back(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isalpha</span>(S[i]))&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;j++)&#123;</span><br><span class="line">                    <span class="built_in">string</span> currentstring=ans[j];</span><br><span class="line">                    <span class="built_in">string</span> nextstring=currentstring;</span><br><span class="line">                    currentstring+=S[i];</span><br><span class="line">                    ans[j]=currentstring;</span><br><span class="line">                    S[i]^=<span class="number">32</span>;</span><br><span class="line">                    nextstring+=S[i];</span><br><span class="line">                    ans.push_back(nextstring);</span><br><span class="line">                &#125;</span><br><span class="line">                num=num*<span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;j++)&#123;</span><br><span class="line">                    <span class="built_in">string</span> currentstring=ans[j];</span><br><span class="line">                    currentstring+=S[i];</span><br><span class="line">                    ans[j]=currentstring;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="学到"><a href="#学到" class="headerlink" title="学到"></a>学到</h3><p>isalpha判断是否是字母，这个当时以为的做法是通过大于小于比较</p>
<p>通过异或32大小写转换，这个很有用。</p>
<p><a href="https://www.geeksforgeeks.org/5-different-methods-find-length-string-c/" target="_blank" rel="noopener">取长度我一开始使用length,但是看到可以使用size.</a></p>
<p>联系java里面length取的长度是不会变的，例如在java中的String就是不会变的。size用来取动态的长度，例如动态数组等</p>
]]></content>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题</title>
    <url>/2019-12-23-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<h3 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h3><p><a href="https://leetcode-cn.com/problems/binary-watch/submissions/" target="_blank" rel="noopener">leetcode401</a></p>
<p>这道题，主要是统计二进制数1的个数。</p>
<p>题目标签是回溯，这其实也容易想到，那么多个格子，看是否选择。</p>
<p>然后看了题解，其实也可以不用那么麻烦，可以通过枚举</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">            n=n&amp;(n<span class="number">-1</span>);</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">readBinaryWatch</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count(i)==num)</span><br><span class="line">                ans.push_back(to_string(i)+<span class="string">":00"</span>);</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">60</span>;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(count(i)+count(j)==num)</span><br><span class="line">                        ans.push_back(to_string(i)+<span class="string">":"</span>+(j&gt;=<span class="number">10</span>?to_string(j):<span class="string">"0"</span>+to_string(j)));</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>学到了to_string</p>
<p>还有n=n&amp;(n-1) 可以用来统计n的二进制中1的个数。</p>
]]></content>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每周英文阅读</title>
    <url>/2019-12-22-%E6%AF%8F%E5%91%A8%E8%8B%B1%E6%96%87%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<hr>
<h2 id="什么是numpy和pandas"><a href="#什么是numpy和pandas" class="headerlink" title="什么是numpy和pandas"></a>什么是numpy和pandas</h2><p><a href="https://cloudxlab.com/blog/numpy-pandas-introduction/" target="_blank" rel="noopener">原文链接</a></p>
<p>这篇文章主要简单的介绍了numpy和pandas。</p>
<p>这两个用在数据处理和机器学习上大有用处，不过东西很多。常查手册</p>
<h2 id="Textrank"><a href="#Textrank" class="headerlink" title="Textrank"></a>Textrank</h2><p><a href="https://medium.com/the-artificial-impostor/use-textrank-to-extract-most-important-sentences-in-article-b8efc7e70b4" target="_blank" rel="noopener">原文链接</a></p>
<p>这篇文章介绍，作者使用textrank，自动标出重点。textrank的思想就是找到文章中句子的相似度，最重要的句子就是跟全文相似度都很高</p>
<blockquote>
<p><strong>it finds how similar each sentence is to all other sentences in the text</strong>. <strong>The most important sentence is the one that is most similar to all the others</strong></p>
</blockquote>
<p>阅读了有关java String的一些文章，这里没有贴上来，因为是通过pad阅读。</p>
]]></content>
      <tags>
        <tag>英文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>String真的懂了吗？</title>
    <url>/2019-12-22-String%E7%9C%9F%E7%9A%84%E6%87%82%E4%BA%86%E5%90%97%EF%BC%9F/</url>
    <content><![CDATA[<hr>
<h2 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h2><p>先前记得是看过相关知识点，但是缺少联系，所以有点忘。这次重新激活相关节点。</p>
<h3 id="JVM内存"><a href="#JVM内存" class="headerlink" title="JVM内存"></a>JVM内存</h3><p>要理解string,首先得理解JVM内存是怎么一回事。</p>
<p><img src="http://cdn.xuxiaojin.com/jvm%E5%86%85%E5%AD%98%E5%88%9D%E7%89%88.jpg" alt="Alt text"></p>
<p>蓝色区域是每个线程独有的，而堆和方法区是java进程共享的。</p>
<p>一般在启动java类的时候，会将方法加载到方法区里。</p>
<p>然后main创建一个线程，并且将该方法放到java栈里，会划分一个栈帧，里面保存的是该方法里面的变量等，所以在不同方法里，用的是同一个变量并不会混淆，因为都有自己的一个栈帧。并且栈是一个<strong>先进后出</strong>的结构，所以在最上面的就是当前执行的方法。</p>
<p>堆里面存储的运行过程中创建的<strong>对象实例</strong></p>
<p>【以上的理解还比较简陋】</p>
<h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><p>栈对应数据结构里的栈，保护现场用栈【计组或者微机】，程序计数器cs:ip寄存器，可以表示下一条指令，堆用来存储运行时实例。</p>
<p>因为线程之间的隔离，可能会出现一些并发的问题，例如数据不一致等问题。这个是并发要解决的问题。</p>
<h3 id="String的不可变性"><a href="#String的不可变性" class="headerlink" title="String的不可变性"></a>String的不可变性</h3><p>首先String是<strong>不可变性</strong>，这会带来一些好处，例如hashmap缓存的时候不用改变，不容易被修改，以及可以使用<strong>常量池</strong>。</p>
<p>当然，这里举一个比较常见的误区，就是String str=”hello”,str=”World”</p>
<p><strong>这里不就变了？</strong></p>
<p>不是的，这个是str引用的对象遍历，而不是hello变了。</p>
<p>因为string的不可变性，在运行的过程中会出现一些中间的匿名String对象，<strong>但是jvm是会对其进行优化的</strong></p>
<p>不过在进行字符串拼接的过程中，如果<strong>不考虑线程安全的</strong>使用StringBuilder，考虑的话使用StringBuffer，还是一个比较好的习惯</p>
<h3 id="String的创建方式"><a href="#String的创建方式" class="headerlink" title="String的创建方式"></a>String的创建方式</h3><p>先看下面这个代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       String str1=<span class="string">"abc"</span>;</span><br><span class="line">       String str2=<span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">       String str3=str2.intern();</span><br><span class="line">       </span><br><span class="line">       System.out.println(str1==str2);</span><br><span class="line">       System.out.println(str2==str3);</span><br><span class="line">       System.out.println(str1==str3);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>可以猜一下运行的结果。</p>
<p>先来看一下分析</p>
<blockquote>
<p>Str1是通过常量进行创建的，所以abc会存储在常量池中【如果创建的时候，常量池没有abc】，如果有的话直接返回。</p>
<p>Str2是通过New这个变量来创建的。</p>
<p>有一道题目是指该语句创建了几个对象，答案是两个。</p>
<p>首先在类加载的时候，abc会被放到常量池里，new调用构造函数的时候,abc会放到堆里。并且返回<strong>堆的引用</strong></p>
<p>str3是通过intern()创建的，这个intern()首先会先到常量池里查看是否有abc，如果有直接返回常量池里的引用，如果没有的话，会创建并且把值放到常量池里。</p>
</blockquote>
<p>==不同于equals是==不仅对比值，还对比地址。只有当两者完全一样才会返回true。</p>
<p>所以上面运行的结果应该是false,false，true</p>
<p><img src="http://cdn.xuxiaojin.com/javaString.jpg" alt="Alt text"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.journaldev.com/7929/java-string-intern" target="_blank" rel="noopener">java string intern</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy的两个对象</title>
    <url>/2019-12-18-Numpy%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<hr>
<h2 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h2><p>简单学点numpy,不过刚刚发现对数组的理解还差点意思。</p>
<h3 id="ndarray对象"><a href="#ndarray对象" class="headerlink" title="ndarray对象"></a>ndarray对象</h3><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">b=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">b[<span class="number">1</span>,<span class="number">1</span>]=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">print(a.shape)</span><br><span class="line">print(b.shape)</span><br><span class="line">print(a.dtype)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<h4 id="结构数组"><a href="#结构数组" class="headerlink" title="结构数组"></a>结构数组</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">persontype=np.dtype(&#123;</span><br><span class="line">    <span class="string">'names'</span>:[<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'chinese'</span>,<span class="string">'math'</span>,<span class="string">'english'</span>],</span><br><span class="line">    <span class="string">'formats'</span>:[<span class="string">'S32'</span>,<span class="string">'i'</span>,<span class="string">'i'</span>,<span class="string">'i'</span>,<span class="string">'f'</span>]</span><br><span class="line">&#125;)</span><br><span class="line">peoples=np.array([(<span class="string">"zhangfei"</span>,<span class="number">32</span>,<span class="number">75</span>,<span class="number">100</span>,<span class="number">90</span>),(<span class="string">"Guanyu"</span>,<span class="number">24</span>,<span class="number">85</span>,<span class="number">96</span>,<span class="number">88.5</span>)],dtype=persontype)</span><br></pre></td></tr></table></figure>

<p>使用dtype定义数据类型，可以通过dtype=自定义的数据类型</p>
<p>创建数组，其实跟一般的语言数组类似，一维数组或者多维数组等等。</p>
<p>在结构数组里，可以参考C语言的结构类型(struct)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">names</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> chinese;</span><br><span class="line">    <span class="keyword">int</span> math;</span><br><span class="line">    <span class="keyword">float</span> english;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ufunc运算"><a href="#ufunc运算" class="headerlink" title="ufunc运算"></a>ufunc运算</h3><h4 id="连续数组的创建"><a href="#连续数组的创建" class="headerlink" title="连续数组的创建"></a>连续数组的创建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x1=np.arange(<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>)</span><br><span class="line">x2=np.linspace(<span class="number">1</span>,<span class="number">9</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>这两个都是创建等差数组</p>
<p>arange()类似内置函数range()确定<strong>初始值，终值，步长</strong>来创建</p>
<p>linspace是linear space的缩写，通过确定<strong>初始值，终值值，元素的个数</strong>来确定</p>
<h4 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(np.add(x1,x2))          //相加</span><br><span class="line">print(np.subtract(x1,x2))     //减</span><br><span class="line">print(np.multiply(x1,x2))     //乘</span><br><span class="line">print(np.divide(x1,x2))       //除</span><br><span class="line">print(np.power(x1,x2))        //求n次方</span><br><span class="line">print(np.remainder(x1,x2))     //取余</span><br></pre></td></tr></table></figure>

<h4 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数"></a>统计函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b=np.array([</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">])</span><br><span class="line">print(np.amin(b))</span><br><span class="line">print(np.amin(b,<span class="number">0</span>))</span><br><span class="line">print(np.amin(b,<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<p>np.amin(b) 表示统计b中所有元素</p>
<p>np.amin(b,0) 表示axios=0即<strong>竖</strong>着看这个二维数组，元素是[1,4,7] [2,5,8] [3,6,9]然后取每个元素的最小值</p>
<p>np.amin(b,1) 表示axios=1即<strong>横</strong>着看这个二维数组，元素是[1,2,3] [4,5,6] [7,8,9]然后取每个元素的最小值</p>
<p>同理<strong>ptp()</strong>表示统计最大值和最小值之差</p>
<p><strong>percentile()</strong>表示统计百分位数，percetile(b,p,axios=0|1|null)</p>
<p>其中p表示p个百分为数，范围是<strong>0-100</strong>，如果p=50就是求平均值，如果是100就是求最大值</p>
<p><strong>median()、mean()</strong>表示统计数组中的中位数，和平均值</p>
<p><strong>average()</strong>表示统计数组中的加权平均值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">wts=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">print(np.average(a))</span><br><span class="line">print(np.average(a,weights=wts))</span><br></pre></td></tr></table></figure>

<p><strong>std(),var()</strong>表示统计数组中的标准差和方差</p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.array([</span><br><span class="line">    [<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>],</span><br><span class="line">    [<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>]</span><br><span class="line">])</span><br><span class="line">print(np.sort(a))</span><br><span class="line">print(np.sort(a,axis=<span class="literal">None</span>))</span><br><span class="line">print(np.sort(a,axis=<span class="number">0</span>))</span><br><span class="line">print(np.sort(a,axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<p>np.sort(a) 表示按<strong>行</strong>排序</p>
<p>np.sort(a,axis=None) 表示将其<strong>扁平化</strong>变成一个<strong>向量</strong>进行排序</p>
<p>np.sort(a,axis=0) 表示<strong>竖</strong>着排序</p>
<p>np.sort(a,axis=1) 表示<strong>行</strong>着排序</p>
]]></content>
      <tags>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>简单入门pandas</title>
    <url>/2019-12-18-%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8pandas/</url>
    <content><![CDATA[<hr>
<h2 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h2><p>入门pandas</p>
<h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p>series是个定长的字典序列，定长是因为在存储的时候，相当于两个ndarray【一个是index,一个data】</p>
<p>有两个属性index和values，其中index默认是0,1,2但是也可以自己<strong>自定义</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1=Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">x2=Series(data=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">print(x1)</span><br><span class="line">print(x2)</span><br></pre></td></tr></table></figure>

<p>也可以通过字典来构建</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=&#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>,<span class="string">'d'</span>:<span class="number">4</span>&#125;</span><br><span class="line">print(Series(d))</span><br></pre></td></tr></table></figure>

<h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><p>类似于表格，有一个<strong>列索引column</strong>，还有一个<strong>行索引index</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;<span class="string">'Chinese'</span>: [<span class="number">66</span>, <span class="number">95</span>, <span class="number">93</span>, <span class="number">90</span>,<span class="number">80</span>],<span class="string">'English'</span>: [<span class="number">65</span>, <span class="number">85</span>, <span class="number">92</span>, <span class="number">88</span>, <span class="number">90</span>],<span class="string">'Math'</span>: [<span class="number">30</span>, <span class="number">98</span>, <span class="number">96</span>, <span class="number">77</span>, <span class="number">90</span>]&#125;</span><br><span class="line">df1= DataFrame(data)</span><br><span class="line">df2 = DataFrame(data, index=[<span class="string">'ZhangFei'</span>, <span class="string">'GuanYu'</span>, <span class="string">'ZhaoYun'</span>, <span class="string">'HuangZhong'</span>, <span class="string">'DianWei'</span>], columns=[<span class="string">'English'</span>, <span class="string">'Math'</span>, <span class="string">'Chinese'</span>])</span><br><span class="line">print(df1)</span><br><span class="line">print(df2)</span><br></pre></td></tr></table></figure>

<h4 id="数据清洗的方法"><a href="#数据清洗的方法" class="headerlink" title="数据清洗的方法"></a>数据清洗的方法</h4><p><strong>drop()</strong>方法删除掉不想要的<strong>列columns</strong>或<strong>行index</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df2=dfs2.drop(columns=[<span class="string">'Chinese'</span>])</span><br><span class="line">dfs2=dfs2.drop(index=[<span class="string">'zhangfei'</span>])</span><br></pre></td></tr></table></figure>

<p><strong>rename(columns=new_names,inplace=True)</strong>重命名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dfs2.rename(columns=&#123;<span class="string">'Chinese'</span>:<span class="string">'yuwen'</span>&#125;,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p><strong>drop_duplicates()</strong>去掉重复的行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df=df.drop_duplicates()</span><br></pre></td></tr></table></figure>

<p><strong>astype</strong>更改数据格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dfs2[<span class="string">'Chinese'</span>].astype(<span class="string">'str'</span>)</span><br></pre></td></tr></table></figure>

<p>…等等</p>
<h3 id="使用sql操作pandas"><a href="#使用sql操作pandas" class="headerlink" title="使用sql操作pandas"></a>使用sql操作pandas</h3><p>使用pandsql</p>
]]></content>
      <tags>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存是把双刃剑</title>
    <url>/2019-12-15-%E7%BC%93%E5%AD%98%E6%98%AF%E6%8A%8A%E5%8F%8C%E5%88%83%E5%89%91/</url>
    <content><![CDATA[<hr>
<h2 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h2><p>昨天重构项目的时候，发现自己用的缓存太过于暴力【直接暴力缓存】，所以补点缓存的知识。</p>
<h3 id="缓存的本质"><a href="#缓存的本质" class="headerlink" title="缓存的本质"></a>缓存的本质</h3><p>缓存实际上就是为了减少某种资源的重复获取而带来的开销，通过<strong>数据副本</strong>来实现。</p>
<p>一般来说，我们应用到缓存的出发点从<strong>延迟</strong>【即减少访问时间】和<strong>吞吐量</strong>出发。</p>
<blockquote>
<p>事务的出现是为了解决复杂写操作的原子性问题</p>
<p>缓存的出现是为了解决多次读操作的开销问题</p>
</blockquote>
<p>缓存的本质有</p>
<ol>
<li>对资源的获取，从HTTP的方法里，我们可以知道对数据的获取有幂等性和安全性，这样的操作【对资源的访问具有幂等性和安全性】才可以被抽象成缓存</li>
<li>必须是重复获取的，因为缓存实际上是以<strong>空间换时间</strong>，所以如果某个资源不经常获取或者只获取一次，那就没有必要缓存。</li>
<li>减少资源的开销，这里不但是是数据库的访问，还有网络IO等</li>
<li>快，当然这里的快是相对的。</li>
</ol>
<h4 id="用缓存解释访问www-xuxiaojin-com"><a href="#用缓存解释访问www-xuxiaojin-com" class="headerlink" title="用缓存解释访问www.xuxiaojin.com"></a>用缓存解释访问<a href="http://www.xuxiaojin.com" target="_blank" rel="noopener">www.xuxiaojin.com</a></h4><p>这个很经典，等学到网络里面，这个又是一个另外一种角度的解释。</p>
<p>客户端</p>
<ol>
<li>首先会在浏览器里的<strong>“域名-IP”缓存</strong>查看该网址的IP【如果你原先在浏览器中输入过该网址，可能会被缓存起来】</li>
<li>如果没有，那将在本地的操作系统中，查看<strong>域名映射缓存</strong>，查看是否有该域名的信息【有时候可以自己手动做一个域名映射】</li>
<li>在没有的话，将在DNS服务器，查询对应的域名和<strong>可缓存的时间</strong></li>
</ol>
<p>然后就到了服务端，这里以MVC的架构</p>
<ol start="4">
<li>在Controller层，有可能会有<strong>拦截过滤缓存</strong>，如果直接匹配某个过滤条件，将直接返回结果【这个高级我还没有学到】</li>
<li>Model层一般都会有对应的<strong>缓存</strong></li>
<li>View视图层并不需要从头渲染，会有对应的<strong>缓存</strong></li>
</ol>
<h3 id="应用模式"><a href="#应用模式" class="headerlink" title="应用模式"></a>应用模式</h3><p>讨论几种在应用中缓存使用的模式</p>
<h4 id="Cache-Aside"><a href="#Cache-Aside" class="headerlink" title="Cache-Aside"></a>Cache-Aside</h4><ul>
<li>读数据策略：先访问Cache，如果有直接返回。如果没有数据，将从原始操作中读取返回并将结果写入到缓存中。</li>
<li>更新数据策略：<ul>
<li>原则：先更新数据库，在让缓存<strong>失效</strong></li>
<li>两个异常：<ul>
<li>先让缓存失效，在更新数据库：如果同时有两个请求。A用来更新，B用来获取。如果A让缓存失效，这个时候B访问，缓存失效，将从数据库中读取数据【这个数据是旧数据】写回到缓存中去，A请求在更新数据库。这个时候将出现数据不一致的情况</li>
<li>先更新数据库，在更新缓存：如果同时有两个请求。A、B都用来更新。如果A先更新，B后更新。保证数据库的结果是B，但是更新缓存的顺序有可能B先更新，所以导致缓存里的数据是A。出现数据不一致的现象</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Read-through"><a href="#Read-through" class="headerlink" title="Read-through"></a>Read-through</h4><p>这个是完全将数据库对应用屏蔽起来，应用只能访问缓存</p>
<ul>
<li>读策略：访问Cache，如果有直接访问。如果没有数据，缓存向数据库请求并将结果写入到Cache，Cache返回给应用</li>
</ul>
<h4 id="Write-Through"><a href="#Write-Through" class="headerlink" title="Write-Through"></a>Write-Through</h4><p>这个是用来更新 策略，同上一样是将数据库隐藏起来</p>
<ul>
<li>更新策略：如果cache有，将先更新cache，并且cache更新数据库。cache返回给应用更新成功</li>
<li>异常：<ul>
<li>如果cache更新失败，直接返回失败</li>
<li>如果cache更新成功，数据库更新失败。那只能通过数据回滚，或者是删掉该缓存</li>
</ul>
</li>
</ul>
<h4 id="write-back"><a href="#write-back" class="headerlink" title="write-back"></a>write-back</h4><p>不同于上面的更新，write-back是更新cache后就返回，而更新数据库是留给<strong>异步</strong>来处理【听说是使用消息队列】</p>
<p>【这个跟计算机的底层关于Cache的更新操作很像，底层的更新有两种策略，写直达和写回操作，而这个就是写回操作，虽然说减少了跟数据库IO的次数，因为可以整合更新，但是在设计上更难了，得标记脏数据】</p>
<h3 id="缓存带来的问题"><a href="#缓存带来的问题" class="headerlink" title="缓存带来的问题"></a>缓存带来的问题</h3><h4 id="缓存穿刺"><a href="#缓存穿刺" class="headerlink" title="缓存穿刺"></a>缓存穿刺</h4><p>如果有大量请求，请求一个KEY，但是数据库跟缓存里都没有这个值，这个时候就会出现缓存穿刺的现象。因为缓存并没有起到屏蔽的作用，所有请求压力都到了数据库这里。</p>
<p>解决的办法：通过key缓存一个空值，或者通过过滤器提前过滤掉没有值的请求</p>
<h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>如果突然<strong>缓存命中率</strong>降低【因为断电等现象】，大量请求到了后端，会使得后端突然来了大量的请求压力而崩掉。</p>
<p>还有一种可能就是突然大量请求，但是cache没有，这时候第一个请求还未将结果写到cache中，其他请求就已经到了后端。</p>
<p>解决的办法：<strong>限流</strong>，后端限制请求的数量。<strong>预热</strong>，提前将热点信息放到缓存中，但是得判断哪些信息是热点</p>
<p>【预热其实底层有一种类似的实现，就是cache没有命中的时候，会将其周围的<strong>块</strong>一起拿到cache中，体现了程序的相关性】</p>
<h4 id="缓存容量失控"><a href="#缓存容量失控" class="headerlink" title="缓存容量失控"></a>缓存容量失控</h4><p>缓存容量过大，例如通过write-back机制，但是在异步写回期间，缓存容量突然变大</p>
<h4 id="LRU替换算法"><a href="#LRU替换算法" class="headerlink" title="LRU替换算法"></a>LRU替换算法</h4><p>虽然这个算法看起来比较靠谱，但是实际中，这个算法并不会考虑数据的有效性，例如爬虫爬到的都是老的数据，那么缓存中都是老的数据</p>
<p>解决方法：更换替换算法例如LFU</p>
<p>【这个都是计算机底层的替换算法】</p>
<h3 id="概念图"><a href="#概念图" class="headerlink" title="概念图"></a>概念图</h3><p><img src="http://cdn.xuxiaojin.com/cache.jpg" alt="缓存概念图"></p>
]]></content>
      <tags>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>每周英文阅读</title>
    <url>/2019-12-15-%E6%AF%8F%E5%91%A8%E8%8B%B1%E6%96%87%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<hr>
<h2 id="The-Open-Closed-Principle"><a href="#The-Open-Closed-Principle" class="headerlink" title="The Open-Closed Principle"></a>The Open-Closed Principle</h2><p><a href="https://github.com/gdhucoder/Algorithms4/blob/master/designpattern/pdf/2006-OCP-RobertMartin.pdf" target="_blank" rel="noopener">原文链接</a></p>
<p>这篇文章主要讲了设计模式里面的“对扩展开放，对修改关闭”</p>
<p>记得自己原先写代码，都是修改修改，然后就会碰到需要改掉原来引用的入参等等。</p>
<p>面对变化的东西，需要有封装的意识。</p>
<p>这里面就需要自己在实战中不断的去修炼</p>
<h2 id="事务幻读"><a href="#事务幻读" class="headerlink" title="事务幻读"></a>事务幻读</h2><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-next-key-locking.html" target="_blank" rel="noopener">原文链接</a></p>
<p>数据库里的事务并发出现的问题，幻读，表示在同一个事务里，请求两次的select会返回不同的结果集。原因是另外一个事物使用了insert，但是这两个事物之间没有隔离。</p>
<h2 id="事物不可重复读"><a href="#事物不可重复读" class="headerlink" title="事物不可重复读"></a>事物不可重复读</h2><p><a href="https://logicalread.com/2013/02/09/sql-server-concurrency-nonrepeatable-reads-w01/#.XfIruWQzZPY" target="_blank" rel="noopener">原文链接</a></p>
<p><a href="https://vladmihalcea.com/non-repeatable-read/" target="_blank" rel="noopener">原文链接</a></p>
<p>数据库里的不可重复读，表示的是在同一个事务里，读同一条记录多次，出现的结果不一样。</p>
<p>第二篇文章提到了解决方法，两阶段锁</p>
<h2 id="long在32位机上会出现并发问题"><a href="#long在32位机上会出现并发问题" class="headerlink" title="long在32位机上会出现并发问题"></a>long在32位机上会出现并发问题</h2><p><a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.7" target="_blank" rel="noopener">原文链接</a></p>
<p>因为Long是64位的，所以会被拆分成两个部分，在进行加减操作的时候，可能会出现线程切换而引起的错误。</p>
<p>无法在单个指令内完成操作</p>
<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p><a href="https://www.backblaze.com/blog/whats-the-diff-programs-processes-and-threads/" target="_blank" rel="noopener">原文链接</a></p>
<p>还有维基百科</p>
<p>进程指的是程序运行过程中的代码，用到的cpu资源。</p>
<p>线程指的是进程里执行的多任务？也被称为轻量进程，所以也有一些资源，例如存储空间等。但是不同于进程，线程之前是可以共享的，但是进程之间是独立的。</p>
<p>【可能解释的还不够准确，日后在更新】</p>
<h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p><a href="https://medium.com/@severinperez/avoiding-interface-pollution-with-the-interface-segregation-principle-5d3859c21013" target="_blank" rel="noopener">原文链接</a></p>
<p>接口放在不同语境下有不同的理解。首先就是前后端API，还有就是一个简单的函数，最后还有OPP里面的接口。</p>
<p>接口隔离原则是防止接口污染，简单来说，我调用一个接口，但是接口里面有我不需要的东西，这就是不隔离了【调用接口，且没有我不要的东西】</p>
<p>所以可以通过分解接口，把一些特殊的专门定义。或者定一些小的函数。</p>
<h2 id="如何提升数据结构算法和解决问题的能力"><a href="#如何提升数据结构算法和解决问题的能力" class="headerlink" title="如何提升数据结构算法和解决问题的能力"></a>如何提升数据结构算法和解决问题的能力</h2><p><a href="https://medium.com/@fabianterh/how-to-improve-your-data-structures-algorithms-and-problem-solving-skills-af50971cba60" target="_blank" rel="noopener">原文链接</a></p>
<p>没有捷径，这里只有练才是硬道理</p>
<p>(对了刚刚用了medium unlimited扩展插件舒服)</p>
<h2 id="什么是REDIS和怎么使用它"><a href="#什么是REDIS和怎么使用它" class="headerlink" title="什么是REDIS和怎么使用它"></a>什么是REDIS和怎么使用它</h2><p><a href="https://codeburst.io/redis-what-and-why-d52b6829813" target="_blank" rel="noopener">原文链接</a></p>
<p>这篇文章介绍了，作者为什么使用redis.他面临一个大量的数据库请求。起初，他认为可以用数据库来解决，后面讨论了一下，发现不可行。所以就是用cache。</p>
]]></content>
      <tags>
        <tag>英文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>WYH简单认识Redis</title>
    <url>/2019-12-15-WYH%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%86Redis/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>闲聊：昨天用vue重构了先前写的项目，感觉有点爽</p>
<h3 id="What"><a href="#What" class="headerlink" title="What"></a>What</h3><p>redis是一个key-value型的非关系型数据库，并且是存储在内存上【这一点可以减少硬盘IO的开销，是其读写效率高的一个原因】，并且支持多种数据结构</p>
<h3 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h3><p>为什么速度这么快？</p>
<ul>
<li>底层使用C实现，C运行时，依赖比较少，速度比较快</li>
<li>类似hash的键值对，读取的时间复杂度</li>
<li>存储在内存上【虽然损失了持久性，但是速度极大的提高】</li>
<li>单线程模式，减少了线程切换的开销</li>
<li>还有IO复用，同一个线程可以处理多个IO请求</li>
</ul>
<h3 id="HOW"><a href="#HOW" class="headerlink" title="HOW"></a>HOW</h3><p>由于可以支持多种数据结构，所以每种数据结构都有特定的语法，但是无非Key-value</p>
<h3 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h3><p>事务，关系型数据库支持事务，当然redis也支持事务。只不过损失了一些事务特性</p>
<p>下面是模拟抢票的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">pool=redis.ConnectionPool(host=<span class="string">'localhost'</span>,port=<span class="number">6379</span>)</span><br><span class="line">r=redis.StrictRedis(connection_pool=pool)</span><br><span class="line">KEY=<span class="string">"ticket_count"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sell</span><span class="params">(i)</span>:</span></span><br><span class="line">    pipe=r.pipeline()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pipe.watch(KEY)</span><br><span class="line">            c=int(pipe.get(KEY))</span><br><span class="line">            <span class="keyword">if</span> c&gt;<span class="number">0</span>:</span><br><span class="line">                pipe.multi()</span><br><span class="line">                c=c<span class="number">-1</span></span><br><span class="line">                pipe.set(KEY,c)</span><br><span class="line">                pipe.execute()</span><br><span class="line">                print(<span class="string">'用户&#123;&#125;抢票成功，当前票数&#123;&#125;'</span>.format(i,c))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'用户&#123;&#125;抢票失败，票卖完了'</span>.format(i))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'用户&#123;&#125;抢票失败，重新试一次'</span>.format(i))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            pipe.unwatch()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    r.set(KEY,<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        t=threading.Thread(target=sell,args=(i,))</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure>

<p>一般来说，我们可以使用redis作为缓存中间件，而减少对数据库的访问。</p>
<p>但是技术没有银弹，缓存不好也会带来许多问题的。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>java并发的前置知识</title>
    <url>/2019-12-12-java%E5%B9%B6%E5%8F%91%E7%9A%84%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由事务的四个特性acid想到并发。so,i’m coming</p>
<h3 id="可见性问题"><a href="#可见性问题" class="headerlink" title="可见性问题"></a>可见性问题</h3><p>先来看一段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add10k</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> idx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(idx++&lt;<span class="number">10000</span>)&#123;</span><br><span class="line">            count+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> test m=<span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line">        Thread th1=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            m.add10k();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread th2=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            m.add10k();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        th1.start();</span><br><span class="line">        th2.start();</span><br><span class="line"></span><br><span class="line">        th1.join();</span><br><span class="line">        th2.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(m.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码的运行结果是10000-20000之间。</p>
<p>为什么呢？</p>
<p>因为在多核时代，每颗cpu都有自己的缓存，所以他们之间就会出现可见性问题。</p>
<p>例如，线程th1维护了一个缓存，th2维护了另外一个缓存。</p>
<p>所以当他们启动时，都是基于内存里的count运行了count+=1,写到内存，并不是写了2。</p>
<p>所以，我们看到的结果并不是我们期望的那样是20000.不过因为两个线程启动有时差，所以会大于10000.</p>
<h3 id="原子性问题"><a href="#原子性问题" class="headerlink" title="原子性问题"></a>原子性问题</h3><p>原子性问题，在数据库事务中指的是一次事务操作，要么全部完成，要么都不完成。</p>
<p>在并发里，原子性指的是，一个或多个指令在CPU执行的过程中不发生中断。</p>
<p>解释一下，CPU里最小单元是指令【不是高级语言里的指令】</p>
<p>例如count+=1总共有三条指令</p>
<p>取count-&gt;执行+1-&gt;存入count</p>
<p>CPU只能保证指令程度上不会发生中断，但是并不是指高级语言中指令不发生中断。</p>
<p>如果有多个线程【以前CPU将的进程切换，通过时间片提高CPU的效率，现在更多是基于线程，所以称为线程切换】，由于会发生线程切换那么就有可能打乱语句的执行顺序。</p>
<p>所以原子性问题也是并发的常见问题之一。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>每周英文阅读</title>
    <url>/2019-12-08-%E6%AF%8F%E5%91%A8%E8%8B%B1%E6%96%87%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<hr>
<p>这周主要学习网络编程过程中，看一下有关c的api官方文档</p>
]]></content>
      <tags>
        <tag>英文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>C程序设计语言之指针与数组</title>
    <url>/2019-12-05-C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<hr>
<h1 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h1><h2 id="指针与地址"><a href="#指针与地址" class="headerlink" title="指针与地址"></a>指针与地址</h2><blockquote>
<p>int x=1,y;</p>
<p>int *p; //p is a pointer to int</p>
<p>p=&x;  //p point to x</p>
<p>y=*p;</p>
</blockquote>
<ol>
<li>&amp;地址运算符，只能应用于内存中的对象(因为要有地址)，即变量与数组元素【常量是如何存储的，照理说是没有地址的，那么是放在那个地方的】</li>
<li>*间接寻址或者间接引用，可以用来找到指针所指向的值。理解为指针变量保存的地址所指向的对象。</li>
<li>指针本身也是变量，可以相互赋值</li>
</ol>
<h2 id="指针与数组-1"><a href="#指针与数组-1" class="headerlink" title="指针与数组"></a>指针与数组</h2><p>数组跟指针之间的关系。</p>
<p>定义数组：int a[10]</p>
<p>其中a指向的是数组的第一个元素的地址&amp;a[0]</p>
<p>相当于int *p=&amp;a[0]</p>
<p>如果直接使用int *p=a与上面等同</p>
<p>指针的运算，p+i表示的是指向p所指向的元素的后面的第i个元素</p>
<p>即*(p+i)与p[i]与a[i]相同</p>
<p>在函数中传入的参数，因为要想使用指针的运算，所以可以传入第一个地址。</p>
<p>在函数形参的定义中，int a[]和int *a两者的是等价的。</p>
<p>我上次遇到的问题是在传入函数中，使用的是f(&amp;a)</p>
<p>这个一看就是错的，我传入的是a的地址，但是我要的是a指向的地址。这两者是不同的。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这个问题是上次网络编程碰到的问题。</p>
<p>这里特意重新学习了一下有关指针的部分。</p>
]]></content>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程实战之一个小的服务器</title>
    <url>/2019-12-05-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E4%B9%8B%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<hr>
<h2 id="问题列表"><a href="#问题列表" class="headerlink" title="问题列表"></a>问题列表</h2><h3 id="实战问题"><a href="#实战问题" class="headerlink" title="实战问题"></a>实战问题</h3><ol>
<li>有关c的指针跟数组，已经写了一篇blog</li>
<li>当关掉./server时，地址老是被占用</li>
</ol>
<p>tcp著名的有三次连接，四次挥手。其中在挥手的时候，主动发起结束连接的请求的一方，在收到对端发送的FIN消息，会进入到TIME_WATE阶段，如果这个时候对端没有发送ack的信号，在大约过一个MSL生命周期，时间大概是60秒。</p>
<p>回到我们的问题</p>
<p>我们是关掉./server端，然后立即重启，但是此时该地址跟端口都在TIME_WATE阶段。所以会出现地址被占用的情况。但是我们每次关掉./client端，并不会出现上述情况，这个是因为./client的端口每次都是随机的，所以一般不会出现两个端口一样。</p>
<p>这个时候的解决方法就是：复用套接字</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> on = <span class="number">1</span>;</span><br><span class="line">setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;on, <span class="keyword">sizeof</span>(on));</span><br></pre></td></tr></table></figure>

<p>这段代码放到socket和bind之间。</p>
<p>其实这段代码是对TCP的优化，一种优化是发送序号，一种是时间戳</p>
<ol start="3">
<li>shutdown关闭</li>
</ol>
<p>每次按ctrl+c都是直接两边都会关闭，但是对于服务器来说，当客户端关闭时，服务端也不能关闭。要保持在线，继续等待新的客户端的连接请求</p>
<p>这个时候就需要用到shutdown函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shutdown</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> howto)</span></span></span><br></pre></td></tr></table></figure>

<p>这里面的howto有三种状态。</p>
<p>0表示关闭连接方向的读，相当于尽管对端发送消息给我，我也会回复ack，但是这段数据是被舍弃掉的，并且在接收缓冲区里的数据也会被丢弃掉。</p>
<p>1表示关闭连接方向的写，这个其实就是给对端发送一个fin信号，单向关掉这个连接。</p>
<p>2表示两个方向都会关闭</p>
<h1 id="读优秀代码"><a href="#读优秀代码" class="headerlink" title="读优秀代码"></a>读优秀代码</h1><h2 id="server-c"><a href="#server-c" class="headerlink" title="server.c"></a>server.c</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lib/common.h"</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sig_int</span><span class="params">(<span class="keyword">int</span> signo)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nreceived %d datagrams\n"</span>, count);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">run_cmd</span><span class="params">(<span class="keyword">char</span> *cmd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *data = <span class="built_in">malloc</span>(<span class="number">16384</span>);</span><br><span class="line">    bzero(data, <span class="keyword">sizeof</span>(data));</span><br><span class="line">    FILE *fdp;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> max_buffer = <span class="number">256</span>;</span><br><span class="line">    <span class="keyword">char</span> buffer[max_buffer];</span><br><span class="line">    fdp = popen(cmd, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">char</span> *data_index = data;</span><br><span class="line">    <span class="keyword">if</span> (fdp) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!feof(fdp)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fgets(buffer, max_buffer, fdp) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> len = <span class="built_in">strlen</span>(buffer);</span><br><span class="line">                <span class="built_in">memcpy</span>(data_index, buffer, len);</span><br><span class="line">                data_index += len;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pclose(fdp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> listenfd;</span><br><span class="line">    listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line">    bzero(&amp;server_addr, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    server_addr.sin_port = htons(SERV_PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> on = <span class="number">1</span>;</span><br><span class="line">    setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;on, <span class="keyword">sizeof</span>(on));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rt1 = bind(listenfd, (struct sockaddr *) &amp;server_addr, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    <span class="keyword">if</span> (rt1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        error(<span class="number">1</span>, errno, <span class="string">"bind failed "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rt2 = listen(listenfd, LISTENQ);</span><br><span class="line">    <span class="keyword">if</span> (rt2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        error(<span class="number">1</span>, errno, <span class="string">"listen failed "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    signal(SIGPIPE, SIG_IGN);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> connfd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> client_len = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">256</span>];</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((connfd = accept(listenfd, (struct sockaddr *) &amp;client_addr, &amp;client_len)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            error(<span class="number">1</span>, errno, <span class="string">"bind failed "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            bzero(buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">            <span class="keyword">int</span> n = read(connfd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">            <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                error(<span class="number">1</span>, errno, <span class="string">"error read message"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"client closed \n"</span>);</span><br><span class="line">                close(connfd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">            buf[n] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strncmp</span>(buf, <span class="string">"ls"</span>, n) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">char</span> *result = run_cmd(<span class="string">"ls"</span>);</span><br><span class="line">                <span class="keyword">if</span> (send(connfd, result, <span class="built_in">strlen</span>(result), <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(buf, <span class="string">"pwd"</span>, n) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">char</span> buf[<span class="number">256</span>];</span><br><span class="line">                <span class="keyword">char</span> *result = getcwd(buf, <span class="number">256</span>);</span><br><span class="line">                <span class="keyword">if</span> (send(connfd, result, <span class="built_in">strlen</span>(result), <span class="number">0</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                <span class="built_in">free</span>(result);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(buf, <span class="string">"cd "</span>, <span class="number">3</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">char</span> target[<span class="number">256</span>];</span><br><span class="line">                bzero(target, <span class="keyword">sizeof</span>(target));</span><br><span class="line">                <span class="built_in">memcpy</span>(target, buf + <span class="number">3</span>, <span class="built_in">strlen</span>(buf) - <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">if</span> (chdir(target) == <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"change dir failed, %s\n"</span>, target);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">char</span> *error = <span class="string">"error: unknown input type"</span>;</span><br><span class="line">                <span class="keyword">if</span> (send(connfd, error, <span class="built_in">strlen</span>(error), <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="client-c"><a href="#client-c" class="headerlink" title="client.c"></a>client.c</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lib/common.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MAXLINE     1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        error(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"usage: tcp_client &lt;IPaddress&gt; &lt;port&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> port = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">int</span> socket_fd = tcp_client(argv[<span class="number">1</span>], port);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> recv_line[MAXLINE], send_line[MAXLINE];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    fd_set readmask;</span><br><span class="line">    fd_set allreads;</span><br><span class="line">    FD_ZERO(&amp;allreads);</span><br><span class="line">    FD_SET(<span class="number">0</span>, &amp;allreads);</span><br><span class="line">    FD_SET(socket_fd, &amp;allreads);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        readmask = allreads;</span><br><span class="line">        <span class="keyword">int</span> rc = select(socket_fd + <span class="number">1</span>, &amp;readmask, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rc &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            error(<span class="number">1</span>, errno, <span class="string">"select failed"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (FD_ISSET(socket_fd, &amp;readmask)) &#123;</span><br><span class="line">            n = read(socket_fd, recv_line, MAXLINE);</span><br><span class="line">            <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                error(<span class="number">1</span>, errno, <span class="string">"read error"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"server closed \n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            recv_line[n] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">fputs</span>(recv_line, <span class="built_in">stdout</span>);</span><br><span class="line">            <span class="built_in">fputs</span>(<span class="string">"\n"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (FD_ISSET(STDIN_FILENO, &amp;readmask)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fgets(send_line, MAXLINE, <span class="built_in">stdin</span>) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="built_in">strlen</span>(send_line);</span><br><span class="line">                <span class="keyword">if</span> (send_line[i - <span class="number">1</span>] == <span class="string">'\n'</span>) &#123;</span><br><span class="line">                    send_line[i - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strncmp</span>(send_line, <span class="string">"quit"</span>, <span class="built_in">strlen</span>(send_line)) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (shutdown(socket_fd, <span class="number">1</span>)) &#123;</span><br><span class="line">                        error(<span class="number">1</span>, errno, <span class="string">"shutdown failed"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">size_t</span> rt = write(socket_fd, send_line, <span class="built_in">strlen</span>(send_line));</span><br><span class="line">                <span class="keyword">if</span> (rt &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    error(<span class="number">1</span>, errno, <span class="string">"write failed "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>以上是网络实战的一部分。不过我没有做那么多，我只做了ls和pwd。</p>
<p>对c不是很熟悉，所以做起来还是很吃力的。</p>
<p>加上自己蹩脚的vim.</p>
<p>下一个阶段就是要学会vim</p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程实战之心跳包</title>
    <url>/2019-12-04-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E4%B9%8B%E5%BF%83%E8%B7%B3%E5%8C%85/</url>
    <content><![CDATA[<hr>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><h3 id="server-c"><a href="#server-c" class="headerlink" title="server.c"></a>server.c</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lib/common.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"message_objecte.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        error(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"usage: tcpsever &lt;sleepingtime&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sleepingTime = atoi(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> listenfd;</span><br><span class="line">    listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line">    bzero(&amp;server_addr, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    server_addr.sin_port = htons(SERV_PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rt1 = bind(listenfd, (struct sockaddr *) &amp;server_addr, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    <span class="keyword">if</span> (rt1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        error(<span class="number">1</span>, errno, <span class="string">"bind failed "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rt2 = listen(listenfd, LISTENQ);</span><br><span class="line">    <span class="keyword">if</span> (rt2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        error(<span class="number">1</span>, errno, <span class="string">"listen failed "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> connfd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> client_len = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((connfd = accept(listenfd, (struct sockaddr *) &amp;client_addr, &amp;client_len)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        error(<span class="number">1</span>, errno, <span class="string">"bind failed "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    messageObject message;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = read(connfd, (<span class="keyword">char</span> *) &amp;message, <span class="keyword">sizeof</span>(messageObject));</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            error(<span class="number">1</span>, errno, <span class="string">"error read"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            error(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"client closed \n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"received %d bytes\n"</span>, n);</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (ntohl(message.type)) &#123;</span><br><span class="line">            <span class="keyword">case</span> MSG_TYPE1 :</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"process  MSG_TYPE1 \n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MSG_TYPE2 :</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"process  MSG_TYPE2 \n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MSG_PING: &#123;</span><br><span class="line">                messageObject pong_message;</span><br><span class="line">                pong_message.type = MSG_PONG;</span><br><span class="line">                sleep(sleepingTime);</span><br><span class="line">                <span class="keyword">ssize_t</span> rc = send(connfd, (<span class="keyword">char</span> *) &amp;pong_message, <span class="keyword">sizeof</span>(pong_message), <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (rc &lt; <span class="number">0</span>)</span><br><span class="line">                    error(<span class="number">1</span>, errno, <span class="string">"send failure"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span> :</span><br><span class="line">                error(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"unknown message type (%d)\n"</span>, ntohl(message.type));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要就是接受处理发送过来的消息</p>
<h3 id="client-c"><a href="#client-c" class="headerlink" title="client.c"></a>client.c</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lib/common.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"message_objecte.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>    MAXLINE     4096</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>    KEEP_ALIVE_TIME  10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>    KEEP_ALIVE_INTERVAL  3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>    KEEP_ALIVE_PROBETIMES  3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        error(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"usage: tcpclient &lt;IPaddress&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> socket_fd;</span><br><span class="line">    socket_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line">    bzero(&amp;server_addr, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_port = htons(SERV_PORT);</span><br><span class="line">    inet_pton(AF_INET, argv[<span class="number">1</span>], &amp;server_addr.sin_addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">socklen_t</span> server_len = <span class="keyword">sizeof</span>(server_addr);</span><br><span class="line">    <span class="keyword">int</span> connect_rt = connect(socket_fd, (struct sockaddr *) &amp;server_addr, server_len);</span><br><span class="line">    <span class="keyword">if</span> (connect_rt &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        error(<span class="number">1</span>, errno, <span class="string">"connect failed "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> recv_line[MAXLINE + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    fd_set readmask;</span><br><span class="line">    fd_set allreads;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></span><br><span class="line">    <span class="keyword">int</span> heartbeats = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    tv.tv_sec = KEEP_ALIVE_TIME;</span><br><span class="line">    tv.tv_usec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    messageObject messageObject;</span><br><span class="line"></span><br><span class="line">    FD_ZERO(&amp;allreads);</span><br><span class="line">    FD_SET(socket_fd, &amp;allreads);</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        readmask = allreads;</span><br><span class="line">        <span class="keyword">int</span> rc = select(socket_fd + <span class="number">1</span>, &amp;readmask, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;tv);</span><br><span class="line">        <span class="keyword">if</span> (rc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            error(<span class="number">1</span>, errno, <span class="string">"select failed"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (++heartbeats &gt; KEEP_ALIVE_PROBETIMES) &#123;</span><br><span class="line">                error(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"connection dead\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sending heartbeat #%d\n"</span>, heartbeats);</span><br><span class="line">            messageObject.type = htonl(MSG_PING);</span><br><span class="line">            rc = send(socket_fd, (<span class="keyword">char</span> *) &amp;messageObject, <span class="keyword">sizeof</span>(messageObject), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (rc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                error(<span class="number">1</span>, errno, <span class="string">"send failure"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            tv.tv_sec = KEEP_ALIVE_INTERVAL;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (FD_ISSET(socket_fd, &amp;readmask)) &#123;</span><br><span class="line">            n = read(socket_fd, recv_line, MAXLINE);</span><br><span class="line">            <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                error(<span class="number">1</span>, errno, <span class="string">"read error"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">                error(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"server terminated \n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"received heartbeat, make heartbeats to 0 \n"</span>);</span><br><span class="line">            heartbeats = <span class="number">0</span>;</span><br><span class="line">            tv.tv_sec = KEEP_ALIVE_TIME;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>以上是完成了心跳机制，主要由一端去探测是否tcp是有效连接，所以需要有一个定时器去发送请求。如果收到回复，那么就说明是有效连接。如果连续发送【每隔保活时间间隔】而没有收到回复，并且达到保活探测次数，那么就会判断是无效连接。</p>
<p>不过tcp其实提供一个keep-live。可以通过修改参数达到想要的效果。但是还是可以通过应用层实现心跳机制。</p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql实战系列之索引在习</title>
    <url>/2019-12-04-Mysql%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%9C%A8%E4%B9%A0/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>自增主键的益处：记得先前讨论是否给数据字典添加自增主键时，自己给出的原因是减少二级索引的存储空间，今天还看到另外一个益处，就是在数据更新的时候，例如插入，索引维护时可以减少页分裂还有合并。因为就是直接加到后面。而如果使用业务做主键的话，就很难保持有序。</p>
<p>索引查找的过程：二级索引一般会有个回表的过程，因为二级索引中叶子节点存储的是主键的ID，所以需要回表去拿到数据。所以减少回表的次数能够极大的提升性能。可以采用覆盖索引。可以减少回表的次数，但是不能每次都建立联合索引。所以有个最左前缀匹配，能够匹配字符的左边的N个字符，这个也是可以用联合索引的。</p>
<p>所以最佳实践是合理安排联合索引的顺序【如果该顺序能够减少一个新的索引建立那就是好的】，如果必须建立一个单个字段的索引，这个时候考虑的性能就是空间了。【性能无非时间和空间】</p>
<p>不仅有最左前缀原则，还有索引下推。能够提前根据查询语句的字段在索引表里排除。减少回表的次数。</p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程实战之shutdown</title>
    <url>/2019-12-02-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E4%B9%8Bshutdown/</url>
    <content><![CDATA[<hr>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><h3 id="server-c"><a href="#server-c" class="headerlink" title="server.c"></a>server.c</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>    MAXLINE     4096</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sig_int</span><span class="params">(<span class="keyword">int</span> signo)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nreceived %d datagrams\n"</span>, count);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> listenfd;</span><br><span class="line">    listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line">    bzero(&amp;server_addr, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    server_addr.sin_port = htons(<span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rt1 = bind(listenfd, (struct sockaddr *) &amp;server_addr, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    <span class="keyword">if</span> (rt1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        error(<span class="number">1</span>, errno, <span class="string">"bind failed "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rt2 = listen(listenfd, <span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">if</span> (rt2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        error(<span class="number">1</span>, errno, <span class="string">"listen failed "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    signal(SIGINT, sig_int);</span><br><span class="line">    signal(SIGPIPE, SIG_IGN);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> connfd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> client_len = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((connfd = accept(listenfd, (struct sockaddr *) &amp;client_addr, &amp;client_len)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        error(<span class="number">1</span>, errno, <span class="string">"bind failed "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> message[MAXLINE];</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = read(connfd, message, MAXLINE);</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            error(<span class="number">1</span>, errno, <span class="string">"error read"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            error(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"client closed \n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        message[n] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"received %d bytes: %s\n"</span>, n, message);</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> send_line[MAXLINE];</span><br><span class="line">        <span class="built_in">sprintf</span>(send_line, <span class="string">"Hi, %s"</span>, message);</span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> write_nc = send(connfd, send_line, <span class="built_in">strlen</span>(send_line), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"send bytes: %zu \n"</span>, write_nc);</span><br><span class="line">        <span class="keyword">if</span> (write_nc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            error(<span class="number">1</span>, errno, <span class="string">"error write"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>signal(SIGINT, sig_int)    signal(SIGPIPE, SIG_IGN);</li>
</ol>
<p>sinalg将信号符号转为处理程序</p>
<h3 id="client-c"><a href="#client-c" class="headerlink" title="client.c"></a>client.c</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"lib/common.h"</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span>    MAXLINE     4096</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        error(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"usage: graceclient &lt;IPaddress&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> socket_fd;</span><br><span class="line">    socket_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line">    bzero(&amp;server_addr, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_port = htons(SERV_PORT);</span><br><span class="line">    inet_pton(AF_INET, argv[<span class="number">1</span>], &amp;server_addr.sin_addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">socklen_t</span> server_len = <span class="keyword">sizeof</span>(server_addr);</span><br><span class="line">    <span class="keyword">int</span> connect_rt = connect(socket_fd, (struct sockaddr *) &amp;server_addr, server_len);</span><br><span class="line">    <span class="keyword">if</span> (connect_rt &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        error(<span class="number">1</span>, errno, <span class="string">"connect failed "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> send_line[MAXLINE], recv_line[MAXLINE + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    fd_set readmask;</span><br><span class="line">    fd_set allreads;</span><br><span class="line"></span><br><span class="line">    FD_ZERO(&amp;allreads);</span><br><span class="line">    FD_SET(<span class="number">0</span>, &amp;allreads);</span><br><span class="line">    FD_SET(socket_fd, &amp;allreads);</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        readmask = allreads;</span><br><span class="line">        <span class="keyword">int</span> rc = select(socket_fd + <span class="number">1</span>, &amp;readmask, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (rc &lt;= <span class="number">0</span>)</span><br><span class="line">            error(<span class="number">1</span>, errno, <span class="string">"select failed"</span>);</span><br><span class="line">        <span class="keyword">if</span> (FD_ISSET(socket_fd, &amp;readmask)) &#123;</span><br><span class="line">            n = read(socket_fd, recv_line, MAXLINE);</span><br><span class="line">            <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                error(<span class="number">1</span>, errno, <span class="string">"read error"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">                error(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"server terminated \n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            recv_line[n] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">fputs</span>(recv_line, <span class="built_in">stdout</span>);</span><br><span class="line">            <span class="built_in">fputs</span>(<span class="string">"\n"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (FD_ISSET(<span class="number">0</span>, &amp;readmask)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fgets(send_line, MAXLINE, <span class="built_in">stdin</span>) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strncmp</span>(send_line, <span class="string">"shutdown"</span>, <span class="number">8</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    FD_CLR(<span class="number">0</span>, &amp;allreads);</span><br><span class="line">                    <span class="keyword">if</span> (shutdown(socket_fd, <span class="number">1</span>)) &#123;</span><br><span class="line">                        error(<span class="number">1</span>, errno, <span class="string">"shutdown failed"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(send_line, <span class="string">"close"</span>, <span class="number">5</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    FD_CLR(<span class="number">0</span>, &amp;allreads);</span><br><span class="line">                    <span class="keyword">if</span> (close(socket_fd)) &#123;</span><br><span class="line">                        error(<span class="number">1</span>, errno, <span class="string">"close failed"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    sleep(<span class="number">6</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> i = <span class="built_in">strlen</span>(send_line);</span><br><span class="line">                    <span class="keyword">if</span> (send_line[i - <span class="number">1</span>] == <span class="string">'\n'</span>) &#123;</span><br><span class="line">                        send_line[i - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"now sending %s\n"</span>, send_line);</span><br><span class="line">                    <span class="keyword">size_t</span> rt = write(socket_fd, send_line, <span class="built_in">strlen</span>(send_line));</span><br><span class="line">                    <span class="keyword">if</span> (rt &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        error(<span class="number">1</span>, errno, <span class="string">"write failed "</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"send bytes: %zu \n"</span>, rt);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>int rc = select(socket_fd + 1, &amp;readmask, NULL, NULL, NULL);</li>
</ol>
<p>select允许程序监控多个文件描述符</p>
<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>以上程序主要是为了理解关闭连接的两种方式，close和shutdown。两者有一定的区别</p>
<p>shutdown是可以关闭一方的。close关闭不一定会断开，因为要看套接字的引用是否为0.</p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第十五周第三波(只有A)</title>
    <url>/2019-12-1-ARTS%E7%AC%AC%E5%8D%81%E4%BA%94%E5%91%A8%E7%AC%AC%E4%B8%89%E6%B3%A2(%E5%8F%AA%E6%9C%89A)/</url>
    <content><![CDATA[<hr>
<p>51.n皇后</p>
<p>思路：回溯法，但是一开始让自己写还是有点写不出来，看了专栏，有了一点思路后重新写。</p>
<p>自己写不出来的部分是，知道从每一行开始遍历，但是不知道怎么保存，通过一维数组。</p>
<p>不知道怎么弄成答案的形式，通过写的过程中就有点感觉了。</p>
<p>然后感觉自己提交不会过，但是发现过了。细细一想，这个就是递归的作用。人的思维还是很难用递归的思维去想。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=51 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [51] N皇后</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; result;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; <span class="title">solveNQueens</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> chess[n];</span><br><span class="line">        calnqueens(<span class="number">0</span>,chess,n);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calnqueens</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> chess[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row==n)&#123;</span><br><span class="line">            putchess(chess,n);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> column=<span class="number">0</span>;column&lt;n;column++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isOk(row,column,chess,n))&#123;</span><br><span class="line">                chess[row]=column;</span><br><span class="line">                calnqueens(row+<span class="number">1</span>,chess,n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isOk</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> column,<span class="keyword">int</span> chess[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> leftup=column<span class="number">-1</span>,rightup=column+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=row<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(chess[i]==column) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(leftup&gt;=<span class="number">0</span>&amp;&amp;chess[i]==leftup) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(rightup&lt;n&amp;&amp;chess[i]==rightup) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            --leftup,++rightup;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">putchess</span><span class="params">(<span class="keyword">int</span> chess[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; anstmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">string</span> tmp=<span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(chess[i]!=j)&#123;</span><br><span class="line">                    tmp+=<span class="string">"."</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    tmp+=<span class="string">"Q"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            anstmp.push_back(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        result.push_back(anstmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<p>语法错误:int ans[]数组的传递，java综合征int[] ans。</p>
<p>52.n皇后2</p>
<p>相比于51，这道题更加简单，返回的是数量，不需要一个putchess</p>
<p>46.全排列</p>
<p>思路：这回是自己一个劲的撸出来。思路就是回溯，参考n皇后的思路就是拿一个数组存放这个值的位置，然后遍历所有的值。</p>
<p>在思考的过程中，也有点懂了递归。</p>
<p>第一个数选择一个位置后第二个数选择一个位置。这个过程变得是数，不变的是选择的位置。所以可以用递归。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=46 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [46] 全排列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;  result;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">permute</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oneans[nums.size()];</span><br><span class="line">        <span class="keyword">bool</span> vis[nums.size()];</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        solve(<span class="number">0</span>,oneans,nums.size(),nums,vis);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> column,<span class="keyword">int</span> oneans[],<span class="keyword">int</span> n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">bool</span> vis[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(column==n)&#123;</span><br><span class="line">            putans(oneans,n);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">                vis[i]=<span class="literal">true</span>;</span><br><span class="line">                oneans[i]=nums[column];</span><br><span class="line">                solve(column+<span class="number">1</span>,oneans,n,nums,vis);</span><br><span class="line">                vis[i]=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">putans</span><span class="params">(<span class="keyword">int</span> oneans[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            tmp.push_back(oneans[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        result.push_back(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<p>但是呢，以上我的解法效率非常低，所以我参考了题解，发现了一种更妙的写法。这种写法主要就是利用Nums载体，然后进行交换，不仅代码少，效率极高</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=46 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [46] 全排列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">permute</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        solve(nums.size(),res,nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; res,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">int</span> first)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(first==n) res.push_back(nums);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=first;i&lt;n;i++)&#123;</span><br><span class="line">            swap(nums[first],nums[i]);</span><br><span class="line">            solve(n,res,nums,first+<span class="number">1</span>);</span><br><span class="line">            swap(nums[first],nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<hr>
<p>以上是复习回溯法做的练习，回溯法可以理解为遍历所有结果。</p>
<hr>
<p>说点题外话，今天是19年的最后一个月，我想在这19年结束之前给20年的我一个礼物。期待。正在准备中，并且进度不错。</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程实战之UDP连接</title>
    <url>/2019-11-30-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E4%B9%8BUDP%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<hr>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><h3 id="server-c"><a href="#server-c" class="headerlink" title="server.c"></a>server.c</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLINE 4096</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recvfrom_int</span><span class="params">(<span class="keyword">int</span> signo)</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"nreceived %d datagrams\n"</span>, count);</span><br><span class="line">	<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> socket_fd;</span><br><span class="line">	socket_fd=socket(AF_INET,SOCK_DGRAM,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line">	bzero(&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">	server_addr.sin_family=AF_INET;</span><br><span class="line">	server_addr.sin_addr.s_addr=htonl(INADDR_ANY);</span><br><span class="line">	server_addr.sin_port=htons(<span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line">	bind(socket_fd,(struct sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">socklen_t</span> client_len;</span><br><span class="line">	<span class="keyword">char</span> message[MAXLINE];</span><br><span class="line">	count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	signal(SIGINT,recvfrom_int);</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line">	client_len=<span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">	<span class="keyword">for</span>(;;)&#123;</span><br><span class="line">		<span class="keyword">int</span> n=recvfrom(socket_fd,message,MAXLINE,<span class="number">0</span>,(struct sockaddr *)&amp;client_addr,&amp;client_len);</span><br><span class="line">		message[n]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"received %d bytes: %s\n"</span>,n,message );</span><br><span class="line">		<span class="keyword">char</span> send_line[MAXLINE];</span><br><span class="line">		<span class="built_in">sprintf</span>(send_line,<span class="string">"HI,%s"</span>,message);</span><br><span class="line"></span><br><span class="line">		sendto(socket_fd,send_line,<span class="built_in">strlen</span>(send_line),<span class="number">0</span>,(struct sockaddr *)&amp;client_addr,client_len);</span><br><span class="line"></span><br><span class="line">		count++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>socket_fd=socket(AF_INET,SOCK_DGRAM,0);</li>
</ol>
<p>这里不同于TCP这里是sock_dgram，是数据报文</p>
<ol start="2">
<li>signal(SIGINT,recvfrom_int);</li>
</ol>
<p>接受ctrl+c退出</p>
<ol start="3">
<li><a href="https://linux.die.net/man/2/recvfrom" target="_blank" rel="noopener">recvfrom(socket_fd,message,MAXLINE,0,(struct sockaddr *)&amp;client_addr,&amp;client_len);</a></li>
</ol>
<p>recvfrom函数用来接收来自socket的信息，并且可以用来接收不管是否socket是否面向连接(tcp)</p>
<p>同先前的accept一样，这里client_addr和client_len是返回参数，表示对端的地址和端口信息</p>
<ol start="4">
<li><a href="https://www.geeksforgeeks.org/sprintf-in-c/" target="_blank" rel="noopener">sprintf(send_line,”HI,%s”,message);</a></li>
</ol>
<p>用来构造一种形式send_line的形式</p>
<ol start="5">
<li><a href="https://linux.die.net/man/2/sendto" target="_blank" rel="noopener">sendto(socket_fd,send_line,strlen(send_line),0,(struct sockaddr *)&amp;client_addr,client_len);</a></li>
</ol>
<p>sendto用来发送消息给另外一个socket，消息在buf，并且有长度len。</p>
<p>当然也可以用来发送给连接状态的消息，不过这个时候client_addr为NULL，client_len为0</p>
<h3 id="client-c"><a href="#client-c" class="headerlink" title="client.c"></a>client.c</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLINE 4096</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(argc!=<span class="number">2</span>,<span class="number">0</span>)&#123;</span><br><span class="line">		error(<span class="number">1</span>,<span class="number">0</span>,<span class="string">"usage:udpclient&lt;ipaddress&gt;"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> socket_fd;</span><br><span class="line">	socket_fd=socket(AF_INET,SOCK_DGRAM,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line">	bzero(&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">	server_addr.sin_family=AF_INET;</span><br><span class="line">	server_addr.sin_port=htons(<span class="number">12345</span>);</span><br><span class="line">	inet_pton(AF_INET,argv[<span class="number">1</span>],&amp;server_addr.sin_addr);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">socklen_t</span> server_len=<span class="keyword">sizeof</span>(server_addr);</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> *<span class="title">reply_addr</span>;</span></span><br><span class="line">	reply_addr=<span class="built_in">malloc</span>(server_len);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> send_line[MAXLINE],recv_line[MAXLINE+<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">socklen_t</span> len;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(fgets(send_line,MAXLINE,<span class="built_in">stdin</span>)!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">int</span> i=<span class="built_in">strlen</span>(send_line);</span><br><span class="line">		<span class="keyword">if</span>(send_line[i<span class="number">-1</span>]==<span class="string">'\n'</span>)&#123;</span><br><span class="line">			send_line[i<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"now sending %s\n"</span>, send_line);</span><br><span class="line">		<span class="keyword">size_t</span> rt=sendto(socket_fd,send_line,<span class="built_in">strlen</span>(send_line),<span class="number">0</span>,(struct sockaddr *)&amp;server_addr,server_len);</span><br><span class="line">		<span class="keyword">if</span>(rt&lt;<span class="number">0</span>)&#123;</span><br><span class="line">			error(<span class="number">1</span>,errno,<span class="string">"send failed"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"send bytes %zu \n"</span>, rt);</span><br><span class="line"></span><br><span class="line">		len=<span class="number">0</span></span><br><span class="line">		n=recvfrom(socket_fd,recv_line,MAXLINE,<span class="number">0</span>,reply_addr,&amp;len);</span><br><span class="line">		<span class="keyword">if</span>(n&lt;<span class="number">0</span>)</span><br><span class="line">			error(<span class="number">1</span>,errno,<span class="string">"recvfrom failed"</span>);</span><br><span class="line">		recv_line[n]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fputs</span>(recv_line,<span class="built_in">stdout</span>);</span><br><span class="line">		<span class="built_in">fputs</span>(<span class="string">"\n"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>这个代码主要用来体验UDP连接跟TCP的不同。</p>
<ol>
<li>如果只启动客户端的话，并不会出现向tcp那样出现connet failed，而是会阻塞在发送消息哪里。说明不同于TCP面向连接的，其不是连接的</li>
<li>如果启动多个客户端，服务端发送的消息还是可以准确到达每个客户端。</li>
<li>如果关掉服务端，在重新启动服务端，这个时候客户端发送消息，竟然可以发送到！！这说明其是无上下文的。</li>
</ol>
<p>以上说明udp确实简单，但是需要处理丢包等情况。但是还是有很多地方会使用udp，因为tcp建立三次连接确实太耗资源了。</p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第十五周第二波(只有A)</title>
    <url>/2019-11-30-ARTS%E7%AC%AC%E5%8D%81%E4%BA%94%E5%91%A8%E7%AC%AC%E4%BA%8C%E6%B3%A2(%E5%8F%AA%E6%9C%89A)/</url>
    <content><![CDATA[<hr>
<p>1143.最长公共子序列</p>
<p>首先子序列只要求保持原来的顺序，并不要求是连续的就可以。</p>
<p>思路：动态规划</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=1143 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [1143] 最长公共子序列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(<span class="built_in">string</span> text1, <span class="built_in">string</span> text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result[text1.length()+<span class="number">1</span>][text2.length()+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;text1.length()+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            result[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;text2.length()+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            result[<span class="number">0</span>][i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=text1.length();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=text2.length();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(text1[i<span class="number">-1</span>]==text2[j<span class="number">-1</span>])&#123;</span><br><span class="line">                    result[i][j]=result[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    result[i][j]=max(result[i<span class="number">-1</span>][j],result[i][j<span class="number">-1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result[text1.length()][text2.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<p>语法错误的点：length，要明白.length表示属性，有吗？.length()表示方法</p>
<p>53.最大子序列和</p>
<p>书中这道题是最大字段和，就是一组连续的数组其和最大。</p>
<p>暴力解法的O(n^2)这里就不说了</p>
<p>思路：O(n)的思路是从左往后遍历，当前cur&lt;0,则cur=num[i] 否则cur+=num[i] 最终结果每次都要判断 ans=max(ans,cur);【这个就是动态规划法】</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=53 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [53] 最大子序和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cur=<span class="number">0</span>,ans=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                cur=nums[i];</span><br><span class="line">                ans=max(ans,cur);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans=max(ans,cur+nums[i]);</span><br><span class="line">                cur+=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<p>思路：分治的思路，想不太出来，看了一下思路，发现其实没有那么难。只是有点坑，在于有可能结果为负数，所以一开始就要存值，但是存的值middle和middle+1又不行出现一组案例 [-1,0,-2],所以就是middle然后-middle</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=53 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [53] 最大子序和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> divideandconquer(nums,<span class="number">0</span>,nums.size()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">divideandconquer</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">int</span> middle=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> leftsum=divideandconquer(nums,left,middle<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">int</span> rightsum=divideandconquer(nums,middle+<span class="number">1</span>,right);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> curleft=nums[middle];</span><br><span class="line">            <span class="keyword">int</span> tmpsum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=middle;i&gt;=left;i--)&#123;</span><br><span class="line">                tmpsum+=nums[i];</span><br><span class="line">                curleft=max(curleft,tmpsum);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> curright=nums[middle];</span><br><span class="line">            tmpsum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=middle;i&lt;=right;i++)&#123;</span><br><span class="line">                tmpsum+=nums[i];</span><br><span class="line">                curright=max(curright,tmpsum);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> anssum=max(leftsum,rightsum);</span><br><span class="line">            anssum=max(anssum,curleft+curright-nums[middle]);</span><br><span class="line">            <span class="keyword">return</span> anssum;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[left];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<p>621任务调度器</p>
<p>思路：想到是从大到小排列，但是思路并不是很清晰。</p>
<p>题解思路：首先都是从最多的任务拿出来，并且在n个内只能是其他任务或者是空任务</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">leastInterval</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&amp; tasks, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> task[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tasks.size();i++) task[tasks[i]-<span class="string">'A'</span>]++;</span><br><span class="line"></span><br><span class="line">        sort(task,task+<span class="number">26</span>);</span><br><span class="line">        <span class="keyword">int</span> time=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(task[<span class="number">25</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">                <span class="keyword">if</span>(task[<span class="number">25</span>]==<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;<span class="number">26</span>&amp;&amp;task[<span class="number">25</span>-i]&gt;<span class="number">0</span>)</span><br><span class="line">                    task[<span class="number">25</span>-i]--;</span><br><span class="line">                time++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            sort(task,task+<span class="number">26</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>122.股票的买卖时机</p>
<p>思路：通过画图有点感觉，就是连续上升，当下降的时候赶紧卖出去</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=122 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [122] 买卖股票的最佳时机 II</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.size()==<span class="number">0</span>||prices.size()==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> curbuy;</span><br><span class="line">        <span class="keyword">int</span> nowsale=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;prices.size()<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[i]&lt;prices[i+<span class="number">1</span>])&#123;</span><br><span class="line">                curbuy=prices[i];</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">while</span>(i&lt;prices.size()<span class="number">-1</span>&amp;&amp;prices[i]&lt;prices[i+<span class="number">1</span>]) i++;</span><br><span class="line">                nowsale+=prices[i]-curbuy;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nowsale;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<p>错误的点&amp;&amp; 先判断i&lt;price.size()-1 这个记得以前看语法的时候看到做&amp;&amp;是从左往后。看来得多练</p>
<p>题解提供另外一个思路</p>
<p>if(prices[i]&gt;prices[i-1]) nowsale+=prices[i]-prices[i-1]; </p>
<p>妙，只能只能这么说，因为并不是真正卖出去。</p>
<p>135.分发糖果</p>
<p>思路：先全部都是1，然后遍历判断是否比左右大，如果大是左右的糖果数+1中的最大值。</p>
<p>但是以上思路有个缺陷，因为左边的糖果会收到右边的影响，所以我的做法是从右往左在遍历一遍</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=135 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [135] 分发糖果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">candy</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ratings)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> curcandy=ratings.size();</span><br><span class="line">       <span class="keyword">int</span> tmpcandy[ratings.size()];</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ratings.size();i++)&#123;</span><br><span class="line">           tmpcandy[i]=<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ratings.size();i++)&#123;</span><br><span class="line">           <span class="keyword">int</span> rightcandy=<span class="number">1</span>,leftcandy=<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span>(i+<span class="number">1</span>&lt;ratings.size()&amp;&amp;ratings[i]&gt;ratings[i+<span class="number">1</span>])&#123;</span><br><span class="line">               rightcandy=<span class="keyword">int</span>(tmpcandy[i+<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(i<span class="number">-1</span>&gt;=<span class="number">0</span>&amp;&amp;ratings[i]&gt;ratings[i<span class="number">-1</span>])&#123;</span><br><span class="line">               leftcandy=<span class="keyword">int</span>(tmpcandy[i<span class="number">-1</span>])+<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           tmpcandy[i]=max(rightcandy,leftcandy);</span><br><span class="line">           curcandy+=tmpcandy[i]<span class="number">-1</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=ratings.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">           <span class="keyword">int</span> rightcandy=<span class="number">1</span>,leftcandy=<span class="number">1</span>,flag=<span class="number">0</span>;</span><br><span class="line">           <span class="keyword">if</span>(i+<span class="number">1</span>&lt;ratings.size()&amp;&amp;ratings[i]&gt;ratings[i+<span class="number">1</span>]&amp;&amp;tmpcandy[i]&lt;=tmpcandy[i+<span class="number">1</span>])&#123;</span><br><span class="line">               flag=<span class="number">1</span>;</span><br><span class="line">               rightcandy=tmpcandy[i+<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(i<span class="number">-1</span>&gt;=<span class="number">0</span>&amp;&amp;ratings[i]&gt;ratings[i<span class="number">-1</span>]&amp;&amp;tmpcandy[i]&lt;=tmpcandy[i<span class="number">-1</span>])&#123;</span><br><span class="line">               flag=<span class="number">1</span>;</span><br><span class="line">               leftcandy=tmpcandy[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">               curcandy-=tmpcandy[i];</span><br><span class="line">               tmpcandy[i]=max(rightcandy,leftcandy);</span><br><span class="line">               curcandy+=tmpcandy[i];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> curcandy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<p>看了官方题解，写的代码还是冗余。虽然能够解题，但是思路还是不够清晰。</p>
<p>455.分发饼干</p>
<p>思路：都从小到大排列，然后依次满足g</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=455 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [455] 分发饼干</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; g, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        sort(g.begin(),g.end());</span><br><span class="line">        sort(s.begin(),s.end());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;g.size()&amp;&amp;j&lt;s.size())&#123;</span><br><span class="line">            <span class="keyword">if</span>(g[i]&lt;=s[j])&#123;</span><br><span class="line">                num++;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<hr>
<p>以上部分是复习动态规划跟贪心法做的一些题目</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>CMake</title>
    <url>/2019-11-30-CMake/</url>
    <content><![CDATA[<hr>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>基于CMake构建系统被组织为高级逻辑目标。每一个目标对应着一个可执行或者库，或者自定义目标包含自定义命令。</p>
<h2 id="Binary-Targets"><a href="#Binary-Targets" class="headerlink" title="Binary Targets"></a>Binary Targets</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">add_library(archive archive.cpp zip.cpp lzma.cpp)</span><br><span class="line">add_executable(zipapp zipapp.cpp)</span><br><span class="line">target_link_libraries(zipapp archive)</span><br></pre></td></tr></table></figure>

<p>可执行或者库的定义通过视同add_executable()和add_library()命令</p>
<p>archive被定义为static库，archive包含的对象从archive.cpp,zip.cpp和lzma.cpp被编译。</p>
<p>zipapp定义为通过编译和链接zipapp.cpp形成的可执行文件</p>
<h2 id="Binary-Executables"><a href="#Binary-Executables" class="headerlink" title="Binary Executables"></a>Binary Executables</h2><p>add_executable()命令定义一个可执行目标</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">add_executable(mytool mytool.cpp)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程实战之套接字</title>
    <url>/2019-11-30-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A5%97%E6%8E%A5%E5%AD%97/</url>
    <content><![CDATA[<hr>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><h3 id="server-c"><a href="#server-c" class="headerlink" title="server.c"></a>server.c</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//server.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strings.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;zconf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PORT 12345</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">readn</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span> *, <span class="keyword">size_t</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_data</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> listenfd, connfd;</span><br><span class="line">    <span class="keyword">socklen_t</span> clilen;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>, <span class="title">servaddr</span>;</span></span><br><span class="line"></span><br><span class="line">    listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    bzero(&amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">    servaddr.sin_family = AF_INET;</span><br><span class="line">    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    servaddr.sin_port = htons(SERVER_PORT);</span><br><span class="line"></span><br><span class="line">    bind(listenfd, (<span class="keyword">const</span> struct sockaddr *) &amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">    listen(listenfd, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        clilen = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line">        connfd = accept(listenfd, (<span class="keyword">const</span> struct sockaddr *) &amp;cliaddr, &amp;clilen);</span><br><span class="line">        read_data(connfd);</span><br><span class="line">        close(connfd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_data</span><span class="params">(<span class="keyword">int</span> sockfd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">ssize_t</span> n;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"block in read\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> ((n = readn(sockfd, (<span class="keyword">void</span> *) buf, (<span class="keyword">size_t</span>) <span class="number">1024</span>)) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        time++;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"1K read for %d \n"</span>, time);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">readn</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">void</span> *vptr, <span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> nleft;</span><br><span class="line">    <span class="keyword">ssize_t</span> nread;</span><br><span class="line">    <span class="keyword">char</span> *ptr;</span><br><span class="line"></span><br><span class="line">    ptr = vptr;</span><br><span class="line">    nleft = size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (nleft &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((nread = read(fd, ptr, nleft)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (errno == EINTR)</span><br><span class="line">                nread = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> (<span class="number">-1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nread == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        nleft -= nread;</span><br><span class="line">        ptr += nread;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> size - nleft;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一部分一部分的讲解</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> listenfd, connfd;</span><br><span class="line">    <span class="keyword">socklen_t</span> clilen;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>, <span class="title">servaddr</span>;</span></span><br><span class="line"></span><br><span class="line">    listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    bzero(&amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">    servaddr.sin_family = AF_INET;</span><br><span class="line">    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    servaddr.sin_port = htons(SERVER_PORT);</span><br><span class="line"></span><br><span class="line">    bind(listenfd, (<span class="keyword">const</span> struct sockaddr *) &amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">    listen(listenfd, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        clilen = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line">        connfd = accept(listenfd, (<span class="keyword">const</span> struct sockaddr *) &amp;cliaddr, &amp;clilen);</span><br><span class="line">        read_data(connfd);</span><br><span class="line">        close(connfd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>sockeaddr_in</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;netinet&#x2F;in.h&gt;</span><br><span class="line"></span><br><span class="line">struct sockaddr_in &#123;</span><br><span class="line">    short            sin_family;   &#x2F;&#x2F; e.g. AF_INET</span><br><span class="line">    unsigned short   sin_port;     &#x2F;&#x2F; e.g. htons(3490)</span><br><span class="line">    struct in_addr   sin_addr;     &#x2F;&#x2F; see struct in_addr, below</span><br><span class="line">    char             sin_zero[8];  &#x2F;&#x2F; zero this if you want to</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct in_addr &#123;</span><br><span class="line">    unsigned long s_addr;  &#x2F;&#x2F; load with inet_aton()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> servaddr.sin_family &#x3D; AF_INET;</span><br><span class="line"> servaddr.sin_addr.s_addr &#x3D; htonl(INADDR_ANY);</span><br><span class="line"> servaddr.sin_port &#x3D; htons(SERVER_PORT);</span><br></pre></td></tr></table></figure>

<p>sin_family是协议族，在socket编程中是AF_XXX一般是AF_INET</p>
<p>AF_INET目的是IPv4 网络协议</p>
<p>sin_addr.s_addr表示ip地址</p>
<p><a href="https://stackoverflow.com/questions/16508685/understanding-inaddr-any-for-socket-programming" target="_blank" rel="noopener">INADDR_ANY</a>不是生成一个随机的IP，而是绑定到所有可行的接口。这样不当当绑定到localhost，如果你仅仅想要绑定到本地的话</p>
<blockquote>
<p>sin_addr.s_addr=inet_addr(“127.0.0.1”)</p>
</blockquote>
<p>sin_port表示端口</p>
<ol start="2">
<li><a href="http://man7.org/linux/man-pages/man2/socket.2.html" target="_blank" rel="noopener">listenfd = socket(AF_INET, SOCK_STREAM, 0);</a></li>
</ol>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;int socket(int domain, int type, int protocol);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>socket函数创建为交流创建一个节点，并且返回文件描述符来指向这个节点。</p>
<p>domain参数，选择一些协议族用来交流。这些协议族定义在&lt;sys/socket.h&gt;</p>
<p>type参数主要是交流语义(communication semantics)我的理解是tcp,udp。</p>
<p>SOCK_STREAM-字节流</p>
<p>SOCK_DGRAM-数据报文</p>
<ol start="3">
<li><a href="http://man7.org/linux/man-pages/man3/bzero.3.html" target="_blank" rel="noopener">bzero(&amp;servaddr, sizeof(servaddr));</a></li>
</ol>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;strings.h&gt;</span><br><span class="line"></span><br><span class="line">void bzero(void *s, size_t n);</span><br><span class="line">&#x2F;&#x2F;注意这里是strings</span><br></pre></td></tr></table></figure>
</blockquote>
<p>bzero函数通过写0(包含’\0’的字节)擦除从s指向的地方开始的n个字节的数据</p>
<p>【对地址进行置0处理，相当于初始化，否则地址就是错的】</p>
<ol start="4">
<li><a href="http://man7.org/linux/man-pages/man2/bind.2.html" target="_blank" rel="noopener">bind(listenfd, (const struct sockaddr *) &amp;servaddr, sizeof(servaddr));</a></li>
</ol>
<p>一般来说bind函数被叫做指定一个名字给socket</p>
<p>bind()分配由addr指定的地址，并且由文件描述符sockfd指定.</p>
<ol start="5">
<li><a href="http://man7.org/linux/man-pages/man2/accept.2.html" target="_blank" rel="noopener">connfd = accept(listenfd, (const struct sockaddr *) &amp;cliaddr, &amp;clilen);</a></li>
</ol>
<p>可能有疑惑cliaddr只是声明了并没有定义，这里怎么用？</p>
<blockquote>
<p>首先这个是accept的输出参数，相当于输出这个函数，可以告知连接上来的客户端的信息如ip</p>
</blockquote>
<h3 id="client-c"><a href="#client-c" class="headerlink" title="client.c"></a>client.c</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strings.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MESSAGE_SIZE 1024000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PORT 12345</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_ADDR <span class="meta-string">"127.0.0.1"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">send_data</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sockfd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line"></span><br><span class="line">    sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    bzero(&amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">    servaddr.sin_family = AF_INET;</span><br><span class="line">    servaddr.sin_port = htons(SERVER_PORT);</span><br><span class="line">    inet_pton(AF_INET, SERVER_ADDR, &amp;servaddr.sin_addr);</span><br><span class="line">    connect(sockfd, (<span class="keyword">const</span> struct sockaddr *) &amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">    send_data(sockfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">send_data</span><span class="params">(<span class="keyword">int</span> sockfd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *query;</span><br><span class="line">    query = <span class="built_in">malloc</span>(MESSAGE_SIZE + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MESSAGE_SIZE; i++) &#123;</span><br><span class="line">        query[i] = <span class="string">'a'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    query[MESSAGE_SIZE] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *cp;</span><br><span class="line">    cp = query;</span><br><span class="line">    <span class="keyword">long</span> remaining = (<span class="keyword">long</span>) <span class="built_in">strlen</span>(query);</span><br><span class="line">    <span class="keyword">while</span> (remaining) &#123;</span><br><span class="line">        <span class="keyword">long</span> n_written = send(sockfd, cp, remaining, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"send into buffer %ld \n"</span>, n_written);</span><br><span class="line">        <span class="keyword">if</span> (n_written &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">"send"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        remaining -= n_written;</span><br><span class="line">        cp += n_written;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><a href="http://man7.org/linux/man-pages/man3/inet_pton.3.html" target="_blank" rel="noopener">inet_pton(AF_INET, SERVER_ADDR, &amp;servaddr.sin_addr);</a></li>
</ol>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;arpa&#x2F;inet.h&gt;</span><br><span class="line">int inet_pton(int af, const char *src, void *dst);</span><br><span class="line"></span><br><span class="line">his function converts the character string src into a network</span><br><span class="line">      address structure in the af address family, then copies the network</span><br><span class="line">      address structure to dst.  The af argument must be either AF_INET or</span><br><span class="line">      AF_INET6.  dst is written in network byte order.</span><br></pre></td></tr></table></figure>
</blockquote>
<p>相当于把stc装换位网络格式赋值给dst</p>
<h2 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">write</span> <span class="params">(<span class="keyword">int</span> socketfd, <span class="keyword">const</span> <span class="keyword">void</span> *buffer, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">send</span> <span class="params">(<span class="keyword">int</span> socketfd, <span class="keyword">const</span> <span class="keyword">void</span> *buffer, <span class="keyword">size_t</span> size, <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sendmsg</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct msghdr *msg, <span class="keyword">int</span> flags)</span></span></span><br></pre></td></tr></table></figure>

<h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">read</span> <span class="params">(<span class="keyword">int</span> socketfd, <span class="keyword">void</span> *buffer, <span class="keyword">size_t</span> size)</span></span></span><br></pre></td></tr></table></figure>

<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>这个例子主要是使用套接字进行交流。</p>
<p>首先启动服务端监听端口，然后客户端连接上。</p>
<p>但是客户端调用程序，发送数据，并不会马上发送到服务端【也就是说不是到了服务端才叫发送成功】而是发送到操作系统的发送缓冲区为该套接字描述符特意划分的区域。并且当数据全部写到发送缓冲区就表示发送完成。这个时候服务端总是不断的读取发送缓冲区里的数据。</p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>每周英文阅读</title>
    <url>/2019-11-30-%E6%AF%8F%E5%91%A8%E8%8B%B1%E6%96%87%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<hr>
<h2 id="Java组合、委托"><a href="#Java组合、委托" class="headerlink" title="Java组合、委托"></a>Java组合、委托</h2><p><a href="https://www.geeksforgeeks.org/delegation-vs-inheritance-java/" target="_blank" rel="noopener">简单讲了委托跟继承的区别</a></p>
<p><a href="https://www.javaworld.com/article/2077357/delegates.html" target="_blank" rel="noopener">这一篇也介绍了委托</a></p>
<p>看文章发现不懂java的组合和委托【好像平时没有用过】。</p>
<p>看了一些文章，有点理解了</p>
<p>组合：就是在一个类中定义另一个类的实例</p>
<p>委托：当一个请求发送给object 1,object1有两个做法，一是处理该请求，二是将请求转发给object2【通过组成在object1类中的实例对象】来处理。后者这个就讲做委托。</p>
<p>应用：可以通过接口【提供方法】+组合+委托实现继承(is-a)</p>
<h2 id="javaStream"><a href="#javaStream" class="headerlink" title="javaStream"></a>javaStream</h2><p><a href="https://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/" target="_blank" rel="noopener">java8</a></p>
<p>看了一些资料写了一篇<a href="[https://xuxiaojin.com/2019/11/27/java8%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9lambda-stream/](https://xuxiaojin.com/2019/11/27/java8的一些知识点lambda-stream/)">博文</a></p>
]]></content>
      <tags>
        <tag>英文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第十五周(只有A)</title>
    <url>/2019-11-29-ARTS%E7%AC%AC%E5%8D%81%E4%BA%94%E5%91%A8(%E5%8F%AA%E6%9C%89A)/</url>
    <content><![CDATA[<hr>
<p>704二分查找</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=nums.size()<span class="number">-1</span>,middle;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            middle=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[middle]==target) <span class="keyword">return</span> middle;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[middle]&gt;target)&#123;</span><br><span class="line">                r=middle<span class="number">-1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l=middle+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>犯错的点：l&lt;=r因为会出现只有一个数字的情况</p>
<p>542矩阵</p>
<p>自己的思路：动态规划，最小的肯定是四周的加1，但是如何表示四周，因为四周并不确定。</p>
<p>题解的思路：遍历两遍，第一遍从上到下，从左到右 跟上比，跟左比【因为此时上跟左都是已经确定的】第二遍从下到上，从右到做，跟下比，跟右比</p>
<p>【只能感叹，太妙了】</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=542 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [542] 01 矩阵</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">updateMatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;matrix)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = matrix.size();</span><br><span class="line">        <span class="keyword">if</span> (row == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> matrix;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> col = matrix[<span class="number">0</span>].size();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dis</span><span class="params">(row, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col, INT_MAX - <span class="number">100000</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>)</span><br><span class="line">                    dis[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">                        dis[i][j] = min(dis[i][j], dis[i - <span class="number">1</span>][j]+<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (j &gt; <span class="number">0</span>)</span><br><span class="line">                        dis[i][j] = min(dis[i][j], dis[i][j - <span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = row - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = col - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>)</span><br><span class="line">                    dis[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &lt; row - <span class="number">1</span>)</span><br><span class="line">                        dis[i][j] = min(dis[i][j], dis[i + <span class="number">1</span>][j]+<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (j &lt; col - <span class="number">1</span>)</span><br><span class="line">                        dis[i][j] = min(dis[i][j], dis[i][j + <span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<p>912 排序数组</p>
<p>第一种方法：归并排序(合并排序)</p>
<p>思路：知道是先分在合，但是有点没有思路不知道从哪里分开始，然后check一下函数，分通过if，然后按中间开始分，最后分完之后合并。合并的代码是自己一个个写出来的。</p>
<p>【tips：语法拼写，认真点，不要手误】</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=912 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [912] 排序数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sortArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        mergesort(nums,<span class="number">0</span>,nums.size()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">int</span> middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">            mergesort(nums,left,middle);</span><br><span class="line">            mergesort(nums,middle+<span class="number">1</span>,right);</span><br><span class="line">            merge(nums,left,middle,right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">int</span> left,<span class="keyword">int</span> middle,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temparray;</span><br><span class="line">        <span class="keyword">int</span> i=left,j=middle+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=middle&amp;&amp;j&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&lt;=nums[j])&#123;</span><br><span class="line">                temparray.push_back(nums[i]);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temparray.push_back(nums[j]);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=middle)&#123;</span><br><span class="line">            temparray.push_back(nums[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;=right)&#123;</span><br><span class="line">            temparray.push_back(nums[j++]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=left;k&lt;=right;k++)&#123;</span><br><span class="line">            nums[k]=temparray[k-left];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<p>快速排序：好久没写，还真的写不出来，有点忘了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sortArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        quickSort(nums, <span class="number">0</span>, nums.size() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(right&lt;=left) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">int</span> middle=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        swap(nums[right],nums[middle]);</span><br><span class="line">        <span class="keyword">int</span> t=left;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=left;i&lt;right;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&lt;nums[right])&#123;</span><br><span class="line">                swap(nums[t++],nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums[t],nums[right]);</span><br><span class="line">        quickSort(nums,left,t<span class="number">-1</span>);</span><br><span class="line">        quickSort(nums,t+<span class="number">1</span>,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>215数组中的第K个最大元素</p>
<p>思路是：线性时间选择，但是写起来，还是不太会实现</p>
<p>主要是将数组分隔成两个部分，然后判断目标是在那一部分，然后继续排序那一个部分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=215 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [215] 数组中的第K个最大元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> select(nums,<span class="number">0</span>,nums.size()<span class="number">-1</span>,nums.size()-k+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left==right) <span class="keyword">return</span> nums[left];</span><br><span class="line">        <span class="keyword">int</span> cut=partition(nums,left,right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> currenttarget=cut-left+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(currenttarget==target) <span class="keyword">return</span> nums[cut];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(currenttarget&gt;target) <span class="keyword">return</span> select(nums,left,cut<span class="number">-1</span>,target);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> select(nums,cut+<span class="number">1</span>,right,target-currenttarget);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> key=nums[right];</span><br><span class="line">        <span class="keyword">int</span> t=left;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=left;i&lt;right;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&lt;key)&#123;</span><br><span class="line">                swap(nums[i],nums[t]);</span><br><span class="line">                t++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums[t],nums[right]);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<p>658.找到K个最接近的元素</p>
<p>思路：昨天晚上看题是没有思路，虽然看了tag是二分法，但是还是没有思路，然后参考了题解，我去有点漂亮，但是我还是留了一晚上，到第二天早上自己写一遍。</p>
<p>三种情况</p>
<p>1.如果x&lt;=arr[0] 是0-k-1个</p>
<p>2.如果x&gt;=arr[arr.size()-1] 就是最后k个</p>
<p>3.找到比x略大的数(判断条件 arr[index]&gt;=x &amp;&amp;arr[index-1]&lt;=x) 然后从中间向两边转移。</p>
<p>碰到的问题就是count有的时候会不到k，所以应该不用count去算，而是使用result.size直接来，这样就不会碰到结果不满足k的答案。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=658 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [658] 找到 K 个最接近的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">findClosestElements</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=arr[<span class="number">0</span>])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">                result.push_back(arr[i]);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;=arr[arr.size()<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=arr.size()-k;i&lt;arr.size();i++)</span><br><span class="line">                result.push_back(arr[i]);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//首先找到比x略微大一点的元素下标</span></span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>,right=arr.size()<span class="number">-1</span>,middle;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            middle=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[middle]&gt;=x&amp;&amp;arr[middle<span class="number">-1</span>]&lt;=x)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[middle]&gt;x)&#123;</span><br><span class="line">                right=middle<span class="number">-1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left=middle+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> low=middle<span class="number">-1</span>,height=middle;</span><br><span class="line">        <span class="keyword">while</span>(low&gt;=<span class="number">0</span>&amp;&amp;height&lt;arr.size()&amp;&amp;result.size()&lt;k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(x-arr[low])&lt;=<span class="built_in">abs</span>(arr[height]-x))&#123;</span><br><span class="line">                result.push_back(arr[low]);</span><br><span class="line">                low--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                result.push_back(arr[height]);</span><br><span class="line">                height++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(result.size()&lt;k&amp;&amp;low&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            result.push_back(arr[height++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(result.size()&lt;k&amp;&amp;height&gt;=arr.size())&#123;</span><br><span class="line">            result.push_back(arr[low--]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(result.begin(),result.end());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<hr>
<p>以上内容是复习算法的第二章过程中所练习的题目。</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>java8的一些知识点lambda、stream</title>
    <url>/2019-11-27-java8%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9lambda%E3%80%81stream/</url>
    <content><![CDATA[<hr>
<h2 id="接口的默认方法"><a href="#接口的默认方法" class="headerlink" title="接口的默认方法"></a>接口的默认方法</h2><p>上次学到接口只能定义方法，不能定义方法的实现。通过implementations来实现该方法。Java8允许使用default来定义一个非抽象的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Formula</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了定义一个calculate的抽象方法，还定义了一个默认的sqrt方法，所以必须实现calculate的方法，默认方法sqrt可以使用在外部。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Formula formula=<span class="keyword">new</span> Formula() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">double</span> calculate(<span class="keyword">int</span> a) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="built_in">sqrt</span>(a*<span class="number">100</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       System.out.println(formula.calculate(<span class="number">100</span>));</span><br><span class="line">       formula.<span class="built_in">sqrt</span>(<span class="number">16</span>);</span><br></pre></td></tr></table></figure>

<p>这个代码来看不是很简洁，下面在java8中我们可以看到比较简洁的实现方法。</p>
<h2 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h2><p>以前版本的java是通过如下对一个string的list进行排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; names=Arrays.asList(<span class="string">"peter"</span>,<span class="string">"anna"</span>,<span class="string">"mike"</span>,<span class="string">"xenia"</span>);</span><br><span class="line">      Collections.sort(names, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>

<p>这里我们在深入学习下<a href="https://beginnersbook.com/2013/12/java-string-compareto-method-example/" target="_blank" rel="noopener">compareTo</a></p>
<p>compareTo主要是为了比较字符串，通过将字符串转为unicode，然后进行比较，如果两者一样返回0，如果前者大于后者返回正数否者返回负数。以上这个例子是从小到大排列。</p>
<p>当然可以通过lambda表达式来重写上面的compareTo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(names,(String a,String b)-&gt;&#123;</span><br><span class="line">           <span class="keyword">return</span> a.compareTo(b);</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure>

<p>并且还可以更简洁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(names,(String a,String b)-&gt;a.compareTo(b));</span><br></pre></td></tr></table></figure>

<p>而且java编译器会自动识别参数的类型，所以你能够省略掉这个参数类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(names,( a,b)-&gt;a.compareTo(b));</span><br></pre></td></tr></table></figure>

<h2 id="函数型接口"><a href="#函数型接口" class="headerlink" title="函数型接口"></a>函数型接口</h2><p>每一个lambda对匹配一个给定的类型，一个被叫做函数型接口必须确切办好一个抽象方法的声明每一个lambda表达式会匹配这个抽象方法，因为default方法不是抽象，所以你可以在函数型接口里添加default方法。</p>
<p>我们可以使用任意的(arbitrary)的接口作为lambda表达式，只要其只有一个抽象方法，为了让自己的接口符合这种条件，你可以添加@FunctiionalInterface注解。编译器会认识该注解，并且当你添加两个抽象方法的声明时，会报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">F</span>,<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">convert</span><span class="params">(F from)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> Converter&lt;String,Integer&gt; converter=from -&gt; Integer.valueOf(from);</span><br><span class="line">        Integer converted=converter.convert(<span class="string">"123"</span>);</span><br><span class="line">        System.out.println(converted);</span><br></pre></td></tr></table></figure>

<p>看这个例子，我刚刚想了一下，为什么只有一个抽象方法，因为lambda表达式为了让编译器自动识别类型，所以最好是只有一个抽象方法，这样相当于重写就是写该方法。然后可以不用传入参数的类型，只需要传入形参的名字，然后通过-&gt;这边就是写方法体。</p>
<p>相当于文中重写了convert这个抽象方法。</p>
<h2 id="方法和结构体引用"><a href="#方法和结构体引用" class="headerlink" title="方法和结构体引用"></a>方法和结构体引用</h2><p>上面这个例子，如果使用static方法的引用将会更加简便。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Converter&lt;String,Integer&gt; converter=Integer::valueOf;</span><br></pre></td></tr></table></figure>

<p>java8允许你通过使用::关键字来传递方法或者结构体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Something</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">startsWith</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(s.charAt(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> Something something=<span class="keyword">new</span> Something();</span><br><span class="line">       Converter&lt;String,String&gt; converter=something::startsWith;</span><br><span class="line">       String converted=converter.convert(<span class="string">"JAVA"</span>);</span><br><span class="line">       System.out.println(converted);</span><br></pre></td></tr></table></figure>

<h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2><p>简单将就是，没有对象名的类，一般我们使用一个类的方法都是通过定一个该类的对象引用，但是也可以通过new Object().method</p>
<p><a href="https://www.tutorialspoint.com/Anonymous-object-in-Java" target="_blank" rel="noopener">Anonymous object in Java</a></p>
<h2 id="Lambda范围"><a href="#Lambda范围" class="headerlink" title="Lambda范围"></a>Lambda范围</h2><ol>
<li>可以访问final变量</li>
<li>可以访问static变量，并且可以修改</li>
<li><strong>不能访问接口的默认方法</strong>[default]</li>
</ol>
<h2 id="Java-8-Stream-Tutorial"><a href="#Java-8-Stream-Tutorial" class="headerlink" title="Java 8 Stream Tutorial"></a>Java 8 Stream Tutorial</h2><p>Stream这个听起来跟InputStream和OutputStream有点像，但是其实两个是完全不同的东西</p>
<h3 id="Stream是怎么工作的"><a href="#Stream是怎么工作的" class="headerlink" title="Stream是怎么工作的"></a>Stream是怎么工作的</h3><p>Stream是一组连续的元素，并且提供在这些元素上提供不同的操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; myList= Arrays.asList(<span class="string">"A1"</span>,<span class="string">"B2"</span>,<span class="string">"C3"</span>,<span class="string">"c1"</span>);</span><br><span class="line"></span><br><span class="line">      myList.stream()</span><br><span class="line">              .filter(s-&gt;s.startsWith(<span class="string">"c"</span>))</span><br><span class="line">              .map(String::toUpperCase)</span><br><span class="line">              .sorted()</span><br><span class="line">              .forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>[这些其实以前都用过，但是完全不知道是啥]</p>
<p>补充一个知识点<a href="https://www.geeksforgeeks.org/stream-map-java-examples/" target="_blank" rel="noopener">map()</a></p>
<p>相当于将元素拿进去执行一下，在返回.</p>
<h3 id="不同类型的Stream"><a href="#不同类型的Stream" class="headerlink" title="不同类型的Stream"></a>不同类型的Stream</h3><p>一般来说stream用的比较多的是在collection这里，而且提供Stream()和ParallelStream()两种</p>
<p>也可以通过调用stream.of()，不需要构造一个list或者其他collections。</p>
<p>而且java8还为基本数据类型中的int、long、double提供一些特殊的stream，IntStream、LongStream、DoubleStream</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IntStream.range(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">               .forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>这段代码跟python有点像哦</p>
<h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>首先来看一段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>)</span><br><span class="line">               .filter(s-&gt;&#123;</span><br><span class="line">                   System.out.println(<span class="string">"filter:"</span>+s);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure>

<p>这段代码什么都不会输出，这是因为中间操作只有在终止操作存在时才会执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> Stream.of(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>)</span><br><span class="line">                .filter(s-&gt;&#123;</span><br><span class="line">                    System.out.println(<span class="string">"filter:"</span>+s);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">filter:<span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">filter:<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">filter:<span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>这段代码就会输出。</p>
<p>继续来看这段代码的输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  Stream.of(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>)</span><br><span class="line">                .map(s-&gt;&#123;</span><br><span class="line">                   System.out.println(<span class="string">"map "</span>+s);</span><br><span class="line">                   <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">                &#125;)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">map a</span><br><span class="line">A</span><br><span class="line">map b</span><br><span class="line">B</span><br><span class="line">map c</span><br><span class="line">C</span><br></pre></td></tr></table></figure>

<p> 所以我们有理由相信这个的执行顺序是s先到Map里然后到forEach，说明全程只有一个s</p>
<h4 id="为什么顺序很重要"><a href="#为什么顺序很重要" class="headerlink" title="为什么顺序很重要"></a>为什么顺序很重要</h4><p>来看一下下面两段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</span><br><span class="line">                .map(s-&gt;&#123;</span><br><span class="line">                    System.out.println(<span class="string">"map "</span>+s);</span><br><span class="line">                    <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">                &#125;)</span><br><span class="line">                .filter(s-&gt;&#123;</span><br><span class="line">                    System.out.println(<span class="string">"fillter "</span>+s);</span><br><span class="line">                    <span class="keyword">return</span> s.startsWith(<span class="string">"A"</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                .forEach(s-&gt;System.out.println(<span class="string">"ForEach "</span>+s));</span><br><span class="line"></span><br><span class="line">map d2</span><br><span class="line">fillter D2</span><br><span class="line">map a2</span><br><span class="line">fillter A2</span><br><span class="line">ForEach A2</span><br><span class="line">map b1</span><br><span class="line">fillter B1</span><br><span class="line">map b3</span><br><span class="line">fillter B3</span><br><span class="line">map c</span><br><span class="line">fillter C</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</span><br><span class="line">                .filter(s-&gt;&#123;</span><br><span class="line">                    System.out.println(<span class="string">"fillter "</span>+s);</span><br><span class="line">                    <span class="keyword">return</span> s.startsWith(<span class="string">"a"</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                .map(s-&gt;&#123;</span><br><span class="line">                    System.out.println(<span class="string">"map "</span>+s);</span><br><span class="line">                    <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">                &#125;)</span><br><span class="line">                .forEach(s-&gt;System.out.println(<span class="string">"ForEach "</span>+s));</span><br><span class="line"></span><br><span class="line">fillter d2</span><br><span class="line">fillter a2</span><br><span class="line">map a2</span><br><span class="line">ForEach A2</span><br><span class="line">fillter b1</span><br><span class="line">fillter b3</span><br><span class="line">fillter c</span><br></pre></td></tr></table></figure>

<p>这两段代码的差别就在map的调用次数，相比于第一个map调用的次数减少了。</p>
<p>所以有时候，顺序能够决定性能。</p>
<h3 id="重复使用streams"><a href="#重复使用streams" class="headerlink" title="重复使用streams"></a>重复使用streams</h3><p>记住java8中的stream是不可以被重复使用，只要你调用终止操作后，stream就会被关闭</p>
<h3 id="其他一些操作"><a href="#其他一些操作" class="headerlink" title="其他一些操作"></a>其他一些操作</h3><h4 id="Collect"><a href="#Collect" class="headerlink" title="Collect"></a>Collect</h4><p>这是一个比较有用的终止操作，能够将stream里面的元素转为List、set或者Map</p>
<p>我刚刚看了还有许多操作，例如groupby,avage,sum等等，有点帅。</p>
<p>####flagmap</p>
<h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><hr>
<p>以上内容就是关于java 8里面的一部分知识。</p>
<p>以后可以有意识的写stream。确实可以简化代码。</p>
<h2 id="说点题外话"><a href="#说点题外话" class="headerlink" title="说点题外话"></a>说点题外话</h2><p>其实很早就碰到stream但是一直没学，一直拖到现在才去了解。以后执行力要高点才行哦。</p>
<p>不懂就学。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/" target="_blank" rel="noopener">Java 8 Stream Tutorial</a></p>
<p><a href="https://winterbe.com/posts/2014/03/16/java-8-tutorial/" target="_blank" rel="noopener">Java 8 Tutorial</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>PYTHON基础知识</title>
    <url>/2019-11-23-PYTHON%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<hr>
<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><h2 id="函数-gt-装饰器"><a href="#函数-gt-装饰器" class="headerlink" title="函数-&gt;装饰器"></a>函数-&gt;装饰器</h2><ul>
<li>函数是对象，可以将函数赋予给变量</li>
<li>可以将函数当做参数，传入另一个函数中</li>
<li>可以在函数里定义一个新的函数，即函数嵌套</li>
<li>函数的返回值可以是函数对象</li>
</ul>
<h2 id="简单的装饰器"><a href="#简单的装饰器" class="headerlink" title="简单的装饰器"></a>简单的装饰器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'wrapper of decorator'</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello world'</span>)</span><br><span class="line">   </span><br><span class="line">greet=my_decorator(greet)</span><br><span class="line"></span><br><span class="line">greet()</span><br><span class="line"></span><br><span class="line"><span class="comment">#优雅的版本</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'wrapper of decorator'</span>)</span><br><span class="line">        func()</span><br><span class="line">     <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello world'</span>)</span><br><span class="line">    </span><br><span class="line">greet()</span><br></pre></td></tr></table></figure>

<h3 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(message)</span>:</span></span><br><span class="line">        print(<span class="string">'wrapper of decorator'</span>)</span><br><span class="line">        func(message)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(message)</span>:</span></span><br><span class="line">    print(message)</span><br><span class="line">greet(<span class="string">'hello world'</span>)</span><br></pre></td></tr></table></figure>

<p>接收任意数量和类型的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'wrapper of decorator'</span>)</span><br><span class="line">        func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<h3 id="带自定义参数的装饰器"><a href="#带自定义参数的装饰器" class="headerlink" title="带自定义参数的装饰器"></a>带自定义参数的装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeat</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">                print(<span class="string">"wrapper of decorator"</span>)</span><br><span class="line">                func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> my_decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@repeat(4)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(message)</span>:</span></span><br><span class="line">    print(message)</span><br><span class="line"></span><br><span class="line">greet(<span class="string">'hello world'</span>)</span><br></pre></td></tr></table></figure>

<p>【保留原函数的原信息，使用内置的装饰器 @functools.wrap】</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        request=args[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> check_user_logged_in(request):</span><br><span class="line">            <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">'Authentication failed'</span>)</span><br><span class="line">     <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@authenticate</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_comment</span><span class="params">(request,..)</span></span></span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础知识</title>
    <url>/2019-11-20-CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<hr>
<h1 id="学习CSS布局"><a href="#学习CSS布局" class="headerlink" title="学习CSS布局"></a>学习CSS布局</h1><h2 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h2><p>几乎每个元素都有display这个属性，大多数的默认值为block和inline。</p>
<ul>
<li>block元素通常被叫做块级元素</li>
<li>inline元素通常被叫做行内元素</li>
</ul>
<h3 id="block"><a href="#block" class="headerlink" title="block"></a>block</h3><p>div就是一个标准的块级元素，一个块级元素会新开始一行，并且尽可能充满容器。常用的块级元素p,form还有header footer section</p>
<h3 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h3><p>span就是一个标准的行内元素，一个行内元素可以在段落中，包裹一些文字而不会打乱段落的布局。a元素也是常见的行内元素。【但是不能对一个inline的元素在top或者bottom的padding或者margin添加一个Height。</p>
<h3 id="inline-1"><a href="#inline-1" class="headerlink" title="inline"></a>inline</h3><p>你可以把它看成是轻量的inline，可以添加四个方向的padding和margin。常用来做导航栏</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>home<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>about us<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>clients<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>contact<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nav</span>&#123;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#f0b27a</span>;</span><br><span class="line">     <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">     <span class="attribute">list-style-type</span>: none;</span><br><span class="line">     <span class="attribute">text-align</span>: center;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.nav</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">     <span class="attribute">display</span>: inline-block;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">     <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span><br><span class="line">     <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="none"><a href="#none" class="headerlink" title="none"></a>none</h3><p>表示不删除元素的情况下隐藏或显示元素，相比于visibility:hidden来说，它不占据空间</p>
<p>##margin:auto;</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置一个width可以防止它从左到右占据整个空间，然后你就可以设置左右边距为auto，来平分你剩下的宽度，来使其居中。</p>
<p>元素会占据你指定的宽度，剩下的宽度会一分为二成为其外边距。</p>
<p>##max-width</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="attribute">max-width</span>:<span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>max-width可以使得width来更好的处理小屏幕的问题。</p>
<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>当你设置了元素的宽度，但是实际展示的效果却超过了你的设置，这是因为元素的边框和内边距会撑开元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.simple</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fancy</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">20px</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border-width</span>:<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h2><p>如果设置一个元素为box-sizing:border-box时，此元素的内边距和边框不再增加它的宽度。</p>
<h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><p>可以用来制作许多复杂的布局</p>
<h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.static</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:static</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>static是默认值，任意position:static不会被特殊的定位</p>
<h3 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h3><p>如果一个position不设置其他属性，那么表现得跟static一样。当添加top、right、bottom和left属性会使其偏离其正常的位置，其他元素的位置则不会受该元素的影响发生位置改变来补上它留下的的空隙。</p>
<h3 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h3><p>相对视图(浏览器窗口)来定位，意味着随着滚动条的滑动，它还是会停留在相同的位置，看起来就像是固定在那里一样。</p>
<p>一个固定定位的元素不会保留其在页面内应有的空隙(脱离文档流)</p>
<h2 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h2><p>absolute和fixed表现差不多，但是其是相对最近的positioned的父元素，如果其父元素都是通过static描述的position，那就会相对于body。会随着页面滚动而滚动。【一个positioned的元素是指position不是static的元素】</p>
<h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><p>另一个常用的布局是float，可以显示文字环绕图片</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:right;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">1em</span> <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h2><p>用来控制浮动</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>...<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上这段代码看到的是section在box旁边，其实就是section不是我们看到的DOM结构上</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-after</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>:left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码加上去，section就移动到box下方</p>
<h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>在使用浮动的时候会碰到，浮动的元素比包含它的元素要高，于是就溢出到了容器外面</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>:auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="百分比宽度"><a href="#百分比宽度" class="headerlink" title="百分比宽度"></a>百分比宽度</h2><p>百分比是一种相对于包含块的计量单位，对图片很有用</p>
<h2 id="inline-block"><a href="#inline-block" class="headerlink" title="inline-block"></a>inline-block</h2><p>可以通过inline-block来创建许多表格</p>
<h1 id="Flex布局教程"><a href="#Flex布局教程" class="headerlink" title="Flex布局教程"></a>Flex布局教程</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>任何一个容器都可以指定为Flex布局，行内元素也可以使用Flex布局</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:flex</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【当设为Flex布局以后，子元素的float、clear和vertical-align属性将失效】</p>
<p>采用Flex布局的元素，被称为元素，其有主轴和交叉轴，Flex项目[容器的内部子元素],默认沿着主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size</p>
<h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p>该属性决定主轴的方向，即项目的排列方向</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>:row|row-reverse|column|column-reverse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h4><p>默认情况下，项目都排列在同一个轴线上，flex-wrap定义如果一条轴线排不下，如何换行</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">flex-wrap</span>:nowrap|warp|wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>nowarp(默认):不换行</li>
<li>wrap：换行，第一行在上方</li>
<li>wrap-reverse:换行，第一行在下方</li>
</ul>
<h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><p>flex-flow是flex-direction和flex-wrap属性的简写形式，默认值是row nowrap</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">flex-flow</span>:flex-direction||flex-warp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h4><p>justify-content属性定义了项目在主轴上的对齐方式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">justify-content</span>:flex-start|flex-end|center|space-between|space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>flex-start(默认):左对齐</li>
<li>flex-end:右对齐</li>
<li>center:居中</li>
<li>space-between:两端对齐，项目之间的间隔都相等</li>
<li>space-around:每个项目两侧的间隔相等。</li>
</ul>
<h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p>align-items属性定义了项目在交叉轴上如何对齐</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">align-items</span>:flex-start|flex-end|center|baseline|stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">order</span>:&lt;integer&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h4><p>定义项目的放大比例，默认是0，即如果存在剩余空间，也不放大。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>:&lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果所有元素都是1，那么他们将平分剩余空间，如果flex-grow的值为2那么它比其他元素占据的剩余空间多一倍。</p>
<h4 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h4><p>定义项目的缩小比例，默认是1，即空间不足时，该项目将缩小</p>
<p>如果所有项目的flex-shrink都是1，那么空间不足时，都将等比例缩小，如果一个项目的flex-shrink的值为0时，其他项目都为1，则空间不足时，前者不缩小。</p>
<h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><p>允许当个项目和其他项目有不一样的对其方式，可覆盖align-items【定义在交叉轴上如何对齐】</p>
<h1 id="Grid网格布局"><a href="#Grid网格布局" class="headerlink" title="Grid网格布局"></a>Grid网格布局</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>采用网格布局的区域，称为容器，容器内部采用网格定位的子元素，称为项目[这个跟flex有点像]</p>
<p>【项目只能是容器的顶层子元素，不包含项目的子元素】</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="容器属性-1"><a href="#容器属性-1" class="headerlink" title="容器属性"></a>容器属性</h3><h4 id="display"><a href="#display" class="headerlink" title="display"></a>display</h4><p>display指定一个容器采用网格布局</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>[默认情况下，容器元素都是块级元素，但也可以设成行内元素]</p>
<p>【当设为网格布局以后，容器子元素的float,display:inline-block,display:table-cell,vertical-align和column-*等设置都将失效】</p>
<p>当定义成网格布局后，就要来划分行和列</p>
<p>####grid-template-columns和grid-template-rows</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>:<span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>:<span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>grid-template-columns定义的是列宽</li>
<li>grid-template-rows定义的是行高</li>
</ul>
<p>这里还有很多参数</p>
<h4 id="grid-row-gap-grid-column-gap-grid-gap"><a href="#grid-row-gap-grid-column-gap-grid-gap" class="headerlink" title="grid-row-gap grid-column-gap grid-gap"></a>grid-row-gap grid-column-gap grid-gap</h4><p>grid-gap是grid-row-gap(行间距)和grid-column-gap(列间距)的简写</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://zh.learnlayout.com/toc.html" target="_blank" rel="noopener">学习CSS布局</a></p>
<p><a href="https://medium.com/@DaphneWatson/css-display-properties-block-inline-and-inline-block-how-to-tell-the-difference-7d3a1e6e3051" target="_blank" rel="noopener">block,inline,and inline-block</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">网格属性</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">flex属性</a></p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础知识</title>
    <url>/2019-11-15-java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<hr>
<h1 id="Java基础知识"><a href="#Java基础知识" class="headerlink" title="Java基础知识"></a>Java基础知识</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>8中基本数据类型：boolean、byte、short、char、int、float、double、long</p>
<p>byte取值范围2^7  一个字节</p>
<p>short取值范围2^15  两个字节</p>
<p>int取值范围2^31  四个字节</p>
<p>long取值范围2^63  八个字节</p>
<p>浮点型：用来表示实数的一种方式，解决了定点数表示的范围比较小的问题。</p>
<ul>
<li>单精度：用32位来表示浮点型</li>
<li>双精度：用64位来表示浮点型</li>
<li>浮点型会精度缺失，例如 0.1表示出来的就会缺失，所以不能用来表示金额。解决缺失可以使用一个Khan算法，每次将缺失的值累加起来。</li>
</ul>
<h2 id="自动拆装箱"><a href="#自动拆装箱" class="headerlink" title="自动拆装箱"></a>自动拆装箱</h2><p>在java中泛型面对的是对象，所以基本数据类型无法使用在泛型里。出现了包装类。例如Integer就是int的包装类。Integer存储了一个int类型的字段。并且提供了基本操作。</p>
<p>自动拆装箱：其实是java的语法糖，是java平台自动为我们做的一些装换。将自动装箱转换为Integer.valueOf()、拆箱装换为Integer.intValue()。【但是相比于基本数据类型，包装类的存储空间更大】</p>
<p>缓存机制：传统我们构建一个Integer是通过new一个新的对象，但是这样性能并不是很好，通过统计，发现我们使用的Integer的值在很小的一个范围内，所以当我们调用valueOf()【自动装箱】会利用其缓存的值，来提升性能。这个缓存的范围-128到127。</p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>字符串的不变性：在java中字符串是不可变的，定义成final class并且所有属性也都是final的。</p>
<p><a href="https://www.programcreek.com/2013/09/the-substring-method-in-jdk-6-and-jdk-7/" target="_blank" rel="noopener">JDK6和JDK7中substring的原理及区别</a>:</p>
<p>​    JDK 6 substring的原理：首先我们底层string都是通过char[]数组存储的，在jdk6中存储一个firstindex和count。在使用substring时，并不会创建一个新的char[]数组，而只是改变了这个firstindex和count【可以使用s=substring()+””】，在一个很长的字符串中，我们只使用一部分时，性能很差。</p>
<p>​    JDK7 substring的原理，相比于jdk6不创建一个新的char[]数组，jdk7会创建一个新的char[]数组.</p>
<p><a href="https://beginnersbook.com/2013/12/java-string-replace-replacefirst-replaceall-method-examples/" target="_blank" rel="noopener">replaceFirst、replaceAll、replace的区别</a>：</p>
<p>​    replace(char oldchar,char newchar) 将str中所有oldstr替换成newstr</p>
<p>​    replaceFirst(String regex,String str) 将str中第一个匹配正则的字符替换成str</p>
<p>​    replaceAll(String regex,String str) 将str中所有匹配正则的字符替换成str</p>
<p><a href="https://blog.csdn.net/u011479200/article/details/83116923" target="_blank" rel="noopener">String对+的重载</a>其实就是使用StringBuilder以及其的append、toString两个方法.</p>
<p>字符串拼接的方式：</p>
<p>​    通过+拼接，但是因为String的不可变性，所以会构造出许多中间对象，性能不是很好【但是可读性很高】</p>
<p>​    通过StringBuffer的append函数来拼接，但是是线程安全的，所以表现的性能不是很好。【会在初始化的时候+16个空间，】</p>
<p>​    StringBuilder与StringBuffer功能一样，但是不是线程安全的，所以一般使用它，除非有线程需要。</p>
<p><a href="https://blog.csdn.net/u011479200/article/details/83116923" target="_blank" rel="noopener">String.valueOf和Integer.toString的区别</a></p>
<p>​    看一段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer str=<span class="keyword">null</span>;</span><br><span class="line">        System.out.println(String.valueOf(str));</span><br><span class="line">        System.out.println(str.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">null</span></span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.NullPointerException</span><br><span class="line">	at Main.main(Main.java:<span class="number">6</span>)</span><br></pre></td></tr></table></figure>

<p>可以看到String.valueOf是null安全的，能够避免空指针的问题</p>
<p><a href="https://dzone.com/articles/new-java-7-feature-string" target="_blank" rel="noopener">switch对String的支持</a>:</p>
<p>​    在java7 中，string是可以在switch中被支持的</p>
<p><a href="https://www.journaldev.com/797/what-is-java-string-pool" target="_blank" rel="noopener">字符串池</a>:</p>
<pre><code>在java heap的内存空间中，有一个string pool，我们可以将相同字符串存储到pool【因为string的不可变性使其成为可能】，Stringpool能够在运行时为我们节省空间，但是会花费更多时间来创建一个新的对象【当我们使用双引用来创建string，首先会在string pool里面找，如果没有就会新建一个】但是我们使用new创建一个对象是就会强迫其创建一个新的内存空间，不过可以使用intern显式的将其缓存。</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str=<span class="keyword">new</span> String(<span class="string">"cat"</span>)；</span><br></pre></td></tr></table></figure>

<p>上面这段代码在运行时可能会创建1个或2个对象：</p>
<p>​    1个：如果cat在String POOL，那么只有一个string会被创建.</p>
<p>​    2个：如果没有在POOL里，那么会在POOL里创建一个和heap space里创建一个。</p>
<p>intern：因为字符串的不可变性，所以我们在裁剪、拼接字符串时都会创建一个新的字符串对象。通过缓存字符串可以有效的提升性能，在创建字符串时，调用intern()方法，如果已经缓存就调用相应的缓存实例，如果没有就将其缓存起来。【显性的排重机制 但是每次写代码都需要显式的调用，不方便，所以出现了隐式的方式 -可以通过将相同字符串指向同一份数据来得到】</p>
<h2 id="JAVA中各种关键词"><a href="#JAVA中各种关键词" class="headerlink" title="JAVA中各种关键词"></a>JAVA中各种关键词</h2><p><a href="https://www.cnblogs.com/lanxuezaipiao/p/3369962.html" target="_blank" rel="noopener">transient</a></p>
<p>​    transient主要用在当某个类中的一些属性需要序列化，另外一些不用的时候，为其添加上该关键词。【只能用在属性，不能用在类和方法】</p>
<p><a href="https://www.javatpoint.com/downcasting-with-instanceof-operator" target="_blank" rel="noopener">instanceof</a></p>
<p>​    instanceof关键词是用来判断某个对象是否是某个特殊类型(类，子类，接口)的实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Printable</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Printable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">"a method"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Printable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">"b method"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Printable p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p <span class="keyword">instanceof</span> A)&#123;</span><br><span class="line">            A a=(A)p;</span><br><span class="line">            a.a();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p <span class="keyword">instanceof</span> B)&#123;</span><br><span class="line">            B b=(B)p;</span><br><span class="line">            b.b();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Printable p=<span class="keyword">new</span> B();</span><br><span class="line">        Call c=<span class="keyword">new</span> Call();</span><br><span class="line">        c.invoke(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>final：</p>
<p>​    final修饰的类表示其不能被继承和扩展，修饰的方法表示不能被重写，修饰变量表示不可变。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">     strList.add(<span class="string">"Hello"</span>);</span><br><span class="line">     strList.add(<span class="string">"world"</span>);</span><br><span class="line">     List&lt;String&gt; unmodifiableStrList = Arrays.asList(<span class="string">"hello"</span>, <span class="string">"world"</span>);</span><br><span class="line">     unmodifiableStrList.add(<span class="string">"again"</span>);</span><br></pre></td></tr></table></figure>

<p>这段代码表示final只是代表这个对象是不可变的，对象本身的属性没有发生变化。</p>
<p><a href="https://www.dummies.com/programming/java/what-is-the-static-keyword-in-java/" target="_blank" rel="noopener">static</a>:</p>
<p>​    在java中static可以描述一个属性或者方法，其表示该属性或方法不属于某个实例，而是属于整个类，也就是说虽然你有许多个对象，但是static描述的只有一个，并且是共享的。</p>
<p>   被static描述的属性在类第一次被加载的时候就被创建和初始化。</p>
<p>​    常见的被static描述的方法就是main方法，并且main方法必须是static描述，意味着应用启动时会自动执行main方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> staticfield;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> nonstaticfield;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       staticfield=<span class="keyword">true</span>;</span><br><span class="line">       </span><br><span class="line">       Main m=<span class="keyword">new</span> Main();</span><br><span class="line">       m.nonstaticfield=<span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://tutorials.jenkov.com/java-concurrency/volatile.html#variable-visibility-problems" target="_blank" rel="noopener">volatile</a>:</p>
<p>​    volatile描述的对象表示一定会写到main memory里，当然读取的时候就会从main memory里读取。</p>
<p><a href="https://www.javamex.com/tutorials/synchronization_concurrency_synchronized1.shtml" target="_blank" rel="noopener">synchronized</a>:</p>
<p>​    同步，在多线程里可能会有多个线程要对同一个变量进行操作，但是加上同步，表示某一个时刻只能有一个线程对该变量有操作的权限，其他线程需要等待。【这其实对性能开销是有要求的】</p>
<p><a href="https://stackoverflow.com/questions/2735736/why-is-there-no-constant-feature-in-java" target="_blank" rel="noopener">const</a>:</p>
<p>​    const在java中是预留关键字，不常用，经常使用final代替</p>
<h2 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h2><p><a href="https://medium.com/@gilangkusumajati/arraylist-vs-linkedlist-vs-vector-22e1721a66b0" target="_blank" rel="noopener">ArrayList和LinkedList和Vector的区别</a>：</p>
<p>​      首先这三者都实现了list。然后arraylist和vector内部存储数据是动态数组，linkedlist内部是双向链表。所以平时在使用的时候需要注意这个list是什么操作用的比较多，可以选择合适的list提高性能。</p>
<p><a href="https://medium.com/@mr.anmolsehgal/hashtable-vs-hashmap-vs-concurrenthashmap-4aa0ff1eecc4" target="_blank" rel="noopener">HashMap和HashTable和ConcurrentHashMap的区别</a>：</p>
<p>​    首先他们都是Map，HashTable是最早的实现的一个“键值对”，是线程安全的，对性能很不友好不是很推荐。HashMap不是线程安全的，并且键值都支持null。所以一般都会使用它。ConcurrentHashMap也是用在线程安全的，并且是推荐使用的。因为其每次读写并不是将整个map锁起来，而是分块锁起来，所以可以两个线程对不同数据进行读写操作。</p>
<p><a href="https://beginnersbook.com/2014/07/difference-between-list-and-set-in-java/" target="_blank" rel="noopener">Set和List的区别</a>:</p>
<p>​    Set首先是无序的，并且里面的元素是不能重复的，List是有插入顺序，数据可以重复。</p>
<p><a href="https://stackoverflow.com/questions/15062322/how-sets-avoid-duplicates-internally" target="_blank" rel="noopener">Set如何保证元素不重复</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!collection.contains(element))</span><br><span class="line">    collection.add(element);</span><br></pre></td></tr></table></figure>

<p>这个是一个简单的判断，但是我刚刚点了几个源码看了一下add的时候调用put然后又Putval比较hashcode。</p>
<p><a href="[https://xuxiaojin.com/2019/11/27/java8%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9lambda-stream/](https://xuxiaojin.com/2019/11/27/java8的一些知识点lambda-stream/)">stream的基本用法</a></p>
<p>我学习了一下，由于知识点太多，所以新开了一篇博文。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象</title>
    <url>/2019-11-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<hr>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h2><p>面向对象：一种以类和对象为组织的编程方式，并且以”封装、抽象、继承、多态”作为其的四大基石。</p>
<p>面向过程：以过程为中心，分析出过程中每个步骤，然后一步一步实现。</p>
<blockquote>
<p>例如c语言中，我们解决一个问题都是先考虑需要哪些步，然后写成函数，一个个调用</p>
<p>java中，会考虑类，对象，然后对象的行为。</p>
</blockquote>
<p>三大基本特性：</p>
<ul>
<li>封装，通过暴露方法来修改数据。防止不必要修改引起的bug。</li>
<li>继承，对代码的复用is-a</li>
<li>多态，扩展，对代码的复用。实现方法：继承方法重写 接口 duck-typing</li>
</ul>
<p>五大基本原则：</p>
<ul>
<li>单一职责原则：一个类只能做一件事</li>
<li>开放封闭原则：在设计类的时候，要考虑后期扩展开放，但是对修改要封闭</li>
<li>里氏替换原则：对于父类的调用子类同样可以</li>
<li>依赖倒置原则：父类不应该依赖子类，而应该将父类抽象</li>
<li>接口隔离原则：通过单个接口实现多个方法不如通过多个接口来实现</li>
</ul>
<h2 id="平台无关性"><a href="#平台无关性" class="headerlink" title="平台无关性"></a>平台无关性</h2><p>首先我们编写的java代码，通过编译器转成java字节码。然后该字节码就可以在不同平台的java虚拟机上运行。</p>
<h2 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h2><p>值传递：将方法参数的值通过拷贝复制到另外一个变量</p>
<p>引用传递：传递该变量的别名，即指向该变量</p>
<p><a href="https://www.journaldev.com/3884/java-is-pass-by-value-and-not-pass-by-reference" target="_blank" rel="noopener">Java只有值传递</a></p>
<p>首先要理解java每次传递的是该变量中保存的值，这个值对于基本数据类型那就是值，对于引用数据类型就是其指向的内存空间的值。例如Integer a=50; a是一个 引用类型变量，其存的值是内存空间中50的地址，传递也是传递这个值。</p>
<p>并且顺带看了篇关于java的heap memory和stack memory</p>
<h2 id="封装继承多态"><a href="#封装继承多态" class="headerlink" title="封装继承多态"></a>封装继承多态</h2><p>多态：同一个方法，通过不同对象调用，实现不同场景。即子类可以替换父类，调用方法。</p>
<p>方法重写：在子类中，如果是非私有，非静态的方法，实现的方法名，参数类型跟父类相同称为重写。</p>
<p>方法重载：在一个类中，如果多个方法，其方法名相同，但是其参数类型不同【在java中同一类中如果多个方法完全相同，在方法验证阶段就会报错】。在子类中，如果是非私有方法，其实现跟父类在参数类型不同也是重载。</p>
<p>java继承：通过extands继承，并且只能允许单继承【如果是多继承会出现菱形继承的现象】</p>
<p>构造函数和默认构造函数：在类中，如果没有实现自定义的构造函数，java会默认实现一个没有带参数的构造函数，如果自定义了构造函数，该默认构造函数就不会出现，所以需要自己定义一个不带参数的构造函数。</p>
<p>类变量：通过static定义的变量，不需要通过对象调用，可以通过类名直接调用。</p>
<p>成员变量：类中的变量，一般来说会对其进行封装。通过getter和setter对其进行操作。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Nginx</title>
    <url>/2019-11-07-%E5%88%9D%E5%A7%8BNginx/</url>
    <content><![CDATA[<hr>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="Nginx指令和指令块"><a href="#Nginx指令和指令块" class="headerlink" title="Nginx指令和指令块"></a>Nginx指令和指令块</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Main</span> <span class="number">1</span>;</span><br><span class="line"><span class="section">events</span> &#123;&#125;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">Main</span> <span class="number">2</span>;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">Main</span> <span class="number">3</span>;</span><br><span class="line">        <span class="section">location</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">Main</span> <span class="number">3</span>;</span><br><span class="line">        <span class="section">location</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单指令：由名字和参数组成，名字和参数之间用空格分隔，以分号结尾 Main 1..就是简单指令</p>
<p>指令块：由名称和大括号{}内的附加指令组成，不以分号结尾</p>
<blockquote>
<p>在这上面的配置中http是全局参数，对整体产生影响。</p>
<p>server块是虚拟主机，主要对指定的主机和端口进行配置。</p>
<p>location块在虚拟主机下根据请求URI进行配置，URI即去掉参数的URL</p>
<p>有些简单指令可以存在上面三个指令块中，如果同一个简单指令同时存在的话，以最小块里面的参数为主</p>
</blockquote>
<p>与客户端有关的配置主要在http块中设置。</p>
<h3 id="Server块"><a href="#Server块" class="headerlink" title="Server块"></a>Server块</h3><p>server块是虚拟主机部分，如果请求中的host头和server_name相匹配，则将请求指向对应的server块。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span> testnginx.com www.testnginx.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>server_name支持配置多个</p>
<blockquote>
<p>配置规则：</p>
<p>精确的名字</p>
<p>以*开头的最长通配符名称 如 *.testnginx.com</p>
<p>以<em>结尾的最长通配符名称 如estnginx.</em></p>
<p>按照文件顺序，第一个匹配到的正则表达式</p>
<p>如果没有匹配到server_name则会访问default_server</p>
</blockquote>
<h3 id="location块"><a href="#location块" class="headerlink" title="location块"></a>location块</h3><p>location块是在server块中使用，当客户端请求的一个url定位不同的应用。这就需要使用请求的url匹配对应的location指令</p>
<p>一些特殊的指令</p>
<p>alias定义指定位置的替换</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /a/ &#123;</span><br><span class="line">    <span class="attribute">alias</span> /c/x/a/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果匹配到/a/test.json进入到这个location块后，会将请求变成/c/x/a/test.json</p>
<p>##include的使用</p>
<p>include用来指定主配置文件包含的其他扩展配置文件，可以用在全局参数、location块、server块中等任何一个位置。</p>
<p>【可以将相同的数据提取出来，从而精简配置】</p>
<h2 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h2><h3 id="常见配置注解"><a href="#常见配置注解" class="headerlink" title="常见配置注解"></a>常见配置注解</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span> www www; <span class="comment">#定义运行nginx的用户和用户组</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">2</span>; <span class="comment">#nginx进程数</span></span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> auto; <span class="comment">#配置nginx进程的cpu亲缘性</span></span><br><span class="line"><span class="attribute">error_log</span> /var/log/error_log <span class="literal">info</span>; <span class="comment">#定义全局错误日志的类型，默认是error</span></span><br><span class="line">worker_rlimit_nofile 65535; 一个worker进程最多能够打开的文件数量</span><br><span class="line"><span class="attribute">pid</span> /var/run/nginx.pid; <span class="comment">#进程文件</span></span><br><span class="line"><span class="attribute">worker_priority</span> -<span class="number">10</span>; <span class="comment">#在linux系统下资源使用的优先级</span></span><br><span class="line"><span class="attribute">worker_shutdown_timeout</span> <span class="number">30</span>; <span class="comment">#若30s内nginx无法平滑退出，则强行关闭进程</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">10000</span>; <span class="comment">#单个进程的最大连接数</span></span><br><span class="line">    <span class="comment">#epoll 用来linux2.6以上版本的内核高性能的网络I/O上</span></span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span> conf/mime.types;  <span class="comment">#文件扩展名和文件类型映射表</span></span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream; <span class="comment">#默认文件类型</span></span><br><span class="line">    <span class="attribute">log_format</span> main ....<span class="comment">#指定日志格式</span></span><br></pre></td></tr></table></figure>

<p>内置变量</p>
<p>$scheme 请求协议</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">if</span> (<span class="variable">$scheme</span>=<span class="string">'http'</span>)&#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> https://<span class="variable">$host</span>/<span class="variable">$1</span> <span class="literal">redirect</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="强化基础配置"><a href="#强化基础配置" class="headerlink" title="强化基础配置"></a>强化基础配置</h2><h3 id="限制IP地址的访问"><a href="#限制IP地址的访问" class="headerlink" title="限制IP地址的访问"></a>限制IP地址的访问</h3><p>allow允许IP地址或IP字段访问</p>
<p>deny 禁止IP地址或IP字段访问</p>
<p>具体配置如下</p>
<p>禁止全部server_name访问 在http块中配置deny deny ip</p>
<p>禁止某个server_name访问 在server块中配置deny deny ip</p>
<p>禁止某个Location访问 在Location配置deny deny ip</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">deny</span> <span class="number">192.168.1.1</span>; <span class="comment">#禁止该Ip访问</span></span><br><span class="line">    <span class="attribute">allow</span> <span class="number">192.168.1.0</span>/<span class="number">24</span> <span class="comment">#允许它访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="proxy代理"><a href="#proxy代理" class="headerlink" title="proxy代理"></a>proxy代理</h3><h4 id="proxy-pass请求代理规则"><a href="#proxy-pass请求代理规则" class="headerlink" title="proxy_pass请求代理规则"></a>proxy_pass请求代理规则</h4><blockquote>
<p>语法 proxy_pass URL;</p>
<p>环境 location、if in locaiton、limit_except</p>
<p>含义 将请求代理到后端服务器，设置后端服务的IP地址，端口号以及HTTP/HTTPS</p>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> = /test &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:81; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将uri为/test的请求代理到127.0.0.1上，端口号81 使用http</p>
<p>代理过程中url会有以下几种变化</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">loaction</span> /test/v1/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:81/abc/; <span class="comment">#例如 /test/v1/xxx?a=1 替换成 /abc/xxx?a=1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /aaa/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:81/; <span class="comment">#例如 /aaa/xxx?a=1替换成 /xxx?a=1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /abc &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:81; <span class="comment">#什么都不做，直接传递原始的url</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="减少后端服务器的网络开销"><a href="#减少后端服务器的网络开销" class="headerlink" title="减少后端服务器的网络开销"></a>减少后端服务器的网络开销</h4><p>有时候的请求只跟url的参数有关，并不需要读取请求头和请求体。</p>
<p>设置下面两个指令，将其配置成off</p>
<p>proxy_pass_request_body</p>
<p>proxy_pass_request_headers</p>
<h3 id="upstream使用手册"><a href="#upstream使用手册" class="headerlink" title="upstream使用手册"></a>upstream使用手册</h3><p>它为反向代理提供了负载均衡及故障转移等重要功能</p>
<h4 id="代理多态服务器"><a href="#代理多态服务器" class="headerlink" title="代理多态服务器"></a>代理多态服务器</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test_servers &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:81</span> max_fails=<span class="number">5</span> fails_timeout=<span class="number">10s</span> weight=<span class="number">10</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:82</span> max_fails=<span class="number">5</span> fails_timeout=<span class="number">10s</span> weight=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://test_servers;  <span class="comment">#将请求发送给upstream命名的http服务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="rewrite使用手册"><a href="#rewrite使用手册" class="headerlink" title="rewrite使用手册"></a>rewrite使用手册</h3><p>完成内部重定向的功能。</p>
<p>内部重定向是在Nginx内部发送请求的操作，它可以将请求转发到其他location或者是对Url进行修改，而不必通过HTTP连接请求，整个过程高效。</p>
<hr>
<p>以上过了nginx的一些内容。</p>
]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>初识正则表达式</title>
    <url>/2019-11-05-%E5%88%9D%E8%AF%86%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>额 这个也只能实战中去熟练。</p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>正则表达式是有普通字符(例如字符a到字符z)以及特殊字符(元字符)组成的文字模式。</p>
<p>看了一篇<a href="https://deerchao.cn/tutorials/regex/regex.htm" target="_blank" rel="noopener">教程</a>，知道了一些基本语法</p>
]]></content>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中的面向对象</title>
    <url>/2019-10-25-JavaScript%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<hr>
<h3 id="“坑爹”的Javascript"><a href="#“坑爹”的Javascript" class="headerlink" title="“坑爹”的Javascript"></a>“坑爹”的Javascript</h3><ul>
<li>javascript执行机制中的事件循环<ul>
<li>在Javascript世界里，引起代码运行是通过事件驱动的，并且全部通过这唯一的一个勤奋的工作线程来执行的。那么当有事件产生的时候，这个工作线程不一定空闲，这需要一个机制让新产生的事件排队等一等。等当前的工作完成之后，再来处理它</li>
</ul>
</li>
<li>javascript代码执行通常是单线程的，一个线程，一个调用栈，一次只做一件事</li>
</ul>
<h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Book(<span class="string">"life"</span>).name)</span><br></pre></td></tr></table></figure>

<p>上面这个，name作为Book这个类的构造函数传入，并赋值给自己的name属性。但是name仍然是公有属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.getName=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.setName=<span class="function">(<span class="params">newName</span>)=&gt;</span>&#123;</span><br><span class="line">        name=newName;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> book=<span class="keyword">new</span> Book(<span class="string">"Life"</span>);</span><br><span class="line">book.setNmae(<span class="string">"Time"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(book.getName())</span><br></pre></td></tr></table></figure>

<p>使用了()=&gt;{}代替了function关键字</p>
<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype=<span class="keyword">new</span> Base();</span><br><span class="line"><span class="keyword">var</span> c=<span class="keyword">new</span> Child(<span class="string">"Life"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c.name);</span><br><span class="line"><span class="built_in">console</span>.log(c <span class="keyword">instanceof</span> Base);</span><br><span class="line"><span class="built_in">console</span>.log(c <span class="keyword">instanceof</span> Child);</span><br></pre></td></tr></table></figure>

<ul>
<li>设置prototype的语句一定要放到Base和Child两个构造器之外</li>
<li>并且要放在实例化任何子类之前</li>
</ul>
<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>指的是同样的接口，有着不同的实现。可以通过在不同实现类中定义同名的方法。</p>
<h3 id="理解对象创建的过程"><a href="#理解对象创建的过程" class="headerlink" title="理解对象创建的过程"></a>理解对象创建的过程</h3><p>理解this</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Book(<span class="string">"Life"</span>);</span><br><span class="line">Book(<span class="string">"Life"</span>);</span><br><span class="line"><span class="built_in">window</span>.Book(<span class="string">"Life"</span>);</span><br></pre></td></tr></table></figure>

<p>在使用new的时候，this是创建的对象自己</p>
<ul>
<li><p>创建一个Book的对象，称为x</p>
</li>
<li><p>绑定原型 x.proto=Book.prototype</p>
</li>
<li><p>指定对象自己this=x并且调用构造方法，相当于执行了x.Book()</p>
</li>
<li><p>对于构造器中的return 语句，根据typeof x===’object’来决定其实际的返回</p>
<ul>
<li>如果return语句返回的是基本的数据类型，那么new的时候，构造器的返回会被强制指定为x</li>
<li>如果return语句时object类型，那么new的时候会遵循返回实际的return语句来返回</li>
</ul>
<p>【这个特性蛋疼】</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book1</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Book1(<span class="string">"Life"</span>)); <span class="comment">// 打印 Book1 &#123;name: "Life"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book2</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Book2(<span class="string">"Life"</span>)); <span class="comment">// 打印 []</span></span><br></pre></td></tr></table></figure>

<p>在不使用new的时候，this是浏览器的内置对象window</p>
<h3 id="函数是一等公民"><a href="#函数是一等公民" class="headerlink" title="函数是一等公民"></a>函数是一等公民</h3><blockquote>
<p>函数可以不依附于任何类或对象等实体而独立存在，它可以单独作为参数、变量或返回值在程序中传递</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> book=<span class="keyword">new</span> Book(<span class="string">"Life"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(getName.call(book,getName));</span><br></pre></td></tr></table></figure>

<p>函数的调用之前必须要有宿主对象，如果使用null或者是undefined这样不存在的对象，window会取而代之，被指定为默认的宿主对象</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS(只有A)</title>
    <url>/2019-10-20-ARTS(%E5%8F%AA%E6%9C%89A)/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>满打满算，做了好大一部分的后台。然后就是复习咯，下面要准备考试了。</p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>题目：<a href="https://leetcode-cn.com/problems/counting-bits/" target="_blank" rel="noopener">比特位计数</a></p>
<p>思路：最高位求出来之后可以利用已经计算的数，因为是二进制所以后面的情况其实是一样的。</p>
<p>递推是 ans[i]=ans[i/2]+count  if i%2==0 count=0 else count=1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] ans=<span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=num;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">1</span>) count++;</span><br><span class="line">            ans[i]=ans[i/<span class="number">2</span>]+count;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>Externalized Configuration文档翻译</title>
    <url>/2019-10-18-Externalized-Configuration%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/</url>
    <content><![CDATA[<hr>
<h1 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a>SpringApplication</h1><p>SpringApplication提供了一种遍历的方式来引导从main方法里启动的spring 应用。在许多情况下，你可以将其委派给SpringApplication.run方法，就像下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	SpringApplication.run(MySpringConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="启动失败"><a href="#启动失败" class="headerlink" title="启动失败"></a>启动失败</h2><p>如果你的应用启动失败，registered FailureAnalyzers会有一个机会提供专用的错误信息和一个具体的方案来解决该问题。</p>
<blockquote>
<p>SpringBoot 提供了许多FailureAnalyzer实现</p>
</blockquote>
<p>如果没有failure analyzer能够处理该异常，你仍然可以显示所有情况来更好的理解什么问题出错了。你可以通过内嵌debug属性或者给<code>org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</code>内嵌DEBUG logging。</p>
<p>例如，如果你通过java -jar 启动你的应用，你可以通过以下方式来内嵌debug属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ java -jar myproject-<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT.jar --debug</span><br></pre></td></tr></table></figure>

<h2 id="customizing-the-Banner"><a href="#customizing-the-Banner" class="headerlink" title="customizing the Banner"></a>customizing the Banner</h2><p>就是制定启动标志。。(花里胡哨)</p>
<h2 id="Customizing-SpringApplication"><a href="#Customizing-SpringApplication" class="headerlink" title="Customizing SpringApplication"></a>Customizing SpringApplication</h2><p>如果springapplication默认情况不符合你的胃口，你可以建立一个local instance并且自定义它来替代。例如，你可以这么写来关掉banner:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	SpringApplication app = <span class="keyword">new</span> SpringApplication(MySpringConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	app.setBannerMode(Banner.Mode.OFF);</span><br><span class="line">	app.run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Fluent-Builder-API"><a href="#Fluent-Builder-API" class="headerlink" title="Fluent Builder API"></a>Fluent Builder API</h2><p>如果你想要构建的一个Application有多个等级，或者你更喜欢使用一个流利的builder API,你可以使用SpringApplicationBuilder.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> SpringApplicationBuilder()</span><br><span class="line">		.sources(Parent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">		.<span class="title">child</span>(<span class="title">Application</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">		.<span class="title">bannerMode</span>(<span class="title">Banner</span>.<span class="title">Mode</span>.<span class="title">OFF</span>)</span></span><br><span class="line"><span class="class">		.<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Application-Events-and-Listeners"><a href="#Application-Events-and-Listeners" class="headerlink" title="Application Events and Listeners"></a>Application Events and Listeners</h2><p>除了通常使用的spring framework events。例如ContextRefreshedEvent。SpringApplication添加了许多额外的应用事件。</p>
<h2 id="Web环境"><a href="#Web环境" class="headerlink" title="Web环境"></a>Web环境</h2><p>SpringApplication尝试代表你创建ApplicationContext.用来确定WebApplicationType的算法相当简单。</p>
<ul>
<li>如果Spring MVC存在，<code>AnnotationConfigServletWebServerApplicationContext</code> 被使用。</li>
<li>如果Spring MVC不存在，spring webflux存在。<code>AnnotationConfigReactiveWebServerApplicationContext</code> 被使用</li>
<li>其他情况下，<code>AnnotationConfigApplicationContext</code> 被使用</li>
</ul>
<p>这意味着，如果你在一个项目里使用了Spring mvc和来自Spring WebFlux新的WebClient。Spring MVC会被默认使用，你可以通过调用setWebApplicationType(WebApplicationType)来重构它。</p>
<p>通过调用setApplicationContextClass(…)是可以对ApplicationContext完全掌控的。</p>
<blockquote>
<p>在使用JUnit进行测试的时候，经常希望调用setWebApplicationType(WebApplicationType.NONE)</p>
</blockquote>
<h2 id="访问应用程序参数"><a href="#访问应用程序参数" class="headerlink" title="访问应用程序参数"></a>访问应用程序参数</h2><p>如果你需要访问通过SpringApplication.run(…)传入的应用参数，你可以通过注入org.springframework.boot.ApplicationArguments bean。AppliationArguments接口不仅提供可以访问通过原生的String[]参数也可以通过解析option和non-option参数。如下面例子所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBean</span><span class="params">(ApplicationArguments args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> debug=args.containsOption(<span class="string">"debug"</span>);</span><br><span class="line">        List&lt;String&gt; files = args.getNonOptionArgs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SpringBoot还向Spring Environment注册了CommandLinePropertySource.你可以通过使用@Value注解来注入单个应用参数.</p>
</blockquote>
<h2 id="使用ApplicationRunner-或者-CommandLineRunner"><a href="#使用ApplicationRunner-或者-CommandLineRunner" class="headerlink" title="使用ApplicationRunner 或者 CommandLineRunner"></a>使用ApplicationRunner 或者 CommandLineRunner</h2><p>如果你想要在SpringApplication一旦启动就运行一些特殊的代码，你可以通过实现ApplicationRunner或者CommandLineRunner接口。这两个接口都以相同的方式工作，并且都提供一个单独的run方法，该方法会在SpringApplication.run(…)完成前调用.</p>
<p>CommandLineRunner接口以简单字符串的形式提供对应用程序的参数访问。下面的例子展示了CommadnLineRunner的run方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do something...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果一些CommandLineRunner或者ApplicationRunner beans必须通过一些特定的顺序被调用。你可以额外的实现org.springframework.core.Ordered接口或者使用org.springframework.core.annotation.Order注解</p>
<h2 id="应用退出"><a href="#应用退出" class="headerlink" title="应用退出"></a>应用退出</h2><p>每一个SpringApplication向JVM注册了一个关闭hook来确保关闭应用是可以正确的退出。可以使用所有标准的生命周期回调(例如DispsableBean接口或@PreDestroy注解)</p>
<p>另外，如果希望当SpringApplication.exit()调用的时候返回一个特殊的代码时，beans可以实现org.springframework.boot.ExitCodeenerator接口。这个退出的代码可以通过System.exit()传递。下面是例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExitCodeApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExitCodeGenerator <span class="title">exitCodeGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> () -&gt; <span class="number">42</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.exit(SpringApplication.exit(SpringApplication.run(ExitCodeApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="管理特性"><a href="#管理特性" class="headerlink" title="管理特性"></a>管理特性</h2><p>通过指定spring.appliacation.admin.enabled属性可以为应用嵌入admin-related特性。</p>
<h2 id="外部化配置"><a href="#外部化配置" class="headerlink" title="外部化配置"></a>外部化配置</h2><p>SpringBoot可以让你外部化配置以至于可以将你代码运行在不同的环境中。你可以使用properties 文件，YAML文件，环境变量和命令行参数来外部化配置。属性值可以通过@Value注解直接注入你的beans，该注解可以通Spring的Environment抽象来访问，或者通过@ConfigurationProperties结构化绑定。</p>
<p>SpringBoot使用一个非常特殊的PropertySource顺序来允许覆盖值，Properties可以按下面顺序来考虑：</p>
<h2 id="配置随机值"><a href="#配置随机值" class="headerlink" title="配置随机值"></a>配置随机值</h2><p>RandomValuePropertySource可以被用来注入随机值(例如密码或者测试样例),它可以生成整数，longs，uuids或者字符串。下面展示代码例子：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">my.secret</span>=<span class="string">$&#123;random.value&#125;</span></span><br><span class="line"><span class="meta">my.number</span>=<span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="meta">my.bignumber</span>=<span class="string">$&#123;random.long&#125;</span></span><br><span class="line"><span class="meta">my.uuid</span>=<span class="string">$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="meta">my.number.less.than.ten</span>=<span class="string">$&#123;random.int(10)&#125;</span></span><br><span class="line"><span class="meta">my.number.in.range</span>=<span class="string">$&#123;random.int[1024,65536]&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="访问命令行属性"><a href="#访问命令行属性" class="headerlink" title="访问命令行属性"></a>访问命令行属性</h2><p>默认的，SpringApplication转换命令行选项参数(例如，以–开始的参数，–server.port=9000)成属性并且将他们添加到spring Environment。前面提到，命令行参数总是优先于其他属性元。</p>
<p>如果你不想要将命令行参数添加到环境里，可以通过使用SpringApplication.setAddCommandLineProperties(false)来丢弃掉它们。</p>
<h2 id="应用属性文件"><a href="#应用属性文件" class="headerlink" title="应用属性文件"></a>应用属性文件</h2><p>SpringApplication在下面位置，从appliation.properties文件来下载properties。并且将他们添加到spring Environment:</p>
<ol>
<li>当前目录的/config子目录</li>
<li>当前目录</li>
<li>classpath的/config包</li>
<li>classpath路径</li>
</ol>
<p>该列表按照优先级(precedence)进行排列</p>
<blockquote>
<p>你可以使用YAML(.yml)文件来替代.properties</p>
</blockquote>
<p>如果你不想要用application.properties作为配置的文件名，你可以通过指定(specifying)spring.config.name的环境属性，将其转换为其他名字。你也可以通过spring.config.location环境属性来显式的指出地址。下面例子显示如何定义不同的文件名字：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar myproject.jar --spring.config.name=myproject</span><br></pre></td></tr></table></figure>

<p>下面例子展示了如何指定两个地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -jar myproject.jar --spring.config.location=classpath:/default.properties,classpath:/override.properties</span></span><br></pre></td></tr></table></figure>

<h2 id="特殊的属性文件"><a href="#特殊的属性文件" class="headerlink" title="特殊的属性文件"></a>特殊的属性文件</h2><p>除了application.properties文件，还可以使用下面的命名格式来定义特殊的属性：application-{profile}.properties。</p>
<p>如果没有设置应用的配置文件，Environment会有一组默认的profile(默认的,[default])。换句话说，如果没有显示的激活profile，properties会从application-default.properties中加载。</p>
<p>特定的属性与标准的application.properties一样的位置被加载的，基于特定的配置总是会覆盖非特性的属性，无论是在打包jar的内部还是外部。</p>
<p>如果制定了多个profile，那么最后last-wins策略会被应用。例如，SpringApplication API配置后，通过spring.profiles.active苏醒指定的profiles会被添加，因此具有优先权。</p>
<h2 id="属性中的占位"><a href="#属性中的占位" class="headerlink" title="属性中的占位"></a>属性中的占位</h2><p>使用时，application.properties里的值被现有的Environment过滤。所以你能够指回先前定义的值(例如，来自系统属性):</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">app.name</span>=<span class="string">MyApp</span></span><br><span class="line"><span class="meta">app.description</span>=<span class="string">$&#123;app.name&#125; is a Spring Boot application</span></span><br></pre></td></tr></table></figure>

<h2 id="加密属性"><a href="#加密属性" class="headerlink" title="加密属性"></a>加密属性</h2><p>SpringBoot不提供任何对加密属性的内置支持….</p>
<h2 id="使用YAML替代Properties"><a href="#使用YAML替代Properties" class="headerlink" title="使用YAML替代Properties"></a>使用YAML替代Properties</h2><p>YAML是JSON的超集并且可以用一种很便利的格式来指定等级制的属性数据。不管你是否有SnakeYAML库在你的classpath,SpringApplication类都自动支持YAML替代properties。</p>
<blockquote>
<p>如果你使用”Starters”SnakeYAML会自动的被spring-boot-starter提供</p>
</blockquote>
<h3 id="加载YAML"><a href="#加载YAML" class="headerlink" title="加载YAML"></a>加载YAML</h3><p>Spring框架提供两个方便的类来用来加载YAML文档，YamlPropertiesFactoryBean把YAML加载成Properties，YamlMapFactoryBean把YAML加载成MAP。</p>
<p>例如，考虑下面的YAML文档：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environments:</span></span><br><span class="line">    <span class="attr">dev:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">https://dev.example.com</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Developer</span> <span class="string">Setup</span></span><br><span class="line">    <span class="attr">prod:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">https://another.example.com</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">My</span> <span class="string">Cool</span> <span class="string">App</span></span><br></pre></td></tr></table></figure>

<p>这个例子会被转换为下面的properties:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">environments.dev.url</span>=<span class="string">https://dev.example.com</span></span><br><span class="line"><span class="meta">environments.dev.name</span>=<span class="string">Developer Setup</span></span><br><span class="line"><span class="meta">environments.prod.url</span>=<span class="string">https://another.example.com</span></span><br><span class="line"><span class="meta">environments.prod.name</span>=<span class="string">My Cool App</span></span><br></pre></td></tr></table></figure>

<p>YAML列表用[index] dereferencers表示为property。例如，考虑下面的YAML：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">my:</span></span><br><span class="line">   <span class="attr">servers:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">dev.example.com</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">another.example.com</span></span><br></pre></td></tr></table></figure>

<p>这个例子会被转换为：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">my.servers[0]</span>=<span class="string">dev.example.com</span></span><br><span class="line"><span class="meta">my.servers[1]</span>=<span class="string">another.example.com</span></span><br></pre></td></tr></table></figure>

<p>要使用SpringBoot’s的Binder(@ConfigurationProperties)来绑定properties，你徐亚提供一个list或者(set)或者提供一个setter或使用可变值来对其进行初始化。例如，下面这个例子绑定上面例子展示的属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"my"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; servers = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getServers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.servers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在spring-Environment将YAML暴露为公开属性"><a href="#在spring-Environment将YAML暴露为公开属性" class="headerlink" title="在spring Environment将YAML暴露为公开属性"></a>在spring Environment将YAML暴露为公开属性</h3><p>YamlPropertySourceLoader类可以被用来在Spring Environment将YAML暴露为PropertySource。这样做，你可以使用@Value注解来访问YAML属性</p>
<h1 id="学"><a href="#学" class="headerlink" title="学"></a>学</h1><p>一点吧，这个没有去应用没有感觉.</p>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第十四周</title>
    <url>/2019-10-14-ARTS%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%91%A8/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p><a href="https://leetcode-cn.com/problems/unique-paths/submissions/" target="_blank" rel="noopener">题目</a>:不同路径</p>
<p>思路：递推公式  f(i,j)=f(i-1,j)+f(i,j-1);  注意边界，需要特殊处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] result=<span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>||j==<span class="number">0</span>)&#123;</span><br><span class="line">                    result[i][j]=<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    result[i][j]=result[i-<span class="number">1</span>][j]+result[i][j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode-cn.com/problems/unique-paths-ii/" target="_blank" rel="noopener">题目</a>：不同路径2 加入障碍物</p>
<p>思路：只要将障碍物的地方变成0 然后记得处理边界有障碍物的情况，否则会出错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="keyword">int</span>[][] obstacleGrid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] result=<span class="keyword">new</span> <span class="keyword">int</span>[obstacleGrid.length][obstacleGrid[<span class="number">0</span>].length];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;obstacleGrid.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;obstacleGrid[<span class="number">0</span>].length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(obstacleGrid[i][j]==<span class="number">1</span>) result[i][j]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>&amp;&amp;j!=<span class="number">0</span>) result[i][j]=result[i][j-<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>&amp;&amp;i!=<span class="number">0</span>) result[i][j]=result[i-<span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>&amp;&amp;j==<span class="number">0</span>) result[i][j]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> result[i][j]=result[i-<span class="number">1</span>][j]+result[i][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result[obstacleGrid.length-<span class="number">1</span>][obstacleGrid[<span class="number">0</span>].length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>Structuring Your Code文档翻译</title>
    <url>/2019-10-13-Structuring-Your-Code%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/</url>
    <content><![CDATA[<hr>
<h1 id="结构化你的代码-组织你的代码"><a href="#结构化你的代码-组织你的代码" class="headerlink" title="结构化你的代码(组织你的代码)"></a>结构化你的代码(组织你的代码)</h1><p>springboot并不需要特别的代码样式才能工作，但是这里有一些很好的练习能够帮助。</p>
<h2 id="使用默认的包"><a href="#使用默认的包" class="headerlink" title="使用默认的包"></a>使用默认的包</h2><p>当一个类不包含任何包的声明，它会被认为是默认的包。使用默认的包通常是不被鼓励的并且需要防范的。当springboot应用使用@ComponentScan @EntityScan 或者@SpringBootApplication注解时，会导致特别的问题，因为每一个jar里的类都会被读取。</p>
<blockquote>
<p>我们建议你遵循java中建议的包命名约定 例如 com.example.project</p>
</blockquote>
<h2 id="找到主要的应用程序类"><a href="#找到主要的应用程序类" class="headerlink" title="找到主要的应用程序类"></a>找到主要的应用程序类</h2><p>我们真诚的建议你在有一个root package找到自己主要的应用程序类，@SpringBootApplication注解通常会被放到你的主类，并且隐式的定义了某些项的搜索类。例如，如果你正在编写一个jpa应用，通过@SpringBootApplication注解的类会被找到被@Entity注解的类。使用根包也会允许组件扫描只应用在你的文件。</p>
<blockquote>
<p>如果你不想使用@SpringBootApplication注解，@EnableAutoConfiguration和@ComponentScan注解可以用来替代，完成相同的行为</p>
</blockquote>
<p>下面显示一种通常的样式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com</span><br><span class="line"> +- example</span><br><span class="line">     +- myapplication</span><br><span class="line">         +- Application.java</span><br><span class="line">         |</span><br><span class="line">         +- customer</span><br><span class="line">         |   +- Customer.java</span><br><span class="line">         |   +- CustomerController.java</span><br><span class="line">         |   +- CustomerService.java</span><br><span class="line">         |   +- CustomerRepository.java</span><br><span class="line">         |</span><br><span class="line">         +- order</span><br><span class="line">             +- Order.java</span><br><span class="line">             +- OrderController.java</span><br><span class="line">             +- OrderService.java</span><br><span class="line">             +- OrderRepository.java</span><br></pre></td></tr></table></figure>

<p>Application.java会实现main方法，还有@SpringBootApplication.如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上翻译自<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-structuring-your-code.html" target="_blank" rel="noopener">Structuring Your Code</a></p>
<h1 id="学"><a href="#学" class="headerlink" title="学"></a>学</h1><ol>
<li>springbootapplication会自动扫描相关组件</li>
<li>最好是要有包的区分，强烈建议</li>
<li>官方给的那种形式其实用的比较少吧！还是现在用的形式好，不过官方这种突然想想也挺好的，改起来特别容易，不用来回找，像小程序那样。</li>
</ol>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Developing Your First SpringBoot Application文档翻译</title>
    <url>/2019-10-13-Developing-Your-First-SpringBoot-Application%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/</url>
    <content><![CDATA[<hr>
<h1 id="部署你的第一个SpringBoot应用"><a href="#部署你的第一个SpringBoot应用" class="headerlink" title="部署你的第一个SpringBoot应用"></a>部署你的第一个SpringBoot应用</h1><p>该部分会介绍如何部署一个简单的“hello world”的web应用程序，并且重点介绍SpringBoot的关键特性。因为大多数的IDE支持Maven,所以我们通过maven来构建项目。</p>
<p>在我们开始之前，需要运行一下以下命令行，来确保你已经安装好了java和maven</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -version</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mvn -v</span></span><br></pre></td></tr></table></figure>

<h2 id="创建pom"><a href="#创建pom" class="headerlink" title="创建pom"></a>创建pom</h2><p>我们需要开始构建Maven的pom.xml文件，该pom.xml文件你是构建项目的配方，打开你最喜欢的文本编辑器，然后添加一下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Additional lines to be added here... --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上清单可以给你一个构建方式，你可以通过运行mvn package来测试它(忽略jar will be empty的警告)</p>
<h3 id="添加Classpath依赖"><a href="#添加Classpath依赖" class="headerlink" title="添加Classpath依赖"></a>添加Classpath依赖</h3><p>SpringBoot提供许多Starters让你添加jar到你的classpath,我们简单的应用程序已经使用了spring-boot-starter-parent在pom的parent的部分。spring-boot-starter-parent是一个特殊的starter，可以提供有用的maven默认设置。它也提供一个dependecy-management部分，你可以忽略依赖的version的标记。</p>
<p>当你部署一个特别类型的应用，你可能需要用到其他Starters提供的依赖。因为我们部署一个web应用，我们添加了一个spring-boot-starter-web的依赖，在此之前，我们可以通过以下命令来查看我们目前已有的东西:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mvn dependency:tree</span></span><br></pre></td></tr></table></figure>

<p>该命令可以打印出你项目的依赖，你可以看到spring-boot-starter-parent自己本身没有提供依赖。为了添加必要的依赖，编辑你的pom.xml文件，然后添加spring-boot-starter-web依赖在parent部分下面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时，你在运行一下上面的命令，你可以看到许多添加的依赖，包括Tomcat web server和Spring Boot</p>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>为了完成我们的应用，我们需要创建一个单独的java文件。默认情况下，maven会编译来自src/main/java的源文件，所以你需要创建一个文件夹结构，然后增加一个名为src/main/java/Example.java，该java包含以下代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">	<span class="function">String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(Example<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然上面的代码不是特别多，但是暂停一下，我们一步一步来看一下这个重要的部分。</p>
<h4 id="RestController和-RequestMapping注解"><a href="#RestController和-RequestMapping注解" class="headerlink" title="@RestController和@RequestMapping注解"></a>@RestController和@RequestMapping注解</h4><p>我们的Example的第一个注解是@RestConstroller。这个被称为构造型注解。它为人们阅读代码和spring提供提示，提示该类起到一个特殊的作用。在这个例子中，我们的类是一个web的@Controller，所以当spring处理来自web的请求会考虑它。</p>
<p>@RequestMapping注解提供路由信息，它告诉spring任何/路径的Http请求都会匹配到Home这个方法。@RestController注解告诉spring直接返回String给客户端。</p>
<h4 id="EnableAutoConfiguration注解"><a href="#EnableAutoConfiguration注解" class="headerlink" title="@EnableAutoConfiguration注解"></a>@EnableAutoConfiguration注解</h4><p>第二个类级的注解是@EnableAutoConfiguration，该注解告诉SpringBoot通过你添加的jar依赖去“猜”你要怎么配置你的Spring。因为spring-boot-starter-web添加Tomcat和Spring MVC，该自动配置就会假设你将要部署一个web应用并且相应的启动spring。</p>
<h4 id="Main方法"><a href="#Main方法" class="headerlink" title="Main方法"></a>Main方法</h4><p>我们应用的最后一个部分就是Main方法，这只是一个遵循java约定的应用程序入口点。我们的主要方法通过调用run委托给springboot的springApplication。SpringApplication指引着我们的程序一次开始自动配置Tomcat web 服务器。我们需要将Example.class作为一个参数传入run方法，告诉SpringApplication哪一个是主要的Spring组件。args也传入，来暴露其他一些命令行参数。</p>
<h3 id="运行Example"><a href="#运行Example" class="headerlink" title="运行Example"></a>运行Example</h3><p>这一点，你的应用程序应该可以运行。因为你使用了spring-boot-starter-parent，你有一个有用的run目标来启动该应用程序。在项目文件的根目录下输入mvn spring-boot:run </p>
<p>然后在web浏览器里输入localhost:8080 可以看到输出结果。</p>
<p>可以通过ctrl-c退出该应用。</p>
<h3 id="构建一个可执行文件jar"><a href="#构建一个可执行文件jar" class="headerlink" title="构建一个可执行文件jar"></a>构建一个可执行文件jar</h3><p>我们通过构建一个完成的可执行文件，让其可以运行在生产环境上，来结束该例子。可执行jar(某些时候又被称为fat jars)包含了你的编译过的class还有你运行代码需要的jar依赖。</p>
<p>为了构建jar，我们需要在我们的pom.xml添加spring-boot-maven-plugin。为此，在dependencies部分的下面添加以下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>保存pom.xml然后运行 mvn package.</p>
<p>然后在你的target文件夹下，你应该可以看到myproject-0.0.1-SNAPSHOT.jar,该文件大小应该在10m左右，如果你想要看看里面，可以使用jar tvf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jar tvf target/myproject-0.0.1-.jar</span><br></pre></td></tr></table></figure>

<p>你应该也能够看到一些相似的文件命名myproject-0.0.1-SNAPSHOT.jar.original。这个original jar文件是maven通过springboot构建的在它repackaged之前。</p>
<p>通过使用 java -jar 来运行该应用程序，可以看到一样的结果。</p>
<p>以上翻译自<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-first-application.html" target="_blank" rel="noopener">developing your first springboot application</a></p>
<h1 id="学到什么"><a href="#学到什么" class="headerlink" title="学到什么"></a>学到什么</h1><ol>
<li>starter-parent不提供依赖</li>
<li>restcontroller直接返回字符串</li>
<li>getmapping提供路由信息，将路由跟方法绑定</li>
<li>main方法是通过run转移到springbootapplication</li>
<li>打成jar包需要在pom下添加plugins</li>
</ol>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Beans and Dependency Injection文档翻译</title>
    <url>/2019-10-13-Spring-Beans-and-Dependency-Injection%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/</url>
    <content><![CDATA[<hr>
<h1 id="SpringBeans和依赖注入"><a href="#SpringBeans和依赖注入" class="headerlink" title="SpringBeans和依赖注入"></a>SpringBeans和依赖注入</h1><p>你可以使用任何标准spring框架的技术来定义你的bean和他们的注入依赖。为简单期间，我们通常使用@ComponentScan(来找到你的beans)使用@Autowired(来管理注入)。</p>
<p>如果你是以先前所有的那种code layout来组织你的代码，将你的主要配置(main方法)放到root package.你可以添加@ComponentScan不需要任何参数，你的所有应用程序组件（@Component,@Service,@Repository,@Controller等等）都会被自动注册为spring Beans。</p>
<p>以下例子展示了@Service Beans的两种方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseAccountService</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> RiskAssessor riskAssessor;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DatabaseAccountService</span><span class="params">(RiskAssessor riskAssessor)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.riskAssessor = riskAssessor;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseAccountService</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> RiskAssessor riskAssessor;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DatabaseAccountService</span><span class="params">(RiskAssessor riskAssessor)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.riskAssessor = riskAssessor;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上翻译自<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-spring-beans-and-dependency-injection.html" target="_blank" rel="noopener">Spring Beans and Dependency Injection</a></p>
<h1 id="学"><a href="#学" class="headerlink" title="学"></a>学</h1><p>依赖注入，在main方法上的类里添加@ComponentScan就会自动将所有应用的组件内注册为spring bean</p>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Installing Spring Boot文档翻译</title>
    <url>/2019-10-13-Installing-Spring-Boot%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/</url>
    <content><![CDATA[<hr>
<p>#开始<br>如果你开始使用SpringBoot或者通常讲的Spring，通过阅读这一个部分。该部分回答了“是什么？”，“怎么做？”和“为什么？”的基础问题，在安装说明中包含了关于SpringBoot的介绍，我们会陪你构建你的第一个SpringBoot应用，并且讨论里面的核心原则。<br>##介绍SpringBoot<br>SpringBoot让构建一个可以运行的单机，生产级的spring应用。我们对spring平台和第三方库持opinionated(固执)的观点，所以你能够不用太麻烦的开始。大多数的spring boot应用需要非常少的spring配置。</p>
<p>你可以使用springboot来创建java的应用程序，该程序可以通过java -jar来启动，或者是传统的war部署方式。我们也提供命令行工具来运行“spring scripts”.</p>
<p>我们主要目标是：</p>
<ul>
<li>为spring的开发提供根本的快速和广泛访问的入门经验(参考google translate)</li>
<li>Be opinionated out of the box(开箱即用)，在开始时就有许多默认的配置，并且随着开发过程中需求的变化，也可以进行自定义配置</li>
<li>为大型项目的类提供一系列通用的非功能特性，例如 嵌入式服务器，安全，指标，检查</li>
<li>可以完全不需要xml配置，即可以通过java就可以完成所有配置。(完全没有代码生成？？)</li>
</ul>
<h2 id="安装springboot"><a href="#安装springboot" class="headerlink" title="安装springboot"></a>安装springboot</h2><p>SprinbBoot能够在可以使用classic的java开发工具或者是命令行工具里使用，不管哪种方式，你需要<a href="https://www.java.com/zh_CN/" target="_blank" rel="noopener">java sdk v1.8</a>或者更高。在你开始的时候，你需要通过以下命令来检查当前环境所使用的java版本:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ java -version</span><br></pre></td></tr></table></figure>

<p>如果你是刚开始接触java开发或者你想要体验一下SpringBoot,你可能想要先尝试<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html#getting-started-installing-the-cli" target="_blank" rel="noopener">Spring Boot CLI</a>。除此之外，阅读classic的安装说明</p>
<h3 id="给java开发者的安装说明"><a href="#给java开发者的安装说明" class="headerlink" title="给java开发者的安装说明"></a>给java开发者的安装说明</h3><p>你可以像许多标准的java库一样使用SpringBoot。为了做到这样，你需要你的类路径包含相应的spring-boot-*.jar。SpringBoot不需要任何特殊的工具来整合，你可以使用任何idea或者text编辑器。并且关于Spring Boot的应用没有任何特殊，所以你可以像平常运行或者debug其他java程序来操作Spring Boot应用，</p>
<p>尽管你可以复制Spring Boot jar。但是我们真诚的建议你使用一个能够支持依赖管理的构建工具(例如 Maven或者Gradle)。</p>
<h4 id="Maven-安装"><a href="#Maven-安装" class="headerlink" title="Maven 安装"></a>Maven 安装</h4><p>SpringBoot与Apache Maven3.3或者更高相兼容，如果你还没有安装Maven，你可以参考<a href="https://maven.apache.org/" target="_blank" rel="noopener">安装说明</a></p>
<blockquote>
<p>在许多操作系统中，Maven可以通过包管理来安装，如果你使用OSX Homebrew，使用brew install maven,Ubuntu用户可以通过运行 sudo apt-get install maven.Window用户可以通过<a href="https://chocolatey.org/" target="_blank" rel="noopener">包管理工具</a>运行choco install maven</p>
</blockquote>
<p>SpringBoot依赖项使用 org.springframework.boot groupId。典型的，你的maven pom文件继承了spring-boot-starter-parent文件和许多声明了starters的依赖。SpringBoot也提供了可选的Maven plugin来构建可执行jars文件。</p>
<p>下面显示了一个典型的pom.xml文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Package as an executable jar --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于SpringBoot ，Spring-boot-starter-parent是一种很好的使用方式，但是很多时候并不是一直很适合。所以有的时候，你可能需要继承来自不同的父pom或者你可能不想要我们的默认设置，在这些情况下，可以参考后面的文章，有多种解决方法通过import的域</p>
</blockquote>
<h3 id="安装Gradle"><a href="#安装Gradle" class="headerlink" title="安装Gradle"></a>安装Gradle</h3><p>SpringBoot与Gradle4.4或者更高版本相适配，如果你还没有安装Gradle，你可以参考下面这种<a href="https://gradle.org/" target="_blank" rel="noopener">安装说明</a></p>
<p>SpringBoot的依赖项可以通过使用org.springframework.boot goup来声明。通常的，你的文件会声明许多Starters的以来，SpringBoot提供一个有用的Gradle plugin能够用来对于简单的以来的声明和创建可执行文件jar。</p>
<blockquote>
<p>Gradle Wrapper</p>
<p>当你需要构建一个项目的时候，Gradle Wrapper提供一种很好的获得Gradle的方式。这是一个很小的脚本或者库，你可以与你的代码一并提交，引导程序的构建</p>
</blockquote>
<h3 id="安装Spring-Boot-CLI"><a href="#安装Spring-Boot-CLI" class="headerlink" title="安装Spring Boot CLI"></a>安装Spring Boot CLI</h3><p>Spring Boot CLI是一个命令行工具，你可以通过它来快速构建spring的原型。它会让你运行Groovy脚本，说明你并需要许多样本代码，而只是一些java-like的语法。</p>
<p>你并不需要Spring Boot CLI来使用SpringBoot，但是这是一种最快的方式来得到一个Spring应用。</p>
<h4 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h4><p>你可以下载从Spring的软件库里下载Spring CLI。</p>
<p>一旦下载，跟随着解压缩文件里的安装说明就可以安装了。总的来说，下载的.zip文件里有一个spring脚本(对于Windows是spring.bat)在bin/文件夹下。或者你可以使用java -jar运行.jar文件(这个脚本会确保你的classpath在正确的集合里)</p>
<h4 id="通过SDKMAN安装"><a href="#通过SDKMAN安装" class="headerlink" title="通过SDKMAN安装"></a>通过SDKMAN安装</h4><p>SDKMAN被用来管理各种各样的SDKs的库，包括Groovy和SpringBoot CLI。从<a href="https://sdkman.io/" target="_blank" rel="noopener">sdkman.io</a>获取sdkman。然后通过以下命令来安装springboot:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ sdk install springboot</span><br><span class="line">$ spring --version</span><br><span class="line">Spring Boot v2<span class="number">.1</span><span class="number">.9</span>.RELEASE</span><br></pre></td></tr></table></figure>

<h4 id="命令行补全"><a href="#命令行补全" class="headerlink" title="命令行补全"></a>命令行补全</h4><p>SpringBoot CLI包含了许多脚本，其中包括为BASH和zah shell提供命令行补全功能…</p>
<h4 id="Windows-Scoop安装"><a href="#Windows-Scoop安装" class="headerlink" title="Windows Scoop安装"></a>Windows Scoop安装</h4><p>如果你是window用户并且使用Scoop(一个Window的命令行安装工具)，你可以通过以下命令行来安装:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;scoop bucket add extras</span><br><span class="line">&gt;scoop install springboot</span><br></pre></td></tr></table></figure>

<p>该文件会被安装到~/scoop/apps/springboot/current/bin</p>
<blockquote>
<p>如果你没有看到安装的文件，那么有可能你安装的Scoop版本比较老，在这种情况下，运行scoop  update然后再试一次</p>
</blockquote>
<h4 id="Spring-CLI快速开始的例子"><a href="#Spring-CLI快速开始的例子" class="headerlink" title="Spring CLI快速开始的例子"></a>Spring CLI快速开始的例子</h4><p>你可以使用下面的web应用来测试你的安装。为了开始，创建一个名为app.groovy，像下面这样:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThisWillActuallyRun</span>&#123;</span></span><br><span class="line">    <span class="meta">@RequestMappint</span>(<span class="string">"/"</span>)</span><br><span class="line">    String home()&#123;</span><br><span class="line">        <span class="string">"Hello World"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在shell运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> spring run app.groovy</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>第一次因为需要下载依赖，所以运行会比较慢，后续的运行将会快很多</p>
</blockquote>
<p>在你最喜欢的web浏览器输入 localhost:8080 ,你会看到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure>

<h3 id="更新旧版本的SpringBoot"><a href="#更新旧版本的SpringBoot" class="headerlink" title="更新旧版本的SpringBoot"></a>更新旧版本的SpringBoot</h3><p>如果你从1.x版本的springboot更新。</p>
<p>当更新到新版本时，一些特性会被更新，一些属性可能会被重新命名或者被移除，SpringBoot提供一种方式来分析你的应用环境，并且在启动时打印出诊断，而且还可以在你运行的时候临时迁移属性。你可以在你的项目中通过添加下面的依赖来获得该特性:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-properties-migrator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>一旦你完成了整合，别忘记把该组件移除掉</p>
</blockquote>
<p>以上翻译自：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html" target="_blank" rel="noopener">Installing Spring Boot</a></p>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第十三周第三篇</title>
    <url>/2019-10-13-ARTS%E7%AC%AC%E5%8D%81%E4%B8%89%E5%91%A8%E7%AC%AC%E4%B8%89%E7%AF%87/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ARTS完整版 更新！</p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>题目：给一组数，相邻的两个只能取一个或者都不取，问最大得到的整数</p>
<p>思路：一开始没有思路，看了题解，通过抽象f(n)=Math.max(f(n-2)+nums[n],f(n-1))</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">2</span>) <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] result=<span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        result[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">        result[<span class="number">1</span>]=Math.max(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            result[i]=Math.max(result[i-<span class="number">2</span>]+nums[i],result[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result[nums.length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个是我写的代码，还是有点丑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> curr=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> pre=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num:nums)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp=curr;</span><br><span class="line">            curr=Math.max(pre+num,curr);</span><br><span class="line">            pre=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个代码还是比较妙，通过临时变量来存储</p>
<p>题目：最长回文子串</p>
<p>思路：暴力法,时间复杂度是O(n^3) 没有过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindromic</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=s.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i)!=s.charAt(len-i-<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()==<span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        String ans=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=s.length();j++)&#123;</span><br><span class="line">                String test=s.substring(i,j);</span><br><span class="line">                <span class="keyword">if</span>(isPalindromic(test)&amp;&amp;test.length()&gt;max)&#123;</span><br><span class="line">                    ans=s.substring(i,j);</span><br><span class="line">                    max=Math.max(max,ans.length());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先补充一题 最长公共子序列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] arr=<span class="keyword">new</span> <span class="keyword">int</span>[text1.length()+<span class="number">1</span>][text2.length()+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=text1.length();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=text2.length();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(text1.charAt(i-<span class="number">1</span>)==text2.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                    arr[i][j]=arr[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    arr[i][j]=Math.max(arr[i-<span class="number">1</span>][j],arr[i][j-<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[text1.length()][text2.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h3><p>为了练习我的英语，并且保证自己的学习质量。我觉得慢慢开始翻译springboot的文档，顺便完善自己的体系</p>
<p><a href="[https://jiayouxujin.github.io/2019/10/13/Installing-Spring-Boot%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/](https://jiayouxujin.github.io/2019/10/13/Installing-Spring-Boot文档翻译/)">installing-spring-boot</a></p>
<p>学到了</p>
<ol>
<li>更新版本，有个工具用来检查环境</li>
<li>通过多个工具来进行搭建springboot</li>
</ol>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>好像没啥tips，都是莽着干，看来要总结一些快捷键</p>
<h3 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h3><p>没啥可share的，只知道一步一步的走，脚踏实地。</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>Auto-configuration文档翻译</title>
    <url>/2019-10-13-Auto-configuration%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/</url>
    <content><![CDATA[<hr>
<h1 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h1><p>SpringBoot自动配置尝试着通过你添加的Jar依赖来配置你的Spring应用。例如HSQLDB在你的classpath,你不要手动配置任何数据库连接的bean，SpringBoot会自动配置。</p>
<p>你需要将@EnableAutoConfiguration或者@SpringBootApplication注解添加到你的配置类</p>
<blockquote>
<p>你只需要添加到@EnableAutoConfiguration或者@SpringBootApplication到主要配置类，写着Main方法的类</p>
</blockquote>
<h2 id="逐渐取代自动配置"><a href="#逐渐取代自动配置" class="headerlink" title="逐渐取代自动配置"></a>逐渐取代自动配置</h2><p>自动配置是非侵入式的，任何时候你能够自动配置来取代自动配置。例如，如果你添加自己的DataSource的bean，默认的嵌入式数据库支持将不再支持。</p>
<p>如果你想要知道当前自动配置的东西，你只需要通过–debug启动你的应用。在控制台就可以看到配置。</p>
<h2 id="丢弃特殊的自动配置类"><a href="#丢弃特殊的自动配置类" class="headerlink" title="丢弃特殊的自动配置类"></a>丢弃特殊的自动配置类</h2><p>如果你发现一些特殊的自动配置类是你不想要应用的，你可以使用@EnalbeAutoConfiguration的exclude属性来丢弃掉他们，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span>(exclude=&#123;DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上翻译自<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-auto-configuration.html" target="_blank" rel="noopener">Auto-configuration</a></p>
<h1 id="学"><a href="#学" class="headerlink" title="学"></a>学</h1><p>知道了自动配置</p>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Build Systems文档翻译</title>
    <url>/2019-10-13-Build-Systems%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/</url>
    <content><![CDATA[<hr>
<h1 id="使用springboot"><a href="#使用springboot" class="headerlink" title="使用springboot"></a>使用springboot</h1><p>这一部分我们继续深入关于你应该怎样使用SpringBoot。会包含一些话题例如 构建系统，自动配置和如何运行你的应用。我们也会包含一些SpringBoot最好的练习。尽管关于springboot没有什么特殊的地方(你可以把它想象成一个另外一个库)，但是这里仍有一些建议，随着你的学习，会让你的部署步骤变得更简单</p>
<h2 id="构建系统"><a href="#构建系统" class="headerlink" title="构建系统"></a>构建系统</h2><p>强烈建议你通过支持依赖管理的关键工具来构建系统，并且我们建议使用Maven或者Gradle.</p>
<h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>每一个版本的springboot都会提供一个关于它支持哪些依赖的“精选清单”，在实践中，你不需要在你的构建配置中为每一个依赖提供版本号(version)，因为springboot为你管理好这个。当你升级springboot的时候，这些依赖也会以相同的方式进行升级。</p>
<blockquote>
<p>当然，如果也可以选择一个特殊的版本，而不是springboot默认提供给你的</p>
<p>但是我们强烈建议你不要写上version</p>
</blockquote>
<h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>Maven用户可以通过继承spring-boot-starter-parent获得一些必要的配置，该parent文件提供以下特性：</p>
<ul>
<li>Java 1.8 作为默认的编译级别</li>
<li>源代码通过UTF-8编码</li>
<li>一个Dependency Management，从spring-boot-dependencies pom继承过来的，它会管理通常依赖的version,该依赖管理让你当使用一些依赖是忽略version的标志</li>
<li>一个执行的repackage goal</li>
<li>必要的资源筛选</li>
<li>必要的插件配置</li>
<li>为了application.properties和application,yml包括特殊的文件(例如 application-dev.properties和application-dev.yml)进行必要的资源筛选</li>
</ul>
<h4 id="继承starter-parent"><a href="#继承starter-parent" class="headerlink" title="继承starter parent"></a>继承starter parent</h4><p>为了继承自spring-boot-starter-parent来配置你的文件，通过如下来设置parent：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>你仅仅需要特别标注该配置的version,其他都可以放心的忽略掉version</p>
</blockquote>
<h4 id="不通过parent-pom使用spring-boot"><a href="#不通过parent-pom使用spring-boot" class="headerlink" title="不通过parent pom使用spring boot"></a>不通过parent pom使用spring boot</h4><p>不是每个人都喜欢继承spring-boot-starter-parent。你可能需要使用更合适的父类，或者想要为每一个Maven配置明确的声明。</p>
<p>如果你不想要使用spring-boot-starter-parent,你仍然可以通过scope=import来使用依赖管理的好处(但是没有插件管理)，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- Import dependency management from Spring Boot --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用springboot-maben-plugin"><a href="#使用springboot-maben-plugin" class="headerlink" title="使用springboot maben plugin"></a>使用springboot maben plugin</h4><p>SpringBoot包含Maven Plugin，可以为把项目打包成可执行jar.如果你想要使用它，将其添加到你的plugins部分，如下面所示:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你使用springboot starter parent pom,你仅需要添加该plugin.除非你想要更改该parent定义的设置，否则没有必要自己配置它</p>
</blockquote>
<h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><p>这部分我们后面可以见到(为了不打扰翻译的顺序，我们按照文本来)</p>
<h3 id="Starters"><a href="#Starters" class="headerlink" title="Starters"></a>Starters</h3><p>Starters是一系列你可以添加到你的应用的便利的依赖描述符。你可以一站式( a one-stop shop)得到你想要的spring和相关技术，而不是遍历(hunt through)相同的代码和张贴复制依赖描述符。例如，如果你想要通过spring and jpa来访问数据库，只需要包含spring-boot-starter-data-jpa依赖到你的文件里。</p>
<blockquote>
<p>命名里奥妙</p>
<p>所有官方的starter都遵循着相似的命名样式：spring-boot-starter-,后面是一个程序的特别类型。当你需要找到一个starter，该命名结果能够提供帮助。</p>
<p>第三方的starter不能够以spring-boot开头，通常是以项目的名字开头的。</p>
</blockquote>
<p>以上翻译自<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-build-systems.html" target="_blank" rel="noopener">Build Systems</a></p>
<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><ol>
<li>以后依赖不写版本，通过springboot的依赖管理</li>
<li>观察自己引入的依赖是以什么开头</li>
</ol>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Configuration Classes文档翻译</title>
    <url>/2019-10-13-Configuration-Classes%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/</url>
    <content><![CDATA[<hr>
<h1 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h1><p>SpringBoot支持以Java编写的配置，尽管他可能可以将springbootapplication和xml一起使用，我们通常建议(前面这里翻译成 真诚建议hhh),你的主要源是一个单独的有@Configuration注解的类。通常定义Main方法的类是首选的配置。</p>
<blockquote>
<p>许多网上流传的spring配置都是通过xml,如果可能可以尝试使用java编写该配置</p>
</blockquote>
<h2 id="导入额外的配置类"><a href="#导入额外的配置类" class="headerlink" title="导入额外的配置类"></a>导入额外的配置类</h2><p>你需要在这个单独类上添加@Configuration,@Import注解可以被用来导入额外的配置类，通常，你可以使用@ComponentScan来自动识别所有spring组件，包括@Configuration类</p>
<h2 id="导入XMLpeizhi"><a href="#导入XMLpeizhi" class="headerlink" title="导入XMLpeizhi"></a>导入XMLpeizhi</h2><p>如果你确信你要使用xml编写的配置，我们建议你仍然以@Configuration类，你可以使用@ImportResource注解来加载xml配置文件</p>
<p>以上翻译自<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-configuration-classes.html" target="_blank" rel="noopener">Configuration Classes</a></p>
<h1 id="学"><a href="#学" class="headerlink" title="学"></a>学</h1><p>如标题所说，尝试着类完成配置。</p>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Developer Tools文档翻译</title>
    <url>/2019-10-13-Developer-Tools%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/</url>
    <content><![CDATA[<hr>
<h1 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h1><p>SpringBoot包含一些额外的工具让应用开发的过程更加愉快，Spring-boot-devtools组件可以被加到任何项目里用来提供额外的开发时的特性。为了得到devtools的支持，需要添加一下到你的pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当运行一个完全的打包过的文件时，开发者工具会被自动丢弃。如果你的应用是通过java -jar 或者是在一个特殊的classloader，它会被认为是生产的应用。如果这不合适，当你在一个容器里运行，考虑排除devtools或者设置-Dspring.devtools.restart.enabled=false系统属性</p>
</blockquote>
<h2 id="属性默认值"><a href="#属性默认值" class="headerlink" title="属性默认值"></a>属性默认值</h2><p>SpringBoot支持的一些库使用缓存(cache)来提高性能。例如，template engines(模板引擎)缓存编译过的模板来防止不断的分析模板文件。而且，当Spring MVC在服务静态资源的时候，也能通过在响应头添加HTTP缓存。</p>
<p>尽管缓存在生产过程中非常有益，但是它会让你在开发过程中适得其反。因为这样你会看不到刚刚在应用程序中修改的部分。由于这个原因，spring-boot-devtools会默认的丢弃掉缓存选项。</p>
<p>缓存选项通常在你的application.properties文件里被配置。例如，Thymeleaf提供spring.thymeleaf.cache属性。无需手动设置这些属性，spring-boot-devtools组件能够自动的应用这些必要的开发时的属性。</p>
<p>因为你在开发Spring MVC和Spring WebFlux应用时，需要一些信息，开发工具将为web的logging组启动DEBUG日志。这会给你关于请求，处理请求，和响应信息等。如果你希望打印出请求的详细信息(包括潜在的必要信息)，你可以转向spring.http.log-request-detail配置属性。</p>
<blockquote>
<p>如果你不想要这些默认的属性，你可以在你的application.properties里将spring.devtools.add-properties设置为false</p>
</blockquote>
<h2 id="自动重启"><a href="#自动重启" class="headerlink" title="自动重启"></a>自动重启</h2><p>每当在classpath里的文件发生变化时，使用spring-boot-devtools的应用会自动重启。这是一个非常好的特性，当你的代码发生变化时会给一个及时反馈。默认的，在classpath上的任何一个入口都会被监控是否发生改变。</p>
<blockquote>
<p>触发重启</p>
<p>更新classpath是唯一的方法触发重启。更新classpath的方式依赖于你使用的IDE。</p>
<p>在Eclipse，保存一个更改的文件就是触发重启。</p>
<p>在IntelliJ IDEA,构建项目(Build-&gt;Build Project)有着相同的作用</p>
</blockquote>
<blockquote>
<p>DevTools自动忽略文件名为spring-boot,spring-boot-devtools,spring-boot-autoconfigure,spring-boot-actuator和spring-boot-starter发生变化，不会决定时候要重启</p>
</blockquote>
<blockquote>
<p>Restart的原理</p>
<p>SpringBoot的Restart的工作原理是，有两个类加载。一种不会发生变化的类(例如第三方的jar库)被加载到base classloader。哪些你经常开发的类会被加载到restart classloader。当应用被重新启动时，在restart classloader中的类会被丢弃掉，并且一个新的会被创建。这种方法意味着应用的restart明显的比cold starts快。</p>
</blockquote>
<h3 id="记录条件评估中的更改-Logging-changes-in-condition-evalution"><a href="#记录条件评估中的更改-Logging-changes-in-condition-evalution" class="headerlink" title="记录条件评估中的更改(Logging changes in condition evalution)"></a>记录条件评估中的更改(Logging changes in condition evalution)</h3><p>默认的，当你的应用被重新启动时，关于条件的改变都会被记录。当你对你的代码进行更改的时候，例如增加或者删除beans或者在配置文件里新设置什么配置，report会把这些改变交给你的应用自动配置.</p>
<p>如果想要丢弃这个report的日志功能，设置以下属性:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.devtools.restart.log-condition-evaluation-delta</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>

<h3 id="排除一些资源"><a href="#排除一些资源" class="headerlink" title="排除一些资源"></a>排除一些资源</h3><p>如果很明确一些资源发生改变的时候不需要触发重启。例如Thymeleaf引擎可以被到位的编辑。默认的，当在/META-INF/maven,/META-INF/resources,/resources,/static,/pulic或者/template不会触发重启，但是会触发live reload。如果你想要自定义排除的资源，你可以使用spring.devtools.restart.exclude属性，例如仅仅排除/static和/pulic,你需要通过以下属性来设置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.devtools.restart.exclude</span>=<span class="string">static/**,public/**</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你想要保持这些默认的资源，并且还想要添加一些额外的资源。使用spring.devtools.restart.additional-exclude</p>
</blockquote>
<h3 id="监控额外的路径"><a href="#监控额外的路径" class="headerlink" title="监控额外的路径"></a>监控额外的路径</h3><p>你可以使用spring.devtools.restart.additional-paths添加额外的路径</p>
<h3 id="丢弃重启特性"><a href="#丢弃重启特性" class="headerlink" title="丢弃重启特性"></a>丢弃重启特性</h3><p>如果你不想要使用restart的特性，你可以视同spring.devtools.restart.enabled属性。在大多数情况下，你可以在你的application.properties文件里设置该属性(该属性仍然会加载到restart classloader,但会并不会监控文件的变化)</p>
<p>如果你想要完全的丢弃该支持(例如，它对一些特殊的库不支持)，你在main方法里，在系统启动前添加该属性为false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	System.setProperty(<span class="string">"spring.devtools.restart.enabled"</span>, <span class="string">"false"</span>);</span><br><span class="line">	SpringApplication.run(MyApp<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用一个触发的文件"><a href="#使用一个触发的文件" class="headerlink" title="使用一个触发的文件"></a>使用一个触发的文件</h3><p>如果你使用的IDE不断的进行编译，你可能更想要在一些特殊时候进行restart。为了达到如此，你可以添加trigger file。当你想要自动的触发restart，该trigger file必须被更改。</p>
<p>可以使用spring.devtools.restart.trigger-file属性来设置trigger file。该文件必须出现在你的classpath。</p>
<p>例如，你有一个项目是下面这种结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">+- main</span><br><span class="line">   +- resources</span><br><span class="line">      +- .reloadtrigger</span><br></pre></td></tr></table></figure>

<p>你的trigger-file可能长这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.devtools.restart.trigger-file=.reloadtrigger</span><br></pre></td></tr></table></figure>

<p>只有当该文件被更新时，你的应用程序才会被restart</p>
<h3 id="自定义重启类加载器"><a href="#自定义重启类加载器" class="headerlink" title="自定义重启类加载器"></a>自定义重启类加载器</h3><p>在前面讲到的restart的原理，我们可以知道其实通过实现两个加载类来实现的。在大多数应用中，该方法和适应。但是一些时候它也会导致类加载的错误。</p>
<p>默认的。任何在你IDE打开的项目都会被加载到restart classloader.以及一些通常的.jar文件会被加载到base classloader。如果你在一个多模块下工作，并且并不是每个模块都会在IDE打开，你小自定义一些事。你可以新建META-INF/spring-devtools.properities文件。</p>
<p>该文件里面包含的属性前缀为restart.exclude和restart.include。include属性下的文件是希望被加载到restart classloader。exclude元素下的文件希望被加载到base classloader.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">restart.exclude.companycommonlibs=/mycorp-common-[\\w\\d-\.]+\.jar</span><br><span class="line">restart.include.projectcommon=/mycorp-myproj-[\\w\\d-\.]+\.jar</span><br></pre></td></tr></table></figure>

<h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>SpringBoot的重启属性不适用于哪些ObjectInputStream的反序列化</p>
<h3 id="LiveReload"><a href="#LiveReload" class="headerlink" title="LiveReload"></a>LiveReload</h3><p>spring-boot-devtools组件包含了一个内嵌的LiveReload服务，当资源发生变化的时候，它会触发浏览器刷新。如今支持Chrome,Firefox,Safari。</p>
<p>如果你不想要在应用启动时运行LiveReload服务，你可以设置spring.devtools.livereload.enabled属性为false</p>
<blockquote>
<p>一次只能运行一个LiveReload服务，如果你启动多个应用的话，只有第一个应用支持LiveReload</p>
</blockquote>
<h1 id="学"><a href="#学" class="headerlink" title="学"></a>学</h1><p>已在项目中使用devtools</p>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBootApplication文档翻译</title>
    <url>/2019-10-13-SpringBootApplication%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/</url>
    <content><![CDATA[<hr>
<h1 id="使用-SpringBootApplication注解"><a href="#使用-SpringBootApplication注解" class="headerlink" title="使用@SpringBootApplication注解"></a>使用@SpringBootApplication注解</h1><p>许多SpringBoot开发者喜欢他们的应用能够使用自动配置，组件扫描还能够支持自定义另外的配置在他们的“应用类”上，一个单独的@SpringBootApplication注解就能够用来完成以上三个特性</p>
<ul>
<li>@EnableAutoConfiguration</li>
<li>@ComponentScan</li>
<li>@Configuration</li>
</ul>
<p>如下面这个例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">// same as @Configuration @EnableAutoConfiguration @ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="运行你的应用程序"><a href="#运行你的应用程序" class="headerlink" title="运行你的应用程序"></a>运行你的应用程序</h1><p>将你的应用程序打包成jar并且使用嵌入式的HTTP服务器使得你可以向其他应用程序以一样来运行是一个巨大的优点。调试SpringBoot应用也很简单，不需要任何特别的IDEA的插件</p>
<h2 id="从一个IDE中运行"><a href="#从一个IDE中运行" class="headerlink" title="从一个IDE中运行"></a>从一个IDE中运行</h2><p>你可以向一个简单地java应用一样，在你的IDE里运行。但是首先你需要导入你的项目，导入项目的方式依赖于你的IDE和你的构建系统的方式(maven等)。大多数IDE可以直接导入maven文件。</p>
<h2 id="作为打包程序被运行"><a href="#作为打包程序被运行" class="headerlink" title="作为打包程序被运行"></a>作为打包程序被运行</h2><p>如果你将应用程序打包成可执行的jar文件，你可以通过java -jar 来运行程序。</p>
<p>也可以讲远程的debugger绑定到你的应用程序。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=8000,<span class="built_in">suspend</span>=n \</span></span><br><span class="line">       -jar target/myapplication-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<h2 id="通过Maven-Plugin"><a href="#通过Maven-Plugin" class="headerlink" title="通过Maven Plugin"></a>通过Maven Plugin</h2><p>可以通过使用mvn spring-boot:run来运行</p>
<h2 id="通过Gradle-Plugin"><a href="#通过Gradle-Plugin" class="headerlink" title="通过Gradle Plugin"></a>通过Gradle Plugin</h2><p>使用gradle bootRun</p>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第十三周第二篇</title>
    <url>/2019-10-12-ARTS%E7%AC%AC%E5%8D%81%E4%B8%89%E5%91%A8%E7%AC%AC%E4%BA%8C%E7%AF%87/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>题目：爬梯子，每次爬一个或者两个</p>
<p>思路：很好的想到递推公式 f(n)=f(n-1)+f(n-2),但是发现直接这样会超时，所以需要记忆，通过引入一个数组来记忆中间的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过递归,发现时间超时</span></span><br><span class="line">        <span class="keyword">int</span>[] temp=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        temp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;<span class="number">1</span>)</span><br><span class="line">            temp[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> solve(n,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span>[] temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp[n]&gt;<span class="number">0</span>) <span class="keyword">return</span> temp[n];</span><br><span class="line">        <span class="keyword">else</span> temp[n]=solve(n-<span class="number">1</span>,temp)+solve(n-<span class="number">2</span>,temp);</span><br><span class="line">        <span class="keyword">return</span> temp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>题目：买卖股票的最佳时机</p>
<p>思路：暴力法，枚举所有可能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prices.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;prices.length;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp=prices[j]-prices[i];</span><br><span class="line">                result=Math.max(temp,result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好吧第二个的思路还真的没有想到，如果将其放入到图表上，我们只要找到最低谷之后的最高利润就可以，就最低谷之后的最高峰。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> max=<span class="number">0</span>,min=Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prices.length;i++)&#123;</span><br><span class="line">            min=Math.min(min,prices[i]);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(max&lt;prices[i]-min)&#123;</span><br><span class="line">                max=prices[i]-min;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongodb的简单学习</title>
    <url>/2019-10-11-Mongodb%E7%9A%84%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>文档，内嵌文档的思想，减少表的个数，当然也会增加数据的冗余，这是一个需要权衡的问题。</p>
<h3 id="MongoDB基础知识"><a href="#MongoDB基础知识" class="headerlink" title="MongoDB基础知识"></a>MongoDB基础知识</h3><ol>
<li>文档可以看成关系型数据库里的行，好吧其实我一直当做是行，而无法脱离关系型数据库的思想。<ol>
<li>就是键值对的一个有序集合，类似于编程语言中的Map，hash,dic</li>
<li>文档区分类型和大小写</li>
<li>文档中不能含有重复的键</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"foo"</span>,<span class="number">3</span>&#125; 不同 &#123;<span class="string">"foo"</span>,<span class="string">"3"</span>&#125; &#123;<span class="string">"foo"</span>,<span class="number">3</span>&#125; 不同&#123;<span class="string">"Foo"</span>，<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>集合 集合可以想象成关系型数据库里面的表 就是一组文档<ol>
<li>集合是动态，就说明里面的文档可以是各种各样的，不过为了开发，还是最好把相同类型的文档放到同一个集合下面</li>
</ol>
</li>
<li>数据库<ol>
<li>集合的集合</li>
<li>admin 从身份验证角度来讲的话，这个是root数据库，如果将一个用户添加到admin数据库，其将自动获得所有数据库的权限</li>
<li>local 这个数据库永远不可以复制</li>
<li>config 用于分片的设置</li>
</ol>
</li>
<li>基本数据类型<ol>
<li>null  用来表示空值，或者是不存在的字段</li>
<li>布尔型 </li>
<li>数值</li>
<li>字符串</li>
<li>日期</li>
<li>正则表达式</li>
<li>数据</li>
<li>内嵌文档</li>
<li>对象id</li>
</ol>
</li>
<li>内嵌文档<ol>
<li>这个应该可以说是跟关系型数据库的不同，我原先想成的还是数据的形式，现在有点晓东了，但是容易造成数据冗余</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"John Doe"</span>,</span><br><span class="line">    <span class="string">"address"</span>:&#123;</span><br><span class="line">        <span class="string">"street"</span>:<span class="string">"123 Park Street"</span>,</span><br><span class="line">        <span class="string">"city"</span>:<span class="string">"Anytown"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>Mongo shell<ol>
<li>一开始我不知道为什么docker启动Mongo要输入host，是因为这样通过mongo shell连接到指定的机器上</li>
</ol>
</li>
</ol>
<h3 id="创建、更新和删除文档"><a href="#创建、更新和删除文档" class="headerlink" title="创建、更新和删除文档"></a>创建、更新和删除文档</h3><ol>
<li>插入并保存文档</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">db.collections.insert()</span><br><span class="line">db.collectiions.insertMany()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>删除文档</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">db.collection.remove()  <span class="comment">//可以加删除的条件</span></span><br><span class="line">db.collection.deleteOne()</span><br><span class="line">db.collection.deleteMany()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>更新文档</li>
</ol>
<h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><ol>
<li>指定返回的键</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;&#125;,&#123;"username":1,"password":0&#125;)  #表示返回username,不返回password</span><br></pre></td></tr></table></figure>

<p>还可以使用一些高级特性，例如游标等</p>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>内嵌文档，针对修改不是很频繁的</p>
<p>不支持事物</p>
<h3 id="创建副本集"><a href="#创建副本集" class="headerlink" title="创建副本集"></a>创建副本集</h3><p>。。。</p>
]]></content>
      <tags>
        <tag>NoSql</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第十三周</title>
    <url>/2019-10-11-ARTS%E7%AC%AC%E5%8D%81%E4%B8%89%E5%91%A8/</url>
    <content><![CDATA[<hr>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>题目：最大子序列之和</p>
<p>思路：</p>
<ol>
<li>O(n^3) 暴力枚举，抱歉时间复杂度没有过，不过也碰到一个样例，只有一个负数的测试数据，所以刚开始初始化结果的时候，不能是0，应该是最大的负数</li>
<li>O(n^2) 通过了，但是效率不是很好。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> MAXX=-Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">             <span class="keyword">int</span> tempsum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;nums.length;j++)&#123;</span><br><span class="line">                    tempsum+=nums[j];</span><br><span class="line">                <span class="keyword">if</span>(tempsum&gt;MAXX)&#123;</span><br><span class="line">                    MAXX=tempsum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> MAXX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>动态规划的方法，因为可以推导出公式 d=max(d+a[k],a[k])</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> MAXX=-Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            result=Math.max(result+nums[i],nums[i]);</span><br><span class="line">            MAXX=Math.max(result,MAXX);</span><br><span class="line">     &#125;</span><br><span class="line">        <span class="keyword">return</span> MAXX;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>分治法 时间复杂度O(nlogn)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        <span class="keyword">return</span> solve(<span class="number">0</span>,nums.length-<span class="number">1</span>,nums);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left==right)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[left];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> leftmax=solve(left,middle,nums);</span><br><span class="line">        <span class="keyword">int</span> rightmax=solve(middle+<span class="number">1</span>,right,nums);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//现在进行整合</span></span><br><span class="line">        <span class="keyword">int</span> lefts=-Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> tempsum1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=middle;i&gt;=left;i--)&#123;</span><br><span class="line">            tempsum1+=nums[i];</span><br><span class="line">            lefts=Math.max(lefts,tempsum1);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> rights=-Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> tempsum2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=middle+<span class="number">1</span>;i&lt;=right;i++)&#123;</span><br><span class="line">            tempsum2+=nums[i];</span><br><span class="line">            rights=Math.max(rights,tempsum2);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> temp=Math.max(leftmax,rightmax);</span><br><span class="line">        <span class="keyword">return</span> Math.max(temp,lefts+rights);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不错以上是我昨天上课学习到的算法，今天算是自己又练习了一遍.</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot与Redis</title>
    <url>/2019-10-06-Springboot%E4%B8%8ERedis/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好吧，这事是这样的。今天早上打开redis，想想是不是可以给项目加个缓存呢？好吧说走就走。</p>
<h3 id="理论先行"><a href="#理论先行" class="headerlink" title="理论先行"></a>理论先行</h3><blockquote>
<p>Redis属于键值数据库，使用哈希表存放键值和数据，而且key和value可以是任何内容，不仅是简单对象还是复杂对象都可以存储。并且查询效率高，易于扩展。</p>
</blockquote>
<h4 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h4><p>Redis根据官方提供的数据，每秒请求可以达到10万次。</p>
<ul>
<li>底层是用C实现，运行时没有其他太多的依赖</li>
<li>基于内存的数据库，避免硬盘IO提高速度</li>
<li>使用Hash，数据访问的复杂度为O(1)</li>
<li>单进程单线程模型</li>
</ul>
<h3 id="废话不过说上代码"><a href="#废话不过说上代码" class="headerlink" title="废话不过说上代码"></a>废话不过说上代码</h3><p>首先呢，这个是参考网上的一个<a href="https://programmerfriend.com/ultimate-guide-to-redis-cache-with-spring-boot-2-and-spring-data-redis/" target="_blank" rel="noopener">博客</a></p>
<h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cache.type</span>=<span class="string">redis</span></span><br><span class="line"><span class="meta">spring.cache.redis.time-to-live</span>=<span class="string">86400s</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">xxxxx</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8000</span></span><br></pre></td></tr></table></figure>

<p>说说踩到的坑,spring.cache.redis.time-to-live是duration time所以要带上单位，当时怎么测试怎么不行。</p>
<h4 id="CacheService"><a href="#CacheService" class="headerlink" title="CacheService"></a>CacheService</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Cacheable</span>(cacheName=<span class="string">"myCache"</span>,key=<span class="string">"'prefix_'.concat(#relevant)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFromCache</span><span class="params">(String relevant)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@CacheEvict</span>(cacheNames=<span class="string">"myCache"</span>,key=<span class="string">"'prefix_'.concat(#relevant)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeFromCache</span><span class="params">(String relevant)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@CachePut</span>(cacheNames=<span class="string">"myCache"</span>,key=<span class="string">"'prefix_'.concat(#relevant)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">populateCache</span><span class="params">(String relevant,String un)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"this is it again"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	CacheService cacheService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">"Starting controlled cache: -----------"</span>);</span><br><span class="line">        String controlledFirst = getFromControlledCache(<span class="string">"first"</span>);</span><br><span class="line">        log.info(<span class="string">"Controlled First: &#123;&#125;"</span>, controlledFirst);</span><br><span class="line">        String controlledSecond = getFromControlledCache(<span class="string">"second"</span>);</span><br><span class="line">        log.info(<span class="string">"Controlled Second: &#123;&#125;"</span>, controlledSecond);</span><br><span class="line"></span><br><span class="line">        getFromControlledCache(<span class="string">"first"</span>);</span><br><span class="line">        getFromControlledCache(<span class="string">"second"</span>);</span><br><span class="line">        getFromControlledCache(<span class="string">"third"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getFromControlledCache</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        String fromCache = controlledCacheService.getFromCache(param);</span><br><span class="line">        <span class="keyword">if</span> (fromCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">"Oups - Cache was empty. Going to populate it"</span>);</span><br><span class="line">            String newValue = controlledCacheService.populateCache(param, UUID.randomUUID().toString());</span><br><span class="line">            log.info(<span class="string">"Populated Cache with: &#123;&#125;"</span>, newValue);</span><br><span class="line">            <span class="keyword">return</span> newValue;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"Returning from Cache: &#123;&#125;"</span>, fromCache);</span><br><span class="line">        <span class="keyword">return</span> fromCache;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意 这里的controlledCacheService就是cacheService。因为我写了两个demo，现在把它合在一起，所以出现这个问题。</p>
<p>稍微解释一下</p>
<ol>
<li>只要通过@EnableCaching注解支持缓存，SpringBoot的自动配置就会为其加载缓存的基础配置，并且也只有通过该注解才会启动Caching。所以如果不想要Cache可以通过删掉该注释。</li>
<li>Cacheable</li>
</ol>
<p>用来表示一个方法可以被Cacheable。这个方法的结果会被存放到cache.当多次通过相同的参数调用该方法的时候，这个结果会直接从cache中取出来，而并不会真正再一次执行该方法。</p>
<p>必须有一个cache的名字跟这个方法联系起来。</p>
<p>现在深入学习</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(&#123;<span class="string">"books"</span>,<span class="string">"isbns"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(ISBN isbn)</span></span></span><br></pre></td></tr></table></figure>

<p>上面这个是两个cache的名字，只要其中一个命中就会直接返回结果，而不会去执行方法。并且另外一个cache(如果没有命中)中的值也会更新。</p>
<p>自定义的Key 通过SpEL实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(cacheNames=<span class="string">"books"</span>, key=<span class="string">"#isbn"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(ISBN isbn, <span class="keyword">boolean</span> checkWarehouse, <span class="keyword">boolean</span> includeUsed)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">@<span class="title">Cacheable</span><span class="params">(cacheNames=<span class="string">"books"</span>, key=<span class="string">"#isbn.rawNumber"</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(ISBN isbn, <span class="keyword">boolean</span> checkWarehouse, <span class="keyword">boolean</span> includeUsed)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">@<span class="title">Cacheable</span><span class="params">(cacheNames=<span class="string">"books"</span>, key=<span class="string">"T(someType).hash(#isbn)"</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(ISBN isbn, <span class="keyword">boolean</span> checkWarehouse, <span class="keyword">boolean</span> includeUsed)</span></span></span><br></pre></td></tr></table></figure>

<p>还有通过条件caching</p>
<ol start="3">
<li>CachePut</li>
</ol>
<p>通过@CachePut注解的方法，总是会被执行，并且结果会被存放到cache里，这个与Cacheable不同，所以一般的应用场景是从数据库里去，而不是用来查询。</p>
<ol start="4">
<li>CacheEvict</li>
</ol>
<p>就是删掉缓存的注解</p>
<ol start="5">
<li>Redis</li>
</ol>
<p>RedisCacheManager会被自动配置，如果Redis可以使用并且配置。并且可以通过spring.cache.redis.*properties来配置，当然也可以通过添加RedisCacheConfiguration Bean来实现自己的配置</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>不能在同一类中调用有@Cacheable注解的方法或其他方法，这样的Cache会失效。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>关于Redis这么强的数据库，我还需要在学习一下。不说了七牛云认证通过，我要去完成下一个需求了。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>初始AOP面向切面编程</title>
    <url>/2019-10-05-%E5%88%9D%E5%A7%8BAOP%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>无意间碰到AOP面向切面编程，想来先前碰到过，但是并没有细细来看，所以想着不如看一下。知道是个啥</p>
<h3 id="先来个demo"><a href="#先来个demo" class="headerlink" title="先来个demo"></a>先来个demo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BookService.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.MessageFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lendOut</span><span class="params">(String bookId,String userId,Date date)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lendOut</span><span class="params">(String bookId, String userId, Date date)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(MessageFormat.format(<span class="string">"&#123;0&#125; :The book &#123;1&#125; is lent to &#123;2&#125;"</span>,date,bookId,userId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServiceInvocationHandler.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceInvocationHandler</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target=target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">       System.out.println(<span class="string">"Before...."</span>);</span><br><span class="line">       Object result=method.invoke(<span class="keyword">this</span>.target, args);</span><br><span class="line">       System.out.println(<span class="string">"After...."</span>);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">client.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        BookService bookService=(BookService)Proxy.newProxyInstance(BookService.class.getClassLoader(), new Class[]&#123;BookService.class&#125;, new ServiceInvocationHandler(new BookServiceImpl()));</span><br><span class="line">        </span><br><span class="line">        bookService.lendOut(<span class="string">"123"</span>,<span class="string">"456"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印结果是</p>
<p>Before….<br>19-10-5 下午8:38 :The book 123 is lent to 456<br>After….</p>
<p>神奇啊！这玩意咋插入的？</p>
<h3 id="理论先行"><a href="#理论先行" class="headerlink" title="理论先行"></a>理论先行</h3><blockquote>
<p>面向切面编程是一种通过横切关注点分离来增强代码模块性的方法，它能够在不修改业务主体代码的情况下，对它添加额外的行为。</p>
</blockquote>
<p>举个例子，对于图书馆来说，借书跟还书的业务流程最为繁琐，对于鉴权、事务这样的公共功能，彻底拿出去，就是利用了面向切面编程的思想。</p>
<p>是怎么实现的呢？</p>
<p>还记得先前学java的时候，有提到动态绑定与静态绑定。这种实现方式就是通过动态代理.即运行时的增强。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>先学到这里吧。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>在一次学习Mybatis</title>
    <url>/2019-10-05-%E5%9C%A8%E4%B8%80%E6%AC%A1%E5%AD%A6%E4%B9%A0Mybatis/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天继续死磕Mybatis，学会用。任务如下</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 通过教程过一遍Mybatis 大约有个印象</li>
<li><input checked="" disabled="" type="checkbox"> 阅读Mybatis文档</li>
<li><input checked="" disabled="" type="checkbox"> 来到Mybatis Plus之旅</li>
</ul>
<h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><p>首先来谈谈对mybatis的认识，一开始我写SP都是用的JAVA JPA。但是最近想要继续深入学习SP，而不是每个框架都只会hello world的感觉，所以我就想要学习一个新的持久层框架mybatis。正好趁着国庆，就学习了。</p>
<p>读了一些文档，也看了许多代码，所以有个大致的了解。前期mybatis的配置是很复杂的，不过因为强调动态sql，所以相比于jpa的不用写一行sql在面对复杂的业务逻辑是有很强的适应力。但是其实很多时候这种业务还是比较少的，所以mybatis在springboot中就加入了java注解，这玩意写起来跟jpa用原生sql的写的感觉一样舒服(这里让我想起来，技术人一定要低调，不能只有锤子就认为所有都是钉子)。</p>
<h4 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h4><h5 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="在启动类添加mapperscan"><a href="#在启动类添加mapperscan" class="headerlink" title="在启动类添加mapperscan"></a>在启动类添加mapperscan</h5><p>注意：也可以在mapper文件夹的类下，添加@Mapper，但是这么做的话就需要每一层都要添加，还比较麻烦，所以可以在启动类添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.example.hellomybatis.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HellomybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(HellomybatisApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>不同于jpa，mybatis并不会自动建表，所以需要自己手动建表，然后写model层的代码。这里我还遇到了点坑，例如没有空的构造函数使得自己一直报错，确实前面写jpa的时候都会加上空的构造函数。但是因为用了lombok我想应该就不用了吧。</p>
<p>这里注意一下，我原先用的是@Data。但是好像并没有@NoArgsConstructor的作用，通过查阅文档，发现只包含了@ToString @EqualsAndHashCode @Getter @Setter @RequiredArgsConstructor</p>
<p>注意只有@RequiredArgsConstructor这个注解表示构造器里的每个参数不为null，也就是说不为Null都作为这个构造器的参数。</p>
<p>(好吧，真的让我调试好一会，没有好好阅读文档的后果)</p>
<h5 id="mapper层，所有生产力都在这里"><a href="#mapper层，所有生产力都在这里" class="headerlink" title="mapper层，所有生产力都在这里"></a>mapper层，所有生产力都在这里</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM users"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"userSex"</span>,column = <span class="string">"user_sex"</span>,javaType = UserSexEnum<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">            @<span class="title">Result</span>(<span class="title">property</span> </span>= <span class="string">"nickName"</span>,column = <span class="string">"nick_name"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM users WHERE id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"userSex"</span>,column = <span class="string">"user_sex"</span>,javaType = UserSexEnum<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">            @<span class="title">Result</span>(<span class="title">property</span> </span>= <span class="string">"nickName"</span>,column = <span class="string">"nick_name"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">User <span class="title">getOne</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO users(userName,passWord,user_sex) VALUES(#&#123;userName&#125;, #&#123;passWord&#125;, #&#123;userSex&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"UPDATE users SET userName=#&#123;userName&#125;,nick_name=#&#123;nickName&#125; WHERE id =#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"DELETE FROM users WHERE id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delte</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<p>select表示查询类的注解，用来作为查询的方法</p>
<p>result修饰返回的结果集，关联实体的属性与数据库字段一一对应，如果两者是一样的则不需要用这个属性来修饰</p>
<p>insert插入数据库使用，直接出入实体对象会自动解析到对应的值</p>
<p>update更新数据</p>
<p>delete负责删除数据</p>
<h4 id="XML版"><a href="#XML版" class="headerlink" title="XML版"></a>XML版</h4><p>先说自己的感受，这玩意这麻烦，但是刚才想了想，好像也挺有用的。不过麻烦确实是麻烦</p>
<h5 id="properties配置"><a href="#properties配置" class="headerlink" title="properties配置"></a>properties配置</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">mybatis.config-location</span>=<span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<p>指定了基础文件配置和实体类映射文件的地址，都在resourse文件下下</p>
<h5 id="mybatis-config-xml配置"><a href="#mybatis-config-xml配置" class="headerlink" title="mybatis-config.xml配置"></a>mybatis-config.xml配置</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Integer"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Long"</span> <span class="attr">type</span>=<span class="string">"java.lang.Long"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"HashMap"</span> <span class="attr">type</span>=<span class="string">"java.util.HashMap"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"LinkedHashMap"</span> <span class="attr">type</span>=<span class="string">"java.util.LinkedHashMap"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"ArrayList"</span> <span class="attr">type</span>=<span class="string">"java.util.ArrayList"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"LinkedList"</span> <span class="attr">type</span>=<span class="string">"java.util.LinkedList"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="User的映射文件"><a href="#User的映射文件" class="headerlink" title="User的映射文件"></a>User的映射文件</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.example.hellomybatis.mapper.UserMapper"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.example.hellomybatis.model.User"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userName"</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"passWord"</span> <span class="attr">property</span>=<span class="string">"passWord"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_sex"</span> <span class="attr">property</span>=<span class="string">"userSex"</span> <span class="attr">javaType</span>=<span class="string">"com.example.hellomybatis.enums.UserSexEnum"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"nick_name"</span> <span class="attr">property</span>=<span class="string">"nickName"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Base_Column_List"</span>&gt;</span></span><br><span class="line">        id,userName,passWord,user_sex,nick_name</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAll"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span>/&gt;</span></span><br><span class="line">        FROM users</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getOne"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> &gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">        FROM users</span><br><span class="line">        WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.example.hellomybatis.model.User"</span> &gt;</span></span><br><span class="line">       INSERT INTO</span><br><span class="line">       		users</span><br><span class="line">       		(userName,passWord,user_sex)</span><br><span class="line">       	VALUES</span><br><span class="line">       		(#&#123;userName&#125;, #&#123;passWord&#125;, #&#123;userSex&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.example.hellomybatis.model.User"</span> &gt;</span></span><br><span class="line">        UPDATE</span><br><span class="line">        users</span><br><span class="line">        SET</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null"</span>&gt;</span>userName = #&#123;userName&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"passWord != null"</span>&gt;</span>passWord = #&#123;passWord&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        nick_name = #&#123;nickName&#125;</span><br><span class="line">        WHERE</span><br><span class="line">        id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> &gt;</span></span><br><span class="line">       DELETE FROM</span><br><span class="line">       		 users</span><br><span class="line">       WHERE</span><br><span class="line">       		 id =#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="Mapper层代码"><a href="#Mapper层代码" class="headerlink" title="Mapper层代码"></a>Mapper层代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">getOne</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好吧，以上其实我比较喜欢注解的形式，但是真正掌握的话，应该是两者都需要掌握，这样话，能够做到在两者之间进行切换。所以需要阅读以下文档。</p>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>看了一遍，似懂非懂的感觉</p>
<h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><blockquote>
<p>MyBatis 的真正强大在于它的映射语句，这是它的魔力所在。</p>
</blockquote>
<h5 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPerson"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"hashmap"</span>&gt;</span></span><br><span class="line">	SELECT * FROM PERSON WHERE ID=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个语句叫做selectPerson就是它的id，接受一个int或者Integer类型的参数，并且返回一个hashmap对象，键是列名，值就是结果行中对应的值</p>
<p>注意这个# 会告诉Mybatis创建一个预处理的语句参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"selectPerson"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parameterType</span>=<span class="string">"int"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parameterMap</span>=<span class="string">"deprecated"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">resultType</span>=<span class="string">"hashmap"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">resultMap</span>=<span class="string">"personResultMap"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushCache</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">useCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">fetchSize</span>=<span class="string">"256"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">resultSetType</span>=<span class="string">"FORWARD_ONLY"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>id是命名空间里的唯一标识，可以被用来引用这条语句</p>
<p>parameterType这个属性是可选的，因为会自动通过类型处理器推断出具体传入语句的参数，默认值是不设置的</p>
<p>resultType与resultMap 结果集的映射，两者只能使用一个</p>
<p>flushCache设置为true只要语句被调用，都会导致本地缓存和二级缓存被清空</p>
<h5 id="insert-update-delete"><a href="#insert-update-delete" class="headerlink" title="insert update delete"></a>insert update delete</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertAuthor"</span>&gt;</span></span><br><span class="line">	insert into Author(id,username,password,email,bio)</span><br><span class="line">    values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;bio&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateAuthor"</span>&gt;</span></span><br><span class="line">  update Author set</span><br><span class="line">    username = #&#123;username&#125;,</span><br><span class="line">    password = #&#123;password&#125;,</span><br><span class="line">    email = #&#123;email&#125;,</span><br><span class="line">    bio = #&#123;bio&#125;</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteAuthor"</span>&gt;</span></span><br><span class="line">  delete from Author where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果数据库支持自动生成主键，可以设置useGeneratedKeys=true，keyProperty=’id’</p>
<h5 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h5><p>这个元素被用来定义可重用的sql语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"userColumns"</span>&gt;</span> $&#123;alias&#125;.id,$&#123;alias&#125;.username,$&#123;alias&#125;.password <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t1"</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>,</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t2"</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">  from some_table t1</span><br><span class="line">    cross join some_table t2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>一般情况下，传递一个简单的参数就可以解决大部分场景，但是特殊的时候我们会传入对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">  insert into users (id, username, password)</span><br><span class="line">  values (#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>传入一个user,id username password都会通过user去找</p>
<p>也可以指定一个特殊的数据类型 ，对于传入是hashMap的对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#&#123;property,javaType=int,jdbcType=NUMERIC&#125;</span><br></pre></td></tr></table></figure>

<h5 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user where $&#123;column&#125;=#&#123;value&#125;"</span>)</span><br><span class="line"><span class="function">User <span class="title">findByColumn</span><span class="params">(@Param(<span class="string">"column"</span>)</span>String column,@<span class="title">Param</span><span class="params">(<span class="string">"value"</span>)</span>String value)</span></span><br></pre></td></tr></table></figure>

<p>注意到$这个会被直接替换，而#会被预处理为?</p>
<h5 id="结果映射"><a href="#结果映射" class="headerlink" title="结果映射"></a>结果映射</h5><p>文档说这是Mybatis最强大的元素。</p>
<p>ResultMap的设计思想是，对于简单的语句根本不需要配置显式的结果映射，对于复杂一点的语句只需要描述它们之间的关系就行了。</p>
<p>简单的映射关系,这个关系只是简单地将所有列映射到HashMap的裂伤</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">	select id,username,hashedPassword</span><br><span class="line">    from some_table</span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于POJO对象，可以被映射到ResultSet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"com.xxx.model.User"</span>&gt;</span></span><br><span class="line">	select id,username,hashedPassword</span><br><span class="line">    from some_table</span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>类型别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.xxx.model.User"</span> <span class="attr">alias</span>=<span class="string">"User"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>解决数据库里的字段名与属性名不统一的问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userResultMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"user_name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"hashed_password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultMap</span>=<span class="string">"userResultMap"</span>&gt;</span></span><br><span class="line">	select user_id,user_name,hashed_password</span><br><span class="line">    from some_table</span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（这个时候文档出现了“如果世界总是这么简单就好了”)hhh</p>
<h5 id="复杂的映射"><a href="#复杂的映射" class="headerlink" title="复杂的映射"></a>复杂的映射</h5><p>先来一步一步的拆解</p>
<p>id&amp;result</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"post_id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"subject"</span> <span class="attr">column</span>=<span class="string">"post_subject"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>id和result元素都将一个列的值映射到一个简单的数据类型的属性或字段</p>
<p>id元素表示的结果将是对象的标识属性</p>
<p>构造方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">idArg</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">javaType</span>=<span class="string">"int"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">javaType</span>=<span class="string">"String"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">javaType</span>=<span class="string">"_int"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关联 用来处理有一个类型的关系，例如一个博客有一个用户</p>
<p>有两种方式来加载 </p>
<p>嵌套Select查询</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogResult"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">column</span>=<span class="string">"author_id"</span> <span class="attr">javaType</span>=<span class="string">"Author"</span> <span class="attr">select</span>=<span class="string">"selectAuthor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">resultMap</span>=<span class="string">"blogResult"</span>&gt;</span></span><br><span class="line">	SELECT * FROM BLOG WHERE ID=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAuthor"</span> <span class="attr">resultType</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line">	SELECT * FROM AUTHOR WHERE ID=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到association里面有个select字段，它指向的嵌套的select的id，property表示输入的字段或属性，column表示select的属性</p>
<p>如果是传入多个参数的需要column=”{prop1=col1,prop2=col2}”</p>
<p>但是以上对于N+1问题却不是很好</p>
<blockquote>
<p>执行了一条单独的SQL语句来获取一个列表+1</p>
<p>对于列表每条记录，执行一个select来获取详细的信息就是N</p>
</blockquote>
<p>所以需要使用嵌套结果映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogResult"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"post_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"title"</span> <span class="attr">column</span>=<span class="string">"blog_title"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">column</span>=<span class="string">"blog_author_id"</span> <span class="attr">javaType</span>=<span class="string">"Author"</span> <span class="attr">resultMap</span>=<span class="string">"authorResult"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"authorResult"</span> <span class="attr">type</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"author_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"author_username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"author_password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"email"</span> <span class="attr">column</span>=<span class="string">"author_email"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"bio"</span> <span class="attr">column</span>=<span class="string">"author_bio"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到通过resultMap将其关联起来</p>
<p>id元素在嵌套结果映射中扮演着非常重要的角色，应该指定一个或多个用来唯一标识结果的属性</p>
<p>关联多结果集 这玩意利用了返回的是多个结果集</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">resultSets</span>=<span class="string">"blogs,authors"</span> <span class="attr">resultMap</span>=<span class="string">"blogResult"</span> <span class="attr">statementType</span>=<span class="string">"CALLABLE"</span>&gt;</span></span><br><span class="line">  &#123;call getBlogsAndAuthors(#&#123;id,jdbcType=INTEGER,mode=IN&#125;)&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogReuslt"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"title"</span> <span class="attr">column</span>=<span class="string">"title"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">javaType</span>=<span class="string">"Author"</span> <span class="attr">resultSet</span>=<span class="string">"authors"</span> <span class="attr">column</span>=<span class="string">"author_id"</span> <span class="attr">foreignColumn</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"email"</span> <span class="attr">column</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"bio"</span> <span class="attr">column</span>=<span class="string">"bio"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>….</p>
<p>还有集合，不过感觉其实差不多</p>
<h4 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h4><p>看了一下if这玩意确实挺强的</p>
<h5 id="if"><a href="#if" class="headerlink" title="if"></a>if</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogWithTitleLike"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">	SELECT * FROM BLOG</span><br><span class="line">    WHERE state='ACTIVE'</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title!=null"</span>&gt;</span></span><br><span class="line">    	AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span> <span class="attr">resutlType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">	SELECT * FROM BLOG WHERE state='ACTIVE'</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title!=null"</span>&gt;</span></span><br><span class="line">    	AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author!=null and autor.name!=null"</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose when otherwise"></a>choose when otherwise</h5><p>可以把它想象成switch</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">      AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">      AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">      AND featured = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim where set"></a>trim where set</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"state != null"</span>&gt;</span></span><br><span class="line">         state = #&#123;state&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上算是过了一遍文档，也知道这么个事，下面进入到mybatis plus</p>
<p>现在的话，我有点理解Mybatis Plus存在的意义，对于一般查询的话，其实使用jpa那样就可以了，完全不需要通过注解或者xml来写。但是如果单纯的时候mybatis这些都是需要做的。</p>
<p>所以mybatis plus就封装好了crud接口，可以直接使用。然后对于复杂的业务，表啥的嵌套很多，确实使用xml比较舒服，这个时候又可以使用xml了。</p>
<p>所以mybatis plus只在mybatis增强而不修改是这个意思。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>接下来就是多数据源的实操。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>初始Docker</title>
    <url>/2019-10-04-%E5%88%9D%E5%A7%8BDocker/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新东西。</p>
<h4 id="Docker-Hello-world"><a href="#Docker-Hello-world" class="headerlink" title="Docker Hello world"></a>Docker Hello world</h4><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> ubunbtu:16.04 /bin/<span class="built_in">echo</span> <span class="string">"hello world</span></span></span><br></pre></td></tr></table></figure>

<p>docker run 组合起来运行一个容器</p>
<p>ubuntu:16.04 指定要运行的镜像，如果没有的话，会下载这个镜像</p>
<h3 id="进行交互式的容器"><a href="#进行交互式的容器" class="headerlink" title="进行交互式的容器"></a>进行交互式的容器</h3><p>进入bash模式</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -it unbunt:16.04 /bin/bash</span></span><br></pre></td></tr></table></figure>

<p>-it  i表示在新容器内指定一个伪终端或终端  t允许你对容器的标准输入STDIN进行交互</p>
<p>退出容器使用 exit</p>
<h3 id="运行一个容器"><a href="#运行一个容器" class="headerlink" title="运行一个容器"></a>运行一个容器</h3><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -d -P training/webapp python app.py</span></span><br></pre></td></tr></table></figure>

<p>-d 让容器在后台运行</p>
<p>-P 将容器内部使用的网络端口映射到我们使用的主机上</p>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure>

<p>以上会下载最新的mysql 8.0以上</p>
<p>使用mysql镜像</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span></span><br></pre></td></tr></table></figure>

<p>进入容器</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br></pre></td></tr></table></figure>

<p>docke exec 表示 运行一条指令到正在运行的容器</p>
<p>登录mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>添加远程登录用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create USER &#39;xuxiaojin&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;</span><br><span class="line"></span><br><span class="line">ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;</span><br></pre></td></tr></table></figure>

<p>‘root’@’%‘ root表示用户名 %表示随便Ip都可以访问 如果是Localhost的话 只允许本机访问 </p>
<h3 id="安装mongo"><a href="#安装mongo" class="headerlink" title="安装mongo"></a>安装mongo</h3><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker pull mongo</span><br></pre></td></tr></table></figure>

<p>使用mongo镜像</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 27017:27017 -v <span class="variable">$PWD</span>/db:/data/db -d mongo</span></span><br></pre></td></tr></table></figure>

<p>进入容器</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">首先通过docker ps找到name</span><br><span class="line">或者在启动是 添加--name</span><br><span class="line"></span><br><span class="line">docker exec -it mongo mongo</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>如果使用阿里云，记得把端口打开。</p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis Plus</title>
    <url>/2019-10-04-Mybatis-Plus/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点。</p>
<h3 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h3><p>前面有跑过两个mybatis的demo，那个时候大致的一个影响就是，要自己写xml繁琐，然后如果通过注解来实现的话，就相当于之前的Jpa里面的sql全部自己写。(当然它有自己的语法)，今天想着配多数据源这个问题，顺带着继续学习下mybaits，然后无意间碰到了<a href="[https://mp.baomidou.com/guide/crud-interface.html#mapper-crud-%E6%8E%A5%E5%8F%A3](https://mp.baomidou.com/guide/crud-interface.html#mapper-crud-接口)">mybatis-plus</a>这个玩意，瞬间再一次解放生产力。下面是读一遍它的文档，大致有个印象以后，碰到什么问题好search</p>
<h4 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h4><p>我看了演示，真的强。当初写接口的时候，就想着会不会有自动生成的工具。整了半天，碰到几个问题</p>
<ol>
<li>为什么只有文件夹，没有代码</li>
</ol>
<p>生成的代码，前提是表已经建立好了。其实这个拿头想一下，不然字段哪里来的？</p>
<ol start="2">
<li>咋老是报错</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;templates&#x2F;mapper.xml.ftl</span><br><span class="line">这个是l不是1</span><br></pre></td></tr></table></figure>

<p>先贴上代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baomidou.mybatisplus.samples.generator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.FileOutConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.TemplateConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * mysql 代码生成器演示例子</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jobob</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-09-12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 读取控制台内容</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">scanner</span><span class="params">(String tip)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        StringBuilder help = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        help.append(<span class="string">"请输入"</span> + tip + <span class="string">"："</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            String ipt = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(ipt)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MybatisPlusException(<span class="string">"请输入正确的"</span> + tip + <span class="string">"！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RUN THIS</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">"\\src\\main\\java"</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">"jobob"</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;serverTimezone=GMT&amp;useSSL=false&amp;characterEncoding=utf8"</span>);</span><br><span class="line">        <span class="comment">// dsc.setSchemaName("public");</span></span><br><span class="line">        dsc.setDriverName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setModuleName(scanner(<span class="string">"模块名"</span>));</span><br><span class="line">        pc.setParent(<span class="string">"com.baomidou.mybatisplus.samples.generator"</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(<span class="string">"/templates/mapper.xml.ftl"</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输入文件名称</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">"/src/main/resources/mapper/"</span> + pc.getModuleName()</span><br><span class="line">                        + <span class="string">"/"</span> + tableInfo.getEntityName() + <span class="string">"Mapper"</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line">        mpg.setTemplate(<span class="keyword">new</span> TemplateConfig().setXml(<span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setInclude(scanner(<span class="string">"表名"</span>));</span><br><span class="line">        strategy.setSuperEntityColumns(<span class="string">"id"</span>);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">"_"</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        <span class="comment">// 选择 freemarker 引擎需要指定如下加，注意 pom 依赖必须有！</span></span><br><span class="line">        mpg.setTemplateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就这样，下次项目写的时候就要用上这个。</p>
<h4 id="CRUD接口"><a href="#CRUD接口" class="headerlink" title="CRUD接口"></a>CRUD接口</h4><p>这玩意跟jpa未免也太像了。</p>
<p>Mapper封装了BaseMapper接口，Mybatis-Plus启动时自动解析实体表关系映射转换为MyBatis内部对象注入容器</p>
<p>Service封装了IService接口，get查询单行 remove删除 list查询集合 page分页</p>
<p>先补充一个wrapper的知识点,条件构造器。</p>
<hr>
<p>以上是我阅读文档，接下来是一个实战</p>
<p>该实战参考<a href="https://tomoya92.github.io/2019/04/15/spring-boot-mybatis-plus-tutorial/" target="_blank" rel="noopener">博客</a></p>
<h3 id="简单入门"><a href="#简单入门" class="headerlink" title="简单入门"></a>简单入门</h3><p>通过start.spring.io创建依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatisplussecond<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>mybatisplussecond<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>建表</p>
<p>这里要注意，使用mybatis不像使用jpa里的hebinate可以自动建表，mybatis必须手动建表</p>
<h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Topic</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(type = IdType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> String tag;</span><br><span class="line">    <span class="keyword">private</span> Date inTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建Mapper"><a href="#创建Mapper" class="headerlink" title="创建Mapper"></a>创建Mapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TopicMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Topic</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###创建servive</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> TopicMapper topicMapper;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Topic&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> topicMapper.selectList(<span class="keyword">new</span> QueryWrapper&lt;&gt;());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建controller"><a href="#创建controller" class="headerlink" title="创建controller"></a>创建controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> TopicService topicService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> topicService.list();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意一点，还需要在启动类添加上mapperScan或者在mapper’类添加注解@Mapper</p>
<p>以上是简单场景，到这里跟之前写的或者是碰到的场景很像，可以接受。后面就有点不懂了，为什么自定义的sql要写到xml。可能别有用处吧，自己还体会不到。所以接下来就是学习xml</p>
<p>因为对xml理解不是很深，感觉是挺神奇的。</p>
<h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><p>xml配置，因为参考的博客是写到main/java下，这里如果打包的话，不会将这个打到jar包，所以需要在pom.xml文件添加点东西 <a href="https://blog.csdn.net/lmy86263/article/details/53428417" target="_blank" rel="noopener">参考链接</a></p>
<p>其他话，只能说我还需要继续学习，不然有点没感觉。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>计算机这玩意，真的得一直学习。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql实战系列(三)</title>
    <url>/2019-10-02-Mysql%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97(%E4%B8%89)/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新技术，国庆快乐。</p>
<h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ol>
<li>Select查询语句的执行过程：连接器-&gt;分析器(语义分析、语法分析)-&gt;优化器-&gt;执行器</li>
<li>update更新执行过程：连接器-&gt;分析器-&gt;优化器-&gt;执行器-&gt;查询更新的内容是否在内存上，如果是直接更新，如果不是的话需要到硬盘去取，然后更新，并且将更新的操作写到redo log 和 bin log</li>
<li>事务 保证数据的一致性，默认是可重复度机制，在执行的时候会有read view在这个事物期间查看的数据都是相同的 读提交 。。。而且为了性能，尽量要避免长事务，否则会阻塞更新的操作</li>
<li>索引 主键索引 普通索引，主键索引叶子节点存的值为数据，普通索引叶子节点存的值为主键，所以会出现回表的情况，应该尽量避免回表的现象</li>
<li>索引(二) 覆盖索引避免出现回表 最左前缀索引 省点相同起到相同索引操作的索引表所占据的孔家 联合索引的字段顺序很重要 可以省去控件 索引下推优化也可以减少回表的次数</li>
<li>锁 解决并发的问题，有全局锁出现在备份的时候，表锁，在这个表的时候只能执行相同的操作。行锁 这个要判断好自己执行的操作，哪些是会引起锁操作，然后合理安排顺序，减少等待的时间</li>
<li>视图 有一致性读视图 可以在不同情况下 可见或者不可见</li>
<li>普通索引与唯一索引 一般是选择普通索引，因为普通索引在更新操作时会利用一个change buffer对多写少读的业务有积极的作用，而减少io消耗</li>
<li>Mysql也会出现选错索引的情况，因为通过计算，而出现事务，计算时通过采用计算的。这一步操作的事物主要出现在优化器这一层面上，可以通过force index或者是使用语句analyze table让其重新进行统计</li>
<li>字符串索引 前缀索引可以确定一个区分度的损失值，倒序存储，这个不太适用于区间查询，哈希索引</li>
<li>突然间更新很慢，这个场景自己是碰到过的，当不断上传图片的时候，会出现突然间一条请求变得很慢，这个时候其实是在进行脏数据写入硬盘，这个操作的原因是 redo log满了或者内存满了</li>
<li>删除数据的时候，空间并没有变小，这是因为删除数据，其实并不会回收这一部分的空间，而只是加上“复写”的标志，所以应该重建表 alter table A engine=InnoDB</li>
<li>count(*)的性能不好，是因为执行的过程中，需要将每条数据读出来，然后计算，可以通过将表的大小存入到表中，而对于count()这里面的属性，最好是选择count()因为会进行优化</li>
</ol>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>以上是笔记，还有很多不懂的，只能慢慢去沉淀，理解。</p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL必知必会(四)</title>
    <url>/2019-09-29-SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A(%E5%9B%9B)/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新东西</p>
<h3 id="在学SQL遇到的坑"><a href="#在学SQL遇到的坑" class="headerlink" title="在学SQL遇到的坑"></a>在学SQL遇到的坑</h3><ol>
<li><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> player(</span><br><span class="line">	player_id <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">    player_name <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>以上看起来没错，但是是不能运行的，因为auto_increment只能放在主键的字段上，所以必须把player_id定义为主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> player(</span><br><span class="line">	player_id <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">    player_name <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">key</span>(player_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> player <span class="keyword">modify</span> (player_age <span class="built_in">float</span>(<span class="number">3</span>,<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>这条语句还是错了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> player <span class="keyword">modify</span> player_age <span class="built_in">float</span>(<span class="number">3</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查询的优化 不使用select * 以及知道返回一条的时候应该只用 limit 1</li>
</ol>
<h3 id="重视语法"><a href="#重视语法" class="headerlink" title="重视语法"></a>重视语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--创建数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> nba;</span><br><span class="line"><span class="comment">--删除数据库</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> nba;</span><br><span class="line"><span class="comment">--创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> player(</span><br><span class="line">	<span class="keyword">column</span> 约束</span><br><span class="line">);</span><br><span class="line"><span class="comment">--删除表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> player;</span><br><span class="line"><span class="comment">--修改表的结构</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> player <span class="keyword">add</span> (age <span class="built_in">int</span>(<span class="number">11</span>)); </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> player <span class="keyword">rename</span> age <span class="keyword">to</span> player_age;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> player <span class="keyword">modify</span> player_age <span class="built_in">float</span>(<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> player <span class="keyword">drop</span> <span class="keyword">column</span> player_age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">---查询</span></span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> ... <span class="keyword">where</span> ... <span class="keyword">group</span> <span class="keyword">by</span> ... <span class="keyword">having</span> ... <span class="keyword">order</span> <span class="keyword">by</span> ... <span class="keyword">limit</span> ...</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">column</span> <span class="keyword">as</span> <span class="keyword">rename</span> <span class="keyword">from</span> tablename <span class="keyword">order</span> <span class="keyword">by</span> columnname <span class="keyword">asc</span>(<span class="keyword">desc</span>) <span class="keyword">limit</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">column</span> <span class="keyword">from</span> tablename</span><br><span class="line"></span><br><span class="line"><span class="comment">--where 子句</span></span><br><span class="line">比较查询</span><br><span class="line">逻辑查询</span><br><span class="line">通配符查询</span><br><span class="line"></span><br><span class="line"><span class="comment">--SQL函数</span></span><br><span class="line">算术函数</span><br><span class="line">字符串函数</span><br><span class="line">日期函数</span><br><span class="line">转换函数</span><br><span class="line"></span><br><span class="line"><span class="comment">--SQL聚焦函数</span></span><br><span class="line"><span class="keyword">count</span></span><br><span class="line"><span class="keyword">max</span></span><br><span class="line"><span class="keyword">min</span></span><br><span class="line"><span class="keyword">sum</span></span><br><span class="line"><span class="keyword">avg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--SQL分组</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line"><span class="keyword">having</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--SQL子查询</span></span><br><span class="line">关联子查询 每次都要执行 <span class="keyword">in</span> exsist</span><br><span class="line">非关联子查询 只执行一次</span><br><span class="line"></span><br><span class="line"><span class="comment">--SQL连接</span></span><br><span class="line">笛卡尔积</span><br><span class="line">等值连接</span><br><span class="line">非等值连接</span><br><span class="line">外连接</span><br><span class="line">自连接</span><br><span class="line"></span><br><span class="line"><span class="comment">--视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> viewname <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">column</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line"><span class="keyword">where</span> condition</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>日拱一卒</p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第十二周的另(三)篇</title>
    <url>/2019-09-27-ARTS%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%91%A8%E7%9A%84%E5%8F%A6(%E4%B8%89)%E7%AF%87/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新技术.</p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>题目：排序</p>
<p>思路：java可以解决很多问题，首先分隔 split(),当时要注意开头为5这样分隔出空字符，所以这里要判断，然后0判断通过Integer.parseInt(),还有一个要将collection.clear不然会把上次的保存下来。</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span>(sc.hasNextLine())&#123;</span><br><span class="line">        String a=sc.nextLine();</span><br><span class="line"></span><br><span class="line">        String[] ab=a.split(<span class="string">"5"</span>);</span><br><span class="line">    </span><br><span class="line">        ArrayList&lt;Integer&gt; num=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String str:ab)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!str.equals(<span class="string">""</span>))</span><br><span class="line">                num.add(Integer.parseInt(str));</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">                System.out.print(num.get(i));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.print(<span class="string">" "</span>+num.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        num.clear();</span><br><span class="line">        System.out.println();</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h3><h4 id="MVC架构解析-模型-Model"><a href="#MVC架构解析-模型-Model" class="headerlink" title="MVC架构解析 模型(Model)"></a>MVC架构解析 模型(Model)</h4><p>模型，其实是我们对现实世界的一个抽象，进一步谈到领域模型，我们会更加关注这个领域模型之间的一个关系。</p>
<p>模型有两个分类 一个是贫血模型 一个是充血模型。贫血模型就是讲操作提取出来，放到service层里，model层仅仅作为一个容器</p>
<p>充血模型 将操作放到model层里</p>
<p>内部层次划分，其实就是springboot的四层</p>
<p>CQRS模式(命令查询职责分离)</p>
<p>举个例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Book <span class="title">add</span><span class="params">(...)</span></span></span><br><span class="line"><span class="function">Book <span class="title">query</span><span class="params">(...)</span></span></span><br></pre></td></tr></table></figure>

<p>首先第一个方法，先将数据插入，然后再到数据库里去查询，将id和creation加上，执行了两个操作</p>
<p>第二个方法query实际上没法完成很复杂的查询，当然我们通过dao层是可以完成的</p>
<p>CORS模式要求</p>
<p>命令：不返回任何结果，但会改变数据的状态</p>
<p>查询：返回结果，但是不会改变数据的状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Book <span class="title">query</span><span class="params">(Query query)</span></span></span><br></pre></td></tr></table></figure>

<p>注意到第二个方法查询有一个专门的查询对象</p>
<h4 id="DHCP和PXE"><a href="#DHCP和PXE" class="headerlink" title="DHCP和PXE"></a>DHCP和PXE</h4><p>配置ip，因为我们可以手动配置ip，但是呢，不要随便乱配置，如果跟附近的机器不在同一个网段，包会发布出去。首先通过ip判断是否是同一个网段，如果不是的话就会去网关</p>
<p>DHCP(动态主机配置协议)首先一台新加入的电脑，将自己的MAC信息通过DHCP Discover发送到 DHCP Server然后判断是否新来的，如果MAC重复就不会分配。然后提供一个ip地址，通过DHCP Offer…</p>
<p>PXE还可以装系统</p>
<p>####编程语言的进化</p>
<p>一个观点是继承是过度设计，应该参考GO的组合？</p>
<p>也许只有我学习了GO之后才会懂得这个问题吧，又或者是我哪天遇到继承的过度设计问题。</p>
<h4 id="穿越功耗墙"><a href="#穿越功耗墙" class="headerlink" title="穿越功耗墙"></a>穿越功耗墙</h4><p>阿姆达尔定律</p>
<p>《Learning SpringBoot》需要补一下运维的知识</p>
<h4 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h4><p>今天去听了一场比赛，比赛质量很差。但是老师挺强的</p>
<p>两个观点 1.脚踏实地 2.聚焦一个点</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>日拱一卒…</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第十二周的另(二)篇</title>
    <url>/2019-09-26-ARTS%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%91%A8%E7%9A%84%E5%8F%A6(%E4%BA%8C)%E7%AF%87/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新东西.</p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>题目：母牛的故事</p>
<p>描述：有一只母牛，每年年初生一只小牛，然后每只小牛到第四年的时候生一只。问第n年共有多少只</p>
<p>思路：我一开始的思路是每只每只得看，第一只每年都生所以n，然后第四年开始生的n-4,然后第八年开始生的n-8…依次加起来。但是这种思想有错，刚才验证了一下，不合理。</p>
<p>然后参考了思路，通过函数来表示f(n)=f(n-1)+f(n-3) 打表</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">int</span>[] num=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">60</span>];</span><br><span class="line">       num[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">       num[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">       num[<span class="number">3</span>]=<span class="number">3</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=<span class="number">55</span>;i++)&#123;</span><br><span class="line">           num[i]=num[i-<span class="number">1</span>]+num[i-<span class="number">3</span>];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span> n;</span><br><span class="line">       <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">           n=sc.nextInt();</span><br><span class="line">           <span class="keyword">if</span>(n==<span class="number">0</span>||n&gt;=<span class="number">55</span>) <span class="keyword">break</span>;</span><br><span class="line">           System.out.println(num[n]);</span><br><span class="line">       &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h3><h4 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h4><p>在win下找本机的IP地址是ipconfig 在linux查找是ifconfig</p>
<p>ip相当于一个网卡在网络世界的通讯地址，我们现在用的Ip主要是32字节，但是这远远不够，而且但是还将ip分成5类，从现在来看，这样分类有点浪费。所以出现了一种折中的方法CIDR(无类型域间选路) 举个例子 10.100.122.2/24 表示32位中前24位是网络号，后8位是主机号。并且随着CIDR的出现，还有一个广播地址，即10.100.122.255，如果发送这个地址10.100.122网络里面的机器都可以接收到，另外一个是子网掩码255.255.255.0</p>
<p>通过子网掩码和ip地址进行and计算，可以得到网络号(就是我们前面讲到的24位)</p>
<p>mac地址跟随着网卡的出生就存在了，并且都不一样，但是还是只能在一定范围内通过MAC地址才能找到目标，远距离只能通过ip地址。（因为你没法通过身份证来找一个人）</p>
<h4 id="CPU主频"><a href="#CPU主频" class="headerlink" title="CPU主频"></a>CPU主频</h4><p>对于“性能”我们一般是通过响应时间的倒数来衡量</p>
<p>时间=时钟周期数*时钟周期（主频的倒数）</p>
<p>​        =指令数*每条指令平均的时钟周期数(cpi) 时钟周期</p>
<h4 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h4><p>将问题分成多个阶段，每个阶段找到解，如果该阶段找不到，返回到上一个阶段去找另外的一个解</p>
<p>写一个代码 8皇后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cal8queens</span><span class="params">(<span class="keyword">int</span> row)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(row==<span class="number">8</span>)&#123;</span><br><span class="line">        print(result);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> column=<span class="number">0</span>;column&lt;<span class="number">8</span>;column++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isOk(row,column)) &#123;</span><br><span class="line">            result[row]=column;</span><br><span class="line">            cal8queens(row+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOk</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> column)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> leftup=column-<span class="number">1</span>,rightup=column+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=row-<span class="number">1</span>;i&gt;<span class="number">0</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(result[i]==column) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(leftup&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(result[i]==leftup) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rightup&lt;<span class="number">8</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(result[i]==rightup) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        --leftup;++rightup;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h3><p>“劳<del>逸</del>结合”</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>日拱一卒。。</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第十二周</title>
    <url>/2019-09-25-ARTS%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%91%A8/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>多思考，多学习。</p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>题目：A+B</p>
<p>思路：手动模拟加法</p>
<p>不过是参考了网上的解法。</p>
<p>先讲一下自己尝试解答的时候出现的问题</p>
<p>如何对齐？我一直想不通如何将其对齐。因为手动模拟需要将字符手动对齐。但是如果是从末尾对齐，这个很难。然后我参考了网上的解法，通过翻转，这样就相当于从前对齐。</p>
<p>如何判断谁比较长？当然问题不是这个，而应该是比较长的那个该怎么做。我想了很多种方法，例如直接加，但是我出现了String-‘0’的问题。然后参考了网上的解法，就是补0让两个加数一样长。</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> k,String num1,String num2)</span></span>&#123;</span><br><span class="line">        String n1=<span class="keyword">new</span> StringBuffer(num1).reverse().toString();</span><br><span class="line">        String n2=<span class="keyword">new</span> StringBuffer(num2).reverse().toString();</span><br><span class="line"></span><br><span class="line">        StringBuffer result=<span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到最长的那个长度</span></span><br><span class="line">        <span class="keyword">int</span> maxlen=n1.length()&gt;n2.length()?n1.length():n2.length();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将不够长度的那个补0</span></span><br><span class="line">        <span class="keyword">while</span>(n1.length()&lt;maxlen)&#123;</span><br><span class="line">            n1+=<span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(n2.length()&lt;maxlen)&#123;</span><br><span class="line">            n2+=<span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动模拟加法</span></span><br><span class="line">        <span class="keyword">boolean</span> overflow=<span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> nOver=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxlen;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tempsum=n1.charAt(i)-<span class="string">'0'</span>+n2.charAt(i)-<span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(tempsum+nOver&lt;<span class="number">10</span>)&#123;</span><br><span class="line">                result.append(tempsum+nOver);</span><br><span class="line">                nOver=<span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//判断是否到了末尾,如果到了则整体加1</span></span><br><span class="line">                <span class="keyword">if</span>(i==maxlen-<span class="number">1</span>)&#123;</span><br><span class="line">                    overflow=<span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                result.append((tempsum+nOver)%<span class="number">10</span>);</span><br><span class="line">                nOver=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(overflow)&#123;</span><br><span class="line">            result.append(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Case "</span>+(k+<span class="number">1</span>)+<span class="string">":"</span>);</span><br><span class="line">        System.out.println(num1+<span class="string">" + "</span>+num2+<span class="string">" = "</span>+result.reverse().toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> t=sc.nextInt();</span><br><span class="line"></span><br><span class="line">       String[] num1=<span class="keyword">new</span> String[<span class="number">21</span>];</span><br><span class="line">       String[] num2=<span class="keyword">new</span> String[<span class="number">21</span>];</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">           num1[i]=sc.next();</span><br><span class="line">           num2[i]=sc.next();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">           solve(i,num1[i],num2[i]);</span><br><span class="line">       &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h3><p>网络协议，通过一个下单事件理解网络的工作</p>
<p>首先通过url，然后dns解析，接着是HTTP(s)协议。以上处于应用层</p>
<p>接着通过Socket编程，发送到传输层，传输层一般有udp(无连接)tcp(面向连接)。两者差别是tcp会保证将包发送到，如果不到会一直发</p>
<p>然后到了网络层，网络层是Ip协议，这个时候一般包括两个ip。一个目的ip一个是源ip。判断目的ip是否是本区域的，如果不是需要到达网关mac。然后通过路由一层一层到达目的ip的地方。如果到了，每到一层就会发送一个成功的信息。</p>
<p>架构，从底层开始，电脑可以看成“CPU+存储+io设备”CPU由于其可编程性，可以执行上千种指令，但是不能够理解指令的含义，这也就是为什么叫他“计算”的原因。存储数据和指令。应用层通过操作系统，不过操作系统很多，所以之间就有差异，为了解决差异，出现了浏览器。</p>
<p>计算机组成原理，通过组装电脑，cpu+主板+内存条。gpu是在显卡上，也是用来计算的。冯诺依曼体系结构：处理器，控制器，存储器，输入输出设备</p>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><h4 id="3-1一个简单的java应用程序"><a href="#3-1一个简单的java应用程序" class="headerlink" title="3.1一个简单的java应用程序"></a>3.1一个简单的java应用程序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span><span class="params">(Sting[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<p>不同于c++的类，Java要求将所有方法都必须放到一个类中，所以java的main函数就必须要有个外壳类。命名规范采用驼峰的形式，每个单词的开头必须大写。文件名必须与公共类(public)的名字相同，后缀名为.java</p>
<p>补充两个输出 System.out表示输出的类，其调用方法println或者print。这两个方法的区别是println输出一个内容后会换行到下一行，而print下一个字符只能紧跟着它</p>
<h4 id="3-3数据类型"><a href="#3-3数据类型" class="headerlink" title="3.3数据类型"></a>3.3数据类型</h4><p>基本数据类型(primitive type)</p>
<p>int,long,byte,short.注意没有无符号的类型</p>
<p>float,double一般来说使用double。如果对于一个浮点数没有加上F后缀，那就表示double类型。判断NaN.通过调用方法Double.isNaN</p>
<p>char类型 表示一个字符</p>
<p>boolean true or false</p>
<h4 id="3-4变量"><a href="#3-4变量" class="headerlink" title="3.4变量"></a>3.4变量</h4><p>java不区分变量的声明和定义。使用变量必须保证初始化了。</p>
<p>良好的编程习惯是在第一次使用变量的时候，在声明，并且变量取名要有意义。</p>
<p>常量 放在方法里的常量通过final声明即可，还有一种类常量static final.放到main方法之外的，常量只能用final，(虽然c++中的const关键字被保留)，并且只能够初始化一次。如果是类常量并且通过public声明的，可以通过”类名.变量名”来访问</p>
<h4 id="3-5运算符"><a href="#3-5运算符" class="headerlink" title="3.5运算符"></a>3.5运算符</h4><p>数学函数Math.方法。数值类型转换</p>
<p>补充一个从来没有用过的枚举类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Size&#123;SMALL,MEDIUM,LARGE,EXTRA_LARGE&#125;;  <span class="comment">//自定义的枚举类型</span></span><br><span class="line">Size s=Size.MEDIUM; <span class="comment">//Size类型的变量只能存储这个类型声明中给定的某个枚举值，或者Null值</span></span><br></pre></td></tr></table></figure>

<h4 id="3-6字符串"><a href="#3-6字符串" class="headerlink" title="3.6字符串"></a>3.6字符串</h4><p>通过“连接的字符称为字符串，java给出一个预定义类String，可以通过substring(begin,end)来裁剪字符串。end表示不想要裁剪的位置。可以通过+或者Join来对字符串进行拼接。</p>
<p>接下来将一个很重要的点“不可变字符”</p>
<p>什么意思呢？java中不允许对字符串中的某个字符进行修改，就是字符一旦确定下来了就不能改变。可以通过裁剪拼接的方法来对字符串进行修改。这一点可能与C++有所不同。</p>
<p>这些字符串常量都会放到一个存储池中，然后通过对象引用，这样就会实现字符串共享，而且基于java自动回收的机制，不会出现内存遗漏问题。</p>
<p>可以通过.equals来进行字符串比较，不可以通过==，因为==表示两个字符串是否在同一个位置。</p>
<p>还有两种特殊的字符串，空串和null串，空串表示字符长度为0的串，null串表示没有任何对象与该变量相关联</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(str!=<span class="keyword">null</span>&amp;&amp;str.length()&gt;<span class="number">0</span>)  <span class="comment">//应该先判断Null，因为不可在null对象上调用方法</span></span><br></pre></td></tr></table></figure>

<p>现在列举一些String API</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">equals</span><br><span class="line">equalsIgnoreCase</span><br><span class="line">indexOf</span><br><span class="line">lastIndexOf</span><br><span class="line">length()</span><br><span class="line">replace</span><br><span class="line">substring</span><br><span class="line">trim() <span class="comment">//删除字符串头部和尾部的空格</span></span><br></pre></td></tr></table></figure>

<p>阅读时，发现有些参数类型是CharSequence，这是一个接口类型，所有字符串都属于这个接口。</p>
<p>刚刚我们提到String是不可变的，那么我们每次修改字符都要新生成一个字符，这样不太好。所以java提供一个StringBuilder 这个字符串构建器，通过append方法能够将一小段字符加入到字符串里去。然后在需要用到String的时候就要将其转为toString()</p>
<p>一些常见的api</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder() <span class="comment">//空的字符串构建器</span></span><br><span class="line">length()</span><br><span class="line">append()</span><br><span class="line">insert()</span><br><span class="line">toString()</span><br><span class="line">reverse()  <span class="comment">//早上有思考一下如何去翻转字符，遍历。暴力，然后头尾交换好像也可以行，看了一下源码，是从中间开始向两边交换</span></span><br></pre></td></tr></table></figure>

<h4 id="3-7输入输出"><a href="#3-7输入输出" class="headerlink" title="3.7输入输出"></a>3.7输入输出</h4><p>输出，需要构造一个Scanner对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc=<span class="keyword">new</span> Scanner(System.in)</span><br></pre></td></tr></table></figure>

<p>接着我们来讲几个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">next() <span class="comment">//这个方法说实话是我昨天才意识到的，它是读取字符串，碰到回车或空格停止</span></span><br><span class="line">nextLine() <span class="comment">//碰到回车停止</span></span><br><span class="line">nextInt() <span class="comment">//</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">hasNext()</span><br></pre></td></tr></table></figure>

<h4 id="3-9大数值"><a href="#3-9大数值" class="headerlink" title="3.9大数值"></a>3.9大数值</h4><p>BigInteger和BigDecimal主要是为了解决计算精度的问题，但是这两者都不能使用+等运算符，只能通过调用放add等</p>
<h4 id="3-10数组"><a href="#3-10数组" class="headerlink" title="3.10数组"></a>3.10数组</h4><p>首先声明一个数组 int[] a或者int a[]但是java一般会选择int[] a.而我也要慢慢习惯这种写法。</p>
<p>定义一个数组</p>
<p>int[] a=new int[size]。一般来说定义了一个数组之后，其长度是不可以变的，所以得到数组的长度通过调用 a.length如果想要动态扩展数组的长度需要使用array list。</p>
<p>初始化数组 int[] a={} 注意这里并不需要new</p>
<p>int[] a;</p>
<p>a=new int[]{}这里是需要new的。</p>
<p>数组排序，java提供一个Array.sort(a) 通过快速排序来实现数组排序</p>
<p>补充一点java跟C++不同的地方，java实际上并没有多维数组，而是数组的数组，所以其实我们可以定义不规则数组。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>日拱一卒…</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第十二周的另一篇</title>
    <url>/2019-09-25-ARTS%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%91%A8%E7%9A%84%E5%8F%A6%E4%B8%80%E7%AF%87/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>日拱一卒，总有一天会到达的。</p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>题目：完数 求一个数的因子之和是否等于本身</p>
<p>思路：昨天主席说到奇数肯定不可能，但是我刚刚没证明出来，对于一个奇数 肯定有一个1因子，然后因子成对出现，所以两两相乘是奇数的肯定是奇数*奇数，但是奇数+奇数+1=奇数。</p>
<p>后来oj验证了一下，不排除这个也可以过。</p>
<p>但是！！这道题本身的坑，那就是两个数num1与num2的大小不确定</p>
<p>找因子只要从1到根号n之间就可以</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">findresult</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> temp=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=Math.sqrt(num);i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num%i==<span class="number">0</span>) &#123;</span><br><span class="line">                temp+=i;</span><br><span class="line">                temp+=num/i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp==num) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=a;i&lt;=b;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(findresult(i)) sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> n=sc.nextInt();</span><br><span class="line">       <span class="keyword">int</span> num1,num2;</span><br><span class="line">       <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        num1=sc.nextInt();</span><br><span class="line">        num2=sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断num1,num2的大小</span></span><br><span class="line">        <span class="keyword">if</span>(num1&gt;num2)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">int</span> temp=num1;</span><br><span class="line">               num1=num2;</span><br><span class="line">               num2=temp;</span><br><span class="line">           &#125;</span><br><span class="line">        solve(num1,num2);</span><br><span class="line">        n--;</span><br><span class="line">       &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h3><p>####MVC框架</p>
<p>jsp和servlet。虽然学过java web当时对于这两个是一知半解。servlet是java写的一个组件，能够接收和处理请求，返回HTML和JSON格式的数据，jsp允许HTML页面插入一些标记，在web容器中执行，这些标记就能够被替换成代码实际执行的结果，嵌入页面一起返回，从而实现动态页面</p>
<p>两者之间的关系</p>
<p>jsp会被编译成servelt格式的文件。</p>
<p>但是我们通常使用jsp来写页面，也是jsp是声明式的语言，例如HTML，你可以很清楚的想象这个按钮，那个背景。而servlet是命令式语言。</p>
<h4 id="网络分层"><a href="#网络分层" class="headerlink" title="网络分层"></a>网络分层</h4><p>网络中的每一层，并不是相互独立的，例如TCP三次握手，也是必须有MAC和IP层的帮助，或者说必须由下层。</p>
<h4 id="冯诺依曼体系结构"><a href="#冯诺依曼体系结构" class="headerlink" title="冯诺依曼体系结构"></a>冯诺依曼体系结构</h4><p>从更高层次来看，冯诺依曼真的是牛逼，通过一个精简的模型，竟然可以解决一切计算问题。</p>
<p>惊叹于前人的智慧</p>
<p>如何将需求的核心定出来，用来解决一切复杂多变的问题，如果碰到这样的场景多思考一下冯诺依曼体系</p>
<h4 id="动态规划0-1背包问题"><a href="#动态规划0-1背包问题" class="headerlink" title="动态规划0-1背包问题"></a>动态规划0-1背包问题</h4><p>动态规划如同递归一样让人难以理解。将问题分成n个阶段，每个阶段保留不同的状态，然后通过上一个阶段推出这个阶段。</p>
<p>我们通过一些问题来认识这个解题思路</p>
<p>0-1背包问题，n个物品，每个物品有重量(2,2,4..，在包的重量限制下，如果使得包的重量最大。</p>
<p>首先我们将问题分成n个阶段(n个物品，都要讨论状态)</p>
<p>首先是第0个物品 它有两种状态，一个是放入背包，一个是不放入。所以states 0 0=true state 0 2=true</p>
<p>接着我们来到第一个物品，它基于上面的两种状态，每个状态都面临着放或者不放的问题。</p>
<p>依次，我们可以得到最后一个物品的状态，然后在最后一层，找到最接近W的状态，就是背包的最终状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">weight:物品重量 n:物品个数 w背包的极限重量</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span>[] weight,<span class="keyword">int</span> n,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">	<span class="keyword">boolean</span> states[][]=<span class="keyword">new</span> <span class="keyword">boolean</span>[n][w+<span class="number">1</span>];  <span class="comment">//默认初始化全为false</span></span><br><span class="line">	<span class="comment">//通过哨兵处理，简化判断</span></span><br><span class="line">	states[<span class="number">0</span>][<span class="number">0</span>]=<span class="keyword">true</span>;</span><br><span class="line">	<span class="keyword">if</span>(weight[<span class="number">0</span>]&lt;=w) states[<span class="number">0</span>][weight[<span class="number">0</span>]]=<span class="keyword">true</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//通过n个阶段的遍历</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">	<span class="comment">//第i个物品不放入背包</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;w;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(states[i-<span class="number">1</span>][j]==<span class="keyword">true</span>) states[i][j]=states[i-<span class="number">1</span>][j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//第i个物品放入背包</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;w-weight[i];j++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(states[i-<span class="number">1</span>][j]==<span class="keyword">true</span>) states[i][j+weight[i]]=<span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//找到背包的最大状态</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=w;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">	<span class="keyword">if</span>(states[n-<span class="number">1</span>][i]==<span class="keyword">true</span>) <span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>时间的复杂度是两层for，即O(n*w)</p>
<p>上述很好的描述了思路，但是这个是一种以空间换时间的方法，应该有一种只用一维数组就可以解决的问题。(好吧其实这个我只能大致理解)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">knapsack2</span><span class="params">(<span class="keyword">int</span>[] weight,<span class="keyword">int</span> n,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span>[] states=<span class="keyword">new</span> states[w+<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//哨兵处理</span></span><br><span class="line">    states[<span class="number">0</span>]=<span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(weight[i]&lt;=w) states[weight[i]]=<span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第i个物品放入背包</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=w-weight[i];j&gt;=<span class="number">0</span>;--j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(states[j]==<span class="keyword">true</span>) states[j+weight[i]]=<span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>突然间有点明白，这种的写法，因为如果第i个物品不放入背包，那么其实这种状态跟上一层状态是完全一样的。然后我们只要考虑将第i中物品放入背包的时候就可以了。为什么从大到小开始呢。重复计算？但是我现在没有想明白。我刚刚实验了一下，这个重复计算指的是对同一件物品进行两次计算。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>日拱一卒…</p>
<p>对自己情绪的掌控能力正在一点一点变强。</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>《精通Spring MVC4》读书笔记</title>
    <url>/2019-09-23-%E3%80%8A%E7%B2%BE%E9%80%9ASpring%20MVC4%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%20/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开启我的阅读《精通Spring MVC4》之旅，将之前零零碎碎的知识点用一个项目串起来。</p>
<h3 id="快速搭建Spring-Web项目"><a href="#快速搭建Spring-Web项目" class="headerlink" title="快速搭建Spring Web项目"></a>快速搭建Spring Web项目</h3><ol>
<li>主要依赖是spring-boot-starter-web</li>
</ol>
<p>其中starter会对很多方面进行自动化的配置。例如上面这个依赖将会包含tomcat-embedded和Spring MVC的依赖，会自动运行Spring MVC最为常用的配置，并提供一个分发器(dispatcher)，使其监听”/“根路径，还会提供错误界面，还有一个视图解析器(view resolver)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterSpringMvcApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(MasterSpringMvcApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>解释一下SpringBootApplication注解 这个注解其实包含了三个注解。</li>
</ol>
<p>@Configuration表明这个类会处理Spring的常规配置，如bean的声明</p>
<p>@ComponentScan是一个比较经典的注解，告诉spring去哪里找spring组件(服务、控制器等)。默认时会扫描当前包以及该包下的所有子包</p>
<p>@EnableAutoConfiguration注解会指导Spring Boot进行自动配置</p>
<ol start="3">
<li>看看springboot做了些什么<ol>
<li>初始化spring mvc的dispatcherServlet</li>
<li>搭建转码过滤器，保证客户端进行正确的转码</li>
<li>搭载视图解析器</li>
<li>配置静态资源的位置(css,js)</li>
<li>配置所支持的地域以及资源bundle</li>
<li>配置multipart解析器，保证文件上传能够正常工作</li>
<li>进Tomcat或Jetty包含进来，从而能够在Web服务器上运行我们的应用</li>
<li>建立错误页面</li>
</ol>
</li>
<li>静态资源需要放到”/META-INF/resources/“ “/resources/“ “/static/“ “/public/“</li>
<li>HTTP端口 在application.properties文件中定义server.port属性 设为-1表示禁用http,设置为0表示在随机端口上启动应用</li>
<li>SSL配置 https配置 </li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">server.ssl.key-store=classpath:keystore.jks</span><br><span class="line">server.ssl.key-store-password=secret</span><br><span class="line">server.ssl.key-password=another-secret</span><br></pre></td></tr></table></figure>

<p>一本书《Learning Spring Boot》</p>
<h3 id="精通MVC架构"><a href="#精通MVC架构" class="headerlink" title="精通MVC架构"></a>精通MVC架构</h3><ol>
<li>spring-thymeleaf.cache=false</li>
</ol>
<p>这会禁止启动视图缓存，每次访问时都会重新加载模板。但是在生产环境下需要改为true</p>
<ol start="2">
<li>spring mvc架构</li>
</ol>
<p>DispatcherServlet是一个典型的HttpServlet类，它会将HTTP请求分发给HandlerMapping,HandlerMapping会将资源(URL)与控制器关联起来。</p>
<p>控制器上对应的方法（带有@RequestMapping注解的方法）将会被调用。控制器会控制模型数据，并将视图名称返回给分发器</p>
<p>DispatcherServlet将会查询ViewResolver接口，从而得到对应视图的实现</p>
<p>使用Thymeleaf视图，其中ThymeleafAutoConfiguration将会为我们搭建视图解析器</p>
<p>默认前缀是“classpath:/templates/“,后缀是”.html”</p>
<p>举个例子：假设视图名为resultPage 那么视图解析器将会在类路径的templates目录下查找名为resultPage.html的文件</p>
<ol start="3">
<li>redirect:/redirecturl</li>
</ol>
<p>不是转发到一个视图，而是转发到url控制器</p>
<ol start="4">
<li>数据传输对象(Data Transfer Object,DTO)</li>
</ol>
<p>首先创建一个bean例如Test</p>
<p>然后绑定到前端form表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/url&#125;"</span> <span class="attr">th:object</span>=<span class="string">"$&#123;test&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:field</span>=<span class="string">"$&#123;test.xx&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ul>
<li><p>th:object表示类型将一个对象绑定到控制器上</p>
</li>
<li><p>th:field表示将实际的输入域绑定到表单bean的属性上</p>
<p>5.springboot中的日志</p>
</li>
</ul>
<p>在application.properties中添加代码</p>
<p>​    logging.level.org.springframework.web=DEBUG</p>
<p>这样就能看到Spring Web所产生的调试信息</p>
<h3 id="文件上传与错误处理"><a href="#文件上传与错误处理" class="headerlink" title="文件上传与错误处理"></a>文件上传与错误处理</h3><ol>
<li>上传文件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/upload&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/upload"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">onUpload</span><span class="params">(MultipartFile file)</span><span class="keyword">throws</span> IOExcepiton</span>&#123;</span><br><span class="line">    String filename=file.getOriginalFilename();</span><br><span class="line">    File tempFile=File.createTempFile(<span class="string">"pic"</span>,getFileExtension(filename),PICTURES_DIR.getFile())&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            InputStream in=file.getInputStream();</span><br><span class="line">            OutputStream out=<span class="keyword">new</span> FileOutputStream(tempFile)</span><br><span class="line">                ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>通过矩阵变量进行URL映射</li>
</ol>
<p>看一下这两种url</p>
<p>someUrl/param?var1=value1&amp;var2=value2</p>
<p>可以使用如下的矩阵变量</p>
<p>someUrl/param;var1=value1;var2=value2</p>
<p>还支持</p>
<p>someUrl/param;var1=value1,value2;var2=value3,value4</p>
<p>需要添加一下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">        urlPathHelper.setRemoveSemicolonContent(<span class="keyword">false</span>);</span><br><span class="line">        configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">        configurer.setUseRegisteredSuffixPatternMatch(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="单元测试与验收测试"><a href="#单元测试与验收测试" class="headerlink" title="单元测试与验收测试"></a>单元测试与验收测试</h3><p>通过@DataJpaTest注入测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//model</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Size</span>(min=<span class="number">3</span>,max=<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(@Size(min = <span class="number">3</span>, max = <span class="number">20</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>model 层很简单就是一个人的信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//repository</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Employee</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>repository(持久化层)使用Spring Data JPA</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">DataJpaTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">EmployeeRepositoryIntegrationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestEntityManager entityManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeRepository employeeRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenFindByName_thenReturnEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//given</span></span><br><span class="line">        Employee alex=<span class="keyword">new</span> Employee(<span class="string">"alex"</span>);</span><br><span class="line">        entityManager.persist(alex);</span><br><span class="line">        entityManager.flush();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//when</span></span><br><span class="line">        Employee found=employeeRepository.findByName(alex.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//then</span></span><br><span class="line">        assertThat(found.getName())</span><br><span class="line">                .isEqualTo(alex.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@RunWith(SpringRunner.class)通常用来提供一个在SpringBoot Test特性和JUnit之间的桥梁。当我们使用 SpringBoot testing特性在JUnit tests,这个注解都是必须的。</p>
<p>@DataJpaTest为持久层的test提供一些标准化步骤</p>
<ul>
<li>配置H2,一个数据库</li>
<li>设置Hibernate,Spring Data,和DataSource</li>
<li>表现一个@EntityScan</li>
<li>转为SQL logging</li>
</ul>
<p>为了执行一些DB操作，我们需要写记录已经存储到我们的数据库里，通过TestEntityManager可以很好的执行这些操作</p>
<hr>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>满打满算，现在只能算一个代码搬运工，还是需要多写，多理解。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第十一周</title>
    <url>/2019-09-21-ARTS%E7%AC%AC%E5%8D%81%E4%B8%80%E5%91%A8/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>终于停下来，做做ARTS</p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>题目：leetcode687</p>
<p>题目描述：给定一个树，找到路径最长(要求该路径上的节点值相同，可以不经过根节点)</p>
<p>题目思路：这是一个打上“递归”标签的题目</p>
<p>递归的解法：</p>
<ol>
<li>将问题分成子问题 找到某节点的最大路径分成找到其左右子树(如果有)的最大路径</li>
<li>左右子树最大路径的求解思路跟其节点的求解思路一致</li>
<li>终止条件 节点为Null</li>
</ol>
<p>实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestUnivaluePath</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        arrowLength(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">arrowLength</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left=arrowLength(node.left);</span><br><span class="line">        <span class="keyword">int</span> right=arrowLength(node.right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> arrowleft=<span class="number">0</span>,arrowright=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>&amp;&amp;node.left.val==node.val)&#123;</span><br><span class="line">            arrowleft+=left+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>&amp;&amp;node.right.val==node.val)&#123;</span><br><span class="line">            arrowright+=right+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ans=Math.max(ans,arrowright+arrowleft);</span><br><span class="line">        <span class="keyword">return</span> Math.max(arrowright,arrowleft);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h3><p>看了一下篇文章，妈的不知道在干嘛？</p>
<p>Functional vs. Imperative Data Structures</p>
<h3 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h3><p>看到一个方法</p>
<p>看文档，不认识的单词记下来，然后变成单词本复习</p>
<p>还有一个跟读</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>分页查询等</title>
    <url>/2019-09-20-%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E7%AD%89/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>复盘一下最近写的一些点。</p>
<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> xxx <span class="title">returnxxxx</span><span class="params">(@RequestParam String code,@RequestParam(value=<span class="string">"start"</span>,defaultValue=<span class="string">"0"</span>)</span>String start,@<span class="title">RequestParam</span><span class="params">(value=<span class="string">"size"</span>,defaultValue=<span class="string">"9"</span>)</span>String size)</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> starts=Integer.parseInt(start);</span><br><span class="line">    <span class="keyword">int</span> sizes=Integer.parseInt(size);</span><br><span class="line">    </span><br><span class="line">    starts=starts&lt;<span class="number">0</span>?<span class="number">0</span>:starts;</span><br><span class="line">    Sort sort=<span class="keyword">new</span> Sort(Sort.Direction.ASC,<span class="string">"id"</span>);</span><br><span class="line">    Pageable pageable=<span class="keyword">new</span> PageRequest(starts,size,sort);</span><br><span class="line">    Page&lt;XXX&gt; pages=xxxx.findByCode(code,pageable);</span><br><span class="line">    <span class="keyword">return</span> xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要在Repository里写上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;xxxx&gt; <span class="title">findByCode</span><span class="params">(String code,Pageable pageable)</span></span></span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ol>
<li>start是第几页 默认从第0页开始</li>
<li>size是一页的大小 默认是9</li>
<li>Sort是进行排序</li>
</ol>
<p>以上是有条件执行</p>
<h3 id="ajax操作DOM"><a href="#ajax操作DOM" class="headerlink" title="ajax操作DOM"></a>ajax操作DOM</h3><p>这次算是操作一把</p>
<p>首先要把所想的描述成一个DOM树，然后进行操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cell=<span class="built_in">document</span>.createElement(<span class="string">"div"</span>)</span><br><span class="line">cell.setAttribute(<span class="string">"class"</span>,<span class="string">"..."</span>)</span><br><span class="line">cell.appendChild(cell)</span><br></pre></td></tr></table></figure>

<p>补充点另外用到的</p>
<ol>
<li>$(“#id”)</li>
<li>document.getElementById(“id”)</li>
</ol>
<h3 id="后退不刷新页面"><a href="#后退不刷新页面" class="headerlink" title="后退不刷新页面"></a>后退不刷新页面</h3><p>因为我的页面是通过ajax实现局部刷新，即url没有发生变化，所以如果是通过浏览器进行后退的话，一定是第一次进入页面的状态(因为url)</p>
<p>所以问题就出现在url上，所以就做一个假的url。把信息存储到url</p>
<p>然后后退时读取url</p>
<p>当然这种实现方式是比较暴力的，会有部分bug，但是我search了很多资料，都没有好的方法。所以就用了这种方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.pushState(<span class="string">'forward'</span>, <span class="literal">null</span>, <span class="string">"#"</span> + id+<span class="string">"&amp;"</span>+start)</span><br></pre></td></tr></table></figure>

<h3 id="Thymeleaf-Layout"><a href="#Thymeleaf-Layout" class="headerlink" title="Thymeleaf Layout"></a>Thymeleaf Layout</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">定义模板</span><br><span class="line">default.html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"foot"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">引用模板</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"default::foot"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不知道是自己打开的方式有误还是怎么了，这种实现需要将foot的css加到引用模板的页面</p>
<p>补充一写另外的</p>
<ol>
<li>th:href=”@{/}”</li>
</ol>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>不知道为什么最近特别“忙”。难以想象，需要好好想一想</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>谈一谈服务端的推送技术</title>
    <url>/2019-09-16-%E8%B0%88%E4%B8%80%E8%B0%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E6%8E%A8%E9%80%81%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<hr>
<p>##正文</p>
<p>先前接触推送，是从“wjaf”项目里碰到的。</p>
<p>项目场景是：当一台移动端设备添加新的数据时，另一台移动端的设备也要实时更新页面。</p>
<p>不过当时自己技术很菜(虽然现在也很菜)，只能听懂一点：轮询。</p>
<p>后面慢慢接触了有点懂了是个什么样的一回事。</p>
<p>首先要知道传统的HTTP是有弊端的，即满足“请求-响应”的工作模式，但是发送请求的只能是客户端，如果我们要让服务端向客户端<strong>主动</strong>发送数据，这个是在传统模式下是做不到的。</p>
<p>然后就有了一下解决方法</p>
<p>轮询(poll)：客户端通过周期性请求，每次请求检查服务端是否有更新数据。可以明显看出来这种方法会造成overhead(为了传输实际而造成的的开销)。</p>
<p>接着就有着许多方法</p>
<p>Comet:一次请求后，不马上断开连接，当服务端有数据更新的时候，可以通过分块传输，发给客户端。这种被称为长轮询</p>
<p>WebSocket：这个就彻底解决push(推送)的问题，是一个完全的、双向的协议。前几天，因为需要做即时聊天的需求，大致了解一下.onopen，onmessage等等。</p>
<p>其实 ajax的局部更新页面+轮询=websocket</p>
<p>虽然即时聊天的需求已经解决了(用了百度的轮子)，但是还是需要记录一下这种服务端push的场景。日后当我需要在一次用到的时候也可以去search。</p>
]]></content>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot与WebSocket</title>
    <url>/2019-09-09-SpringBoot%E4%B8%8EWebSocket/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点，更新自己的技术库</p>
<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>简单说一下WebSocket，因为HTTP协议是“请求-应答”模式，所以要做到即时通信，不好弄。因为服务端不能主动向客户端发送信息。所以可以通过客户端向服务端不断去请求(轮询)，查看是否有新消息。但是如果请求的多了就容易造成堵塞。</p>
<p>WebSocket就是为了解决这样的问题。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="消息类"><a href="#消息类" class="headerlink" title="消息类"></a>消息类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENTER = <span class="string">"ENTER"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPEAK = <span class="string">"SPEAK"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUIT = <span class="string">"QUIT"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;<span class="comment">//消息类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username; <span class="comment">//发送人</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//发送消息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> onlineCount; <span class="comment">//在线用户数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">jsonStr</span><span class="params">(String type, String username, String msg, <span class="keyword">int</span> onlineTotal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(<span class="keyword">new</span> Message(type, username, msg, onlineTotal));</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="聊天服务端"><a href="#聊天服务端" class="headerlink" title="聊天服务端"></a>聊天服务端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/chat"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketChatServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全部在线会话  PS: 基于场景考虑 这里使用线程安全的Map存储会话对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Session&gt; onlineSessions = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当客户端打开连接：1.添加会话对象 2.更新在线人数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        onlineSessions.put(session.getId(), session);</span><br><span class="line">        sendMessageToAll(Message.jsonStr(Message.ENTER, <span class="string">""</span>, <span class="string">""</span>, onlineSessions.size()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当客户端发送消息：1.获取它的用户名和消息 2.发送消息给所有人</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * PS: 这里约定传递的消息为JSON字符串 方便传递更多参数！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Session session, String jsonStr)</span> </span>&#123;</span><br><span class="line">        Message message = JSON.parseObject(jsonStr, Message<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        sendMessageToOne(session,Message.jsonStr(Message.SPEAK, message.getUsername(), message.getMsg(), onlineSessions.size()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当关闭连接：1.移除会话对象 2.更新在线人数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        onlineSessions.remove(session.getId());</span><br><span class="line">        <span class="comment">//sendMessageToAll(Message.jsonStr(Message.QUIT, "", "", onlineSessions.size()));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当通信发生异常：打印错误日志</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable error)</span> </span>&#123;</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公共方法：发送信息给所有人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessageToAll</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        onlineSessions.forEach((id, session) -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                session.getBasicRemote().sendText(msg);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送给某人的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessageToOne</span><span class="params">(Session session,String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            session.getBasicRemote().sendText(msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ul>
<li>WebSocket服务端 需指定端点的访问路径</li>
</ul>
<p>(其实上面的代码都还比较好理解的)</p>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于扫描和注册所有携带ServerEndPoint注解的实例。</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * PS:若部署到外部容器 则无需提供此类。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getWebSocket</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> webSocket=<span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:8080/chat"</span>)</span><br><span class="line">    </span><br><span class="line">    webSocket.onopen=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"打开连接"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//服务端发来消息</span></span><br><span class="line">    webSocket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'WebSocket收到消息：%c'</span> + event.data, <span class="string">'color:green'</span>);</span><br><span class="line">            <span class="comment">//获取服务端消息</span></span><br><span class="line">            <span class="keyword">var</span> message = <span class="built_in">JSON</span>.parse(event.data) || &#123;&#125;;</span><br><span class="line">            <span class="keyword">var</span> $messageContainer = $(<span class="string">'.message-container'</span>);</span><br><span class="line">            <span class="comment">//喉咙发炎</span></span><br><span class="line">            <span class="keyword">if</span> (message.type === <span class="string">'SPEAK'</span>) &#123;</span><br><span class="line">                $messageContainer.append(</span><br><span class="line">                    <span class="string">'&lt;div class="mdui-card" style="margin: 10px 0;"&gt;'</span> +</span><br><span class="line">                    <span class="string">'&lt;div class="mdui-card-primary"&gt;'</span> +</span><br><span class="line">                    <span class="string">'&lt;div class="mdui-card-content message-content"&gt;'</span> + message.username + <span class="string">"："</span> + message.msg + <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">                    <span class="string">'&lt;/div&gt;&lt;/div&gt;'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $(<span class="string">'.chat-num'</span>).text(message.onlineCount);</span><br><span class="line">            <span class="comment">//防止刷屏</span></span><br><span class="line">            <span class="keyword">var</span> $cards = $messageContainer.children(<span class="string">'.mdui-card:visible'</span>).toArray();</span><br><span class="line">            <span class="keyword">if</span> ($cards.length &gt; <span class="number">5</span>) &#123;</span><br><span class="line">                $cards.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">                    index &lt; $cards.length - <span class="number">5</span> &amp;&amp; $(item).slideUp(<span class="string">'fast'</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭连接</span></span><br><span class="line">     webSocket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'WebSocket关闭连接'</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 通信失败</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        webSocket.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'WebSocket发生异常'</span>);</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> webSocket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> webSocket = getWebSocket();</span><br></pre></td></tr></table></figure>

<h3 id="踩到的坑"><a href="#踩到的坑" class="headerlink" title="踩到的坑"></a>踩到的坑</h3><ol>
<li>因为用Https所以应该改用wss</li>
</ol>
<p>刚开始想用这个做一个在线咨询的玩意，搞了一下。认真思考了一下，决定先弃用。改用简单的提交联系方式来弄这一块</p>
<p>一来，这个也符合大部分网页，例如腾讯云的提交工单，一些网站的在线咨询</p>
<p>二来，能做但是感觉不到自己的预期。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/964370d9374e" target="_blank" rel="noopener">WebSocket</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>事一件一件的解决，别急。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第十周</title>
    <url>/2019-09-09-ARTS%E7%AC%AC%E5%8D%81%E5%91%A8/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学点东西，更新自己的技术库。</p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>题目：leetcode 11</p>
<p>描述：给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p>思路：</p>
<ol>
<li>暴力法，直接求出最大面积即可。 时间复杂度为O(n2)</li>
<li>双指针法 首尾两个指针，线段短的那一段向线段长的那一段移动 时间复杂度O(n)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxarea=<span class="number">0</span>,l=<span class="number">0</span>,r=height.length-<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            maxarea=Math.max(maxarea,Math.min(height[l],height[r])*(r-l));</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(height[l]&lt;=height[r])</span><br><span class="line">                l++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxarea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第九周</title>
    <url>/2019-09-07-ARTS%E7%AC%AC%E4%B9%9D%E5%91%A8/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新东西，更新自己的技术库。</p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>题目：leetcode 113</p>
<p>描述：给定一个二叉树和一个整数，要求从根到叶子节点的路径总和等于该整数，返回可能的路径</p>
<p>思路：有点难搞，递归+回溯</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root,<span class="keyword">int</span> sum)&#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        helper(root,sum,res,<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root,<span class="keyword">int</span> sum,List&lt;List&lt;Integer&gt;&gt; res,ArrayList&lt;Integer&gt; tmp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        tmp.add(root.val);</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="keyword">null</span>&amp;&amp;root.right==<span class="keyword">null</span>&amp;&amp;sum-root.val==<span class="number">0</span>) res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tmp));</span><br><span class="line">        helper(root.left,sum-root.val,res,tmp);</span><br><span class="line">        helper(root.right,sum-root.val,res,tmp);</span><br><span class="line">        </span><br><span class="line">        tmp.remove(tmp.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h3><p>这两天重温了一下《平凡的世界》</p>
<p>发现不同阶段去读同一本书会有不同的感受。</p>
<p>上一次读平凡的世界，面对晓霞(书中人物)的死，还很不能接受。</p>
<p>这一次读的话，我发现了另外一个人物的存在，秀莲。</p>
<p>按照zwk的说法，她才是书中最好的女人。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>去做</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL必知必会(三)</title>
    <url>/2019-09-06-SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A(%E4%B8%89)/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新东西，更新自己的技术库。</p>
<h3 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h3><p>首先需要知道索引的价值是帮助我们从海量的数据中找到想要的数据，如果数据量少的话是否使用索引，其实结果并不是很明显。</p>
<h3 id="索引种类"><a href="#索引种类" class="headerlink" title="索引种类"></a>索引种类</h3><h4 id="功能逻辑"><a href="#功能逻辑" class="headerlink" title="功能逻辑"></a>功能逻辑</h4><ul>
<li>普通索引 没有任何约束，主要用于提高查询效率</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> indexName <span class="keyword">ON</span> mytable(username(<span class="keyword">length</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>唯一索引 在普通索引上面增加了数据唯一性的约束，在一张表中可以有多个唯一索引</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> indexName <span class="keyword">ON</span> mytable(username(<span class="keyword">length</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>主键索引 在唯一索引的基础上加上不能为空的约束</li>
<li>全文索引 MySQL自带的全文索引只支持英文，可以使用专门的全文搜素引擎 ES(ElasticSearch)和Solr</li>
</ul>
<h4 id="物理逻辑"><a href="#物理逻辑" class="headerlink" title="物理逻辑"></a>物理逻辑</h4><ul>
<li>聚集索引 叶子节点存储的全部信息(一张表只能有一个，因为只能有一种排序存储方式)</li>
<li>非聚集索引(二级索引) 叶子节点存储的是位置信息，所以有回表操作(这个在早上一篇中已经提到了)</li>
</ul>
<h3 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h3><p>如果建立的是联合索引(x,y,z)</p>
<p>查询WHERE x=1 AND y=2 AND z=3可以匹配上</p>
<p>查询WHERE y=2无法匹配上联合索引</p>
<h3 id="创建索引的规律"><a href="#创建索引的规律" class="headerlink" title="创建索引的规律"></a>创建索引的规律</h3><h4 id="字段的数值有唯一性的限制，例如用户名"><a href="#字段的数值有唯一性的限制，例如用户名" class="headerlink" title="字段的数值有唯一性的限制，例如用户名"></a>字段的数值有唯一性的限制，例如用户名</h4><p>索引本身可以起到唯一限制的作用，像唯一索引、主键索引。所以当一个字段是唯一性的时候，就可以创建唯一性索引或者主键索引。</p>
<h4 id="频繁作为WHERE查询条件的字段"><a href="#频繁作为WHERE查询条件的字段" class="headerlink" title="频繁作为WHERE查询条件的字段"></a>频繁作为WHERE查询条件的字段</h4><p>经常被用来做为查询条件的就可以创建索引，来提高查询效率</p>
<h4 id="经常GROUP-BY和ORDER-BY的列"><a href="#经常GROUP-BY和ORDER-BY的列" class="headerlink" title="经常GROUP BY和ORDER BY的列"></a>经常GROUP BY和ORDER BY的列</h4><p>按照上面我们提到的，索引会建立一个新的树，这个树的存储方式就是Index。因此在GROUP BY和ORDER BY就可以将其建立一个索引</p>
<h4 id="UPDATE、DELETE是对WHERE的条件列建立索引"><a href="#UPDATE、DELETE是对WHERE的条件列建立索引" class="headerlink" title="UPDATE、DELETE是对WHERE的条件列建立索引"></a>UPDATE、DELETE是对WHERE的条件列建立索引</h4><p>对数据按照某条件进行查询后，再进行update或者delete。如果对这个条件建立索引，就能大幅提升效率。</p>
<p>但是如果在更新过程中，更新的字段是索引的话，就会涉及到索引维护这个消耗。</p>
<p>所以需要注意<strong>平衡</strong></p>
<h4 id="DISTINCT字段需要创建索引"><a href="#DISTINCT字段需要创建索引" class="headerlink" title="DISTINCT字段需要创建索引"></a>DISTINCT字段需要创建索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(user_id) <span class="keyword">FROM</span> <span class="string">'product_comment'</span></span><br></pre></td></tr></table></figure>

<p>如果对user_id建立索引的话，会提高查询效率</p>
<h3 id="不要创建索引的情况"><a href="#不要创建索引的情况" class="headerlink" title="不要创建索引的情况"></a>不要创建索引的情况</h3><ul>
<li>WHERE条件(包括GROUP BY、ORDER BY)里用不到的字段不需要创建索引</li>
<li>表记录太少，比如少于1000个不要创建索引</li>
<li>有大量重复数据，例如性别字段也不用创建索引</li>
<li>频繁更新的字段，不要创建索引</li>
</ul>
<h3 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h3><ul>
<li>索引进行表达式计算会失效</li>
<li>对索引使用函数会失效</li>
<li>在WHERE子句中，or前面进行了索引，后面没有进行索引。那么索引会失效</li>
<li>进行LIKE进行模糊查询时候，前面不能是%</li>
</ul>
<h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><h4 id="建立设置为NOT-NULL约束"><a href="#建立设置为NOT-NULL约束" class="headerlink" title="建立设置为NOT NULL约束"></a>建立设置为NOT NULL约束</h4><h4 id="注意最左原则"><a href="#注意最左原则" class="headerlink" title="注意最左原则"></a>注意最左原则</h4><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>结合早上的<a href="[https://jiayouxujin.github.io/2019/09/06/Mysql%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97(%E4%BA%8C)-%E7%B4%A2%E5%BC%95%E6%A8%A1%E5%9E%8B/](https://jiayouxujin.github.io/2019/09/06/Mysql实战系列(二)-索引模型/)">索引模型</a>,算是又学习了一点索引的东西。</p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第八周</title>
    <url>/2019-09-06-ARTS%E7%AC%AC%E5%85%AB%E5%91%A8/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天都学点技术，更新自己的技术库</p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>题目：leetcode 112</p>
<p>题目描述：给定一颗二叉树，还有sum。找到是否存在从根节点到叶子节点的和为sum</p>
<p>思路：深度搜索，利用两个栈，一个是node，一个是sum。然后进行判断。有点像“走地图”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        LinkedList&lt;TreeNode&gt; node_stack=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        LinkedList&lt;Integer&gt; sum_stack=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        node_stack.add(root);</span><br><span class="line">        sum_stack.add(sum-root.val);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!node_stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node=node_stack.pollLast();</span><br><span class="line">            <span class="keyword">int</span> tempsum=sum_stack.pollLast();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>((node.left==<span class="keyword">null</span>)&amp;&amp;(node.right==<span class="keyword">null</span>)&amp;&amp;tempsum==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                node_stack.add(node.left);</span><br><span class="line">                sum_stack.add(tempsum-node.left.val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                node_stack.add(node.right);</span><br><span class="line">                sum_stack.add(tempsum-node.right.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有一种递归的方法，xx真的太简洁了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        sum-=root.val;</span><br><span class="line">        <span class="keyword">if</span>((root.left==<span class="keyword">null</span>)&amp;&amp;(root.right==<span class="keyword">null</span>)&amp;&amp;sum==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> hasPathSum(root.right,sum)||hasPathSum(root.left,sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h3><p>碎片时间思考和联结</p>
<p>不可能做到对自己时间的完全掌控，所以尽可能做到掌控时间内多利用好</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql实战系列(二)-索引模型</title>
    <url>/2019-09-03-Mysql%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97(%E4%BA%8C)-%E7%B4%A2%E5%BC%95%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要学习一点新技术，更新自己的技术库。</p>
<h3 id="索引常见模型"><a href="#索引常见模型" class="headerlink" title="索引常见模型"></a>索引常见模型</h3><ul>
<li>哈希表 key-value 如果出现哈希值相同，则会重新拉出一个链表，虽然对查询某个值效果不错，但是查询某个区间的时候效果就没有那么好了，所以哈希表这种结构适合<strong>等值查询</strong>。</li>
<li>有序数组 解决了哈希表中查询某个区间的困难，但是在插入一个新数据时，就必须挪动后面的数据，这个成本太高了。所以有序数组索引只适用于<strong>静态存储</strong>。存储内容基本上不发生改变的。</li>
<li>二叉搜索树 但是如果仅仅是“二叉”效果也很不好，因为每次查询都要访问当前节点的值。所以要使用N叉树，这里N取决于数据块的大小</li>
</ul>
<h3 id="InnoDB索引模型"><a href="#InnoDB索引模型" class="headerlink" title="InnoDB索引模型"></a>InnoDB索引模型</h3><p>因为InnoDB使用了B+树索引模型，所以每一个索引都对应着一棵B+树</p>
<p>根据B+树叶子节点的类型，分为主键索引和非主键索引</p>
<p>主键索引的叶子节点存的是整行数据，也称为聚簇索引(clustered index)</p>
<p>非主键索引的叶子节点存的是主键的值，也称为二级索引(secondary index)</p>
<p>举个例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> T <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">500</span>  <span class="comment">#主键查询方式，只需要搜索ID这棵B+树</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> T <span class="keyword">where</span> k=<span class="number">5</span> <span class="comment">#普通索引查询方式，先搜索K索引树，得到ID值为500，然后再到ID索引树搜索一次，这个过程称为“回表”</span></span><br></pre></td></tr></table></figure>

<h3 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h3><p>B+树为了维护索引的有效性，需要做出必要的维护。</p>
<p>一个案例：自增主键的必要性</p>
<ul>
<li>由于是自增主键，插入是不要指定ID的值，它会自动获取当前ID并且+1，每次插入都是追加的模式。</li>
<li>如果使用“身份证”作为主键，往往不容易插入。且在普通索引树里，叶子节点的空间越大(叶子节点存放的值为主键)</li>
</ul>
<p>不使用自增主键的情况 KV场景</p>
<ul>
<li>只有一个索引</li>
<li>该索引必须是唯一索引</li>
</ul>
<p>总而言之，应尽可能的使用“主键索引”减少回表的操作，提高性能</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>算是大致了解了索引是怎么一个回事</p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>java中的一些点</title>
    <url>/2019-09-06-java%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%82%B9/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新技术，更新自己的技术库</p>
<h3 id="泛型程序设计"><a href="#泛型程序设计" class="headerlink" title="泛型程序设计"></a>泛型程序设计</h3><ul>
<li>在JAVA SE7及以后的版本中，构造函数中可以省略泛型类型,省略的类型可以从变量的类型推断得出来,这里的String就是<strong>类型参数</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; files=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>

<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>迭代器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">	....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;String&gt; it=c.iterator();</span><br></pre></td></tr></table></figure>

<p>必须先调用next，才能remove。如果在remove之前没有调用next是不合法的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">it.next();</span><br><span class="line">it.remove();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; a=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        a.add(<span class="string">"A"</span>);</span><br><span class="line">        a.add(<span class="string">"B"</span>);</span><br><span class="line">        a.add(<span class="string">"C"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; b=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        b.add(<span class="string">"D"</span>);</span><br><span class="line">        b.add(<span class="string">"E"</span>);</span><br><span class="line">        b.add(<span class="string">"F"</span>);</span><br><span class="line">        b.add(<span class="string">"G"</span>);</span><br><span class="line"></span><br><span class="line">        ListIterator&lt;String&gt; aite=a.listIterator();</span><br><span class="line">        Iterator&lt;String&gt; bite=b.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(bite.hasNext())&#123;</span><br><span class="line">            <span class="keyword">if</span>(aite.hasNext()) aite.next();</span><br><span class="line">            aite.add(bite.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        bite=b.iterator();</span><br><span class="line">        <span class="keyword">while</span>(bite.hasNext())&#123;</span><br><span class="line">            bite.next();</span><br><span class="line">            <span class="keyword">if</span>(bite.hasNext())&#123;</span><br><span class="line">                bite.next();</span><br><span class="line">                bite.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        a.removeAll(b);</span><br><span class="line"></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ul>
<li>ListIterator 列表迭代器，以便用来方便访问列表中的元素</li>
</ul>
<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bounce;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.PUBLIC_MEMBER;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bounce</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        EventQueue.invokeLater(()-&gt;&#123;</span><br><span class="line">            JFrame frame=<span class="keyword">new</span> BounceFrame();</span><br><span class="line">            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">            frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BounceFrame</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BallComponent comp;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STEPS=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DELAY=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BounceFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        setTitle(<span class="string">"Bounce"</span>);</span><br><span class="line">        comp=<span class="keyword">new</span> BallComponent();</span><br><span class="line">        add(comp,BorderLayout.CENTER);</span><br><span class="line">        JPanel buttonJpanel=<span class="keyword">new</span> JPanel();</span><br><span class="line">        addButton(buttonJpanel,<span class="string">"Start"</span>,event-&gt;addBall());</span><br><span class="line">        addButton(buttonJpanel,<span class="string">"Close"</span>,event-&gt;System.exit(<span class="number">0</span>));</span><br><span class="line">        add(buttonJpanel,BorderLayout.SOUTH);</span><br><span class="line">        pack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addButton</span><span class="params">(Container c, String title, ActionListener listener)</span></span>&#123;</span><br><span class="line">        JButton button=<span class="keyword">new</span> JButton(title);</span><br><span class="line">        c.add(button);</span><br><span class="line">        button.addActionListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBall</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Ball ball=<span class="keyword">new</span> Ball();</span><br><span class="line">        comp.add(ball);</span><br><span class="line">        Runnable r=()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=STEPS;i++)&#123;</span><br><span class="line">                    ball.move(comp.getBounds());</span><br><span class="line">                    comp.repaint();</span><br><span class="line">                    Thread.sleep(DELAY);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t=<span class="keyword">new</span> Thread(r);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bounce;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.scenario.effect.impl.prism.PrImage;</span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.PUBLIC_MEMBER;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BallComponent</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_WIDTH=<span class="number">450</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_HEIGHT=<span class="number">350</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Ball&gt; balls=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Ball b)</span></span>&#123;</span><br><span class="line">        balls.add(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paintComponent</span><span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.paintComponent(g);</span><br><span class="line">        Graphics2D graphics2D=(Graphics2D)g;</span><br><span class="line">        <span class="keyword">for</span> (Ball b:balls)&#123;</span><br><span class="line">            graphics2D.fill(b.getShape());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dimension <span class="title">getPreferedSize</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> Dimension(DEFAULT_WIDTH,DEFAULT_HEIGHT);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bounce;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.javafx.css.Size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.geom.Ellipse2D;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.Rectangle2D;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ball</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> XSIZE=<span class="number">15</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> YSIZE=<span class="number">15</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> y=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> dx=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> dy=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(Rectangle2D bounds)</span></span>&#123;</span><br><span class="line">        x+=dx;</span><br><span class="line">        y+=dy;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x&lt;bounds.getMinX())&#123;</span><br><span class="line">            x=bounds.getMinX();</span><br><span class="line">            dx=-dx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x+XSIZE&gt;=bounds.getMaxX())&#123;</span><br><span class="line">            x=bounds.getMaxX()-XSIZE;</span><br><span class="line">            dx=-dx;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(y&lt;bounds.getMinY())&#123;</span><br><span class="line">            y=bounds.getMinY();</span><br><span class="line">            dy=-dy;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(y+ YSIZE&gt;=bounds.getMaxY())&#123;</span><br><span class="line">            y=bounds.getMaxY()-YSIZE;</span><br><span class="line">            dy=-dy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Ellipse2D <span class="title">getShape</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Ellipse2D.Double(x,y,XSIZE,YSIZE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>无聊之中试了个并发的demo，别说还挺有趣的。什么时候在试一下分布式系统的demo。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL必知必会(二)</title>
    <url>/2019-09-06-SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A(%E4%BA%8C)/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要学习一点新技术，更新自己的技术库</p>
<h3 id="数据表中的那些键"><a href="#数据表中的那些键" class="headerlink" title="数据表中的那些键"></a>数据表中的那些键</h3><ul>
<li>超键：能唯一标识元组的属性集叫做超键</li>
<li>候选键：最小超键，即不包含其他属性。例如该属性集中找不到其真子集满足唯一标识元组的条件</li>
<li>主键：候选键中选一个作为主键</li>
<li>外键：某表A中的属性集不是该表的主键，是另外一个表B的主键</li>
<li>主属性：在候选键中的属性称为主属性</li>
<li>非主属性：与主属性相对的，不包含在任何一个候选键中的属性</li>
</ul>
<p>通常，我们也将候选键称为“码”，主键也称为“主码”</p>
<p>举个例子：球员表 定义为 球员编号、姓名、身份证号、年龄和球队编号</p>
<p>超键即为 属性集包含 球员编号 或者身份证</p>
<p>候选码 （球员编号) （身份证)</p>
<p>主键 从候选码中任意选择一个</p>
<p>外键 球队编号</p>
<h3 id="从1NF到3NF"><a href="#从1NF到3NF" class="headerlink" title="从1NF到3NF"></a>从1NF到3NF</h3><h4 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h4><p>指的是数据库表中任何属性都是原子性，不可再分。就是不能对字段进行拆分</p>
<h4 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h4><p><strong>指数据表中的非主属性都要和这个数据表中的候选键有完全依赖关系</strong></p>
<p>举个例子</p>
<p>一张球员比赛表 player_game包含 球员编号、姓名、年龄、比赛编号、比赛时间和比赛场地</p>
<p>候选键和主键都是(球员编号、比赛编号)</p>
<p>所以(球员编号、比赛编号)-&gt;(姓名、年龄…)</p>
<p>但是不满足第二范式</p>
<p>(球员编号)-&gt;(姓名、年龄)</p>
<p>(比赛编号)-&gt;(比赛时间、比赛场地)</p>
<p>这样就说明 非主属性并非完全依赖于候选键会造成数据冗余等错误</p>
<ul>
<li>数据冗余 如果一个球员参加M场比赛，其姓名和年龄就重复了m-1次，一场比赛有n个球员参加，其比赛时间和地点就会重复n-1次</li>
<li>插入异常 如果新加一场比赛，但是由于参加队员未知，所以就无法插入</li>
<li>删除异常 删掉某个球员编号 就会将比赛信息删掉</li>
<li>更新异常 如果更新某场比赛时间，那么就要调整所有数据</li>
</ul>
<p>所以应该设计成三张表</p>
<p>球员 包含球员编号 年龄属性等</p>
<p>比赛 包含比赛编号 比赛时间等</p>
<p>球员比赛关系 球员编号 比赛编号 得分属性</p>
<p>理解一下：2NF就是然每一张表只做一件事</p>
<h4 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h4><p>非主属性只能依赖于候选键</p>
<p>例如球员表中 球员编号 球队名称 球队教练</p>
<p>候选键为 球员编号</p>
<p>球员编号决定了球队名称，球队名称又决定了球队教练。所以就会出现传递依赖。</p>
<p>如何解决？</p>
<p>球员表 球员编号、球队名称 </p>
<p>球队表 球队名称 球队教练</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>1nf一般DBMS都已经做到了</p>
<p>2nf 只需要判断非主属性中是否有只要候选码的真子集就可以确定的</p>
<p>3nf 判断非主属性中是否可以决定的内容</p>
<p>不过将表拆分成这样，使得查询的效率实在是低</p>
<h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><p>学生选课表 属性 学号、姓名、课程名称、分数、系别和系主任</p>
<p>学生表：学号(候选码) 姓名 系别(外键)</p>
<p>系表：系别(候选码) 系主任</p>
<p>课程表：课程编号(候选码) 课程名称</p>
<p>学生-课程表：学号 +课程编号(候选码) 分数</p>
<h3 id="BCNF巴斯范式"><a href="#BCNF巴斯范式" class="headerlink" title="BCNF巴斯范式"></a>BCNF巴斯范式</h3><p>例如有张表 仓库名、管理员、物品名、数量</p>
<p>候选键为(仓库名、物品名)(管理员、物品名)</p>
<p>满足1nf,因为数量是完全依赖于候选键的满足2nf，因为不存在传递候选键依赖满足3nf</p>
<p>存在问题</p>
<ul>
<li>增加一个仓库，物品为空。根据数据库的实体完整性会出现插入异常(主键不能为空)</li>
<li>仓库更换了管理员，更改多条记录</li>
<li>如果物品为空，该仓库信息会被删除掉</li>
</ul>
<p>根据BCNF要求拆分成</p>
<p>仓库表:（仓库名、管理员)</p>
<p>库存表：(仓库名、物品名、数量)</p>
<h3 id="反范式设计"><a href="#反范式设计" class="headerlink" title="反范式设计"></a>反范式设计</h3><p>如果需要多个表查询，可以尝试用空间换时间，即数据冗余</p>
<p>例如实战中不断增加的pic_url，减少查询</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>没有绝对的标准，只有最适合的。需要不断去摸索，不断总结。</p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql实战系列(二)-索引模型</title>
    <url>/2019-09-06-Mysql%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97(%E4%BA%8C)-%E7%B4%A2%E5%BC%95%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要学习一点新技术，更新自己的技术库。</p>
<h3 id="索引常见模型"><a href="#索引常见模型" class="headerlink" title="索引常见模型"></a>索引常见模型</h3><ul>
<li>哈希表 key-value 如果出现哈希值相同，则会重新拉出一个链表，虽然对查询某个值效果不错，但是查询某个区间的时候效果就没有那么好了，所以哈希表这种结构适合<strong>等值查询</strong>。</li>
<li>有序数组 解决了哈希表中查询某个区间的困难，但是在插入一个新数据时，就必须挪动后面的数据，这个成本太高了。所以有序数组索引只适用于<strong>静态存储</strong>。存储内容基本上不发生改变的。</li>
<li>二叉搜索树 但是如果仅仅是“二叉”效果也很不好，因为每次查询都要访问当前节点的值。所以要使用N叉树，这里N取决于数据块的大小</li>
</ul>
<h3 id="InnoDB索引模型"><a href="#InnoDB索引模型" class="headerlink" title="InnoDB索引模型"></a>InnoDB索引模型</h3><p>因为InnoDB使用了B+树索引模型，所以每一个索引都对应着一棵B+树</p>
<p>根据B+树叶子节点的类型，分为主键索引和非主键索引</p>
<p>主键索引的叶子节点存的是整行数据，也称为聚簇索引(clustered index)</p>
<p>非主键索引的叶子节点存的是主键的值，也称为二级索引(secondary index)</p>
<p>举个例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> T <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">500</span>  <span class="comment">#主键查询方式，只需要搜索ID这棵B+树</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> T <span class="keyword">where</span> k=<span class="number">5</span> <span class="comment">#普通索引查询方式，先搜索K索引树，得到ID值为500，然后再到ID索引树搜索一次，这个过程称为“回表”</span></span><br></pre></td></tr></table></figure>

<h3 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h3><p>B+树为了维护索引的有效性，需要做出必要的维护。</p>
<p>一个案例：自增主键的必要性</p>
<ul>
<li>由于是自增主键，插入是不要指定ID的值，它会自动获取当前ID并且+1，每次插入都是追加的模式。</li>
<li>如果使用“身份证”作为主键，往往不容易插入。且在普通索引树里，叶子节点的空间越大(叶子节点存放的值为主键)</li>
</ul>
<p>不使用自增主键的情况 KV场景</p>
<ul>
<li>只有一个索引</li>
<li>该索引必须是唯一索引</li>
</ul>
<p>总而言之，应尽可能的使用“主键索引”减少回表的操作，提高性能</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>算是大致了解了索引是怎么一个回事</p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL必知必会(一)</title>
    <url>/2019-09-04-SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A(%E4%B8%80)/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要学习一点新技术，更新自己的技术库</p>
<h3 id="DDL的基础语法即设计工具"><a href="#DDL的基础语法即设计工具" class="headerlink" title="DDL的基础语法即设计工具"></a>DDL的基础语法即设计工具</h3><p>####对数据库进行定义</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> basename;</span><br></pre></td></tr></table></figure>

<p>创建一个名为basename 的数据库</p>
<h4 id="对数据表进行定义"><a href="#对数据表进行定义" class="headerlink" title="对数据表进行定义"></a>对数据表进行定义</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tablename;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tablename(</span><br><span class="line">	player_id <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    player_name <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>提示：一般可以通过navicat进行可视化建表</p>
<h4 id="修改表的结构"><a href="#修改表的结构" class="headerlink" title="修改表的结构"></a>修改表的结构</h4><ul>
<li>添加字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tablename <span class="keyword">add</span> (age <span class="built_in">int</span>(<span class="number">11</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>修改字段名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tablename <span class="keyword">rename</span> <span class="keyword">column</span> age <span class="keyword">to</span> player_age;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改字段的数据类型</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tablename <span class="keyword">modify</span>(player_age <span class="built_in">float</span>(<span class="number">3</span>,<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>删除字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tablename <span class="keyword">drop</span> <span class="keyword">column</span> player_age;</span><br></pre></td></tr></table></figure>

<h3 id="设计数据表的原则"><a href="#设计数据表的原则" class="headerlink" title="设计数据表的原则"></a>设计数据表的原则</h3><ul>
<li>主键要少，即尽量不要使用联合主键，不然通过索引的时候就会增加负担</li>
<li>表要少 关系型数据库，如果表越少，说明设计越简约，关系越明确</li>
<li>字段要少 字段个数越多，其冗余的可能性越大</li>
<li>使用外键和主键要越多越好 说明表的关系强</li>
</ul>
<h3 id="数据表中常见约束"><a href="#数据表中常见约束" class="headerlink" title="数据表中常见约束"></a>数据表中常见约束</h3><ul>
<li><p>主键约束 主键必须是唯一的标识某一条记录，不能重复，不能为空。每天记录只能有一个主键，当然可以有联合主键</p>
</li>
<li><p>外键约束 某个表的外键就是另外一个表的主键</p>
</li>
<li><p>唯一性约束 表示字段里的数据不能重复</p>
</li>
<li><p>NOT NULL 表示字段不能为空</p>
</li>
<li><p>DEFAULT 表示该字段如果为空，就用默认值填上</p>
</li>
<li><p>CHECK约束 表示对某个字段在特定范围内有效性</p>
</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>  学习，记录，成长</p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot thumbnailator对图片进行压缩</title>
    <url>/2019-09-04-SpringBoot-thumbnailator%E5%AF%B9%E5%9B%BE%E7%89%87%E8%BF%9B%E8%A1%8C%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新技术，更新自己的技术库</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;net.coobird&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;thumbnailator&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;0.4.8&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thumbnails.of(samllwebimagpath+<span class="string">"\\"</span>+filename).scale(scale).outputQuality(quality).toFile(<span class="keyword">this</span>.webimgLocation+<span class="string">"\\"</span>+smallfile);</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ul>
<li>其实还有许多特性，例如裁剪，加水印等等。(只要知道有这个库，然后后面需要的时候在深入学习即可)</li>
<li>of是需要压缩的图片路径</li>
<li>scale是大小，是必填项</li>
<li>outputQuality是质量，进行压缩</li>
<li>toFile是输出到某个路径下的文件</li>
</ul>
<h3 id="其他收获"><a href="#其他收获" class="headerlink" title="其他收获"></a>其他收获</h3><p>因为编码问题，url里面自动会进行汉字转为%加ASCII码。所以需要解码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URLDecoder.decode(url)</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>昨天是第一次想着自动化，虽然如果手动只要30分钟，但是这个过程学不到任何东西。如果编代码要2个小时，但是完成工作只要1s，这个过程学的东西更多，成就感更强。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第七周</title>
    <url>/2019-09-04-ARTS%E7%AC%AC%E4%B8%83%E5%91%A8/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天都学一点新技术，更新自己的技术库</p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>题目：leetcode 103</p>
<p>描述：给定一个二叉树，锯齿状进行层次遍历</p>
<p>思路：层次遍历，但是层次遍历没有办法锯齿状</p>
<p>查看答案： 层次遍历的想法，锯齿状通过isreverse和addFirst实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">boolean</span> isreverse=<span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> count=queue.size();</span><br><span class="line">            </span><br><span class="line">            LinkedList&lt;Integer&gt; onelevel=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">                TreeNode temp=queue.poll();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(!isreverse)&#123;</span><br><span class="line">                    onelevel.add(temp.val);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    onelevel.addFirst(temp.val);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(temp.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    queue.add(temp.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(temp.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    queue.add(temp.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            isreverse=!isreverse;</span><br><span class="line">            result.add(onelevel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h3><p>今天发现，自己的JAVA基础真的有点差，需要找本书好好看起来了，不然真的不行</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>加油！！</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第六周</title>
    <url>/2019-09-03-ARTS%E7%AC%AC%E5%85%AD%E5%91%A8/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新技术,更新自己的技术库</p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>题目：leetcode 96</p>
<p>题目描述：给一个整数n，求1….n有多少棵不同的二叉搜索树，这里不需要将其表示出来，只要数字即可</p>
<p>题目分析：卡特兰数</p>
<p>假设n个节点的二叉搜索树的个数是G(n),令f(i)表示以i为根的二叉搜索树的个数，则</p>
<p>G(n)=f(1)+….f(n)</p>
<p>当i为节点是，其左子树的节点个数为i-1,右子树节点个数为n-i</p>
<p>f(i)=G(i-1)*G(n-i)</p>
<p>综上得到卡特兰数的公式</p>
<p>G(n)=G(0)<em>G(n-1)+….+G(n-1)</em>G(0)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] g=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        g[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        g[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n+<span class="number">1</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i+<span class="number">1</span>;j++)</span><br><span class="line">                g[i]+=g[j-<span class="number">1</span>]*g[i-j];</span><br><span class="line">        <span class="keyword">return</span> g[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上面的解题思路容易得到。</p>
<p>在这里解释一下两层循环,第一层循环是指n即有多少个节点，第二层循环是指选取的根节点i</p>
<p>这次也算是学习了一下卡特兰数</p>
<h3 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h3><p>静下心来，不断去挑战自己的可能性，不要做重复的事。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>早安，明天早上要早点起来了哦</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql实战系列(一)</title>
    <url>/2019-09-03-Mysql%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97(%E4%B8%80)/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点技术，更新自己的技术库</p>
<h3 id="Mysql查询语句是如何执行的"><a href="#Mysql查询语句是如何执行的" class="headerlink" title="Mysql查询语句是如何执行的"></a>Mysql查询语句是如何执行的</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> T <span class="keyword">where</span> <span class="keyword">ID</span>=<span class="number">10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>首先是建立连接，是经典的TCP连接，判断是否连接正确</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -h$ip -P$port -u$user -p</span><br></pre></td></tr></table></figure>

<ul>
<li>如果连接正确，则获取用户的权限，后面操作时，都是对该次获取的权限进行检查，即如果这个是否改掉了用户权限，而其并没有下线，权限还是上一次</li>
<li>先到缓存区中寻找，是否有过该查询。注意：这个缓存不是很高效，因为随便更改后，除非是静态表，都会使得命中率下降。mysql8.0已经去掉该功能了</li>
<li>如果缓存区中没有找到，就来到分析器，进行语法分析，即对你的SQL语句进行分析，select表示查询语句 T转化为表，ID转为列，做完这些识别后就要“语法分析”，判断是否满足Mysql语法，不满足的话会报错</li>
<li>接着就进入到优化器，确认执行计划</li>
<li>有了执行计划后，来到执行器。开始执行前要判断是否对T有执行权限，如果有权限打开表进行查询。执行器会根据该表的引擎定义，调用该引擎提供的接口</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>趁最近学习热情高涨，过一遍MySQL和SQL</p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot和MongoDB的真正实践</title>
    <url>/2019-09-02-SpringBoot%E5%92%8CMongoDB%E7%9A%84%E7%9C%9F%E6%AD%A3%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要学一点新技术，更新自己的技术库</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">			&lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">			&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">	&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<h4 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.data.mongodb.uri=mongodb:<span class="comment">//xuxiaojin:xuxiaojin@localhost:27017/test</span></span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ul>
<li>前面一个xuxiaojin是username 后面一个是pwd</li>
</ul>
<p>补充点知识：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">test</span> <span class="comment">#创建数据库</span></span><br><span class="line">db.createUser(</span><br><span class="line">	&#123;</span><br><span class="line">    <span class="keyword">user</span>:<span class="string">"xuxiaojin"</span>,</span><br><span class="line">    pwd:<span class="string">"xuxiaojin"</span>,</span><br><span class="line">    <span class="keyword">roles</span>:[</span><br><span class="line">        &#123;<span class="keyword">role</span>:<span class="string">"readWrite"</span>,db:<span class="string">"test"</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>上面两行代码表示在创建一个user，对数据库test有读写的权限</p>
<h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Document</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> ObjectId id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id.toHexString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下:</p>
<ul>
<li>ObjectId是java对于mongodb的一个api</li>
</ul>
<h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Student</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findByUsername</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ul>
<li>MongoRepository类似先前的JPA</li>
</ul>
<h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/create"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">createStudent</span><span class="params">(@RequestBody Student student)</span></span>&#123;</span><br><span class="line">        student.setId(ObjectId.get());</span><br><span class="line">        <span class="keyword">return</span> studentRepository.save(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findbyname"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findbyUsername</span><span class="params">(@RequestParam String username)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findall"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他收获"><a href="#其他收获" class="headerlink" title="其他收获"></a>其他收获</h3><ul>
<li>在通过start.spring.io创建项目的时候<ul>
<li>Group：包名 com.xxx.xxx</li>
<li>Artifact：文件名 demo</li>
</ul>
</li>
<li>对于MongoDB的安装</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这一次只是简单的将mongodb与springboot结合了一下，但是这还不是我的目的。我的目的是一个项目使用两个数据源mongodb与Mysql</p>
<p>我们下一次见。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第五周</title>
    <url>/2019-09-02-ARTS%E7%AC%AC%E4%BA%94%E5%91%A8/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>新学期，我回来了</p>
<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>题目:leetcode 95</p>
<p>题意：给一个数字n，然后从1..n生成多少个不同的二叉搜索树，并且输出</p>
<p>思路：</p>
<p>​    自己的思路：遍历，作为根节点…然后就没有然后了</p>
<p>​    解题思路：遍历，i作为根节点，然后1…i-1生成其左子树,i+1….n生成其右子树。然后就可以对左右子树的两个列表进行循环，将其连接到根上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LinkedList&lt;TreeNode&gt; <span class="title">generate_tree</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; alltree=<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(start&gt;end)&#123;</span><br><span class="line">            alltree.add(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> alltree;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;=end;i++)&#123;</span><br><span class="line">            LinkedList&lt;TreeNode&gt; left=generate_tree(start,i-<span class="number">1</span>);</span><br><span class="line">            LinkedList&lt;TreeNode&gt; right=generate_tree(i+<span class="number">1</span>,end);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(TreeNode l:left)&#123;</span><br><span class="line">                <span class="keyword">for</span>(TreeNode r:right)&#123;</span><br><span class="line">                    TreeNode currenttree=<span class="keyword">new</span> TreeNode(i);</span><br><span class="line">                    currenttree.left=l;</span><br><span class="line">                    currenttree.right=r;</span><br><span class="line">                    </span><br><span class="line">                    alltree.add(currenttree);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> alltree;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> generate_tree(<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>心得：</p>
<p>​    挺有趣的一道题，不过确实思路不够，但是也让自己复习了一下linkedlist</p>
<h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p>今天上了数据库原理与技术，提到了数据建模的概念，想到前天看到陈皓老师翻译的一篇<a href="https://coolshell.cn/articles/7270.html" target="_blank" rel="noopener">NOSQL数据建模技术</a>。</p>
<p>所以精读一下做点笔记</p>
<ul>
<li>NoSQL更适合做Cache</li>
<li>CAP理论 一致性(Consistency) 可用性(Availability) 分区容忍性(Partiton tolerance) 在分布式系统中(今天看到一个就是两个应用都启动，在A应用打断点，B应用调试，会在A停下来)三个元素只能实现两个，NoSQL一般放弃一致性</li>
</ul>
<p>精读失败，有太多未知的点，占个坑后面补充。</p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>idea中格式化代码的快捷键 ctrl+alt+L</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot和MongoDB的爱恨情仇</title>
    <url>/2019-09-01-SpringBoot%E5%92%8CMongoDB%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习路径，先通过阅读官方文档，抄点代码。有个大致了解。然后结合SpringBoot</p>
<h3 id="Pure-MongoDB"><a href="#Pure-MongoDB" class="headerlink" title="Pure MongoDB"></a>Pure MongoDB</h3><h4 id="Insert-Documents"><a href="#Insert-Documents" class="headerlink" title="Insert Documents"></a>Insert Documents</h4><ul>
<li>db.collection.insertMany()可以插入很多文档数据，传递一个文档数据给该方法</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.inventory.insertMany([</span><br><span class="line">    &#123;item:"journal",qty:25,status:"A",size:&#123;h:14,w:21,uom:"cm"&#125;,tags:["blank","red"]&#125;,</span><br><span class="line">    &#123; item: "notebook", qty: 50, status: "A",</span><br><span class="line">       size: &#123; h: 8.5, w: 11, uom: "in" &#125;, tags: [ "red", "blank" ] &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ul>
<li>insertMany()返回一个包含最近插入文档id的文档</li>
<li>如果文档没有特别标明一个_id的字段，mongod会添加该字段并且分配一个特殊的ObjectId</li>
<li>insertOne()插入一个单条数据</li>
</ul>
<h4 id="Query-Documents"><a href="#Query-Documents" class="headerlink" title="Query Documents"></a>Query Documents</h4><h5 id="Select-all-documents"><a href="#Select-all-documents" class="headerlink" title="Select all documents"></a>Select all documents</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>如果需要匹配到特殊情况的</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;status:"D"&#125;)   #从inventroy集合中符合status="D"的所有文档</span><br></pre></td></tr></table></figure>

<h5 id="匹配复杂的文档-即一个文档又嵌入另外一个文档"><a href="#匹配复杂的文档-即一个文档又嵌入另外一个文档" class="headerlink" title="匹配复杂的文档(即一个文档又嵌入另外一个文档)"></a>匹配复杂的文档(即一个文档又嵌入另外一个文档)</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;size:&#123;h:14,w:21,uom:"cm"&#125;&#125;)  #会找到size与给文档相等的所有文档</span><br></pre></td></tr></table></figure>

<h5 id="匹配嵌入文档中的某个字段"><a href="#匹配嵌入文档中的某个字段" class="headerlink" title="匹配嵌入文档中的某个字段"></a>匹配嵌入文档中的某个字段</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;"size.uom":"in"&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="匹配数组中的某个元素"><a href="#匹配数组中的某个元素" class="headerlink" title="匹配数组中的某个元素"></a>匹配数组中的某个元素</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;tags:"red"&#125;)  #tag是一个数据，red是其中一个元素</span><br></pre></td></tr></table></figure>

<h5 id="匹配一整个数组"><a href="#匹配一整个数组" class="headerlink" title="匹配一整个数组"></a>匹配一整个数组</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;tags:["red","blank"]&#125;)</span><br></pre></td></tr></table></figure>

<p>####Update Documents</p>
<p>#####更新一条数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.inventory.updateOne(</span><br><span class="line">	&#123;item:"paper"&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">     $<span class="keyword">set</span>:&#123;<span class="string">"size.uom"</span>:<span class="string">"cm"</span>,<span class="keyword">status</span>:<span class="string">"p"</span>&#125;,</span><br><span class="line">     $currentDate:&#123;lastModified:<span class="literal">true</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>解释一下</p>
<ul>
<li>{item:”paper”} 表示匹配到第一条item是paper的数据</li>
<li>$set:表示更新的数据</li>
<li>$currentDate表示更新修改的时间，如果没有该字段，就会自动添加</li>
</ul>
<h5 id="替换一条数据"><a href="#替换一条数据" class="headerlink" title="替换一条数据"></a>替换一条数据</h5><p>替换整个文档，除了_id字段。</p>
<p>传一个新的文档给db.collection.replaceOne()作为第二个参数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.inventory.replaceOne(</span><br><span class="line">	&#123;item:"paper"&#125;,</span><br><span class="line">    &#123; item: "paper", instock: [ &#123; warehouse: "A", qty: 60 &#125;, &#123; warehouse: "B", qty: 40 &#125; ] &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>解释一下：该mongo shell会替换到第一个符合item=paper的文档</p>
<h4 id="Delete-Documents"><a href="#Delete-Documents" class="headerlink" title="Delete Documents"></a>Delete Documents</h4><h5 id="删除多条数据-其实是全部删掉"><a href="#删除多条数据-其实是全部删掉" class="headerlink" title="删除多条数据(其实是全部删掉)"></a>删除多条数据(其实是全部删掉)</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.deleteMany(&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="删掉全部匹配数据"><a href="#删掉全部匹配数据" class="headerlink" title="删掉全部匹配数据"></a>删掉全部匹配数据</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.deleteMany(&#123;status:"A"&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="删掉一条匹配数据"><a href="#删掉一条匹配数据" class="headerlink" title="删掉一条匹配数据"></a>删掉一条匹配数据</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.deleteOne(&#123;status:"D"&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="SpringBoot-with-mongodb"><a href="#SpringBoot-with-mongodb" class="headerlink" title="SpringBoot with mongodb"></a>SpringBoot with mongodb</h3><p>引入配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;Spring-boot-starter-data-mongodb&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>定义一个实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line">    <span class="keyword">public</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(</span><br><span class="line">                <span class="string">"Customer[id=%s, firstName='%s', lastName='%s']"</span>,</span><br><span class="line">                id, firstName, lastName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ul>
<li>mongoDB会默认将类名customer作为collection的名字，如果需要自定义名字需要添加注解@Document</li>
</ul>
<p>定义一个操作的类JPA</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Customer</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">findByFirstName</span><span class="params">(String firstName)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findByLastName</span><span class="params">(String lastName)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP知识体系实践</title>
    <url>/2019-09-01-HTTP%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新东西，更新自己的技术库。</p>
<h3 id="cdn加速"><a href="#cdn加速" class="headerlink" title="cdn加速"></a>cdn加速</h3><p>这是第一次使用cdn，总的来说碰到很多问题</p>
<ul>
<li><strong>没有命中</strong>:url没有放好，源站没有设置好。现在配置http使用8080端口(后面会改成80端口)，https即服务器的端口为443，源站只有一个ip</li>
<li><strong>效果不是很明显</strong>：但是感觉流畅了一些</li>
<li><strong>微信小程序获取openid失败</strong>：错误码40163,原因是使用code访问了两次，解决方法是在cdn配置中，缓存配置将该url设置不缓存，直接返回源站</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>学习新东西的能力正在上升，需要不断思考。</p>
]]></content>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 使用https</title>
    <url>/2019-08-31-SpringBoot-%E4%BD%BF%E7%94%A8https/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新技术，更新自己的技术库。</p>
<h3 id="springboot使用https"><a href="#springboot使用https" class="headerlink" title="springboot使用https"></a>springboot使用https</h3><ul>
<li>因为springboot是内置tomcat,所以使用下载下来的ssl里面的tomcat证书</li>
<li>将xxx.jks放到resource的文件夹下面</li>
<li>配置application.properties</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.port=<span class="number">443</span>  <span class="comment">//记住这个port跟先前的有所区别</span></span><br><span class="line">server.ssl.key-store=classpath:xxx.jks <span class="comment">//这xxx放自己放到resource下面的文件名字</span></span><br><span class="line">server.ssl.key-store-password=密码</span><br><span class="line">server.ssl.key-store-type=JKS</span><br></pre></td></tr></table></figure>

<p>到这里是配置完成了，然后访问的话需要通过https://域名:8443/path.</p>
<h3 id="http自动转为https"><a href="#http自动转为https" class="headerlink" title="http自动转为https"></a>http自动转为https</h3><p>先上代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connector <span class="title">connector</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connector connector=<span class="keyword">new</span> Connector(<span class="string">"org.apache.coyote.http11.Http11NioProtocal"</span>);  <span class="comment">//http1.1的协议</span></span><br><span class="line"> connector.setScheme(<span class="string">"http"</span>);</span><br><span class="line"> connector.setPort(<span class="number">8080</span>);</span><br><span class="line"> connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line"> connector.setRedrectPort(<span class="number">443</span>);</span><br><span class="line">    <span class="keyword">return</span> connector;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TomcatServletWebServerFactory <span class="title">tomcatServletWebServerFactory</span><span class="params">(Connector connector)</span></span>&#123;</span><br><span class="line">		TomcatServletWebServerFactory tomcat=<span class="keyword">new</span> TomcatServletWebServerFactory()&#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">				SecurityConstraint securityConstraint=<span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">				securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">				SecurityCollection collection=<span class="keyword">new</span> SecurityCollection();</span><br><span class="line">				collection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">				securityConstraint.addCollection(collection);</span><br><span class="line">				context.addConstraint(securityConstraint);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		tomcat.addAdditionalTomcatConnectors(connector);</span><br><span class="line">		<span class="keyword">return</span> tomcat;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>下面这段代码是进行url转化</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>今天是8月的最后一天，新的一学期开始了，接下来就是发挥的时候了。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP知识体系(二)</title>
    <url>/2019-08-27-HTTP%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB(%E4%BA%8C)/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天都学一点新技术，完善自己的技能栈</p>
<h3 id="一个HTTP请求"><a href="#一个HTTP请求" class="headerlink" title="一个HTTP请求"></a>一个HTTP请求</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>首先是TCP的三次握手 建立联系</li>
<li>接着就是发送HTTP请求</li>
<li>服务端接收到HTTP请求，发送一个接收成功的信息</li>
<li>服务端解析HTTP请求，发送响应</li>
<li>客户端接收到响应后，发送一个接收成功的信息</li>
<li>浏览器解析响应</li>
</ul>
<p>以上就是最简单的“两点”模型</p>
<h3 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h3><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>格式：请求方法 请求目标 版本号</p>
<h5 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h5><p>常见的请求方法是GET、POST</p>
<p>其实请求方法只是认为规定的一个对服务端资源进行操作的动作，但是具体怎么理解还是需要看服务端怎么理解。</p>
<p>GET/HEAD 这两者的区别就是 GET获取到的是怎么资源 HEAD获取到的是资源的“元信息”<br>POST/PUT 这两者的区别在于PUT用于更新(当然POST也可以做到)</p>
<p>其实以上的说法不是很准确，不能说是做到，因为这些只是一个名称，具体怎么理解还是需要服务端来操作。但是人为都遵守这个规范，就称为了一个“协议”。跟红绿灯一样的效果。</p>
<h5 id="安全与幂等"><a href="#安全与幂等" class="headerlink" title="安全与幂等"></a>安全与幂等</h5><p>安全指的是不会对资源进行修改等操作，符合安全的请求方法有GET和HEAD</p>
<p>幂等指的是进行多次操作，资源的结果还是一样的。符合幂等的请求方法有GET、HEAD、PUT</p>
<h5 id="请求目标"><a href="#请求目标" class="headerlink" title="请求目标"></a>请求目标</h5><p>资源的URI,其实就是我们常说的“网址”</p>
<p>格式：协议名：//主机名：端口号/资源路径?查询串</p>
<p>http默认的端口号为80，https默认的端口号为443</p>
<ul>
<li>协议名：http,ftp当浏览器拿到网址的时候就会解析，自动调用http的底层</li>
<li>://这个设置有点鸡肋，不过需要适应 ，举个例子 file:///D.这个例子省略了主机名中间的地方。/D直接是资源路径</li>
<li>资源路径:通过/进行分割</li>
<li>?查询串 kv型 key=value之间通过&amp;进行连接</li>
</ul>
<p>但是在报文中的请求行，看不到主机名，因为在请求头中有host:这个key</p>
<p>uri的编码，因为uri支持的是英文，如果我们在浏览器输入以串中文的uri，他会直接通过ASCII码进行直接编码，转为16进制，然后在前面加上%，但是我们通常没有看到，是因为浏览器进行了优化，不过我们把它复制出来，就会看到了。</p>
<h4 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h4><p>格式：版本号 状态码 原因</p>
<h5 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h5><p>状态码是响应头进行返回的一个信息，我们可以通过状态码进行分析</p>
<ul>
<li>1xx 是提示信息，是协议处理的中间信息</li>
<li>2xx 表示的是成功的信息  200 OK 表示的服务器如客户端期望的那样 204 No Content也是一个成功的状态码，但是没有body数据</li>
<li>3xx 表示客户端请求的资源发生了变化 301 表示永久的重定向 302表示临时的重定向</li>
<li>4xx 表示客户端发送的报文有错 400是一个笼统的错误提示 403客户端请求的资源不允许访问 404 请求的资源没有找到</li>
<li>5xx 服务端出问题</li>
</ul>
<h4 id="头部字段"><a href="#头部字段" class="headerlink" title="头部字段"></a>头部字段</h4><p>当请求行跟头部字段在加上一行空行的时候就组成了请求头</p>
<p>同理状态行就组成了 状态行</p>
<p>#####常见的头部字段</p>
<ul>
<li>User-Agent是请求字段，只出现在请求头里</li>
<li>Date字段是通用字段，表示HTTP报文创建的时间，通常出现在响应头里</li>
<li>Server是响应字段，只出现在响应头里，表示提供WEB服务器的软件名称和版本号</li>
</ul>
<h3 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h3><p>好吧，没有在实际应用中有感性的认知</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>昨天又体验了一把学习的快乐，那种让自己从无知到认知这种过程的感觉真的是太爽了。加油</p>
]]></content>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP知识体系(一)</title>
    <url>/2019-08-26-HTTP%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB(%E4%B8%80)/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天都学一点，更新自己的技术栈</p>
<h3 id="HTTP是什么？又不是什么"><a href="#HTTP是什么？又不是什么" class="headerlink" title="HTTP是什么？又不是什么"></a>HTTP是什么？又不是什么</h3><p>首先HTTP是超文本传输协议</p>
<ul>
<li>协议：指的就是大家共同遵守的规定，规则。例如红绿灯，只是灯的颜色在改变，只要大家共同遵守，他就是交通规则</li>
<li>传输：两个节点之间的信息的传输，是一个双向传输</li>
<li>超文本：超文本是指图片、视频等。最重要的是含有一个超链接，能够从一个文本跳到另外一个文本</li>
</ul>
<p>HTTP是在网络世界中用来专门在两个点直接传输图片、视频、文本等超文本数据的协议与规定</p>
<ul>
<li>不是互联网，不是编程语言，不是一个孤立的协议</li>
</ul>
<h3 id="应用相关"><a href="#应用相关" class="headerlink" title="应用相关"></a>应用相关</h3><p>因为HTTP协议太火，互联网上的绝大多数资源都通过HTTP协议发送</p>
<ul>
<li>客户端(WEB浏览器):发起HTTP请求,user agent.相当于http协议中的请求方</li>
<li>服务端(服务器)有Apache和Nginx，这两个服务器是专门做HTTP的。相对于java的Tomcat的web容器速度更快(不支持千万人的并发)</li>
<li>CDN：反向代理，用来存储服务器的资源，缓存。当WEB浏览器发起请求的时候，会从最近的CDN节点中找时候有请求的资源，没有再到源头的服务器去请求</li>
<li>爬虫：模拟发送HTTP请求</li>
</ul>
<h3 id="理论相关"><a href="#理论相关" class="headerlink" title="理论相关"></a>理论相关</h3><h4 id="TCP-IP协议栈"><a href="#TCP-IP协议栈" class="headerlink" title="TCP/IP协议栈"></a>TCP/IP协议栈</h4><p>四层网络，之间传送的都称为数据包</p>
<ul>
<li>第一层<strong>链接层</strong>：也称为MAC层，相当于底层，标识网卡</li>
<li>第二层<strong>网际层</strong>：IP协议就定义在这一层，在这一层就可以使用IP地址来取代MAC地址</li>
<li>第三层<strong>传输层</strong>：TCP协议，用来传输数据，连续的字节流</li>
<li>第四层<strong>应用层</strong>：HTTP，FTP等应用</li>
</ul>
<p>七层网络OSI模型，直接应用上面的四层网络，在底层第一层加一层电缆等硬件层，第五、六、七层都可以称为是应用层</p>
<p>协议栈的工作方式：假设要发送一个数据，通过HTTP，然后来到传输层，会贴上TCP头，然后在网际层、链接层加上IP头、MAC头，通过传输，到达目的地，在MAC层、IP层拆掉MAC头、IP头、在TCP层，去掉TCP头，然后去掉HTTP头，就得到了数据。</p>
<p>####DNS系统</p>
<p>域名系统，因为IP地址既然已经对MAC进行一层抽象了，但是还是不容易记忆，所以，进一步我们有了域名系统。从一个域名到一个IP地址就是<strong>域名解析</strong>。</p>
<h5 id="域名的分解"><a href="#域名的分解" class="headerlink" title="域名的分解"></a>域名的分解</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">www.xxxx.xxx.com</span><br></pre></td></tr></table></figure>

<p>从右往左的层级逐渐减少，最右边.com是顶级域名，xxx是一级域名，依次类推</p>
<h5 id="域名解析的过程"><a href="#域名解析的过程" class="headerlink" title="域名解析的过程"></a>域名解析的过程</h5><p>以上面这个域名为例，我们进行WEB浏览器发起该HTTP的请求动作</p>
<ol>
<li>查询浏览器缓存，无</li>
<li>查询操作系统的主机映射(host)</li>
<li>非官方的域名系统</li>
<li>官方的域名跟系统解析出.COM分到顶级域名系统服务器</li>
<li>然后解析</li>
</ol>
<p>全球总共有13组根域名系统</p>
<h4 id="URI-URL"><a href="#URI-URL" class="headerlink" title="URI/URL"></a>URI/URL</h4><p>统一资源定位符，虽然我们可以通过IP地址找到服务器的地址或者我们可以通过DNS来将域名解析成IP地址，但是我们还需要查找资源，所以就有了URI</p>
<ul>
<li>URI：统一资源标识符</li>
<li>URL：统一资源定位符</li>
</ul>
<p>其实URL是URI 的一个子集，但是因为两者差别不是很大，所以基本上不做区分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//www.xxxx.xxx.com/xxx.html</span></span><br></pre></td></tr></table></figure>

<ul>
<li>http表示协议名称</li>
<li>主机名</li>
<li>资源，通过/来划分，即资源在主机上的位置</li>
</ul>
<h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><p>前面我们学到的HTTP是运行在TCP/IP协议上的，但是其传送的信息并不安全，所以我们需要通过SSL/TLS来进行加密</p>
<h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><p>也是一个比较常见的代理，CDN就是正向代理</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>HTTP一直是自己比较怕的地方，其实是自己碰到不会的就比较怕，所以需要不断学习，不断将自己的知识体系建立起来。</p>
]]></content>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中的ajax</title>
    <url>/2019-08-19-JavaScript%E4%B8%AD%E7%9A%84ajax/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每一天都要比前一天技术多学一些，更新自己的技术库</p>
<h3 id="AJAX介绍"><a href="#AJAX介绍" class="headerlink" title="AJAX介绍"></a>AJAX介绍</h3><p>通过AJAX你可以完成</p>
<ul>
<li>在页面加载完成后，从服务器读取数据</li>
<li>不需要重新加载页面，就能更新局部页面</li>
<li>在后台给服务器发送数据</li>
</ul>
<h3 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h3><p>所有现代浏览器都支持XMLHttpRequest对象，能够用来跟服务器交换数据，也就是说需要要重新加载页面，就能够更新局部页面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhttp=XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">//older browsers</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">    xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><p>使用open()和send()方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhttp.open(<span class="string">"GET"</span>,url,<span class="literal">true</span>);</span><br><span class="line">xhttp.send();</span><br></pre></td></tr></table></figure>

<p>解释一下上面的代码</p>
<ol>
<li>open(method,url,async) method:表示请求的类型GET或者POST url请求的地址 async true表示异步 false表示同步</li>
<li>send()发送请求给服务器，多用于GET请求</li>
<li>send(String)发送给服务器，多用于POST请求</li>
</ol>
<p>这里简单再讲一下异步或者同步</p>
<ul>
<li>同步请求，表示当该请求得到response的时候，才进行其他请求</li>
<li>异步请求，表示不一定等待该请求得到结果</li>
</ul>
<p>两者的不同点已经很清楚了，不过呢，同步请求只在一些特殊场合使用，例如你需要使用得到请求结果的值在发起下一个请求，不然对于服务器比较慢或者卡顿严重的，会影响体验。</p>
<h3 id="处理请求-onreadystatechange"><a href="#处理请求-onreadystatechange" class="headerlink" title="处理请求 onreadystatechange"></a>处理请求 onreadystatechange</h3><p>当请求得到应答的时候，执行该方法</p>
<ul>
<li>onreadystatechange 当readystate参数发生改变的时候执行</li>
<li>readyState 0request not initialized 1 server connection established 2 request receved 3 processing request 4 request finished and response is ready</li>
<li>status 200 OK …</li>
<li>statusText “OK”</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.readyState==<span class="number">4</span>&amp;&amp;<span class="keyword">this</span>.status==<span class="number">200</span>)&#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">loadDoc(<span class="string">"url-1"</span>,myFunction1);</span><br><span class="line">loadDoc(<span class="string">"url-2"</span>,myFunction2);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadDoc</span>(<span class="params">url,cFunction</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhttp;</span><br><span class="line">    xhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhttp.onreadystatuschange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.readyState==<span class="number">4</span>&amp;&amp;<span class="keyword">this</span>.status==<span class="number">200</span>)&#123;</span><br><span class="line">            cFunction(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhttp.onpen(<span class="string">"GET"</span>,url,<span class="literal">true</span>);</span><br><span class="line">    xhttp.send();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction1</span>(<span class="params">xhttp</span>)</span>&#123;</span><br><span class="line">    /...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h3><ul>
<li>responseText  让response data 变成string </li>
<li>responseXML  让response data 变成xml data</li>
</ul>
<p>以上我们学习的javascript的ajax。接下来我们学习jQuery AJAX</p>
<h3 id="JQury介绍"><a href="#JQury介绍" class="headerlink" title="JQury介绍"></a>JQury介绍</h3><p>让你在网页使用javascript更简单，是一个”write less,do more”的Javascript库。</p>
<p>通过使用jQuery AJAX方法，你可以从服务器请求 text,HTML,XML或者JSON通过HTTP Get和HTTP Post</p>
<h3 id="GET-vs-POST"><a href="#GET-vs-POST" class="headerlink" title="GET vs POST"></a>GET vs POST</h3><p>$.get(url,callback)方法通过使用HTTP Get请求从服务器请求到数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="keyword">get</span>(url,function(data,status)&#123;</span><br><span class="line">    <span class="comment">//处理</span></span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>$.post(url,data,callback)方法通过使用HTTP Post请求向服务器发送请求</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.post(url,&#123;</span><br><span class="line">    <span class="comment">//data</span></span><br><span class="line">    name:<span class="string">'name'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">data,status</span>)</span>&#123;</span><br><span class="line">  	<span class="comment">//do something  </span></span><br><span class="line">&#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>###Ajax()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:url,</span><br><span class="line">    type:<span class="string">"GET"</span>,</span><br><span class="line">    data:</span><br><span class="line">    ....</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reqp.data);</span><br><span class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"错误"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>至此，都可以可以通过ajax来请求服务器的数据，这样的话就可以把一个静态页面变活。</p>
<h3 id="其他收获"><a href="#其他收获" class="headerlink" title="其他收获"></a>其他收获</h3><p>定时刷新 settimeout()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runEvery4Sec</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(runEvery4Sec,<span class="number">1000</span>*<span class="number">4</span>);</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>语法 setTimeout(function,milliseconds,param1….)</p>
<p>解释一下 </p>
<ul>
<li>function required并且是可以被执行的</li>
<li>milliseconds  1000=1second</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>如果你觉得你做的事10天后仍然对你有帮助，就继续做</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中最好用的库jQuery</title>
    <url>/2019-08-19-JavaScript%E4%B8%AD%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84%E5%BA%93jQuery/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新的技术，更新自己的技术库</p>
<h3 id="jQuery-CDN"><a href="#jQuery-CDN" class="headerlink" title="jQuery CDN"></a>jQuery CDN</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/ajax.aspnetcdn.com/</span>ajax/jQuery/jquery<span class="number">-3.4</span><span class="number">.1</span>.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>使用jQuery你可以选择(查询)HTML元素，并且做一些action</p>
<p>基础语法  $(selector).action()</p>
<p>解释一下</p>
<ul>
<li>$ 表示定义或者使用jQuery</li>
<li>(selector)表示查询或找到HTML元素</li>
<li>JQuery action() 用来操作元素</li>
</ul>
<p>比如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).hide() <span class="comment">//隐藏当前的元素</span></span><br><span class="line">$(<span class="string">"p"</span>).hide() <span class="comment">//隐藏所有&lt;p&gt;元素</span></span><br><span class="line">$(<span class="string">".test"</span>).hide() <span class="comment">//隐藏所有以 class="test"的元素</span></span><br><span class="line">$(<span class="string">"#test"</span>).hide() <span class="comment">//隐藏id=“test" 的元素</span></span><br></pre></td></tr></table></figure>

<p>扩展一下</p>
<ol>
<li>id选择器必须保证HTML tag使用id 属性来找到独一无二的属性</li>
</ol>
<h3 id="Event-Method"><a href="#Event-Method" class="headerlink" title="Event Method"></a>Event Method</h3><table>
<thead>
<tr>
<th>Mouse Events</th>
<th>Keyboard Events</th>
<th>Form Events</th>
<th>Document/Window Events</th>
</tr>
</thead>
<tbody><tr>
<td>click</td>
<td>keypress</td>
<td>submit</td>
<td>load</td>
</tr>
<tr>
<td>dblclick</td>
<td>keydown</td>
<td>change</td>
<td>resize</td>
</tr>
<tr>
<td>mouseenter</td>
<td>keyup</td>
<td>focus</td>
<td>scroll</td>
</tr>
<tr>
<td>mouseleave</td>
<td></td>
<td>blur</td>
<td>unload</td>
</tr>
</tbody></table>
<h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当点击页面的P标签，do something</p>
<h3 id="Used-Event-methods"><a href="#Used-Event-methods" class="headerlink" title="Used Event methods"></a>Used Event methods</h3><ol>
<li>$(document).ready() 方法表示执行这个函数，当document还没有完全被加载的时候 解释一下 html表示页面时由dom节点组成的文档document，就是当页面还没有执行完成的时候就加载这个函数</li>
<li>上面的函数表格 就是简单的英文翻译的使用</li>
</ol>
<h3 id="On-方法"><a href="#On-方法" class="headerlink" title="On() 方法"></a>On() 方法</h3><p>先放两个例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).hide();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">"p"</span>).on(&#123;</span><br><span class="line">    mouseenter:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    mouseleave:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    click:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Hide-and-Show"><a href="#Hide-and-Show" class="headerlink" title="Hide and Show"></a>Hide and Show</h3><p>基本语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(selector).hide(speed,callback);</span><br><span class="line"></span><br><span class="line">$(selector).show(speed,callback)</span><br></pre></td></tr></table></figure>

<h3 id="花里胡哨-Fading"><a href="#花里胡哨-Fading" class="headerlink" title="花里胡哨 Fading"></a>花里胡哨 Fading</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#div1"</span>).fadeIn();</span><br><span class="line">$(<span class="string">"#div2"</span>).fadeIn(<span class="string">"slow"</span>);</span><br><span class="line">$(<span class="string">"div3"</span>).fadeIn(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<p>还有一些slideDown等</p>
<h3 id="Callback-Functions"><a href="#Callback-Functions" class="headerlink" title="Callback Functions"></a>Callback Functions</h3><p>当前的effect 100%结束的时候，回调函数会被执行。因为JavaScript语法执行的顺序是一行一行的执行，但是with effects,下一行的代码，不一定需要等到effect执行结束才开始执行，所以需要callback function</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).hide(<span class="string">"slow"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"The p is now hidden"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">"p"</span>).hide(<span class="string">"slow"</span>);</span><br><span class="line">alert(<span class="string">"the p is now hiddn"</span>)</span><br></pre></td></tr></table></figure>

<p>以上两种代码的执行效果是不一致的。</p>
<h3 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h3><ul>
<li>text() 设置或者返回选中元素的text内容</li>
<li>html()设置或者返回选中元素的html内容 包括html 标签</li>
<li>val() 设置或者返回form里的值</li>
<li>attr()得到属性里的值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#test"</span>).text();</span><br><span class="line">$(<span class="string">"#test"</span>).html();</span><br><span class="line">$(<span class="string">"#test"</span>).val();</span><br><span class="line">$(<span class="string">"#test"</span>).attr(<span class="string">"href"</span>); <span class="comment">//得到href的值</span></span><br></pre></td></tr></table></figure>

<p>刚刚上面我们只是得到值，现在我们进行操作–设置值。同样的我们还是使用text() html() val()三种函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#test1"</span>).text(<span class="string">"Hello World"</span>);</span><br><span class="line">$(<span class="string">"#test2"</span>).html(<span class="string">"&lt;b&gt;Hello World&lt;/b&gt;"</span>)</span><br><span class="line">$(<span class="string">"#test3"</span>).val(<span class="string">"Hello World"</span>);</span><br><span class="line">$(<span class="string">"#test4"</span>).attr(<span class="string">"href"</span>,<span class="string">"https://jiayouxujin.github.io"</span>);</span><br><span class="line">$(<span class="string">"#test4"</span>).attr(&#123;</span><br><span class="line">    <span class="string">"href"</span>:<span class="string">"url"</span>,</span><br><span class="line">    <span class="string">"title"</span>:<span class="string">"title"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>以上四个函数都有callback function 其中有两个参数 一个是表示当前选中的元素的index，还有一个表示原来的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#test4"</span>).attr(<span class="string">"href"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">i,origValue</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><ul>
<li>append() 在当前选中的元素后面添加新的元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).append(<span class="string">"&lt;b&gt;...&lt;/b&gt;"</span>)</span><br><span class="line">$(<span class="string">"ol"</span>).append(<span class="string">"&lt;li&gt;...&lt;/li&gt;"</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>prepend() 在当前选中的元素前面添加新的元素</li>
</ul>
<p>添加元素的三种方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> txt1=<span class="string">"&lt;p&gt;Text.&lt;/p&gt;"</span>  <span class="comment">//create element with HTML</span></span><br><span class="line"><span class="keyword">var</span> txt2=$(<span class="string">"&lt;p&gt;&lt;/p&gt;"</span>).text(<span class="string">"Text."</span>)  <span class="comment">//create element with Jquery</span></span><br><span class="line"><span class="keyword">var</span> txt3=<span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">   txt3.innerHTML=<span class="string">"Text ."</span></span><br></pre></td></tr></table></figure>

<h3 id="删掉元素"><a href="#删掉元素" class="headerlink" title="删掉元素"></a>删掉元素</h3><ul>
<li>remove() 去掉选中的元素包括其子元素</li>
<li>empty() 去掉选中元素子元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#div1"</span>).remove()</span><br><span class="line">$(<span class="string">"#div1"</span>).empty()</span><br><span class="line"></span><br><span class="line">$(<span class="string">"p"</span>).remove(<span class="string">".text"</span>)</span><br></pre></td></tr></table></figure>

<p>###Get and Set Css</p>
<ul>
<li>addClass() 给选中元素添加一个class</li>
<li>removeClass()给选中元素移除一个calss</li>
<li>toggleClass()</li>
<li>css() 设置style属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.important&#123;</span><br><span class="line">    font-wight:bold;</span><br><span class="line">    font-size:xx-large;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.blue&#123;</span><br><span class="line">    color:blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="string">"h1,h2,p"</span>).addClass(<span class="string">"blue"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//return a css property</span></span><br><span class="line">$(<span class="string">"p"</span>).css(<span class="string">"background-color"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//set a css property</span></span><br><span class="line">$(<span class="string">"p"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>)</span><br><span class="line">$(<span class="string">"p"</span>).css(&#123;</span><br><span class="line">    <span class="string">"background-color"</span>:<span class="string">"yellow"</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="DOM-树"><a href="#DOM-树" class="headerlink" title="DOM 树"></a>DOM 树</h3><p>既然是一颗树，就可以想到有parent等等其他概念</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>既然项目还没有开始，那就每天多学习一点东西</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>java中ArrayList、LinkedList、Vector的区别</title>
    <url>/2019-08-15-java%E4%B8%ADArrayList%E3%80%81LinkedList%E3%80%81Vector%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天都学一点。</p>
<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>List，是一些有序的元素集合，而Set就没有顺序。</p>
<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList实现可以调整大小的数组，但元素不断被加入时，其大小也会自动调整。ArrayList里的元素可以直接通过get和set的方法来得到，所以比Array(数组)好用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; a=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">a.add(<span class="number">2</span>)</span><br><span class="line"> ...</span><br><span class="line">    </span><br><span class="line">Iterator&lt;Integer&gt; iter=a.iterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext())&#123;</span><br><span class="line">    System.out.println(iter.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>LinkedList实现一个双队列的接口，相比于ArrayList在add和remove表现的更好，但是在get和set表现的比较差</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList&lt;Integer&gt; l=<span class="keyword">new</span> LinedList&lt;Integer&gt;();</span><br><span class="line">l.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;Integer&gt; it=l.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    it.next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>vector与ArrayList相似，但是其是同步的。</p>
<p>当你线程安全的时候，ArrayList是更好的选择，vector和ArrayList需要更多的空间来存储元素。vector每次都会两倍两倍的扩展其大小，但是arraylist不会。</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><table>
<thead>
<tr>
<th>method</th>
<th>ArrayList</th>
<th>LinkedList</th>
</tr>
</thead>
<tbody><tr>
<td>get()</td>
<td>O(1)</td>
<td>O(n)</td>
</tr>
<tr>
<td>add()</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
<tr>
<td>remove()</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
</tbody></table>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>今天换回原来地方，老味道，新刺激。加油。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java中Integer与int的区别</title>
    <url>/2019-08-14-java%E4%B8%ADInteger%E4%B8%8Eint%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新技术</p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在java里面，int是原始数据类型(primitive data) Integer是包装类。</p>
<ul>
<li>因为Int是原始数据类型，失去很多灵活性，我们只能存储一个整数值</li>
<li>因为Integer是一个包装类，就拥有很多灵活性，我们可以存储，传递和计算</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//valid</span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">20</span>;</span><br><span class="line"><span class="comment">//not valid</span></span><br><span class="line">Integer n=<span class="number">45</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//valid</span></span><br><span class="line">Integer.parseInt(<span class="string">"10"</span>);</span><br><span class="line"><span class="comment">//not valid</span></span><br><span class="line"><span class="keyword">int</span>.parseInt(<span class="string">"10"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="重要的不同点"><a href="#重要的不同点" class="headerlink" title="重要的不同点"></a>重要的不同点</h3><ol>
<li>将String转为Int 我们不能直接将一个只含有int的String转为int通过类型转换，但是我们可以通过分配String对象给Integer，通过使用parseInt(String)将String转为int</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    Integer a=<span class="keyword">new</span> Integer(<span class="string">"123"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> b=Integer.parseInt(<span class="string">"123"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>进制转化，我们可以直接使用toBinaryString(),toOctalString()或者toHexString()对整数进行进制转化</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    String bin=Integer.toBinaryString(<span class="number">123</span>);</span><br><span class="line">    String oct=Integer.toOctalString(<span class="number">123</span>);</span><br><span class="line">    String hex=Integer.toHexString(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="number">1111011</span></span><br><span class="line">    <span class="number">173</span></span><br><span class="line">    <span class="number">7</span>b</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在数据上进行操作，左移右移等</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> rL=Integer.rotateLeft(<span class="number">12</span>,<span class="number">2</span>);           <span class="comment">//48</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> rR=Integer.rotateRight(<span class="number">12</span>,<span class="number">2</span>);        <span class="comment">//3</span></span><br><span class="line">    <span class="comment">//32bits</span></span><br><span class="line">    <span class="keyword">int</span> rev=Integer.reverse(<span class="number">12</span>);        <span class="comment">//805306368</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>灵活性，java提供自动装箱机制，可以使得Integer更具有灵活性。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    Integer a=<span class="keyword">new</span> Integer(<span class="string">"12"</span>);</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c=a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>昨天发现项目bug还是很多，还是得一个个解决咯。不慌</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot MVC自定义错误页面</title>
    <url>/2019-08-13-SpringBoot-MVC%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天都学一点新技术</p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>今天发现项目需要一个自定义的Error的页面，说来就来。</p>
<p>###配置</p>
<p>在application.properties</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.error.whitelabel.enabled=<span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<p>与上述配置相同的结果</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration</span><br><span class="line"></span><br><span class="line">#for Spring Boot 2.0</span><br><span class="line">#spring.autoconfigure.exvlude=org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguratiion</span><br></pre></td></tr></table></figure>

<p>或者在主函数添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span>(exclude=&#123;ErrorMvcAutoConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br></pre></td></tr></table></figure>

<p>上面这些配置都会使得原生的错误页面不能使用，所以我们需要自定义</p>
<h3 id="自定义的ErrorController"><a href="#自定义的ErrorController" class="headerlink" title="自定义的ErrorController"></a>自定义的ErrorController</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorController</span> <span class="keyword">implements</span> <span class="title">ErrorController</span></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/error"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleError</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        Object status=request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);</span><br><span class="line">        <span class="keyword">if</span>(status!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            Integer statusCode=Integer.valueOf(status.toString());</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(statusCode==HttpStatus.NOT_FOUND.value())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"error-404"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(statusCode==HttpStatus.INTERNAL_SERVER_ERROR.value())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"error-500"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorPath</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/error"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ol>
<li>自定义的controller必须实现接口 ErrorController里面的getErrorPath()方法，但错误发生时，会返回一个路径</li>
<li>通过status_code判断是什么错误，返回不同的错误的页面</li>
<li>@Controller因为要返回的是页面</li>
</ol>
<h3 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h3><p>使用SpringBoot的视图框架 Thymeleaf</p>
<p>在template下新建 error-404 error-500 error的页面</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>其实这篇文章是20190814写的，因为昨天写网页，写的心态崩了。加油。每天都要进步。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot的视图框架thymeleaf</title>
    <url>/2019-08-12-SpringBoot%E7%9A%84%E8%A7%86%E5%9B%BE%E6%A1%86%E6%9E%B6thymeleaf/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学习一点。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Web</span></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/case/&#123;id&#125;"</span>,method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String id,ModelMap map)</span>&#123;</span><br><span class="line">        <span class="comment">//路径中的Id的值</span></span><br><span class="line">        <span class="comment">//将结果存储到map里</span></span><br><span class="line">        map.addAttribute(<span class="string">"collect"</span>,..)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"casedetail"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><table>
<thead>
<tr>
<th>关键字</th>
<th>功能介绍</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>th:id</td>
<td>替换Id</td>
<td><input th:id="'xxx'+${collect.id}"/></td>
</tr>
<tr>
<td>th:text</td>
<td>文本替换</td>
<td><p th:text="${collect.description}">description</p></td>
</tr>
<tr>
<td>th:utext</td>
<td>支持html的文本替换</td>
<td><p th:utext="${htmlcontent}">content</p></td>
</tr>
<tr>
<td>th:object</td>
<td>替换对象</td>
<td><div th:object="${session.user}"></td>
</tr>
<tr>
<td>th:value</td>
<td>属性赋值</td>
<td><input th:value="${user.name}"/></td>
</tr>
<tr>
<td>th:with</td>
<td>变量赋值运算</td>
<td><div th:with="isEvens=${prodStat.count}%2==0"></div></td>
</tr>
<tr>
<td>th:style</td>
<td>设置样式</td>
<td><div th:style="'display:'+@{(${istrue}?'none':'inline-block')}"></div></td>
</tr>
<tr>
<td>th:onclick</td>
<td>点击事件</td>
<td><td th:onclick="'getCollect()'"></td></td>
</tr>
<tr>
<td>th:each</td>
<td>循环？属性赋值</td>
<td><tr th:each="user:${users}"></td>
</tr>
<tr>
<td>th:if</td>
<td>判断条件</td>
<td><a th:if="${userId==collect.userId}"></td>
</tr>
<tr>
<td>th:unless</td>
<td>和th:if判断相反</td>
<td></td>
</tr>
<tr>
<td>th:href</td>
<td>链接地址</td>
<td><a th:href=@{/login}></td>
</tr>
<tr>
<td>th:switch</td>
<td>多路选择配合th:case使用</td>
<td></td>
</tr>
<tr>
<td>th:src</td>
<td>图片类地址引入</td>
<td><img th:src="${collect.url}"></td>
</tr>
</tbody></table>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本来以为用不到这个视图框架，但是今天项目还是用到了，还好学习的时间没有话很长。说明最近确实进步了，加油</p>
<p>并且我已经对自己有了新的要求。加油</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot通过注解使用MyBatis</title>
    <url>/2019-08-11-SpringBoot%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8MyBatis/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新的东西。</p>
<h3 id="通过注解使用MyBatis"><a href="#通过注解使用MyBatis" class="headerlink" title="通过注解使用MyBatis"></a>通过注解使用MyBatis</h3><p>先前一篇的文章，我们通过注解来使用MyBatis，但是跟先前的风格有点不一样，所以这一次我们直接使用注解，能够有一个较直观的对比。引入依赖什么的这里就不说了。</p>
<h3 id="配置连接数据库"><a href="#配置连接数据库" class="headerlink" title="配置连接数据库"></a>配置连接数据库</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/test?serverTimezone=UTC</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=<span class="number">995495</span></span><br></pre></td></tr></table></figure>

<p>题外话：问题是成长的催化剂。刚开始一直连不上数据库，后面一查是时区问题serverTimezone=UTC</p>
<h3 id="Model层"><a href="#Model层" class="headerlink" title="Model层"></a>Model层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Mapper层"><a href="#Mapper层" class="headerlink" title="Mapper层"></a>Mapper层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where name=#&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findByName</span><span class="params">(@Param(<span class="string">"name"</span>)</span>String name)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(name,age) values(#&#123;name&#125;,#&#123;age&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(@Param(<span class="string">"name"</span>)</span>String name,@<span class="title">Param</span><span class="params">(<span class="string">"age"</span>)</span>Integer age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此可以发现跟我们先前用的jpa其实是很像的，迁移是很快的，接下来我们就继续探讨其注解</p>
<h3 id="传参方式"><a href="#传参方式" class="headerlink" title="传参方式"></a>传参方式</h3><h4 id="使用-Param"><a href="#使用-Param" class="headerlink" title="使用@Param"></a>使用@Param</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into user(name,age)values(#&#123;name&#125;,#&#123;age&#125;)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(@Param(<span class="string">"name"</span>)</span>String name,@<span class="title">Param</span><span class="params">(<span class="string">"age"</span>)</span>Integer age)</span>;</span><br></pre></td></tr></table></figure>

<p>解释 @Param中定义中的name对应的sql中的#{name},age同理</p>
<h4 id="使用Map"><a href="#使用Map" class="headerlink" title="使用Map"></a>使用Map</h4><p>通过Map&lt;String,Object&gt;对象来作为传递参数的容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into user(name,age) values(#&#123;name,jdbcType=VARCHAR&#125;,#&#123;age,jdbcType=INTEGER&#125;)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertByMap</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"name"</span>,<span class="string">"CCC"</span>);</span><br><span class="line">map.put(<span class="string">"age"</span>,<span class="number">40</span>);</span><br><span class="line">userMapper.insertByMap(map);</span><br></pre></td></tr></table></figure>

<h4 id="使用对象"><a href="#使用对象" class="headerlink" title="使用对象"></a>使用对象</h4><p>可以直接使用java对象来作为查询条件的传参</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into user(name,age) values(#&#123;name&#125;,#&#123;age&#125;)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertByUser</span><span class="params">(User user)</span></span></span><br></pre></td></tr></table></figure>

<p>这样#{name}和#{age}就分别对应了User对象中的name和age属性</p>
<h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where name=#&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findByname</span><span class="params">(@Param(<span class="string">"name"</span>)</span>String name)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(name,age) values(#&#123;name,jdbcType=VACHAR&#125;,#&#123;age,jdbcType=INTEGER&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set age=#&#123;age&#125; where name=#&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于上面的这些内容都比较好理解</p>
<h3 id="返回结果的绑定"><a href="#返回结果的绑定" class="headerlink" title="返回结果的绑定"></a>返回结果的绑定</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">    <span class="meta">@Result</span>(property=<span class="string">"name"</span>,column=<span class="string">"name"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(property=<span class="string">"age"</span>,column=<span class="string">"age"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select name,age from user"</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<p>@Result中的property属性对应着User对象中的成员名，column对应select出来的字段</p>
<h3 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h3><p>总的来说，增删改查一般的业务都是够用的，但是有时候需要生成动态sql,mybatis也有这种的注解。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>加油！现在有思路，并且慢慢懂得完善自己的技能库。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot与MyBatis</title>
    <url>/2019-08-11-SpringBoot%E4%B8%8EMyBatis/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新的东西，完善自己的技术库。</p>
<h3 id="认识MyBatis"><a href="#认识MyBatis" class="headerlink" title="认识MyBatis"></a>认识MyBatis</h3><ul>
<li>一款优秀的持久层框架<ul>
<li>持久层可以理解成数据保存到数据库或者硬盘一类可以保存很长时间的设备里面 Hibernate也是这种框架</li>
</ul>
</li>
<li>支持定制化SQL，存储过程和高级映射</li>
</ul>
<h3 id="在SpringBoot中使用MyBatis"><a href="#在SpringBoot中使用MyBatis" class="headerlink" title="在SpringBoot中使用MyBatis"></a>在SpringBoot中使用MyBatis</h3><h4 id="配置pom"><a href="#配置pom" class="headerlink" title="配置pom"></a>配置pom</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mybatis.type-handlers-<span class="keyword">package</span>=com.example.mybatis.handler</span><br><span class="line">mybatis.configuration.map-underscore-to-camel-<span class="keyword">case</span>=<span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ol>
<li>获取handler所在的包</li>
<li>格式化sql</li>
</ol>
<h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Money price;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到这里的price类型为Money类型</p>
<h5 id="配置pom-1"><a href="#配置pom-1" class="headerlink" title="配置pom"></a>配置pom</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.joda&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;joda-money&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;LATEST&lt;/version&gt;</span><br><span class="line">&lt;dependency&gt;</span><br></pre></td></tr></table></figure>

<h5 id="handler-MoneyTypeHandler"><a href="#handler-MoneyTypeHandler" class="headerlink" title="handler MoneyTypeHandler"></a>handler MoneyTypeHandler</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> calss MoneyTypeHandler extands BaseTypeHandler&lt;Money&gt;&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i, Money money, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        preparedStatement.setLong(i,money.getAmountMinorLong());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Money <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parseMoney(resultSet.getLong(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Money <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parseMoney(resultSet.getLong(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Money <span class="title">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parseMoney(callableStatement.getLong(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Money <span class="title">parseMoney</span><span class="params">(Long value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Money.of(CurrencyUnit.of(<span class="string">"CNY"</span>),value/<span class="number">100.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Mapper的定义和扫描"><a href="#Mapper的定义和扫描" class="headerlink" title="Mapper的定义和扫描"></a>Mapper的定义和扫描</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoffeeMapper</span></span>&#123;</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into t_coffee(name,price,create_time,update_time) value(#&#123;name&#125;,#&#123;price&#125;,now(),now())"</span>)</span><br><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys=<span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(Coffee coffee)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from t_coffee where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">        <span class="meta">@Result</span>(id=<span class="keyword">true</span>,column=<span class="string">"id"</span>,property=<span class="string">"id"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column=<span class="string">"create_time"</span>,property=<span class="string">"createTime"</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">Coffee <span class="title">findById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.example.mybatis.mapper"</span>) <span class="comment">//mapper层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisApplication</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CoffeeMapper coffeeMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Coffee c=Coffee.builder().name(<span class="string">"espresso"</span>)</span><br><span class="line">            .price(Money.of(CurrencyUnit.of(<span class="string">"CNY"</span>),<span class="number">20.0</span>)).build();</span><br><span class="line">        <span class="keyword">int</span> count=coffeeMapper.save(c);</span><br><span class="line">        log.info(<span class="string">"Save &#123;&#125; Coffee:&#123;&#125;"</span>,count,c);</span><br><span class="line">        </span><br><span class="line">        c=Coffee.builder().name(<span class="string">"latte"</span>)</span><br><span class="line">            .price(Money.of(CurrencyUnit.of(<span class="string">"CNY"</span>),<span class="number">25.0</span>)).build();</span><br><span class="line">        count=coffeeMapper.save(c);</span><br><span class="line">        log.info(<span class="string">"Save &#123;&#125; Coffee:&#123;&#125;"</span>,count,c);</span><br><span class="line">        </span><br><span class="line">        c=coffeeMapper.findById(c.getId());</span><br><span class="line">        log.info(<span class="string">"Find Coffee:&#123;&#125;"</span>,c)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_coffee(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    price <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    create_time <span class="built_in">timestamp</span>,</span><br><span class="line">    update_time <span class="built_in">timestamp</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<p>对比于先前学习的JPA，我们可以很清楚的理解到这里面的逻辑</p>
<p>model层是数据库字段层</p>
<p>mapper层是repository层</p>
<p>然后就是controller层</p>
<h3 id="让MyBatis更好用的哪些工具"><a href="#让MyBatis更好用的哪些工具" class="headerlink" title="让MyBatis更好用的哪些工具"></a>让MyBatis更好用的哪些工具</h3><h5 id="认识MyBatis-Generator"><a href="#认识MyBatis-Generator" class="headerlink" title="认识MyBatis Generator"></a>认识MyBatis Generator</h5><ul>
<li>MyBatis代码生成器</li>
<li>根据数据库表生成相关代码<ul>
<li>POJO</li>
<li>Mapper接口</li>
<li>SQL Map XML</li>
</ul>
</li>
</ul>
<h4 id="运行MyBatis-Generator"><a href="#运行MyBatis-Generator" class="headerlink" title="运行MyBatis Generator"></a>运行MyBatis Generator</h4><ul>
<li>命令行<ul>
<li>java -jar mybatis-generator-core-x.x.x.jar -configfile generatorConfig.xml</li>
</ul>
</li>
<li>Maven Plugin(mabatis-generator-maven-plugin)<ul>
<li>mvn mybatis-generator:generate</li>
<li>${basedir}/src/main/resources/generatorConfig.xml</li>
</ul>
</li>
</ul>
<h4 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateArtifacts</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    List&lt;String&gt; warnings=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ConfigurationParser cp=<span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">    Configuration config=cp.parseConfiguration(</span><br><span class="line">    	<span class="keyword">this</span>.getClass().getResourceAsStream(<span class="string">"/generatorConfig.xml"</span>));</span><br><span class="line">    DefaultShellCallback callback=<span class="keyword">new</span> DefaultShellCallback(<span class="keyword">true</span>);</span><br><span class="line">    MyBatisGenerator myBatisGenerator=<span class="keyword">new</span> MyBatisGenerator(config,callback);</span><br><span class="line">    myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"H2Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.FluentBuilderMethodsPlugin"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.ToStringPlugin"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.SerializablePlugin"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.RowBoundsPlugin"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"org.h2.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:h2:mem:testdb"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"sa"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.example.mybatis.model"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.example.mybatis.mapper"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">"./src/main/resources/mapper"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"MIXEDMAPPER"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">"com.example.mybatis.mapper"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"t_coffee"</span> <span class="attr">domainObjectName</span>=<span class="string">"Coffee"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">sqlStatement</span>=<span class="string">"CALL IDENTITY()"</span> <span class="attr">identity</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">javaType</span>=<span class="string">"org.joda.money.Money"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">typeHandler</span>=<span class="string">"com.example.mybatis.handler.MoneyTypeHandler"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.FluentBuilderMethodsPlugin"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.ToStringPlugin"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.SerializablePlugin"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.RowBoundsPlugin"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">//配置 注意有个顺序</span><br><span class="line">1.builder方法</span><br><span class="line">2.tostring</span><br><span class="line">3.serializable</span><br><span class="line">4.rowbounds分页</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.example.mybatis.model"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//model层的包名</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.example.mybatis.mapper"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">"./src/main/resources/mapper"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">//mapper层配置 生成sql</span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"MIXEDMAPPER"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">"com.example.mybatis.mapper"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">//mapper层</span><br></pre></td></tr></table></figure>

<p>通过这些配置，MyBatis通过数据库的字段自动生成</p>
<h4 id="使用MyBatis"><a href="#使用MyBatis" class="headerlink" title="使用MyBatis"></a>使用MyBatis</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">playWithArtifacts</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Coffee espresso=<span class="keyword">new</span> Coffee()</span><br><span class="line">        .withName(<span class="string">"espresso"</span>)</span><br><span class="line">        .withPrice(Money.of(CurrencyUnit.of(<span class="string">"CNY"</span>),<span class="number">20.0</span>))</span><br><span class="line">        .withCreateTime(<span class="keyword">new</span> Date())</span><br><span class="line">        .withUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    coffeeMapper.insert(espresso);</span><br><span class="line">    </span><br><span class="line">    CoffeeExample example=<span class="keyword">new</span> CoffeeExample();</span><br><span class="line">    example.createCriteria().andNameEqualTo(<span class="string">"latte"</span>);</span><br><span class="line">    List&lt;Coffee&gt; list=coffeeMapper.selectByExample(example);</span><br><span class="line">    list.forEach(c-&gt;log.info(<span class="string">"selectbyExample:&#123;&#125;"</span>,c));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>就是现在，技术有点感觉，但是感觉还不全，精力有。就是现在不断去学习，不断去更新前一天的自己。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot JPA通过方法名来定义数据库查询</title>
    <url>/2019-08-10-SpringBoot-JPA%E9%80%9A%E8%BF%87%E6%96%B9%E6%B3%95%E5%90%8D%E6%9D%A5%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新的技术，更新自己的技术库。</p>
<h3 id="使用原因"><a href="#使用原因" class="headerlink" title="使用原因"></a>使用原因</h3><p>主要介绍通过方法名来创建简单的查询，彻底解放部分生产力</p>
<h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><ol>
<li>@EnableJpaRepository</li>
<li>Repository&lt;T,ID&gt;接口<ol>
<li>CrudRepository&lt;T,ID&gt;</li>
<li>PagingAndSortingRepository&lt;T,ID&gt;</li>
<li>JpaRepsotory&lt;T,ID&gt;</li>
</ol>
</li>
</ol>
<h3 id="定义查询"><a href="#定义查询" class="headerlink" title="定义查询"></a>定义查询</h3><p>一些原则</p>
<ol>
<li>find…By…/read…By…/query…By…/get…By…  定义的查询方法必须以这些为前缀</li>
<li>count…By…</li>
<li>…OrderBy…[Asc/Desc]</li>
<li>And/Or/IgnoreCase</li>
<li>Top/First/Distinct  如果需要定义返回的数据的个数只需要将top和first关键字加到方法名的第一个by关键字前面 例如 findTopBy findTop1By findFirstBy findFirst1By 这些方法名都返回第一个查询的实体</li>
<li>Distinct 如果想要查询不同的结果 需要将distinct关键字加到方法名的第一个by关键字前面 例如 findTitleDistinctBy 或者 findDistinctTtitleBy 表示我们想要查询所有不同的的titles</li>
<li>查询方法的参数必须与查询情况相等</li>
</ol>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Test&gt; <span class="title">findAllByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Test&gt; <span class="title">findAllByOrderByIdAsc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Test&gt; <span class="title">findByType</span><span class="params">(String type)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Test&gt; <span class="title">findByCustomerid</span><span class="params">(String customer_id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Test&gt; <span class="title">findTop2ByCustomerid</span><span class="params">(String customer_id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Test&gt; <span class="title">findFirst1ByNameOrderByIdAsc</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h3><p>总算搞清楚了为什么先前一直不能用，因为先前是这么命名的a_b，然后写方法名的时候就是这么写的A_b，所以会一直提示没有a这个属性。</p>
<p>所以应该ab命名，使用的时候用Ab这种格式。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/" target="_blank" rel="noopener">query method</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>要继续努力，要坚持。你难以想象比你优秀的人比你更努力</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>认识Spring Data JPA</title>
    <url>/2019-08-09-%E8%AE%A4%E8%AF%86Spring-Data-JPA/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学点新技术</p>
<h3 id="认识Spring-Data-JPA"><a href="#认识Spring-Data-JPA" class="headerlink" title="认识Spring Data JPA"></a>认识Spring Data JPA</h3><p>主要是简化了sql的书写，部分简单的sql语法通过框架自动帮助生成</p>
<h3 id="定义JPA实体对象"><a href="#定义JPA实体对象" class="headerlink" title="定义JPA实体对象"></a>定义JPA实体对象</h3><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><h5 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h5><ul>
<li>@Entity @MappedSuperclass(有多个类，然后在父类标注)</li>
<li>@Table(name) 将实体和数据库里的表关联起来</li>
</ul>
<p>注没有特别表注，类名就是表名</p>
<h5 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h5><ul>
<li>@Id<ul>
<li>@GeneratedValue(strategy,generator)</li>
<li>@SequenceGenerator(name,sequenceName) //指明用什么样的序列</li>
</ul>
</li>
</ul>
<h5 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h5><ul>
<li>@Column(name,nullable,length,issertable,updateable) 注意issertable是否可以插入 updateable是否可以更新</li>
<li>@JoinTable(name) @JoinColumn(name)  表关联的时候需要用到</li>
</ul>
<h5 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h5><ul>
<li>@OneToOne @OneToMany @ManyToOne @ManyToMany</li>
<li>@OrderBy</li>
</ul>
<h3 id="定义实体"><a href="#定义实体" class="headerlink" title="定义实体"></a>定义实体</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"T_ORDER"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeOrder</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String customer;</span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="meta">@JoinTable</span>(name = <span class="string">"T_ORDER_COFFEE"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Coffee&gt; items;</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">    <span class="meta">@Column</span>(updatable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@CreationTimestamp</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@UpdateTimestamp</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下：看高手的代码真的恍然大悟</p>
<ol>
<li>首先注解除了@Builder这个没有用过，builder设计模式应该是比较火的</li>
<li>@CreationTimestamp @UpdateTimestamp 两个时间戳 这个注解还真的得试试 </li>
<li>updatable放在不能更新的映射上面</li>
<li>@ManyToMany @JoinTable 这个关系到表之间的关系 这个也没有试过 说明coffe和order的关系是通过T_ORDER_COFFEE这张表来实现的</li>
</ol>
<h3 id="升级版定义实体"><a href="#升级版定义实体" class="headerlink" title="升级版定义实体"></a>升级版定义实体</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Column</span>(updatable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@CreationTimestamp</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@UpdateTimestamp</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"T_ORDER"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@ToString</span>(callSuper=<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeOrder</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="meta">@JoinTable</span>(name = <span class="string">"T_ORDER_COFFEE"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Coffee&gt; items;</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">    <span class="meta">@Column</span>(updatable = <span class="keyword">false</span>)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ol>
<li>把相同的抽象出来，成为一个父类</li>
<li>通过继承，不过需要在@ToString(callSuper=true)加入属性，不然ToString只能打印当前类下的属性</li>
</ol>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//application.properties</span></span><br><span class="line">spring.jpa.hibernate.ddl-auto=create-drop</span><br><span class="line">spring.jpa.properties.hibernate.show_sql=<span class="keyword">true</span></span><br><span class="line">spring.jpa.properties.hibernate.format_sql=<span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pom</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<p>hibernate就是JPA的实现</p>
<ol>
<li>create-drop 是每次执行的时候都会查询数据库里是否有这些表，有的话删掉新建，没有的话也新建,停止执行的时候又会删掉建立表</li>
<li>下面两个是打印出sql 以及对sql进行格式化</li>
<li>hibernate不管是内嵌的数据库还是oracle数据库都会自动生成表</li>
</ol>
<h3 id="其他收获"><a href="#其他收获" class="headerlink" title="其他收获"></a>其他收获</h3><h4 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h4><ul>
<li>@Getter/@Setter //为对象设置getter setter的方法</li>
<li>@ToString //写tostring方法打印出来</li>
<li>构造方法<ul>
<li>@NoArgsConstructor</li>
<li>@RequiredArgsConstructor</li>
<li>@AllArgsConstructor</li>
</ul>
</li>
<li>@Data 包括@Getter @Setter @ToString  一般直接在类上标注该注解</li>
<li>@Builder 为对象生成一个builder方法，生成这个对象</li>
<li>@Slf4j @CommonsLog @Log4j2 日志相关的注解 通常使用Slf4j使用的时候 log.info()</li>
</ul>
<h4 id="Money有关的东西"><a href="#Money有关的东西" class="headerlink" title="Money有关的东西"></a>Money有关的东西</h4><p>金融建议：尽量不要使用浮点数来进行表示金额</p>
<ul>
<li>joda-money Money对象</li>
<li>usertype.core 对money进行映射</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Column</span></span><br><span class="line">   <span class="meta">@Type</span>(type = <span class="string">"org.jadira.usertype.moneyandcurrency.joda.PersistentMoneyAmount"</span>,</span><br><span class="line">           parameters = &#123;<span class="meta">@org</span>.hibernate.annotations.Parameter(name = <span class="string">"currencyCode"</span>, value = <span class="string">"CNY"</span>)&#125;)</span><br><span class="line">   <span class="keyword">private</span> Money price;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">.pom</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.joda&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;joda-money&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.jadira.usertype&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;usertype.core&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;6.0.1.GA&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>今晚发现突然先前写的sp有点笨重，jpa的性能没有用起来，但是想想也是，你不能是全部学完在写，应该是一个不断优化，完善自己技术的过程(不断发现自己前一天是个傻逼的过程)</p>
<p>hhh，这种状态很爽</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot使用Swagger2构建强大的RESTful API文档</title>
    <url>/2019-08-08-SpringBoot%E4%BD%BF%E7%94%A8Swagger2%E6%9E%84%E5%BB%BA%E5%BC%BA%E5%A4%A7%E7%9A%84RESTful-API%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天都学点新东西</p>
<h3 id="使用理由"><a href="#使用理由" class="headerlink" title="使用理由"></a>使用理由</h3><ol>
<li>springboot构建的是RESTful API,虽然写起来简单，但是交流沟通麻烦</li>
<li>接口文档很好的解决生产力</li>
<li>并且postman的合作共享有上限，swagger可以很好的解决生产力</li>
<li>反正很好用，你使用了就会发现以前的效率太低了</li>
</ol>
<p>###添加依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;io.springfox&lt;/goupId&gt;</span><br><span class="line">	&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class="line">&lt;dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="创建swagger2配置类"><a href="#创建swagger2配置类" class="headerlink" title="创建swagger2配置类"></a>创建swagger2配置类</h3><p>在application.java同级创建Swagger2的配置类Swagger</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Swagger.java</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.basePacage(<span class="string">"controller"</span>))<span class="comment">//这是要生产的controller层所在的包</span></span><br><span class="line">            .paths(PathSelector2.any())</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//生成的api文档信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">            .title(<span class="string">"名字"</span>)</span><br><span class="line">            .description(<span class="string">"描述"</span>)</span><br><span class="line">            .termsOfServiceUrl(<span class="string">"团队联系链接"</span>)</span><br><span class="line">            .contact(<span class="string">"联系人"</span>)</span><br><span class="line">            .version(<span class="string">"1.0"</span>)</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释</p>
<ol>
<li>通过@Configuration 注解，让spring加载该配置</li>
<li>@EnableSwagger2注解启动Swagger2</li>
<li>通过createRestApi函数创建Docket的Bean之后，apiInfo()用来创建Api的基本信息</li>
<li>select()函数返回一个ApiSelectorBuilder实例用来控制接口暴露给Swagger来展示(除了@ApiIgnore指定的请求)</li>
</ol>
<p>至此，可以生产文档了，不过是以函数名等来产生的文档信息，接下来就是让文档更加美观</p>
<p>可以访问<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a> </p>
<p>但是，<strong>我不知道是否先前的原因，无法访问</strong>。</p>
<p>解决方法</p>
<h4 id="配置WebMvcConfiguration"><a href="#配置WebMvcConfiguration" class="headerlink" title="配置WebMvcConfiguration"></a>配置WebMvcConfiguration</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="优化文档"><a href="#优化文档" class="headerlink" title="优化文档"></a>优化文档</h3><ul>
<li>ApiOperation注解给API增加说明</li>
<li>ApiImplicitParams、@ApiImplicitParam注解给参数增加说明</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOpreation</span>(value=<span class="string">"api说明"</span>,notes=<span class="string">""</span>)</span><br><span class="line"><span class="meta">@ApiImplicitParam</span>(name=<span class="string">"id"</span>,value=<span class="string">"用户ID"</span>,required=<span class="keyword">true</span>,dataType=<span class="string">"Long"</span>)</span><br><span class="line"><span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name=<span class="string">"id"</span>,value=<span class="string">"用户ID"</span>,required=<span class="keyword">true</span>,dataType=<span class="string">"Long"</span>),</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name=<span class="string">"user"</span>,value=<span class="string">"用户详细实体user"</span>,required=<span class="keyword">true</span>,dataType=<span class="string">"user"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://blog.didispace.com/springbootswagger2/" target="_blank" rel="noopener">swagger2</a></p>
<p><a href="https://blog.csdn.net/u013128651/article/details/78864876" target="_blank" rel="noopener">找不到swagger2</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>早上起来，不仅总结了昨天的学习，还把这个Swagger2加到项目上，有进一步的解决了生产了</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序开发wxs，view布局</title>
    <url>/2019-08-07-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91wxs%EF%BC%8Cview%E5%B8%83%E5%B1%80%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学点技术</p>
<h3 id="WXS"><a href="#WXS" class="headerlink" title="WXS"></a>WXS</h3><p>wxs是微信WXML的脚本语言，本次实现功能是字符截取功能</p>
<p>步骤</p>
<ol>
<li>新建wxs文件夹，用来存放.wxs的文件</li>
<li>subutil.wxs代码</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sub=<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(val.length==<span class="number">0</span>||val==<span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(val.length&gt;<span class="number">17</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> val.substring(<span class="number">0</span>,<span class="number">17</span>)+<span class="string">"..."</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.sub=sub;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>通过这段代码，发现其实有点像js，只不过需要用module.exports的方式将自定义的方法暴露出去</p>
<ol start="3">
<li>page页面使用</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">引入wxs脚本</span><br><span class="line"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">src</span>=<span class="string">"../../wxs/subutil.wxs"</span> <span class="attr">module</span>=<span class="string">"tools"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">通过自定义的module名称tools引用sub截取方法</span><br><span class="line">&#123;&#123;tools.sub(item.goodsName)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>至此完成字符截取功能，这样就不需要使用js来完成。</p>
<h3 id="微信小程序view-flex布局"><a href="#微信小程序view-flex布局" class="headerlink" title="微信小程序view:flex布局"></a>微信小程序view:flex布局</h3><p>使用flex布局显示声明 display:flex;</p>
<p>做一个简单的demo</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"item item1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"item item2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"item item3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在我们都加上display:flex 因为view不会自动继承，需要在每个想使用的view里加上</p>
<p>首先是横向布局和竖向布局,属性 flex-direction</p>
<ul>
<li>row 从左到右的水平方向为主轴</li>
<li>row-reverse：从右到左的水平方向为主轴</li>
<li>column：从上到下的垂直方向为主轴</li>
<li>column-reverse：从下到上的垂直方向为主轴</li>
</ul>
<p>注意：因为不会继承，发现row只要加到item1 item2 item3即可(错误)，而row-reverse 要全部都加</p>
<p>接着是横向上的布局方向，属性justify-content</p>
<ul>
<li>flex-start：主轴起点对齐(默认值)</li>
<li>flex-end：主轴结束点对齐</li>
<li>center：在主轴中居中对齐</li>
<li>space-between：两端对齐，除了两端的子元素分别靠向两端的容器之外，其他子元素之间的间隔都相等</li>
<li>space-around：每个子元素之间的距离相等，两端的子元素距离容器的距离也和其它子元素之间的距离相同</li>
</ul>
<p>最后是纵向上的布局方向，属性align-items属性</p>
<ul>
<li>stretch 填充整个容器(默认值)</li>
<li>flex-start 侧轴的起点对齐 （这里我们手动设置下子 view 的高度，来看的明显一些）</li>
<li>flex-end 侧轴的终点对齐</li>
<li>baseline 以子元素的第一行文字对齐</li>
</ul>
<p>补充</p>
<ol>
<li>align-self属性覆盖父元素的align-items属性</li>
<li>flex-warp属性控制warp是否换行</li>
<li>order属性，控制排列顺序</li>
</ol>
<h3 id="JS验证手机号是否hefa"><a href="#JS验证手机号是否hefa" class="headerlink" title="JS验证手机号是否hefa"></a>JS验证手机号是否hefa</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> phoneReg=<span class="regexp">/^1[3-578]\d(9)$/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPhoneAvaliable</span>(<span class="params">phonevalue</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(phoneReg.test(phonevalue))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释</p>
<ol>
<li>^1以数字1开头</li>
<li>[3-578]第二位允许是3,4,5,7,8中的意味</li>
<li>\d(9) 任意9位数字组合</li>
<li>$只能以数字结尾</li>
</ol>
<p>这个是正则表达式，只能慢慢补充这个知识库</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/cangahi09025566/article/details/82589831" target="_blank" rel="noopener">WXS</a></p>
<p><a href="https://www.cnblogs.com/sun8134/p/6395947.html" target="_blank" rel="noopener">flex</a></p>
<p><a href="https://blog.csdn.net/qq_36846234/article/details/79033679" target="_blank" rel="noopener">验证</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>算是开始自己写页面，逻辑什么的目前没什么问题，该补补页面的知识了，不过记得要耐着性子</p>
]]></content>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序开发wxs，view布局</title>
    <url>/2019-08-07-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91wxs%EF%BC%8Cview%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学点技术</p>
<h3 id="WXS"><a href="#WXS" class="headerlink" title="WXS"></a>WXS</h3><p>wxs是微信WXML的脚本语言，本次实现功能是字符截取功能</p>
<p>步骤</p>
<ol>
<li>新建wxs文件夹，用来存放.wxs的文件</li>
<li>subutil.wxs代码</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sub=<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(val.length==<span class="number">0</span>||val==<span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(val.length&gt;<span class="number">17</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> val.substring(<span class="number">0</span>,<span class="number">17</span>)+<span class="string">"..."</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.sub=sub;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>通过这段代码，发现其实有点像js，只不过需要用module.exports的方式将自定义的方法暴露出去</p>
<ol start="3">
<li>page页面使用</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">引入wxs脚本</span><br><span class="line"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">src</span>=<span class="string">"../../wxs/subutil.wxs"</span> <span class="attr">module</span>=<span class="string">"tools"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">通过自定义的module名称tools引用sub截取方法</span><br><span class="line">&#123;&#123;tools.sub(item.goodsName)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>至此完成字符截取功能，这样就不需要使用js来完成。</p>
<h3 id="微信小程序view-flex布局"><a href="#微信小程序view-flex布局" class="headerlink" title="微信小程序view:flex布局"></a>微信小程序view:flex布局</h3><p>使用flex布局显示声明 display:flex;</p>
<p>做一个简单的demo</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"item item1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"item item2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"item item3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在我们都加上display:flex 因为view不会自动继承，需要在每个想使用的view里加上</p>
<p>首先是横向布局和竖向布局,属性 flex-direction</p>
<ul>
<li>row 从左到右的水平方向为主轴</li>
<li>row-reverse：从右到左的水平方向为主轴</li>
<li>column：从上到下的垂直方向为主轴</li>
<li>column-reverse：从下到上的垂直方向为主轴</li>
</ul>
<p>注意：因为不会继承，发现row只要加到item1 item2 item3即可(错误)，而row-reverse 要全部都加</p>
<p>接着是横向上的布局方向，属性justify-content</p>
<ul>
<li>flex-start：主轴起点对齐(默认值)</li>
<li>flex-end：主轴结束点对齐</li>
<li>center：在主轴中居中对齐</li>
<li>space-between：两端对齐，除了两端的子元素分别靠向两端的容器之外，其他子元素之间的间隔都相等</li>
<li>space-around：每个子元素之间的距离相等，两端的子元素距离容器的距离也和其它子元素之间的距离相同</li>
</ul>
<p>最后是纵向上的布局方向，属性align-items属性</p>
<ul>
<li>stretch 填充整个容器(默认值)</li>
<li>flex-start 侧轴的起点对齐 （这里我们手动设置下子 view 的高度，来看的明显一些）</li>
<li>flex-end 侧轴的终点对齐</li>
<li>baseline 以子元素的第一行文字对齐</li>
</ul>
<p>补充</p>
<ol>
<li>align-self属性覆盖父元素的align-items属性</li>
<li>flex-warp属性控制warp是否换行</li>
<li>order属性，控制排列顺序</li>
</ol>
<h3 id="JS验证手机号是否hefa"><a href="#JS验证手机号是否hefa" class="headerlink" title="JS验证手机号是否hefa"></a>JS验证手机号是否hefa</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> phoneReg=<span class="regexp">/^1[3-578]\d(9)$/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPhoneAvaliable</span>(<span class="params">phonevalue</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(phoneReg.test(phonevalue))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释</p>
<ol>
<li>^1以数字1开头</li>
<li>[3-578]第二位允许是3,4,5,7,8中的意味</li>
<li>\d(9) 任意9位数字组合</li>
<li>$只能以数字结尾</li>
</ol>
<p>这个是正则表达式，只能慢慢补充这个知识库</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/cangahi09025566/article/details/82589831" target="_blank" rel="noopener">WXS</a></p>
<p><a href="https://www.cnblogs.com/sun8134/p/6395947.html" target="_blank" rel="noopener">flex</a></p>
<p><a href="https://blog.csdn.net/qq_36846234/article/details/79033679" target="_blank" rel="noopener">验证</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>算是开始自己写页面，逻辑什么的目前没什么问题，该补补页面的知识了，不过记得要耐着性子</p>
]]></content>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot发送HTTP请求</title>
    <url>/2019-08-06-SpringBoot%E5%8F%91%E9%80%81HTTP%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多会一点新东西</p>
<h3 id="SpringBoot发送http请求"><a href="#SpringBoot发送http请求" class="headerlink" title="SpringBoot发送http请求"></a>SpringBoot发送http请求</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在application.java的文件下添加RestTemplate Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        returen <span class="keyword">new</span> RestTemplate</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：新建Rest Template的Bean实例，自动写Rest Templte对象</p>
<h4 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h4><p>使用exchange()方法发送get api</p>
<p>使用步骤</p>
<ol>
<li>实例 Rest Template对象</li>
<li>使用HttpHeaders来设置请求头</li>
<li>使用HttpEntity包含请求对象</li>
<li>为exchange()提供url httpmethod return type</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumeWebService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/url"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HttpHeaders headers=<span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));</span><br><span class="line">        HttpEntity&lt;String&gt; entity=<span class="keyword">new</span> HttpEntity&lt;String&gt;(headers);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> restTemplate.exchange(<span class="string">"url"</span>,HttpMethod.Get,entity,String<span class="class">.<span class="keyword">class</span>).<span class="title">getBody</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h4><p>使用步骤</p>
<ol>
<li>实例Rest Template对象</li>
<li>使用HttpHeaders 设置请求头</li>
<li>使用HttpEntity包含请求对象 发送一个请求体</li>
<li>为exchange()提供url httpmethod return type</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumeWebService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/url"</span>,method=RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createProducts</span><span class="params">(@RequestBody Product product)</span></span>&#123;</span><br><span class="line">        HttPHeaders headers=<span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON))；</span><br><span class="line">        HttpEntity&lt;Product&gt; entity=<span class="keyword">new</span> HttpEntity&lt;Product&gt;(product,headers);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> restTemplate.exchange(<span class="string">"url"</span>,HttpMethod.POST,entity,String<span class="class">.<span class="keyword">class</span>).<span class="title">getBody</span>()</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="String-转-map"><a href="#String-转-map" class="headerlink" title="String 转 map"></a>String 转 map</h3><p>在pom文件配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Gson gson=<span class="keyword">new</span> Gson();</span><br><span class="line">Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;String,Object&gt;)();</span><br><span class="line">map=gson.fromJson(String,map.getClass());</span><br><span class="line"><span class="comment">//将string转为map</span></span><br></pre></td></tr></table></figure>

<h3 id="其他收获"><a href="#其他收获" class="headerlink" title="其他收获"></a>其他收获</h3><ol>
<li>sql 的select * 返回的是一个list</li>
<li>微信小程序的页面渲染数据只能通过that.setData来设置，但是有些设置，例如设置Array里面的某一个项需要使用<a href="https://www.bbsmax.com/A/QW5YW8xGzm/" target="_blank" rel="noopener">特殊方法</a></li>
<li>判断JS的对象类型，如果使用typeof()会返回Object,可以使用 .constructor.name==”Array”</li>
<li>在小程序中调用函数使用this.functionname(),或者使用that.functionname()\</li>
<li>小程序跳转tap页面 wx.switchTab，小程序访问的第一个页面时通过page定义的第一项</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.tutorialspoint.com/spring_boot/spring_boot_rest_template" target="_blank" rel="noopener">RestTemplate</a></p>
<p><a href="https://www.javadevjournal.com/spring-boot/gson-with-spring-boot/" target="_blank" rel="noopener">Gson</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这篇文章应该边做项目的时候，边整理。–心得</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot发送HTTP请求</title>
    <url>/2019-08-06-SpringBoot%E5%8F%91%E9%80%81HTTP%E8%AF%B7%E6%B1%82%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多会一点新东西</p>
<h3 id="SpringBoot发送http请求"><a href="#SpringBoot发送http请求" class="headerlink" title="SpringBoot发送http请求"></a>SpringBoot发送http请求</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在application.java的文件下添加RestTemplate Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        returen <span class="keyword">new</span> RestTemplate</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：新建Rest Template的Bean实例，自动写Rest Templte对象</p>
<h4 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h4><p>使用exchange()方法发送get api</p>
<p>使用步骤</p>
<ol>
<li>实例 Rest Template对象</li>
<li>使用HttpHeaders来设置请求头</li>
<li>使用HttpEntity包含请求对象</li>
<li>为exchange()提供url httpmethod return type</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumeWebService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/url"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HttpHeaders headers=<span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));</span><br><span class="line">        HttpEntity&lt;String&gt; entity=<span class="keyword">new</span> HttpEntity&lt;String&gt;(headers);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> restTemplate.exchange(<span class="string">"url"</span>,HttpMethod.Get,entity,String<span class="class">.<span class="keyword">class</span>).<span class="title">getBody</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h4><p>使用步骤</p>
<ol>
<li>实例Rest Template对象</li>
<li>使用HttpHeaders 设置请求头</li>
<li>使用HttpEntity包含请求对象 发送一个请求体</li>
<li>为exchange()提供url httpmethod return type</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumeWebService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/url"</span>,method=RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createProducts</span><span class="params">(@RequestBody Product product)</span></span>&#123;</span><br><span class="line">        HttPHeaders headers=<span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON))；</span><br><span class="line">        HttpEntity&lt;Product&gt; entity=<span class="keyword">new</span> HttpEntity&lt;Product&gt;(product,headers);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> restTemplate.exchange(<span class="string">"url"</span>,HttpMethod.POST,entity,String<span class="class">.<span class="keyword">class</span>).<span class="title">getBody</span>()</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="String-转-map"><a href="#String-转-map" class="headerlink" title="String 转 map"></a>String 转 map</h3><p>在pom文件配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Gson gson=<span class="keyword">new</span> Gson();</span><br><span class="line">Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;String,Object&gt;)();</span><br><span class="line">map=gson.fromJson(String,map.getClass());</span><br><span class="line"><span class="comment">//将string转为map</span></span><br></pre></td></tr></table></figure>

<h3 id="其他收获"><a href="#其他收获" class="headerlink" title="其他收获"></a>其他收获</h3><ol>
<li>sql 的select * 返回的是一个list</li>
<li>微信小程序的页面渲染数据只能通过that.setData来设置，但是有些设置，例如设置Array里面的某一个项需要使用<a href="https://www.bbsmax.com/A/QW5YW8xGzm/" target="_blank" rel="noopener">特殊方法</a></li>
<li>判断JS的对象类型，如果使用typeof()会返回Object,可以使用 .constructor.name==”Array”</li>
<li>在小程序中调用函数使用this.functionname(),或者使用that.functionname()\</li>
<li>小程序跳转tap页面 wx.switchTab，小程序访问的第一个页面时通过page定义的第一项</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.tutorialspoint.com/spring_boot/spring_boot_rest_template" target="_blank" rel="noopener">RestTemplate</a></p>
<p><a href="https://www.javadevjournal.com/spring-boot/gson-with-spring-boot/" target="_blank" rel="noopener">Gson</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这篇文章应该边做项目的时候，边整理。–心得</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot上传文件到服务器上并且通过url访问静态资源</title>
    <url>/2019-08-05-SpringBoot%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%B9%B6%E4%B8%94%E9%80%9A%E8%BF%87url%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天都学一点新的东西，这样的一天才有价值。</p>
<h3 id="配置属性"><a href="#配置属性" class="headerlink" title="配置属性"></a>配置属性</h3><p>在application.properties文件下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#max file size</span><br><span class="line">spring.servlet.multipart.max-file-size=<span class="number">10</span>MB</span><br><span class="line">#max request size</span><br><span class="line">spring.servlet.multipart.max-request-size=<span class="number">10</span>MB</span><br><span class="line">#files storage location</span><br><span class="line">#the linux storage.location=/root/test</span><br><span class="line">storage.location=D:<span class="comment">//test/</span></span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>因为springboot自动允许multipart/form-data 请求</p>
<p>storage.location表示存储的rootLocation</p>
<h3 id="使配置可以使用"><a href="#使配置可以使用" class="headerlink" title="使配置可以使用"></a>使配置可以使用</h3><p>因为我们在application.properties里面定义了storage location，所以我们需要定义一下POJO类并且通过@ConfigurationProperties注解来自动绑定这个配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//StorageProperties.java</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"storage"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> location;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocation</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.location = location;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到prefix=”storage”，当application启动的时候，绑定以storage前缀的属性。</p>
<p>并且需要在Application.java中添加注解@EnableConfigurationProperties(StorageProperties.class)</p>
<h3 id="Storage-Service"><a href="#Storage-Service" class="headerlink" title="Storage Service"></a>Storage Service</h3><h4 id="StorageService"><a href="#StorageService" class="headerlink" title="StorageService"></a>StorageService</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">store</span><span class="params">(MultipartFile file,String type)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Stream&lt;Path&gt; <span class="title">loadAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Path <span class="title">load</span><span class="params">(String filename)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Resource <span class="title">loadAsResource</span><span class="params">(String filename)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个是可以用得到的方法，所以接下来就是实现这些方法</p>
<h4 id="FileSystemStorageService"><a href="#FileSystemStorageService" class="headerlink" title="FileSystemStorageService"></a>FileSystemStorageService</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemStorageService</span> <span class="keyword">implements</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Path rootLocation;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystemStorageService</span><span class="params">(StorageProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rootLocation = Paths.get(properties.getLocation());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Files.createDirectories(rootLocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(<span class="string">"Could not initialize storage location"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">store</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        String filename = StringUtils.cleanPath(file.getOriginalFilename());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(<span class="string">"Failed to store empty file "</span> + filename);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (filename.contains(<span class="string">".."</span>)) &#123;</span><br><span class="line">                <span class="comment">// This is a security check</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(</span><br><span class="line">                        <span class="string">"Cannot store file with relative path outside current directory "</span></span><br><span class="line">                                + filename);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> (InputStream inputStream = file.getInputStream()) &#123;</span><br><span class="line">                Files.copy(inputStream, <span class="keyword">this</span>.rootLocation.resolve(filename),</span><br><span class="line">                        StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(<span class="string">"Failed to store file "</span> + filename, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Stream&lt;Path&gt; <span class="title">loadAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Files.walk(<span class="keyword">this</span>.rootLocation, <span class="number">1</span>)</span><br><span class="line">                    .filter(path -&gt; !path.equals(<span class="keyword">this</span>.rootLocation))</span><br><span class="line">                    .map(<span class="keyword">this</span>.rootLocation::relativize);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(<span class="string">"Failed to read stored files"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Path <span class="title">load</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rootLocation.resolve(filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resource <span class="title">loadAsResource</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Path file = load(filename);</span><br><span class="line">            Resource resource = <span class="keyword">new</span> UrlResource(file.toUri());</span><br><span class="line">            <span class="keyword">if</span> (resource.exists() || resource.isReadable()) &#123;</span><br><span class="line">                <span class="keyword">return</span> resource;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(</span><br><span class="line">                        <span class="string">"Could not read file: "</span> + filename);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"Could not read file: "</span> + filename, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileSystemUtils.deleteRecursively(rootLocation.toFile());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ol>
<li>@PostConstuct注解，保证init()方法被调用当该bean被完全初始化</li>
</ol>
<h4 id="StorageException"><a href="#StorageException" class="headerlink" title="StorageException"></a>StorageException</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StorageException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StorageException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="FileNotFoundException"><a href="#FileNotFoundException" class="headerlink" title="FileNotFoundException"></a>FileNotFoundException</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileNotFoundException</span> <span class="keyword">extends</span> <span class="title">StorageException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileNotFoundException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileNotFoundException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ol>
<li>@ResponseStatus(HttpStatus.NOT_FOUND)该注解确保springboot返回的一个404的Http状态码</li>
</ol>
<p>以上可以实现上传文件，但是今天的项目需求是需要将图片等文件上传到服务器里面，就是上传到外部文件夹，并且通过url访问</p>
<h4 id="SpringBoot访问绝对路径下的静态资源"><a href="#SpringBoot访问绝对路径下的静态资源" class="headerlink" title="SpringBoot访问绝对路径下的静态资源"></a>SpringBoot访问绝对路径下的静态资源</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/image/**"</span>).addResourceLocations(<span class="string">"file:D://test/images/"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/download/**"</span>).addResourceLocations(<span class="string">"file:D://test/files/"</span>);</span><br><span class="line">        <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ol>
<li>可以通过<a href="http://127.0.0.1/image/**.jpg访问D://test/images/下的图片文件" target="_blank" rel="noopener">http://127.0.0.1/image/**.jpg访问D://test/images/下的图片文件</a></li>
</ol>
<h4 id="其他收获"><a href="#其他收获" class="headerlink" title="其他收获"></a>其他收获</h4><ol>
<li>通过postman发送表单 选择body里面的form-data然后添加key-value</li>
<li>处理@RequestBody 该注解无法通过url和form来传递参数，只能通过json串 选择body里面的raw 然后选择JSON格式 提交的格式为</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"key"</span>:<span class="string">"value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://attacomsian.com/blog/uploading-files-spring-boot" target="_blank" rel="noopener">file upload</a></p>
<p><a href="https://blog.csdn.net/jy02268879/article/details/82830789" target="_blank" rel="noopener">postman</a></p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot上传文件到服务器上并且通过url访问静态资源</title>
    <url>/2019-08-05-SpringBoot%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%B9%B6%E4%B8%94%E9%80%9A%E8%BF%87url%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天都学一点新的东西，这样的一天才有价值。</p>
<h3 id="配置属性"><a href="#配置属性" class="headerlink" title="配置属性"></a>配置属性</h3><p>在application.properties文件下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#max file size</span><br><span class="line">spring.servlet.multipart.max-file-size=<span class="number">10</span>MB</span><br><span class="line">#max request size</span><br><span class="line">spring.servlet.multipart.max-request-size=<span class="number">10</span>MB</span><br><span class="line">#files storage location</span><br><span class="line">#the linux storage.location=/root/test</span><br><span class="line">storage.location=D:<span class="comment">//test/</span></span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>因为springboot自动允许multipart/form-data 请求</p>
<p>storage.location表示存储的rootLocation</p>
<h3 id="使配置可以使用"><a href="#使配置可以使用" class="headerlink" title="使配置可以使用"></a>使配置可以使用</h3><p>因为我们在application.properties里面定义了storage location，所以我们需要定义一下POJO类并且通过@ConfigurationProperties注解来自动绑定这个配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//StorageProperties.java</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"storage"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> location;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocation</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.location = location;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到prefix=”storage”，当application启动的时候，绑定以storage前缀的属性。</p>
<p>并且需要在Application.java中添加注解@EnableConfigurationProperties(StorageProperties.class)</p>
<h3 id="Storage-Service"><a href="#Storage-Service" class="headerlink" title="Storage Service"></a>Storage Service</h3><h4 id="StorageService"><a href="#StorageService" class="headerlink" title="StorageService"></a>StorageService</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">store</span><span class="params">(MultipartFile file,String type)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Stream&lt;Path&gt; <span class="title">loadAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Path <span class="title">load</span><span class="params">(String filename)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Resource <span class="title">loadAsResource</span><span class="params">(String filename)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个是可以用得到的方法，所以接下来就是实现这些方法</p>
<h4 id="FileSystemStorageService"><a href="#FileSystemStorageService" class="headerlink" title="FileSystemStorageService"></a>FileSystemStorageService</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemStorageService</span> <span class="keyword">implements</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Path rootLocation;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystemStorageService</span><span class="params">(StorageProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rootLocation = Paths.get(properties.getLocation());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Files.createDirectories(rootLocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(<span class="string">"Could not initialize storage location"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">store</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        String filename = StringUtils.cleanPath(file.getOriginalFilename());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(<span class="string">"Failed to store empty file "</span> + filename);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (filename.contains(<span class="string">".."</span>)) &#123;</span><br><span class="line">                <span class="comment">// This is a security check</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(</span><br><span class="line">                        <span class="string">"Cannot store file with relative path outside current directory "</span></span><br><span class="line">                                + filename);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> (InputStream inputStream = file.getInputStream()) &#123;</span><br><span class="line">                Files.copy(inputStream, <span class="keyword">this</span>.rootLocation.resolve(filename),</span><br><span class="line">                        StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(<span class="string">"Failed to store file "</span> + filename, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Stream&lt;Path&gt; <span class="title">loadAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Files.walk(<span class="keyword">this</span>.rootLocation, <span class="number">1</span>)</span><br><span class="line">                    .filter(path -&gt; !path.equals(<span class="keyword">this</span>.rootLocation))</span><br><span class="line">                    .map(<span class="keyword">this</span>.rootLocation::relativize);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(<span class="string">"Failed to read stored files"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Path <span class="title">load</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rootLocation.resolve(filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resource <span class="title">loadAsResource</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Path file = load(filename);</span><br><span class="line">            Resource resource = <span class="keyword">new</span> UrlResource(file.toUri());</span><br><span class="line">            <span class="keyword">if</span> (resource.exists() || resource.isReadable()) &#123;</span><br><span class="line">                <span class="keyword">return</span> resource;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(</span><br><span class="line">                        <span class="string">"Could not read file: "</span> + filename);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"Could not read file: "</span> + filename, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileSystemUtils.deleteRecursively(rootLocation.toFile());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ol>
<li>@PostConstuct注解，保证init()方法被调用当该bean被完全初始化</li>
</ol>
<h4 id="StorageException"><a href="#StorageException" class="headerlink" title="StorageException"></a>StorageException</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StorageException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StorageException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="FileNotFoundException"><a href="#FileNotFoundException" class="headerlink" title="FileNotFoundException"></a>FileNotFoundException</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileNotFoundException</span> <span class="keyword">extends</span> <span class="title">StorageException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileNotFoundException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileNotFoundException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ol>
<li>@ResponseStatus(HttpStatus.NOT_FOUND)该注解确保springboot返回的一个404的Http状态码</li>
</ol>
<p>以上可以实现上传文件，但是今天的项目需求是需要将图片等文件上传到服务器里面，就是上传到外部文件夹，并且通过url访问</p>
<h4 id="SpringBoot访问绝对路径下的静态资源"><a href="#SpringBoot访问绝对路径下的静态资源" class="headerlink" title="SpringBoot访问绝对路径下的静态资源"></a>SpringBoot访问绝对路径下的静态资源</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/image/**"</span>).addResourceLocations(<span class="string">"file:D://test/images/"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/download/**"</span>).addResourceLocations(<span class="string">"file:D://test/files/"</span>);</span><br><span class="line">        <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ol>
<li>可以通过<a href="http://127.0.0.1/image/**.jpg访问D://test/images/下的图片文件" target="_blank" rel="noopener">http://127.0.0.1/image/**.jpg访问D://test/images/下的图片文件</a></li>
</ol>
<h4 id="其他收获"><a href="#其他收获" class="headerlink" title="其他收获"></a>其他收获</h4><ol>
<li>通过postman发送表单 选择body里面的form-data然后添加key-value</li>
<li>处理@RequestBody 该注解无法通过url和form来传递参数，只能通过json串 选择body里面的raw 然后选择JSON格式 提交的格式为</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"key"</span>:<span class="string">"value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://attacomsian.com/blog/uploading-files-spring-boot" target="_blank" rel="noopener">file upload</a></p>
<p><a href="https://blog.csdn.net/jy02268879/article/details/82830789" target="_blank" rel="noopener">postman</a></p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot的JDBC操作数据库</title>
    <url>/2019-08-03-SpringBoot%E7%9A%84JDBC%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h3><p>需要在pom文件下引入依赖，jdbc支持</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="连接Mysql数据库"><a href="#连接Mysql数据库" class="headerlink" title="连接Mysql数据库"></a>连接Mysql数据库</h3><p>在pom文件下引入Mysql数据库依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;5.1.21&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在application.properties中配置数据源信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/test</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=****</span><br><span class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>

<h3 id="使用JdbcTemplate操作数据库"><a href="#使用JdbcTemplate操作数据库" class="headerlink" title="使用JdbcTemplate操作数据库"></a>使用JdbcTemplate操作数据库</h3><p>建立新的类UserServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"insert into USER(NAME,AGE) values(?,?)"</span>,name,age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"delete from user where name=?"</span>,name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(<span class="string">"select count(1) from user"</span>,Integer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"delete from user"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot的配置文件解析</title>
    <url>/2019-08-03-SpringBoot%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对SpringBoot的配置进行解析</p>
<p>位置 src/main/java/resources/application.properties</p>
<h3 id="添加自定义属性"><a href="#添加自定义属性" class="headerlink" title="添加自定义属性"></a>添加自定义属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.xujin.name=xujin</span><br><span class="line">com.xujin.say=I am xuxiaojin</span><br></pre></td></tr></table></figure>

<h3 id="使用自定义属性"><a href="#使用自定义属性" class="headerlink" title="使用自定义属性"></a>使用自定义属性</h3><p>通过使用@Value(“${}”)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;com.xujin.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;com.xujin.say&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String say;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/xu"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name+<span class="string">" "</span>+say;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用Jar来运行SpringBoot"><a href="#使用Jar来运行SpringBoot" class="headerlink" title="使用Jar来运行SpringBoot"></a>使用Jar来运行SpringBoot</h3><p>可以通过maven打包</p>
<p>在IDEA的右侧 Maven Projects-&gt;Lifecycle-&gt;package</p>
<p>打包后在target的文件夹下</p>
<p>或者使用 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar xx.jar</span><br></pre></td></tr></table></figure>

<p>运行jar包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar xx.jar</span><br></pre></td></tr></table></figure>

<h3 id="使用两种环境来生产"><a href="#使用两种环境来生产" class="headerlink" title="使用两种环境来生产"></a>使用两种环境来生产</h3><p>在springboot的多种环境中文件名需要满足application-{profile}.properties。例如</p>
<ul>
<li>application-dev.properties:开发环境</li>
<li>application-test.properties:测试环境</li>
<li>application-prod.properties:生产环境</li>
</ul>
<p>具体使用哪种环境需要在application.properties文件中通过spring.profiles.active=test等等</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot的JDBC操作数据库</title>
    <url>/2019-08-03-SpringBoot%E7%9A%84JDBC%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h3><p>需要在pom文件下引入依赖，jdbc支持</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="连接Mysql数据库"><a href="#连接Mysql数据库" class="headerlink" title="连接Mysql数据库"></a>连接Mysql数据库</h3><p>在pom文件下引入Mysql数据库依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;5.1.21&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在application.properties中配置数据源信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/test</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=****</span><br><span class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>

<h3 id="使用JdbcTemplate操作数据库"><a href="#使用JdbcTemplate操作数据库" class="headerlink" title="使用JdbcTemplate操作数据库"></a>使用JdbcTemplate操作数据库</h3><p>建立新的类UserServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"insert into USER(NAME,AGE) values(?,?)"</span>,name,age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"delete from user where name=?"</span>,name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(<span class="string">"select count(1) from user"</span>,Integer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"delete from user"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot开发Web应用</title>
    <url>/2019-08-03-SpringBoot%E5%BC%80%E5%8F%91Web%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h3 id="SpringBoot的静态资源访问"><a href="#SpringBoot的静态资源访问" class="headerlink" title="SpringBoot的静态资源访问"></a>SpringBoot的静态资源访问</h3><p>位置src/main/resources下的static(没有的需要自己建立一个static文件夹)</p>
<p>在application.properties下添加</p>
<p>spring.mvc.static-path-pattern=/static/**</p>
<p>就可以访问到static文件夹的静态资源 例如访问localhost:8080/static/**.jpg</p>
<h3 id="使用Thymeleaf来渲染Web页面"><a href="#使用Thymeleaf来渲染Web页面" class="headerlink" title="使用Thymeleaf来渲染Web页面"></a>使用Thymeleaf来渲染Web页面</h3><p>在pom文件下引入依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>html文件建立在src/main/resources下的templates文件夹下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"$&#123;host&#125;"</span>&gt;</span>徐小晋博客<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(ModelMap map)</span></span>&#123;</span><br><span class="line">        map.addAttribute(<span class="string">"host"</span>,<span class="string">"https://jiayouxujin.github.io/"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释</p>
<ol>
<li>Controller返回的是视图 index.html</li>
<li>ModelMap</li>
</ol>
<blockquote>
<p>Modal can supply attributes used for rendering views</p>
<p>the advantage of ModalMap is it gives us the ability to pass a collection of values.</p>
</blockquote>
<p>打开浏览器localhost:8080即可访问到</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot开发Web应用</title>
    <url>/2019-08-03-SpringBoot%E5%BC%80%E5%8F%91Web%E5%BA%94%E7%94%A8%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="SpringBoot的静态资源访问"><a href="#SpringBoot的静态资源访问" class="headerlink" title="SpringBoot的静态资源访问"></a>SpringBoot的静态资源访问</h3><p>位置src/main/resources下的static(没有的需要自己建立一个static文件夹)</p>
<p>在application.properties下添加</p>
<p>spring.mvc.static-path-pattern=/static/**</p>
<p>就可以访问到static文件夹的静态资源 例如访问localhost:8080/static/**.jpg</p>
<h3 id="使用Thymeleaf来渲染Web页面"><a href="#使用Thymeleaf来渲染Web页面" class="headerlink" title="使用Thymeleaf来渲染Web页面"></a>使用Thymeleaf来渲染Web页面</h3><p>在pom文件下引入依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>html文件建立在src/main/resources下的templates文件夹下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"$&#123;host&#125;"</span>&gt;</span>徐小晋博客<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(ModelMap map)</span></span>&#123;</span><br><span class="line">        map.addAttribute(<span class="string">"host"</span>,<span class="string">"https://jiayouxujin.github.io/"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释</p>
<ol>
<li>Controller返回的是视图 index.html</li>
<li>ModelMap</li>
</ol>
<blockquote>
<p>Modal can supply attributes used for rendering views</p>
<p>the advantage of ModalMap is it gives us the ability to pass a collection of values.</p>
</blockquote>
<p>打开浏览器localhost:8080即可访问到</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot的配置文件解析</title>
    <url>/2019-08-03-SpringBoot%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对SpringBoot的配置进行解析</p>
<p>位置 src/main/java/resources/application.properties</p>
<h3 id="添加自定义属性"><a href="#添加自定义属性" class="headerlink" title="添加自定义属性"></a>添加自定义属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.xujin.name=xujin</span><br><span class="line">com.xujin.say=I am xuxiaojin</span><br></pre></td></tr></table></figure>

<h3 id="使用自定义属性"><a href="#使用自定义属性" class="headerlink" title="使用自定义属性"></a>使用自定义属性</h3><p>通过使用@Value(“${}”)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;com.xujin.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;com.xujin.say&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String say;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/xu"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name+<span class="string">" "</span>+say;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用Jar来运行SpringBoot"><a href="#使用Jar来运行SpringBoot" class="headerlink" title="使用Jar来运行SpringBoot"></a>使用Jar来运行SpringBoot</h3><p>可以通过maven打包</p>
<p>在IDEA的右侧 Maven Projects-&gt;Lifecycle-&gt;package</p>
<p>打包后在target的文件夹下</p>
<p>或者使用 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar xx.jar</span><br></pre></td></tr></table></figure>

<p>运行jar包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar xx.jar</span><br></pre></td></tr></table></figure>

<h3 id="使用两种环境来生产"><a href="#使用两种环境来生产" class="headerlink" title="使用两种环境来生产"></a>使用两种环境来生产</h3><p>在springboot的多种环境中文件名需要满足application-{profile}.properties。例如</p>
<ul>
<li>application-dev.properties:开发环境</li>
<li>application-test.properties:测试环境</li>
<li>application-prod.properties:生产环境</li>
</ul>
<p>具体使用哪种环境需要在application.properties文件中通过spring.profiles.active=test等等</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot的Jpa操作数据库</title>
    <url>/2019-08-03-SpringBoot%E7%9A%84Jpa%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="配置jpa"><a href="#配置jpa" class="headerlink" title="配置jpa"></a>配置jpa</h3><p>在pom文件下引入依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-stater-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在application.properties添加配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.jpa.hibernate.ddl-auto=create-drop</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li>create:每次加载的时候都会删除上一次创建生成的表，然后根据model类在重新生成新的表</li>
<li>create-drop 每次加载根据model类生成表，但sessionFactory关闭，表自动删除</li>
<li>update:第一次加载的时候根据model来生成表，以后加载的时候都自动更新，但不会删除以前的行</li>
<li>validate:会和数据库中的表结构进行比较，不会创建新表，但是会插入新的值</li>
</ul>
<p>注：如果发现数据库表丢失记得查看该参数</p>
<h3 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a>创建实体</h3><p>在src/main/java下新建一个文件夹model里新建一个类User</p>
<p>model层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略构造函数</span></span><br><span class="line">    <span class="comment">//省略getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li>@Id表示id @GeneratedValue表示数据库自动生成的字段</li>
</ul>
<h3 id="创建数据访问接口"><a href="#创建数据访问接口" class="headerlink" title="创建数据访问接口"></a>创建数据访问接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findByNameAndAge</span><span class="params">(String name,Integer age)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from User u where u.name=:name"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findUser</span><span class="params">(@Param(<span class="string">"name"</span>)</span>String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释</p>
<p>该接口UserRepository继承自JpaRepository其中User表示Model层实体类，Long表示数据库里主键，一般为Long或者Integer，该接口本身已经实现了创建(save)、更改(save)、删除(delete)、查询(findAll,findOne)等基本操作的函数</p>
<p>在上述代码中我们可以看到</p>
<ul>
<li>findByName和findByNameAndAge这个就是spring-boot-jpa的特性通过解析方法名创建查询</li>
<li>也可以通过@Query来创建查询</li>
</ul>
<h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ApplicationTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"AAA"</span>,<span class="number">0</span>));</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot的Jpa操作数据库</title>
    <url>/2019-08-03-SpringBoot%E7%9A%84Jpa%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="配置jpa"><a href="#配置jpa" class="headerlink" title="配置jpa"></a>配置jpa</h3><p>在pom文件下引入依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-stater-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在application.properties添加配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.jpa.hibernate.ddl-auto=create-drop</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li>create:每次加载的时候都会删除上一次创建生成的表，然后根据model类在重新生成新的表</li>
<li>create-drop 每次加载根据model类生成表，但sessionFactory关闭，表自动删除</li>
<li>update:第一次加载的时候根据model来生成表，以后加载的时候都自动更新，但不会删除以前的行</li>
<li>validate:会和数据库中的表结构进行比较，不会创建新表，但是会插入新的值</li>
</ul>
<p>注：如果发现数据库表丢失记得查看该参数</p>
<h3 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a>创建实体</h3><p>在src/main/java下新建一个文件夹model里新建一个类User</p>
<p>model层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略构造函数</span></span><br><span class="line">    <span class="comment">//省略getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li>@Id表示id @GeneratedValue表示数据库自动生成的字段</li>
</ul>
<h3 id="创建数据访问接口"><a href="#创建数据访问接口" class="headerlink" title="创建数据访问接口"></a>创建数据访问接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findByNameAndAge</span><span class="params">(String name,Integer age)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from User u where u.name=:name"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findUser</span><span class="params">(@Param(<span class="string">"name"</span>)</span>String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释</p>
<p>该接口UserRepository继承自JpaRepository其中User表示Model层实体类，Long表示数据库里主键，一般为Long或者Integer，该接口本身已经实现了创建(save)、更改(save)、删除(delete)、查询(findAll,findOne)等基本操作的函数</p>
<p>在上述代码中我们可以看到</p>
<ul>
<li>findByName和findByNameAndAge这个就是spring-boot-jpa的特性通过解析方法名创建查询</li>
<li>也可以通过@Query来创建查询</li>
</ul>
<h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ApplicationTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"AAA"</span>,<span class="number">0</span>));</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>构建第一个SpringBoot应用程序</title>
    <url>/2019-08-02-%E6%9E%84%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AASpringBoot%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="SpringBoot是什么"><a href="#SpringBoot是什么" class="headerlink" title="SpringBoot是什么"></a>SpringBoot是什么</h3><p>简化各种配置，让你专注与你的业务逻辑。</p>
<h3 id="使用start-spring-io构建项目"><a href="#使用start-spring-io构建项目" class="headerlink" title="使用start.spring,io构建项目"></a>使用start.spring,io构建项目</h3><p><a href="https://start.spring.io/" target="_blank" rel="noopener">构建项目</a></p>
<p>下载后-&gt;解压-&gt;通过idea打开pom文件-&gt;以project的形式打开</p>
<h3 id="解析结构"><a href="#解析结构" class="headerlink" title="解析结构"></a>解析结构</h3><ul>
<li>pom文件为基本的依赖管理文件(通过maven管理jar包)</li>
<li>resouces资源文件(web)<ul>
<li>static静态资源</li>
<li>templates模板资源</li>
<li>application.properties配置文件</li>
</ul>
</li>
<li>src/main/java下的程序入口</li>
</ul>
<h3 id="引入Web模块"><a href="#引入Web模块" class="headerlink" title="引入Web模块"></a>引入Web模块</h3><p>注：其实是可以在构建项目的网站里添加的</p>
<p>当前已有的模块</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">			&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">	&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>spring-boot-starter:核心模块，包括自动配置支持、日志和YAML（其实不是很懂）</li>
<li>spring-boot-starter-test:测试模块</li>
</ul>
<p>起步依赖spring-boot-starter-xx 提供了许多“开箱即用”的依赖模块，例如要实现web功能，引入spring-boot-starter-web这个依赖即可</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="编写hello-world服务"><a href="#编写hello-world服务" class="headerlink" title="编写hello world服务"></a>编写hello world服务</h3><p>src/main/java/com.example.Chapter1下新建一个package hello然后新建controller类helloController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下这里面的注解</p>
<ul>
<li>RestController注解等价与@Controller+@ResponseBody结合,使用这个注解的类里面的方法都以json格式输出（returning data rather than a view）</li>
</ul>
<p>启动应用，然后在浏览器中输入localhost:8080可以看到hello world。</p>
<p>是不是有点神奇，都没有进行任何配置就可以跑起来</p>
<ul>
<li>没有做任务的web.xml的配置(如果你有过java web的基础)</li>
<li>没有做过spring mvc的配置</li>
<li>没有配置tomcat(spring boot内嵌tomcat)</li>
</ul>
<h3 id="添加单元测试"><a href="#添加单元测试" class="headerlink" title="添加单元测试"></a>添加单元测试</h3><p>注：一直以来都没有好好写过单元测试的代码</p>
<p>在pom文件下添加依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">	&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在src/test/java/com.example.Chapter1中新建package hello然后新建类HelloControllerTest</p>
<p>解释:MockMvc允许你通过一些便利的类，去发送http请求到DispatcherServlet，然后跟结果做一个判断。(模拟http)</p>
<p>使用MockServletContext来构建一个空的WebApplicationContext，使得HelloController可以在Before函数中创建并传递到MockMvcBuilders.standaloneSetup()函数中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureMockMvc</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        mvc= MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> HelloController()).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(equalTo(<span class="string">"hello world"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://spring.io/guides/gs/spring-boot/" target="_blank" rel="noopener">官方文档</a></p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>构建第一个SpringBoot应用程序</title>
    <url>/2019-08-02-%E6%9E%84%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AASpringBoot%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="SpringBoot是什么"><a href="#SpringBoot是什么" class="headerlink" title="SpringBoot是什么"></a>SpringBoot是什么</h3><p>简化各种配置，让你专注与你的业务逻辑。</p>
<h3 id="使用start-spring-io构建项目"><a href="#使用start-spring-io构建项目" class="headerlink" title="使用start.spring,io构建项目"></a>使用start.spring,io构建项目</h3><p><a href="https://start.spring.io/" target="_blank" rel="noopener">构建项目</a></p>
<p>下载后-&gt;解压-&gt;通过idea打开pom文件-&gt;以project的形式打开</p>
<h3 id="解析结构"><a href="#解析结构" class="headerlink" title="解析结构"></a>解析结构</h3><ul>
<li>pom文件为基本的依赖管理文件(通过maven管理jar包)</li>
<li>resouces资源文件(web)<ul>
<li>static静态资源</li>
<li>templates模板资源</li>
<li>application.properties配置文件</li>
</ul>
</li>
<li>src/main/java下的程序入口</li>
</ul>
<h3 id="引入Web模块"><a href="#引入Web模块" class="headerlink" title="引入Web模块"></a>引入Web模块</h3><p>注：其实是可以在构建项目的网站里添加的</p>
<p>当前已有的模块</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">			&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">	&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>spring-boot-starter:核心模块，包括自动配置支持、日志和YAML（其实不是很懂）</li>
<li>spring-boot-starter-test:测试模块</li>
</ul>
<p>起步依赖spring-boot-starter-xx 提供了许多“开箱即用”的依赖模块，例如要实现web功能，引入spring-boot-starter-web这个依赖即可</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="编写hello-world服务"><a href="#编写hello-world服务" class="headerlink" title="编写hello world服务"></a>编写hello world服务</h3><p>src/main/java/com.example.Chapter1下新建一个package hello然后新建controller类helloController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下这里面的注解</p>
<ul>
<li>RestController注解等价与@Controller+@ResponseBody结合,使用这个注解的类里面的方法都以json格式输出（returning data rather than a view）</li>
</ul>
<p>启动应用，然后在浏览器中输入localhost:8080可以看到hello world。</p>
<p>是不是有点神奇，都没有进行任何配置就可以跑起来</p>
<ul>
<li>没有做任务的web.xml的配置(如果你有过java web的基础)</li>
<li>没有做过spring mvc的配置</li>
<li>没有配置tomcat(spring boot内嵌tomcat)</li>
</ul>
<h3 id="添加单元测试"><a href="#添加单元测试" class="headerlink" title="添加单元测试"></a>添加单元测试</h3><p>注：一直以来都没有好好写过单元测试的代码</p>
<p>在pom文件下添加依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">	&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在src/test/java/com.example.Chapter1中新建package hello然后新建类HelloControllerTest</p>
<p>解释:MockMvc允许你通过一些便利的类，去发送http请求到DispatcherServlet，然后跟结果做一个判断。(模拟http)</p>
<p>使用MockServletContext来构建一个空的WebApplicationContext，使得HelloController可以在Before函数中创建并传递到MockMvcBuilders.standaloneSetup()函数中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureMockMvc</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        mvc= MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> HelloController()).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(equalTo(<span class="string">"hello world"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://spring.io/guides/gs/spring-boot/" target="_blank" rel="noopener">官方文档</a></p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>构建第一个SpringBoot应用程序</title>
    <url>/2019-06-01-%E6%9E%84%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AASpringBoot%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="SpringBoot是什么"><a href="#SpringBoot是什么" class="headerlink" title="SpringBoot是什么"></a>SpringBoot是什么</h3><p>简化各种配置，让你专注与你的业务逻辑。</p>
<h3 id="使用start-spring-io构建项目"><a href="#使用start-spring-io构建项目" class="headerlink" title="使用start.spring,io构建项目"></a>使用start.spring,io构建项目</h3><p><a href="https://start.spring.io/" target="_blank" rel="noopener">构建项目</a></p>
<p>下载后-&gt;解压-&gt;通过idea打开pom文件-&gt;以project的形式打开</p>
<h3 id="解析结构"><a href="#解析结构" class="headerlink" title="解析结构"></a>解析结构</h3><ul>
<li>pom文件为基本的依赖管理文件(通过maven管理jar包)</li>
<li>resouces资源文件(web)<ul>
<li>static静态资源</li>
<li>templates模板资源</li>
<li>application.properties配置文件</li>
</ul>
</li>
<li>src/main/java下的程序入口</li>
</ul>
<h3 id="引入Web模块"><a href="#引入Web模块" class="headerlink" title="引入Web模块"></a>引入Web模块</h3><p>注：其实是可以在构建项目的网站里添加的</p>
<p>当前已有的模块</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">			&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">	&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>spring-boot-starter:核心模块，包括自动配置支持、日志和YAML（其实不是很懂）</li>
<li>spring-boot-starter-test:测试模块</li>
</ul>
<p>起步依赖spring-boot-starter-xx 提供了许多“开箱即用”的依赖模块，例如要实现web功能，引入spring-boot-starter-web这个依赖即可</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="编写hello-world服务"><a href="#编写hello-world服务" class="headerlink" title="编写hello world服务"></a>编写hello world服务</h3><p>src/main/java/com.example.Chapter1下新建一个package hello然后新建controller类helloController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下这里面的注解</p>
<ul>
<li>RestController注解等价与@Controller+@ResponseBody结合,使用这个注解的类里面的方法都以json格式输出（returning data rather than a view）</li>
</ul>
<p>启动应用，然后在浏览器中输入localhost:8080可以看到hello world。</p>
<p>是不是有点神奇，都没有进行任何配置就可以跑起来</p>
<ul>
<li>没有做任务的web.xml的配置(如果你有过java web的基础)</li>
<li>没有做过spring mvc的配置</li>
<li>没有配置tomcat(spring boot内嵌tomcat)</li>
</ul>
<h3 id="添加单元测试"><a href="#添加单元测试" class="headerlink" title="添加单元测试"></a>添加单元测试</h3><p>注：一直以来都没有好好写过单元测试的代码</p>
<p>在pom文件下添加依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">	&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在src/test/java/com.example.Chapter1中新建package hello然后新建类HelloControllerTest</p>
<p>解释:MockMvc允许你通过一些便利的类，去发送http请求到DispatcherServlet，然后跟结果做一个判断。(模拟http)</p>
<p>使用MockServletContext来构建一个空的WebApplicationContext，使得HelloController可以在Before函数中创建并传递到MockMvcBuilders.standaloneSetup()函数中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureMockMvc</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        mvc= MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> HelloController()).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(equalTo(<span class="string">"hello world"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://spring.io/guides/gs/spring-boot/" target="_blank" rel="noopener">官方文档</a></p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>构建第一个SpringBoot应用程序</title>
    <url>/2019-06-01-%E6%9E%84%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AASpringBoot%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="SpringBoot是什么"><a href="#SpringBoot是什么" class="headerlink" title="SpringBoot是什么"></a>SpringBoot是什么</h3><p>简化各种配置，让你专注与你的业务逻辑。</p>
<h3 id="使用start-spring-io构建项目"><a href="#使用start-spring-io构建项目" class="headerlink" title="使用start.spring,io构建项目"></a>使用start.spring,io构建项目</h3><p><a href="https://start.spring.io/" target="_blank" rel="noopener">构建项目</a></p>
<p>下载后-&gt;解压-&gt;通过idea打开pom文件-&gt;以project的形式打开</p>
<h3 id="解析结构"><a href="#解析结构" class="headerlink" title="解析结构"></a>解析结构</h3><ul>
<li>pom文件为基本的依赖管理文件(通过maven管理jar包)</li>
<li>resouces资源文件(web)<ul>
<li>static静态资源</li>
<li>templates模板资源</li>
<li>application.properties配置文件</li>
</ul>
</li>
<li>src/main/java下的程序入口</li>
</ul>
<h3 id="引入Web模块"><a href="#引入Web模块" class="headerlink" title="引入Web模块"></a>引入Web模块</h3><p>注：其实是可以在构建项目的网站里添加的</p>
<p>当前已有的模块</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">			&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">	&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>spring-boot-starter:核心模块，包括自动配置支持、日志和YAML（其实不是很懂）</li>
<li>spring-boot-starter-test:测试模块</li>
</ul>
<p>起步依赖spring-boot-starter-xx 提供了许多“开箱即用”的依赖模块，例如要实现web功能，引入spring-boot-starter-web这个依赖即可</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="编写hello-world服务"><a href="#编写hello-world服务" class="headerlink" title="编写hello world服务"></a>编写hello world服务</h3><p>src/main/java/com.example.Chapter1下新建一个package hello然后新建controller类helloController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下这里面的注解</p>
<ul>
<li>RestController注解等价与@Controller+@ResponseBody结合,使用这个注解的类里面的方法都以json格式输出（returning data rather than a view）</li>
</ul>
<p>启动应用，然后在浏览器中输入localhost:8080可以看到hello world。</p>
<p>是不是有点神奇，都没有进行任何配置就可以跑起来</p>
<ul>
<li>没有做任务的web.xml的配置(如果你有过java web的基础)</li>
<li>没有做过spring mvc的配置</li>
<li>没有配置tomcat(spring boot内嵌tomcat)</li>
</ul>
<h3 id="添加单元测试"><a href="#添加单元测试" class="headerlink" title="添加单元测试"></a>添加单元测试</h3><p>注：一直以来都没有好好写过单元测试的代码</p>
<p>在pom文件下添加依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">	&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在src/test/java/com.example.Chapter1中新建package hello然后新建类HelloControllerTest</p>
<p>解释:MockMvc允许你通过一些便利的类，去发送http请求到DispatcherServlet，然后跟结果做一个判断。(模拟http)</p>
<p>使用MockServletContext来构建一个空的WebApplicationContext，使得HelloController可以在Before函数中创建并传递到MockMvcBuilders.standaloneSetup()函数中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureMockMvc</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        mvc= MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> HelloController()).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(equalTo(<span class="string">"hello world"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://spring.io/guides/gs/spring-boot/" target="_blank" rel="noopener">官方文档</a></p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第四周</title>
    <url>/2019-07-21-ARTS%E7%AC%AC%E5%9B%9B%E5%91%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ARTS第四周，可以看到我跟第三周距离有点远了，但是回来了就是好的。</p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给一个数组，然后找到里面a+b+c=0?的三个数，并且要保证答案是不重复的</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>先将数组排序，然后利用一个双指针，前面一个指针，后面一个指针。</p>
<p>当sum&lt;0 前指针往前移动</p>
<p>当sum&gt;0 后指针往后移动</p>
<p>当sum=0 将答案加入</p>
<p>注意排除重复</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;<span class="number">3</span>) <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">while</span>(i&lt;nums.length-<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">int</span> j=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> k=nums.length-<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(j&lt;k)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum=nums[i]+nums[k]+nums[j];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(sum==<span class="number">0</span>) result.add(Arrays.asList(nums[i],nums[j],nums[k]));</span><br><span class="line">            <span class="keyword">if</span>(sum&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(j&lt;k)&#123;</span><br><span class="line">                    j++;</span><br><span class="line">                    <span class="keyword">if</span>(nums[j]==nums[j-<span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(j&lt;k)&#123;</span><br><span class="line">                    k--;</span><br><span class="line">                    <span class="keyword">if</span>(nums[k]==nums[k+<span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;nums.length-<span class="number">2</span>)&#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]==nums[i-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="涉及到的JAVA"><a href="#涉及到的JAVA" class="headerlink" title="涉及到的JAVA"></a>涉及到的JAVA</h4><ol>
<li>泛型</li>
<li>数组的一些函数(OPP思想)</li>
</ol>
<p>以上两点加入今天的代办清单，搞定！！</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第四周</title>
    <url>/2019-07-21-ARTS%E7%AC%AC%E5%9B%9B%E5%91%A8%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ARTS第四周，可以看到我跟第三周距离有点远了，但是回来了就是好的。</p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给一个数组，然后找到里面a+b+c=0?的三个数，并且要保证答案是不重复的</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>先将数组排序，然后利用一个双指针，前面一个指针，后面一个指针。</p>
<p>当sum&lt;0 前指针往前移动</p>
<p>当sum&gt;0 后指针往后移动</p>
<p>当sum=0 将答案加入</p>
<p>注意排除重复</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;<span class="number">3</span>) <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">while</span>(i&lt;nums.length-<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">int</span> j=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> k=nums.length-<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(j&lt;k)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum=nums[i]+nums[k]+nums[j];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(sum==<span class="number">0</span>) result.add(Arrays.asList(nums[i],nums[j],nums[k]));</span><br><span class="line">            <span class="keyword">if</span>(sum&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(j&lt;k)&#123;</span><br><span class="line">                    j++;</span><br><span class="line">                    <span class="keyword">if</span>(nums[j]==nums[j-<span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(j&lt;k)&#123;</span><br><span class="line">                    k--;</span><br><span class="line">                    <span class="keyword">if</span>(nums[k]==nums[k+<span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;nums.length-<span class="number">2</span>)&#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]==nums[i-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="涉及到的JAVA"><a href="#涉及到的JAVA" class="headerlink" title="涉及到的JAVA"></a>涉及到的JAVA</h4><ol>
<li>泛型</li>
<li>数组的一些函数(OPP思想)</li>
</ol>
<p>以上两点加入今天的代办清单，搞定！！</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux一些常见的命令行</title>
    <url>/2019-06-28-Linux%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直以来对于命令行很恐惧，但是Linux是一个很常见的服务端系统，所以必须了解一点命令行，才能在上面部署好环境，本篇主要介绍一些简单的命令行，让自己上手，并且清楚一些东西。而后对于部署配置，参看一些教程也不会不知道自己在操作什么，让自己心里有个底。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">init 3 #切换到命令行界面</span><br><span class="line">exit #退出</span><br><span class="line"><span class="meta">#</span><span class="bash">切换到超级管理员</span></span><br><span class="line">su - root </span><br><span class="line"><span class="meta">clear#</span><span class="bash">清空shell</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">常见目录</span><br><span class="line">/ 根目录</span><br><span class="line">/root root用户的家目录</span><br><span class="line">/home/username 普通用户的家目录</span><br><span class="line">/etc 配置文件目录</span><br><span class="line">/bin 命令目录</span><br><span class="line">/sbin 管理命令目录</span><br><span class="line">/usr/bin /usr/sbin系统预装的其他命令</span><br><span class="line">ls /查看根目录下的文件</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">man帮助 manual的缩写</span><br><span class="line">man 命令的名称</span><br><span class="line">man里面分为很多章，主要是为了解决命令重名的问题，不同章节查询的命令是对应不同的功能</span><br><span class="line">如果不知道属于什么章 可以通过</span><br><span class="line">man -a 命令</span><br><span class="line"></span><br><span class="line">help帮助</span><br><span class="line">内部命令</span><br><span class="line">help cd</span><br><span class="line">外部命令</span><br><span class="line">ls --help</span><br><span class="line">区分外部还是内部的命令 type 命令</span><br><span class="line"></span><br><span class="line">info 帮助比help更加详细</span><br><span class="line">info ls</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">文件管理 Linux一切皆文件</span></span><br><span class="line">文件查看</span><br><span class="line">pwd 显示当前的操作目录</span><br><span class="line">cd 更改当前的操作目录</span><br><span class="line">cd /path/to/... 绝对路径</span><br><span class="line">cd ./path/to/,, 相对路径</span><br><span class="line">cd ../path/to/..相对路径</span><br><span class="line">ls 显示当前目录下的文件</span><br><span class="line"></span><br><span class="line">目录文件的创建与删除</span><br><span class="line"><span class="meta">#</span><span class="bash">创建文件</span></span><br><span class="line">mkdir /a #表示在根目录下建立一个文件名 a</span><br><span class="line">mkdir a #表示当前目录下建立一个文件名 a</span><br><span class="line">mkdir -p /a/b/c/d</span><br><span class="line"></span><br><span class="line">rm -r -f /a #不进行提示的删除非空文件</span><br><span class="line">通配符</span><br><span class="line">*</span><br><span class="line">?</span><br><span class="line">文件操作</span><br><span class="line">文本内容的查看</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l #显示详细信息</span><br><span class="line">ls -a #显示隐藏文件夹</span><br><span class="line">ls -r #逆向显示</span><br><span class="line">ls -l -r -t #按时间的方式逆向显示 </span><br><span class="line">ls -lrt</span><br><span class="line">ls -R #递归显示 显示文件下的子文件夹</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd - #回到上次的目录</span><br><span class="line">cd . #当前目录</span><br><span class="line">cd .. #回到上级目录</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -r /root/a /tmp #复制目录</span><br><span class="line">cp /filea /tmp #复制文件</span><br><span class="line">cp -p/-a #不改变时间/不改变权限</span><br><span class="line"></span><br><span class="line">mv /tmp/fileb /filec #将tmp下的fileb移到根目录下的并且改名我filec</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat #文本内容显示到终端</span><br><span class="line">head #查看文件开头</span><br><span class="line">tail #查看文件结尾</span><br><span class="line">wc -l 文件 #统计文件内容信息</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打包</span></span><br><span class="line">tar cf /tmp/etc-backup.tar /etc</span><br><span class="line"><span class="meta">#</span><span class="bash">打包并压缩</span></span><br><span class="line">tar czf /tmp/etc-backup.tar.gz /etc  #gz</span><br><span class="line">tar cjf /tmp/etc-backup.tar.bz2 /etc #</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解压缩</span></span><br><span class="line">tar xf /tmp/etc-backup.tar -C /root #解压并且放到root下</span><br><span class="line">tar zxf/jxf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi</span><br><span class="line">多模式</span><br><span class="line">i #进入Insert模式 在光标当前位置插入</span><br><span class="line">I #进入插入模式 进入当前行的开头</span><br><span class="line">a #来到光标后的一个</span><br><span class="line">A #进入当前行的最后一个</span><br><span class="line"><span class="meta">o#</span><span class="bash"> 进入下一行</span></span><br><span class="line">O #进入上一行</span><br><span class="line"></span><br><span class="line">hjkl #左下上右移动</span><br><span class="line">yy #复制</span><br><span class="line">p #粘贴</span><br><span class="line">3 yy #复制了3行</span><br><span class="line"><span class="meta">y$</span><span class="bash"> <span class="comment">#复制到结尾</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">dd#</span><span class="bash">剪切</span></span><br><span class="line"><span class="meta">d$</span><span class="bash"> <span class="comment">#剪切</span></span></span><br><span class="line"></span><br><span class="line">u #撤销</span><br><span class="line">ctrl+r #撤销撤销</span><br><span class="line"></span><br><span class="line"><span class="meta">x#</span><span class="bash">删除当前光标</span></span><br><span class="line"><span class="meta">r#</span><span class="bash">替换</span></span><br><span class="line"></span><br><span class="line">:set nu</span><br><span class="line"></span><br><span class="line">可视模式</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">: w /root/a.txt 保存到</span><br><span class="line">: wq 保存并退出</span><br><span class="line">: q!不保存退出</span><br><span class="line">: q 退出</span><br><span class="line">: !ip</span><br><span class="line">/x查找 n查找下一个</span><br><span class="line">:s/old/new 替换 针对光标所在的行进行替换</span><br><span class="line"></span><br><span class="line">：set nu 显示行号</span><br></pre></td></tr></table></figure>

<hr>
<p>以上命令行小结一下：</p>
<p>因为需要知道Linux的一个核心观点就是“一切皆文件”所以在Linux中对于文件的操作尤为重要</p>
<ol>
<li>cd 转换操作目录 /..是绝对路径</li>
<li>ls 列出文件</li>
<li>pwd 查看当前操作目录的路径</li>
<li>mkdir创建文件</li>
<li>rm 删除 切记一定要检查好路径</li>
<li>cp 复制</li>
<li>tar cf 目的路径 源文件</li>
<li>tar xf 源文件 -C 目标文件</li>
</ol>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>命令行 只有一直用才会熟悉，在平时的部署上面多用用命令行，然后思考一下加深印象，当然这些命令行并需要去背诵，只要学会索引就可以，脑中有这个印象就好。相信后面我会慢慢上手Linux。</p>
<p>后面对于Linux的期望就是通过它学会部署环境，开发等等。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux一些常见的命令行</title>
    <url>/2019-06-28-Linux%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直以来对于命令行很恐惧，但是Linux是一个很常见的服务端系统，所以必须了解一点命令行，才能在上面部署好环境，本篇主要介绍一些简单的命令行，让自己上手，并且清楚一些东西。而后对于部署配置，参看一些教程也不会不知道自己在操作什么，让自己心里有个底。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">init 3 #切换到命令行界面</span><br><span class="line">exit #退出</span><br><span class="line"><span class="meta">#</span><span class="bash">切换到超级管理员</span></span><br><span class="line">su - root </span><br><span class="line"><span class="meta">clear#</span><span class="bash">清空shell</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">常见目录</span><br><span class="line">/ 根目录</span><br><span class="line">/root root用户的家目录</span><br><span class="line">/home/username 普通用户的家目录</span><br><span class="line">/etc 配置文件目录</span><br><span class="line">/bin 命令目录</span><br><span class="line">/sbin 管理命令目录</span><br><span class="line">/usr/bin /usr/sbin系统预装的其他命令</span><br><span class="line">ls /查看根目录下的文件</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">man帮助 manual的缩写</span><br><span class="line">man 命令的名称</span><br><span class="line">man里面分为很多章，主要是为了解决命令重名的问题，不同章节查询的命令是对应不同的功能</span><br><span class="line">如果不知道属于什么章 可以通过</span><br><span class="line">man -a 命令</span><br><span class="line"></span><br><span class="line">help帮助</span><br><span class="line">内部命令</span><br><span class="line">help cd</span><br><span class="line">外部命令</span><br><span class="line">ls --help</span><br><span class="line">区分外部还是内部的命令 type 命令</span><br><span class="line"></span><br><span class="line">info 帮助比help更加详细</span><br><span class="line">info ls</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">文件管理 Linux一切皆文件</span></span><br><span class="line">文件查看</span><br><span class="line">pwd 显示当前的操作目录</span><br><span class="line">cd 更改当前的操作目录</span><br><span class="line">cd /path/to/... 绝对路径</span><br><span class="line">cd ./path/to/,, 相对路径</span><br><span class="line">cd ../path/to/..相对路径</span><br><span class="line">ls 显示当前目录下的文件</span><br><span class="line"></span><br><span class="line">目录文件的创建与删除</span><br><span class="line"><span class="meta">#</span><span class="bash">创建文件</span></span><br><span class="line">mkdir /a #表示在根目录下建立一个文件名 a</span><br><span class="line">mkdir a #表示当前目录下建立一个文件名 a</span><br><span class="line">mkdir -p /a/b/c/d</span><br><span class="line"></span><br><span class="line">rm -r -f /a #不进行提示的删除非空文件</span><br><span class="line">通配符</span><br><span class="line">*</span><br><span class="line">?</span><br><span class="line">文件操作</span><br><span class="line">文本内容的查看</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l #显示详细信息</span><br><span class="line">ls -a #显示隐藏文件夹</span><br><span class="line">ls -r #逆向显示</span><br><span class="line">ls -l -r -t #按时间的方式逆向显示 </span><br><span class="line">ls -lrt</span><br><span class="line">ls -R #递归显示 显示文件下的子文件夹</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd - #回到上次的目录</span><br><span class="line">cd . #当前目录</span><br><span class="line">cd .. #回到上级目录</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -r /root/a /tmp #复制目录</span><br><span class="line">cp /filea /tmp #复制文件</span><br><span class="line">cp -p/-a #不改变时间/不改变权限</span><br><span class="line"></span><br><span class="line">mv /tmp/fileb /filec #将tmp下的fileb移到根目录下的并且改名我filec</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat #文本内容显示到终端</span><br><span class="line">head #查看文件开头</span><br><span class="line">tail #查看文件结尾</span><br><span class="line">wc -l 文件 #统计文件内容信息</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打包</span></span><br><span class="line">tar cf /tmp/etc-backup.tar /etc</span><br><span class="line"><span class="meta">#</span><span class="bash">打包并压缩</span></span><br><span class="line">tar czf /tmp/etc-backup.tar.gz /etc  #gz</span><br><span class="line">tar cjf /tmp/etc-backup.tar.bz2 /etc #</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解压缩</span></span><br><span class="line">tar xf /tmp/etc-backup.tar -C /root #解压并且放到root下</span><br><span class="line">tar zxf/jxf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi</span><br><span class="line">多模式</span><br><span class="line">i #进入Insert模式 在光标当前位置插入</span><br><span class="line">I #进入插入模式 进入当前行的开头</span><br><span class="line">a #来到光标后的一个</span><br><span class="line">A #进入当前行的最后一个</span><br><span class="line"><span class="meta">o#</span><span class="bash"> 进入下一行</span></span><br><span class="line">O #进入上一行</span><br><span class="line"></span><br><span class="line">hjkl #左下上右移动</span><br><span class="line">yy #复制</span><br><span class="line">p #粘贴</span><br><span class="line">3 yy #复制了3行</span><br><span class="line"><span class="meta">y$</span><span class="bash"> <span class="comment">#复制到结尾</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">dd#</span><span class="bash">剪切</span></span><br><span class="line"><span class="meta">d$</span><span class="bash"> <span class="comment">#剪切</span></span></span><br><span class="line"></span><br><span class="line">u #撤销</span><br><span class="line">ctrl+r #撤销撤销</span><br><span class="line"></span><br><span class="line"><span class="meta">x#</span><span class="bash">删除当前光标</span></span><br><span class="line"><span class="meta">r#</span><span class="bash">替换</span></span><br><span class="line"></span><br><span class="line">:set nu</span><br><span class="line"></span><br><span class="line">可视模式</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">: w /root/a.txt 保存到</span><br><span class="line">: wq 保存并退出</span><br><span class="line">: q!不保存退出</span><br><span class="line">: q 退出</span><br><span class="line">: !ip</span><br><span class="line">/x查找 n查找下一个</span><br><span class="line">:s/old/new 替换 针对光标所在的行进行替换</span><br><span class="line"></span><br><span class="line">：set nu 显示行号</span><br></pre></td></tr></table></figure>

<hr>
<p>以上命令行小结一下：</p>
<p>因为需要知道Linux的一个核心观点就是“一切皆文件”所以在Linux中对于文件的操作尤为重要</p>
<ol>
<li>cd 转换操作目录 /..是绝对路径</li>
<li>ls 列出文件</li>
<li>pwd 查看当前操作目录的路径</li>
<li>mkdir创建文件</li>
<li>rm 删除 切记一定要检查好路径</li>
<li>cp 复制</li>
<li>tar cf 目的路径 源文件</li>
<li>tar xf 源文件 -C 目标文件</li>
</ol>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>命令行 只有一直用才会熟悉，在平时的部署上面多用用命令行，然后思考一下加深印象，当然这些命令行并需要去背诵，只要学会索引就可以，脑中有这个印象就好。相信后面我会慢慢上手Linux。</p>
<p>后面对于Linux的期望就是通过它学会部署环境，开发等等。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>python异常与模块化</title>
    <url>/2019-06-28-python%E5%BC%82%E5%B8%B8%E4%B8%8E%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    <content><![CDATA[<p>###异常处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s=input(<span class="string">'Please enter two numbers separated by comma:'</span>)</span><br><span class="line">    num1=int(s.split(<span class="string">','</span>)[<span class="number">0</span>].strip())</span><br><span class="line">    num2=int(s.split(<span class="string">','</span>)[<span class="number">1</span>].strip())</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">'Value Error:&#123;&#125;'</span>.format(err))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">'Other error:&#123;&#125;'</span>.format(err))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'continue'</span>)</span><br></pre></td></tr></table></figure>

<p>还有一种常见形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s=input(<span class="string">'Please enter two numbers separated by comma:'</span>)</span><br><span class="line">    num1=int(s.split(<span class="string">','</span>)[<span class="number">0</span>].strip())</span><br><span class="line">    num2=int(s.split(<span class="string">','</span>)[<span class="number">1</span>].strip())</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">'Value Error:&#123;&#125;'</span>.format(err))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">'Other error:&#123;&#125;'</span>.format(err))</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'continue'</span>)</span><br><span class="line"><span class="comment">#无论发生什么，finally块中的语句都会被执行</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInputException</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,value)</span>:</span></span><br><span class="line">        self.value=value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"&#123;&#125; is invalid input"</span>.format(repr(self.value)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> MyInputException(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> MyInputException <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">"error:&#123;&#125;"</span>.format(err))</span><br></pre></td></tr></table></figure>

<h3 id="py模块化"><a href="#py模块化" class="headerlink" title="py模块化"></a>py模块化</h3><p>from your_file import function_name,class_name</p>
<p>巧用 if <strong>name</strong>==’<strong>main</strong>‘来避开import使得执行</p>
]]></content>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>python异常与模块化</title>
    <url>/2019-06-28-python%E5%BC%82%E5%B8%B8%E4%B8%8E%E6%A8%A1%E5%9D%97%E5%8C%96%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<p>###异常处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s=input(<span class="string">'Please enter two numbers separated by comma:'</span>)</span><br><span class="line">    num1=int(s.split(<span class="string">','</span>)[<span class="number">0</span>].strip())</span><br><span class="line">    num2=int(s.split(<span class="string">','</span>)[<span class="number">1</span>].strip())</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">'Value Error:&#123;&#125;'</span>.format(err))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">'Other error:&#123;&#125;'</span>.format(err))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'continue'</span>)</span><br></pre></td></tr></table></figure>

<p>还有一种常见形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s=input(<span class="string">'Please enter two numbers separated by comma:'</span>)</span><br><span class="line">    num1=int(s.split(<span class="string">','</span>)[<span class="number">0</span>].strip())</span><br><span class="line">    num2=int(s.split(<span class="string">','</span>)[<span class="number">1</span>].strip())</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">'Value Error:&#123;&#125;'</span>.format(err))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">'Other error:&#123;&#125;'</span>.format(err))</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'continue'</span>)</span><br><span class="line"><span class="comment">#无论发生什么，finally块中的语句都会被执行</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInputException</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,value)</span>:</span></span><br><span class="line">        self.value=value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"&#123;&#125; is invalid input"</span>.format(repr(self.value)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> MyInputException(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> MyInputException <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">"error:&#123;&#125;"</span>.format(err))</span><br></pre></td></tr></table></figure>

<h3 id="py模块化"><a href="#py模块化" class="headerlink" title="py模块化"></a>py模块化</h3><p>from your_file import function_name,class_name</p>
<p>巧用 if <strong>name</strong>==’<strong>main</strong>‘来避开import使得执行</p>
]]></content>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>python的列表、元组、字典、集合</title>
    <url>/2019-06-23-python%E7%9A%84%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E3%80%81%E5%AD%97%E5%85%B8%E3%80%81%E9%9B%86%E5%90%88%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文对python的四种基本类型 列表、元组、字典、集合有个全貌的了解，并且分析其性能，不同的应用场景。</p>
<h3 id="Overview-of-Python-Lists-and-Tuples"><a href="#Overview-of-Python-Lists-and-Tuples" class="headerlink" title="Overview of Python Lists and Tuples"></a>Overview of Python Lists and Tuples</h3><p>在python中经常被创建的数据类型就是列表(list)和元组(tuple)</p>
<p>相同点：都是存放有一定的顺序存放对象和值，这些值或对象可以是任何类型，包括None空类型</p>
<p>不同点：列表是可变的，即长度可以发生改变。元组不可发生改变，意味着一旦元组被创建的时候，其对象不能够被天剑或者删除，顺序也不会发生改变。</p>
<h4 id="Show-me-the-code"><a href="#Show-me-the-code" class="headerlink" title="Show me the code"></a>Show me the code</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#creating a python list or tuple</span></span><br><span class="line">lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="string">'three'</span>]</span><br><span class="line">tup=(<span class="number">1</span>,<span class="number">2</span>,<span class="string">'three'</span>)</span><br><span class="line"></span><br><span class="line">print(lst)</span><br><span class="line">print(tup)</span><br><span class="line"></span><br><span class="line"><span class="comment">#to create a tuple with only one value,add a trailing comma to the value</span></span><br><span class="line">tup2=<span class="number">0</span>,</span><br><span class="line">print(tup2)</span><br><span class="line"><span class="comment">#the below code will not do the work with a tuple only one value</span></span><br><span class="line">tup3=(<span class="number">0</span>)</span><br><span class="line">print(tup3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Get python list or tuple values</span></span><br><span class="line">print(lst[<span class="number">0</span>])</span><br><span class="line">print(lst[<span class="number">-1</span>])</span><br><span class="line">print(tup[<span class="number">0</span>])</span><br><span class="line">print(tup[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Slicing python lists and tuples</span></span><br><span class="line">print(lst[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">print(tup[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#assiging a python list value by index</span></span><br><span class="line">lst[<span class="number">0</span>]=<span class="string">'ONE'</span></span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># error 'tuple' object does not support item assignment</span></span><br><span class="line"><span class="comment"># tup[0]='ONE'</span></span><br><span class="line"><span class="comment"># print(tup)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#adding to a python list</span></span><br><span class="line">lst+=[<span class="literal">None</span>]</span><br><span class="line">print(lst)</span><br><span class="line">lst.append(<span class="number">5</span>)</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment">#the python del keyword for Lists</span></span><br><span class="line"><span class="keyword">del</span> lst[<span class="number">3</span>]</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> lst[<span class="number">2</span>:]</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment">#the concatenation works in tuple</span></span><br><span class="line">tup+=(<span class="number">4</span>,)</span><br><span class="line">print(tup)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">结果</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="string">'three'</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'three'</span>)</span><br><span class="line">(<span class="number">0</span>,)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">three</span><br><span class="line"><span class="number">1</span></span><br><span class="line">three</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">(<span class="number">2</span>, <span class="string">'three'</span>)</span><br><span class="line">[<span class="string">'ONE'</span>, <span class="number">2</span>, <span class="string">'three'</span>]</span><br><span class="line">[<span class="string">'ONE'</span>, <span class="number">2</span>, <span class="string">'three'</span>, <span class="literal">None</span>]</span><br><span class="line">[<span class="string">'ONE'</span>, <span class="number">2</span>, <span class="string">'three'</span>, <span class="literal">None</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="string">'ONE'</span>, <span class="number">2</span>, <span class="string">'three'</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="string">'ONE'</span>, <span class="number">2</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'three'</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>我们来一个一个分析</p>
<ol>
<li>创建list和tuple通过 []又或者可以通过调用list()函数 lst=list([1,2,’three’])，同样tuple可以通过()又或者可以通过tup=tuple((1,2,’three’))</li>
<li>通过索引访问list和tuple的值，并且还支持负索引</li>
<li>list和tuple支持切片操作</li>
<li>通过索引分配值给list以及、通过del函数可以对list删除、通过+添加list</li>
<li>tuple只支持+，但是这里特别注意，这里是<strong>重新开辟一块内存</strong>，创建新的元祖</li>
</ol>
<p>补充点别的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">tup=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(list(tup))</span><br><span class="line">print(tuple(lst))</span><br><span class="line">---</span><br><span class="line">结果</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">#lst和tup可以通过函数相互转换</span></span><br><span class="line"></span><br><span class="line">lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">tup=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(lst.count(<span class="number">3</span>))</span><br><span class="line">print(tup.count(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">print(lst.index(<span class="number">3</span>))</span><br><span class="line">print(tup.index(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">lst.reverse()</span><br><span class="line">print(lst)</span><br><span class="line">lst.sort()</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment">#error tuple object has no attribute reverse</span></span><br><span class="line"><span class="comment"># print(tup.reverse())</span></span><br><span class="line"><span class="comment"># print(tup.sort())</span></span><br><span class="line"></span><br><span class="line">print(list(reversed(tup)))</span><br><span class="line">print(sorted(tup))</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">结果</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p>分析一下</p>
<ol>
<li>count(item)统计列表/元组中Item出现的次数</li>
<li>index(item)统计列表/元组中item第一次出现的索引</li>
<li>list.reverse()和list.sort()分别表示原地倒转列表和排序(注意1.返回值是None,如果使用print(list.reverse()) 2.元组没有内置这两个函数，会报错)</li>
<li>reversed()和sorted()同样表示对列表/元组进行倒叙和排序，但是会返回一个结果</li>
</ol>
<h4 id="深入性能"><a href="#深入性能" class="headerlink" title="深入性能"></a>深入性能</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">tup=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(lst.__sizeof__())</span><br><span class="line"><span class="number">64</span></span><br><span class="line">print(tup.__sizeof__())</span><br><span class="line"><span class="number">48</span></span><br></pre></td></tr></table></figure>

<p>分析一下：</p>
<p>列表虽然跟元组存储一样多的元素个数，但是却比元组多16字节，这是因为列表是动态的，它需要存储一个指针，用来指向对应的元素(int型 8字节),而且因为其长度时可变的，需要额外的存储已经分配的长度(8字节)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=[]</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">40</span></span><br><span class="line">l.append(<span class="number">1</span>)</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">72</span></span><br><span class="line">l.append(<span class="number">2</span>)</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">72</span></span><br><span class="line">l.append(<span class="number">3</span>)</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">72</span></span><br><span class="line">l.append(<span class="number">4</span>)</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">72</span></span><br><span class="line">l.append(<span class="number">5</span>)</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">104</span></span><br></pre></td></tr></table></figure>

<p>通过运行结果，我们可以看到，list为了减少每次增加/删减的性能开销，每次都会额外分配一些空间(这个跟java的hashmap有点像)</p>
<p>这里还有一点注意的是</p>
<p>前面lst=[1,2,3]是直接初始化，所以只会分配3个元素的空间</p>
<p>而不断通过append实际上分配了4个元素空间 l=[]…</p>
<h4 id="两者的使用场景"><a href="#两者的使用场景" class="headerlink" title="两者的使用场景"></a>两者的使用场景</h4><ol>
<li>如果存储的数据和数量不变，比如地点的经纬度，选择元组更合适</li>
<li>如果数据或者数量是可变的，比如社交平台的日志功能，那么选择列表更合适</li>
</ol>
<h3 id="Overview-of-Python-Dictionaries-and-sets"><a href="#Overview-of-Python-Dictionaries-and-sets" class="headerlink" title="Overview of Python Dictionaries and sets"></a>Overview of Python Dictionaries and sets</h3><p>字典其实就是一组通过键值对存储的数据(其中在python3.7后，这些顺序是有序的，否则是没有顺序的)，并且可以随意删除数据，增加数据，访问数据(时间复杂度都可以在常数时间内)。其长度大小可变。</p>
<p>注意：the map key,which can be any immutable type,to values,which can be any type,just like the values of a list or tuple.键不能是可变的数据类型，值可以是任意类型</p>
<p>集合相对于字典来讲，就是存储的数据不是以键值对，而是只有值。其他性能基本相同</p>
<h4 id="show-me-the-code"><a href="#show-me-the-code" class="headerlink" title="show me the code"></a>show me the code</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d1=&#123;<span class="string">'name'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">20</span>,<span class="string">'gender'</span>:<span class="string">'male'</span>&#125;</span><br><span class="line">d2=dict(&#123;<span class="string">'name'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">20</span>,<span class="string">'gender'</span>:<span class="string">'male'</span>&#125;)</span><br><span class="line">d3=dict([(<span class="string">'name'</span>,<span class="string">'jason'</span>),(<span class="string">'age'</span>,<span class="number">20</span>),(<span class="string">'gender'</span>,<span class="string">'male'</span>)])</span><br><span class="line">d4=dict(name=<span class="string">'jason'</span>,age=<span class="number">20</span>,gender=<span class="string">'male'</span>)</span><br><span class="line">print(d1==d2==d3==d4)</span><br><span class="line"></span><br><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(s1==s2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#字典操作</span></span><br><span class="line">print(d1)</span><br><span class="line">print(d1[<span class="string">'name'</span>])</span><br><span class="line">print(d1.get(<span class="string">'location'</span>,<span class="string">'null'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#集合访问</span></span><br><span class="line">print(<span class="number">1</span> <span class="keyword">in</span> s1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#增删改</span></span><br><span class="line">d1[<span class="string">'location'</span>]=<span class="string">'shanghai'</span></span><br><span class="line">d1[<span class="string">'name'</span>]=<span class="string">'xu'</span></span><br><span class="line">d1.pop(<span class="string">'age'</span>)</span><br><span class="line"></span><br><span class="line">print(d1)</span><br><span class="line"></span><br><span class="line">s1.add(<span class="number">4</span>)</span><br><span class="line">s1.remove(<span class="number">1</span>)</span><br><span class="line">print(s1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#copy</span></span><br><span class="line">d4=d1</span><br><span class="line">d5=d1.copy()</span><br><span class="line"></span><br><span class="line">d5[<span class="string">'name'</span>]=<span class="string">'Jin'</span></span><br><span class="line">print(d5)</span><br><span class="line">print(d1)</span><br><span class="line"></span><br><span class="line">d4[<span class="string">'name'</span>]=<span class="string">'Jin'</span></span><br><span class="line">print(d4)</span><br><span class="line">print(d1)</span><br></pre></td></tr></table></figure>

<p>分析一下：</p>
<ol>
<li><p>创建字典，总共有四种方法，第一种就是直接使用{‘key’:value}其中用,隔开。后面三种调用dict()函数，dict(mapping)相当于传入一个mapping，dict(iterable)它的初始化过程是 for k,v in iterable: d[k]=v,所以传入的格式[(‘key’,value)],最后一种就是通过key=’value’ 创建集合的方法有两种{value}以及set([value])</p>
</li>
<li><p>字典的增删改查分别通过 d[‘key’]=value,d.pop(‘key’),d[‘key’]=newvalue,d[‘key’]或者d.get(‘key’,default)或者 value in dict</p>
</li>
<li><p>集合的增删改查 s.add(value),s.remove(value),没有该操作,value in s</p>
</li>
<li><p>字典的copy，如果直接用“=”实际上这两个引用都会直接指向同一个地址，当其中任意一个发生改变，就会引起其中另外一个发生改变。如果使用copy()函数，这两个指向不同的地址，不会发生冲突</p>
<h4 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h4><p>字典其实是一个hash表，所以其性能非常高，如果在不发生冲突的情况下。 </p>
</li>
</ol>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>本文对python的四种数据类型进行讨论分别是列表list,元组tuple,字典dict，集合set</p>
<p>总结一下:</p>
<p>列表list,通过[]表示，可以存储各种各样的数据类型，然后有顺序，其长度可以发生改变，并且任意删除，增加，访问。</p>
<p>元组tuple，通过()表示，可以存储各种各样的数据类型，有顺序，其长度不可发生改变，可以任意访问，增加通过+会创建一个新的元组</p>
<p>字典dict，通过{}表示，存储键值对，长度可以改变，可以通过hash的访问，任意删除，增加，修改</p>
<p>集合set，通过{},相对于字典存储值，长度可变，访问不可通过索引，只能通过in，可以添加add(),可以删除remove()</p>
]]></content>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>python自定义函数与面向对象</title>
    <url>/2019-06-23-python%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>python的最大特点就是dynamically typed就是动态类型，不像java需要定义数据类型</p>
<h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>先从一段代码引入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog=Dog(<span class="string">'name'</span>,<span class="number">16</span>)</span><br><span class="line">print(dog.getName())</span><br></pre></td></tr></table></figure>

<p>别急，我们先学习下py的函数，这个形式跟C以及java等语言有点不一样。跨度有点大，对于刚接触来说，我们需要对比一下。</p>
<h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>先来看一个例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">(message)</span>:</span></span><br><span class="line">    print(<span class="string">'Got a messag: &#123;&#125;'</span>.format(message))</span><br><span class="line"></span><br><span class="line">my_func(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="comment">#这里其实我有个地方不是很懂，不过大约能够知道什么意思，就是&#123;&#125;用来占位，记得在java中log常常这么用</span></span><br></pre></td></tr></table></figure>

<p>大致形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数)</span>:</span></span><br><span class="line">    处理</span><br><span class="line">    <span class="keyword">return</span>/yeild</span><br></pre></td></tr></table></figure>

<blockquote>
<p>与其他语言不一样的是，def是可执行语句，即函数被调用前，都是不存在的，直到被调用的时候才会创建一个新的函数对象，并赋予其名字</p>
</blockquote>
<p>对于以上这段话不理解的我们需要对比以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="comment">#报错，在主程序里，函数要先于调用前的定义</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">()</span>:</span></span><br><span class="line">    hello()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">my_func()</span><br><span class="line"><span class="comment">#正常运行，因为def是可执行语句，在调用的时候都不存在，但是我们必须保证调用前都已经声明定义了</span></span><br></pre></td></tr></table></figure>

<p>注：我们先有个全局的概念，然后我们在看一下细节</p>
<p>我们深入来看一个代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">(l)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(l,list):</span><br><span class="line">        print(<span class="string">'what you input is not a list'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> len(l)==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'waht you input is empty'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    largest=l[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">        <span class="keyword">if</span> item&gt;largest:</span><br><span class="line">            largest=item</span><br><span class="line">    print(<span class="string">'the largest item in l is &#123;&#125;'</span>.format(largest))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">my_func([<span class="number">8</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>看到这个我真的哭了，这里的多态完全跟java不同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    print(a+b)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">my_sum(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">my_sum([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">my_sum(<span class="string">'hello'</span>,<span class="string">'world'</span>)</span><br><span class="line"><span class="comment">#对于这种来什么就接受什么的函数，必要时需要在前面进行类型检查</span></span><br></pre></td></tr></table></figure>

<h4 id="函数变量的作用域"><a href="#函数变量的作用域" class="headerlink" title="函数变量的作用域"></a>函数变量的作用域</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MAX_VALUE=<span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> MAX_VALUE</span><br><span class="line">    MAX_VALUE=value</span><br><span class="line">    print(MAX_VALUE)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(value)</span>:</span></span><br><span class="line">    MAX_VALUE=value</span><br><span class="line">    print(MAX_VALUE)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test3</span><span class="params">()</span>:</span></span><br><span class="line">    print(MAX_VALUE)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">test3()</span><br><span class="line">test2(<span class="number">1</span>)</span><br><span class="line">test3()</span><br><span class="line">test1(<span class="number">1</span>)</span><br><span class="line">test3()</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>分析一下：</p>
<ol>
<li>函数内部默认为局部变量，即当函数调用结束后(return)，该变量会被收回，并且不能够被访问</li>
<li>Python的全局变量定义在主程序中</li>
<li>函数可以调用全局变量，如果用更改全局变量的时候需要 global关键字，这里并不是重新创建一个新的变量，而是告诉Python 解释器，这里的变量就是之前定义的全局变量</li>
<li>如果函数内部的变量名与主程序的变量名重名，那么局部变量将覆盖全局变量</li>
</ol>
<p>现在我们基本上了解了python的函数基本规则，我们回到类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog=Dog(<span class="string">'name'</span>,<span class="number">16</span>)</span><br><span class="line">print(dog.getName())</span><br></pre></td></tr></table></figure>

<p>在这里我们对比java的dog类如何去定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    Dog(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String...ags)</span></span>&#123;</span><br><span class="line">        Dog dog=<span class="keyword">new</span> Dog(<span class="string">"name"</span>,<span class="number">16</span>);</span><br><span class="line">        System.out.println(dog.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这两段代码执行的效果是一样的。</p>
<p>区别：</p>
<ol>
<li><p>python不需要提前声明的类的属性，因为不要指明属性的数据类型</p>
</li>
<li><p>Python的构造函数不是以类名，虽然调用的时候是以类名，说明在声明定义该类的对象的时候，会自动调用Init函数</p>
</li>
<li><p>注意到python的每个函数里面都有一个变量self，但是在调用的时候又不需要传入该参数，你可以看到这个self的作用跟this的作用差不多，只不过在python中必须使用这个self,在每一个类的方法中，self总是指向当前的实例，在init函数中self指向的最新被创建的对象，在其他函数中，指向调用该方法的对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.__name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.__sex=<span class="string">'boy'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog=Dog(<span class="string">'name'</span>,<span class="number">16</span>)</span><br><span class="line">dog.__name=<span class="string">'Name'</span></span><br><span class="line">print(dog.__name)</span><br><span class="line">print(dog.getName())</span><br><span class="line">print(dog.__sex)</span><br></pre></td></tr></table></figure>

<p>注：在一次被python的数据定义给坑了</p>
<p>首先我们注意到java里面数据是由private属性的，那么在python中默认以两个下划线表示该属性为私有属性，不可被对象之间调用</p>
<p>但是如果dog.__name记住这里的name属性不是该类的属性，而是你给dog这个变量重新定义的一个，与类里定义的不同</p>
<p>接着我们深入了解面向对象里面的细节，先来看一下下面这段代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    MAX_AGE=<span class="number">16</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newName</span><span class="params">(cls,name)</span>:</span></span><br><span class="line">        cls.name=name</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_MAX_AGE</span><span class="params">(age)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> age&lt;Dog.MAX_AGE:</span><br><span class="line">            print(<span class="string">"the dog age is &#123;&#125;"</span>.format(age))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'the maxage is &#123;&#125;'</span>.format(Dog.MAX_AGE))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">dog=Dog(<span class="string">'NAME'</span>,<span class="number">14</span>)</span><br><span class="line">print(dog.getName())</span><br><span class="line">dog.newName(<span class="string">'name'</span>)</span><br><span class="line">print(dog.getName())</span><br><span class="line">dog.get_MAX_AGE(<span class="number">16</span>)</span><br></pre></td></tr></table></figure>

<ol>
<li>第一个MAX_AGE是类中定义的常量，可以通过self.MAX_AGE或者Entity.MAX_AGE调用</li>
<li>注意到 @classmethod和@staticmethod 我们已经将类中的函数区别开来了，首先是classmethod类函数，能够动态访问或者修改对象的属性，其第一个参数一般为cls，最常用的功能是实现不用的init构造函数(好吧，上述代码不具有参考意义) ，@staticmehod是静态函数，可以用来做一些简单独立的任务，像什么测试等等，最后就是成员函数，是最正常的函数，不需要任何声明，第一个self代表当前对象的引用</li>
</ol>
<h4 id="写到最后"><a href="#写到最后" class="headerlink" title="写到最后"></a>写到最后</h4><p>这样，已经大致的会写python的类了，但是面向对象里面还有个重要的思想就是继承。不过这个留到后面来深入。当前我的目标就是对python基础有个全貌的了解。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>python的列表、元组、字典、集合</title>
    <url>/2019-06-23-python%E7%9A%84%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E3%80%81%E5%AD%97%E5%85%B8%E3%80%81%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文对python的四种基本类型 列表、元组、字典、集合有个全貌的了解，并且分析其性能，不同的应用场景。</p>
<h3 id="Overview-of-Python-Lists-and-Tuples"><a href="#Overview-of-Python-Lists-and-Tuples" class="headerlink" title="Overview of Python Lists and Tuples"></a>Overview of Python Lists and Tuples</h3><p>在python中经常被创建的数据类型就是列表(list)和元组(tuple)</p>
<p>相同点：都是存放有一定的顺序存放对象和值，这些值或对象可以是任何类型，包括None空类型</p>
<p>不同点：列表是可变的，即长度可以发生改变。元组不可发生改变，意味着一旦元组被创建的时候，其对象不能够被天剑或者删除，顺序也不会发生改变。</p>
<h4 id="Show-me-the-code"><a href="#Show-me-the-code" class="headerlink" title="Show me the code"></a>Show me the code</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#creating a python list or tuple</span></span><br><span class="line">lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="string">'three'</span>]</span><br><span class="line">tup=(<span class="number">1</span>,<span class="number">2</span>,<span class="string">'three'</span>)</span><br><span class="line"></span><br><span class="line">print(lst)</span><br><span class="line">print(tup)</span><br><span class="line"></span><br><span class="line"><span class="comment">#to create a tuple with only one value,add a trailing comma to the value</span></span><br><span class="line">tup2=<span class="number">0</span>,</span><br><span class="line">print(tup2)</span><br><span class="line"><span class="comment">#the below code will not do the work with a tuple only one value</span></span><br><span class="line">tup3=(<span class="number">0</span>)</span><br><span class="line">print(tup3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Get python list or tuple values</span></span><br><span class="line">print(lst[<span class="number">0</span>])</span><br><span class="line">print(lst[<span class="number">-1</span>])</span><br><span class="line">print(tup[<span class="number">0</span>])</span><br><span class="line">print(tup[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Slicing python lists and tuples</span></span><br><span class="line">print(lst[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">print(tup[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#assiging a python list value by index</span></span><br><span class="line">lst[<span class="number">0</span>]=<span class="string">'ONE'</span></span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># error 'tuple' object does not support item assignment</span></span><br><span class="line"><span class="comment"># tup[0]='ONE'</span></span><br><span class="line"><span class="comment"># print(tup)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#adding to a python list</span></span><br><span class="line">lst+=[<span class="literal">None</span>]</span><br><span class="line">print(lst)</span><br><span class="line">lst.append(<span class="number">5</span>)</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment">#the python del keyword for Lists</span></span><br><span class="line"><span class="keyword">del</span> lst[<span class="number">3</span>]</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> lst[<span class="number">2</span>:]</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment">#the concatenation works in tuple</span></span><br><span class="line">tup+=(<span class="number">4</span>,)</span><br><span class="line">print(tup)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">结果</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="string">'three'</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'three'</span>)</span><br><span class="line">(<span class="number">0</span>,)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">three</span><br><span class="line"><span class="number">1</span></span><br><span class="line">three</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">(<span class="number">2</span>, <span class="string">'three'</span>)</span><br><span class="line">[<span class="string">'ONE'</span>, <span class="number">2</span>, <span class="string">'three'</span>]</span><br><span class="line">[<span class="string">'ONE'</span>, <span class="number">2</span>, <span class="string">'three'</span>, <span class="literal">None</span>]</span><br><span class="line">[<span class="string">'ONE'</span>, <span class="number">2</span>, <span class="string">'three'</span>, <span class="literal">None</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="string">'ONE'</span>, <span class="number">2</span>, <span class="string">'three'</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="string">'ONE'</span>, <span class="number">2</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'three'</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>我们来一个一个分析</p>
<ol>
<li>创建list和tuple通过 []又或者可以通过调用list()函数 lst=list([1,2,’three’])，同样tuple可以通过()又或者可以通过tup=tuple((1,2,’three’))</li>
<li>通过索引访问list和tuple的值，并且还支持负索引</li>
<li>list和tuple支持切片操作</li>
<li>通过索引分配值给list以及、通过del函数可以对list删除、通过+添加list</li>
<li>tuple只支持+，但是这里特别注意，这里是<strong>重新开辟一块内存</strong>，创建新的元祖</li>
</ol>
<p>补充点别的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">tup=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(list(tup))</span><br><span class="line">print(tuple(lst))</span><br><span class="line">---</span><br><span class="line">结果</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">#lst和tup可以通过函数相互转换</span></span><br><span class="line"></span><br><span class="line">lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">tup=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(lst.count(<span class="number">3</span>))</span><br><span class="line">print(tup.count(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">print(lst.index(<span class="number">3</span>))</span><br><span class="line">print(tup.index(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">lst.reverse()</span><br><span class="line">print(lst)</span><br><span class="line">lst.sort()</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment">#error tuple object has no attribute reverse</span></span><br><span class="line"><span class="comment"># print(tup.reverse())</span></span><br><span class="line"><span class="comment"># print(tup.sort())</span></span><br><span class="line"></span><br><span class="line">print(list(reversed(tup)))</span><br><span class="line">print(sorted(tup))</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">结果</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p>分析一下</p>
<ol>
<li>count(item)统计列表/元组中Item出现的次数</li>
<li>index(item)统计列表/元组中item第一次出现的索引</li>
<li>list.reverse()和list.sort()分别表示原地倒转列表和排序(注意1.返回值是None,如果使用print(list.reverse()) 2.元组没有内置这两个函数，会报错)</li>
<li>reversed()和sorted()同样表示对列表/元组进行倒叙和排序，但是会返回一个结果</li>
</ol>
<h4 id="深入性能"><a href="#深入性能" class="headerlink" title="深入性能"></a>深入性能</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">tup=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(lst.__sizeof__())</span><br><span class="line"><span class="number">64</span></span><br><span class="line">print(tup.__sizeof__())</span><br><span class="line"><span class="number">48</span></span><br></pre></td></tr></table></figure>

<p>分析一下：</p>
<p>列表虽然跟元组存储一样多的元素个数，但是却比元组多16字节，这是因为列表是动态的，它需要存储一个指针，用来指向对应的元素(int型 8字节),而且因为其长度时可变的，需要额外的存储已经分配的长度(8字节)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=[]</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">40</span></span><br><span class="line">l.append(<span class="number">1</span>)</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">72</span></span><br><span class="line">l.append(<span class="number">2</span>)</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">72</span></span><br><span class="line">l.append(<span class="number">3</span>)</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">72</span></span><br><span class="line">l.append(<span class="number">4</span>)</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">72</span></span><br><span class="line">l.append(<span class="number">5</span>)</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">104</span></span><br></pre></td></tr></table></figure>

<p>通过运行结果，我们可以看到，list为了减少每次增加/删减的性能开销，每次都会额外分配一些空间(这个跟java的hashmap有点像)</p>
<p>这里还有一点注意的是</p>
<p>前面lst=[1,2,3]是直接初始化，所以只会分配3个元素的空间</p>
<p>而不断通过append实际上分配了4个元素空间 l=[]…</p>
<h4 id="两者的使用场景"><a href="#两者的使用场景" class="headerlink" title="两者的使用场景"></a>两者的使用场景</h4><ol>
<li>如果存储的数据和数量不变，比如地点的经纬度，选择元组更合适</li>
<li>如果数据或者数量是可变的，比如社交平台的日志功能，那么选择列表更合适</li>
</ol>
<h3 id="Overview-of-Python-Dictionaries-and-sets"><a href="#Overview-of-Python-Dictionaries-and-sets" class="headerlink" title="Overview of Python Dictionaries and sets"></a>Overview of Python Dictionaries and sets</h3><p>字典其实就是一组通过键值对存储的数据(其中在python3.7后，这些顺序是有序的，否则是没有顺序的)，并且可以随意删除数据，增加数据，访问数据(时间复杂度都可以在常数时间内)。其长度大小可变。</p>
<p>注意：the map key,which can be any immutable type,to values,which can be any type,just like the values of a list or tuple.键不能是可变的数据类型，值可以是任意类型</p>
<p>集合相对于字典来讲，就是存储的数据不是以键值对，而是只有值。其他性能基本相同</p>
<h4 id="show-me-the-code"><a href="#show-me-the-code" class="headerlink" title="show me the code"></a>show me the code</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d1=&#123;<span class="string">'name'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">20</span>,<span class="string">'gender'</span>:<span class="string">'male'</span>&#125;</span><br><span class="line">d2=dict(&#123;<span class="string">'name'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">20</span>,<span class="string">'gender'</span>:<span class="string">'male'</span>&#125;)</span><br><span class="line">d3=dict([(<span class="string">'name'</span>,<span class="string">'jason'</span>),(<span class="string">'age'</span>,<span class="number">20</span>),(<span class="string">'gender'</span>,<span class="string">'male'</span>)])</span><br><span class="line">d4=dict(name=<span class="string">'jason'</span>,age=<span class="number">20</span>,gender=<span class="string">'male'</span>)</span><br><span class="line">print(d1==d2==d3==d4)</span><br><span class="line"></span><br><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(s1==s2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#字典操作</span></span><br><span class="line">print(d1)</span><br><span class="line">print(d1[<span class="string">'name'</span>])</span><br><span class="line">print(d1.get(<span class="string">'location'</span>,<span class="string">'null'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#集合访问</span></span><br><span class="line">print(<span class="number">1</span> <span class="keyword">in</span> s1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#增删改</span></span><br><span class="line">d1[<span class="string">'location'</span>]=<span class="string">'shanghai'</span></span><br><span class="line">d1[<span class="string">'name'</span>]=<span class="string">'xu'</span></span><br><span class="line">d1.pop(<span class="string">'age'</span>)</span><br><span class="line"></span><br><span class="line">print(d1)</span><br><span class="line"></span><br><span class="line">s1.add(<span class="number">4</span>)</span><br><span class="line">s1.remove(<span class="number">1</span>)</span><br><span class="line">print(s1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#copy</span></span><br><span class="line">d4=d1</span><br><span class="line">d5=d1.copy()</span><br><span class="line"></span><br><span class="line">d5[<span class="string">'name'</span>]=<span class="string">'Jin'</span></span><br><span class="line">print(d5)</span><br><span class="line">print(d1)</span><br><span class="line"></span><br><span class="line">d4[<span class="string">'name'</span>]=<span class="string">'Jin'</span></span><br><span class="line">print(d4)</span><br><span class="line">print(d1)</span><br></pre></td></tr></table></figure>

<p>分析一下：</p>
<ol>
<li><p>创建字典，总共有四种方法，第一种就是直接使用{‘key’:value}其中用,隔开。后面三种调用dict()函数，dict(mapping)相当于传入一个mapping，dict(iterable)它的初始化过程是 for k,v in iterable: d[k]=v,所以传入的格式[(‘key’,value)],最后一种就是通过key=’value’ 创建集合的方法有两种{value}以及set([value])</p>
</li>
<li><p>字典的增删改查分别通过 d[‘key’]=value,d.pop(‘key’),d[‘key’]=newvalue,d[‘key’]或者d.get(‘key’,default)或者 value in dict</p>
</li>
<li><p>集合的增删改查 s.add(value),s.remove(value),没有该操作,value in s</p>
</li>
<li><p>字典的copy，如果直接用“=”实际上这两个引用都会直接指向同一个地址，当其中任意一个发生改变，就会引起其中另外一个发生改变。如果使用copy()函数，这两个指向不同的地址，不会发生冲突</p>
<h4 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h4><p>字典其实是一个hash表，所以其性能非常高，如果在不发生冲突的情况下。 </p>
</li>
</ol>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>本文对python的四种数据类型进行讨论分别是列表list,元组tuple,字典dict，集合set</p>
<p>总结一下:</p>
<p>列表list,通过[]表示，可以存储各种各样的数据类型，然后有顺序，其长度可以发生改变，并且任意删除，增加，访问。</p>
<p>元组tuple，通过()表示，可以存储各种各样的数据类型，有顺序，其长度不可发生改变，可以任意访问，增加通过+会创建一个新的元组</p>
<p>字典dict，通过{}表示，存储键值对，长度可以改变，可以通过hash的访问，任意删除，增加，修改</p>
<p>集合set，通过{},相对于字典存储值，长度可变，访问不可通过索引，只能通过in，可以添加add(),可以删除remove()</p>
]]></content>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>python自定义函数与面向对象</title>
    <url>/2019-06-23-python%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>python的最大特点就是dynamically typed就是动态类型，不像java需要定义数据类型</p>
<h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>先从一段代码引入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog=Dog(<span class="string">'name'</span>,<span class="number">16</span>)</span><br><span class="line">print(dog.getName())</span><br></pre></td></tr></table></figure>

<p>别急，我们先学习下py的函数，这个形式跟C以及java等语言有点不一样。跨度有点大，对于刚接触来说，我们需要对比一下。</p>
<h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>先来看一个例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">(message)</span>:</span></span><br><span class="line">    print(<span class="string">'Got a messag: &#123;&#125;'</span>.format(message))</span><br><span class="line"></span><br><span class="line">my_func(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="comment">#这里其实我有个地方不是很懂，不过大约能够知道什么意思，就是&#123;&#125;用来占位，记得在java中log常常这么用</span></span><br></pre></td></tr></table></figure>

<p>大致形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数)</span>:</span></span><br><span class="line">    处理</span><br><span class="line">    <span class="keyword">return</span>/yeild</span><br></pre></td></tr></table></figure>

<blockquote>
<p>与其他语言不一样的是，def是可执行语句，即函数被调用前，都是不存在的，直到被调用的时候才会创建一个新的函数对象，并赋予其名字</p>
</blockquote>
<p>对于以上这段话不理解的我们需要对比以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="comment">#报错，在主程序里，函数要先于调用前的定义</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">()</span>:</span></span><br><span class="line">    hello()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">my_func()</span><br><span class="line"><span class="comment">#正常运行，因为def是可执行语句，在调用的时候都不存在，但是我们必须保证调用前都已经声明定义了</span></span><br></pre></td></tr></table></figure>

<p>注：我们先有个全局的概念，然后我们在看一下细节</p>
<p>我们深入来看一个代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">(l)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(l,list):</span><br><span class="line">        print(<span class="string">'what you input is not a list'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> len(l)==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'waht you input is empty'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    largest=l[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">        <span class="keyword">if</span> item&gt;largest:</span><br><span class="line">            largest=item</span><br><span class="line">    print(<span class="string">'the largest item in l is &#123;&#125;'</span>.format(largest))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">my_func([<span class="number">8</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>看到这个我真的哭了，这里的多态完全跟java不同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    print(a+b)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">my_sum(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">my_sum([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">my_sum(<span class="string">'hello'</span>,<span class="string">'world'</span>)</span><br><span class="line"><span class="comment">#对于这种来什么就接受什么的函数，必要时需要在前面进行类型检查</span></span><br></pre></td></tr></table></figure>

<h4 id="函数变量的作用域"><a href="#函数变量的作用域" class="headerlink" title="函数变量的作用域"></a>函数变量的作用域</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MAX_VALUE=<span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> MAX_VALUE</span><br><span class="line">    MAX_VALUE=value</span><br><span class="line">    print(MAX_VALUE)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(value)</span>:</span></span><br><span class="line">    MAX_VALUE=value</span><br><span class="line">    print(MAX_VALUE)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test3</span><span class="params">()</span>:</span></span><br><span class="line">    print(MAX_VALUE)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">test3()</span><br><span class="line">test2(<span class="number">1</span>)</span><br><span class="line">test3()</span><br><span class="line">test1(<span class="number">1</span>)</span><br><span class="line">test3()</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>分析一下：</p>
<ol>
<li>函数内部默认为局部变量，即当函数调用结束后(return)，该变量会被收回，并且不能够被访问</li>
<li>Python的全局变量定义在主程序中</li>
<li>函数可以调用全局变量，如果用更改全局变量的时候需要 global关键字，这里并不是重新创建一个新的变量，而是告诉Python 解释器，这里的变量就是之前定义的全局变量</li>
<li>如果函数内部的变量名与主程序的变量名重名，那么局部变量将覆盖全局变量</li>
</ol>
<p>现在我们基本上了解了python的函数基本规则，我们回到类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog=Dog(<span class="string">'name'</span>,<span class="number">16</span>)</span><br><span class="line">print(dog.getName())</span><br></pre></td></tr></table></figure>

<p>在这里我们对比java的dog类如何去定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    Dog(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String...ags)</span></span>&#123;</span><br><span class="line">        Dog dog=<span class="keyword">new</span> Dog(<span class="string">"name"</span>,<span class="number">16</span>);</span><br><span class="line">        System.out.println(dog.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这两段代码执行的效果是一样的。</p>
<p>区别：</p>
<ol>
<li><p>python不需要提前声明的类的属性，因为不要指明属性的数据类型</p>
</li>
<li><p>Python的构造函数不是以类名，虽然调用的时候是以类名，说明在声明定义该类的对象的时候，会自动调用Init函数</p>
</li>
<li><p>注意到python的每个函数里面都有一个变量self，但是在调用的时候又不需要传入该参数，你可以看到这个self的作用跟this的作用差不多，只不过在python中必须使用这个self,在每一个类的方法中，self总是指向当前的实例，在init函数中self指向的最新被创建的对象，在其他函数中，指向调用该方法的对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.__name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.__sex=<span class="string">'boy'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog=Dog(<span class="string">'name'</span>,<span class="number">16</span>)</span><br><span class="line">dog.__name=<span class="string">'Name'</span></span><br><span class="line">print(dog.__name)</span><br><span class="line">print(dog.getName())</span><br><span class="line">print(dog.__sex)</span><br></pre></td></tr></table></figure>

<p>注：在一次被python的数据定义给坑了</p>
<p>首先我们注意到java里面数据是由private属性的，那么在python中默认以两个下划线表示该属性为私有属性，不可被对象之间调用</p>
<p>但是如果dog.__name记住这里的name属性不是该类的属性，而是你给dog这个变量重新定义的一个，与类里定义的不同</p>
<p>接着我们深入了解面向对象里面的细节，先来看一下下面这段代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    MAX_AGE=<span class="number">16</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newName</span><span class="params">(cls,name)</span>:</span></span><br><span class="line">        cls.name=name</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_MAX_AGE</span><span class="params">(age)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> age&lt;Dog.MAX_AGE:</span><br><span class="line">            print(<span class="string">"the dog age is &#123;&#125;"</span>.format(age))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'the maxage is &#123;&#125;'</span>.format(Dog.MAX_AGE))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">dog=Dog(<span class="string">'NAME'</span>,<span class="number">14</span>)</span><br><span class="line">print(dog.getName())</span><br><span class="line">dog.newName(<span class="string">'name'</span>)</span><br><span class="line">print(dog.getName())</span><br><span class="line">dog.get_MAX_AGE(<span class="number">16</span>)</span><br></pre></td></tr></table></figure>

<ol>
<li>第一个MAX_AGE是类中定义的常量，可以通过self.MAX_AGE或者Entity.MAX_AGE调用</li>
<li>注意到 @classmethod和@staticmethod 我们已经将类中的函数区别开来了，首先是classmethod类函数，能够动态访问或者修改对象的属性，其第一个参数一般为cls，最常用的功能是实现不用的init构造函数(好吧，上述代码不具有参考意义) ，@staticmehod是静态函数，可以用来做一些简单独立的任务，像什么测试等等，最后就是成员函数，是最正常的函数，不需要任何声明，第一个self代表当前对象的引用</li>
</ol>
<h4 id="写到最后"><a href="#写到最后" class="headerlink" title="写到最后"></a>写到最后</h4><p>这样，已经大致的会写python的类了，但是面向对象里面还有个重要的思想就是继承。不过这个留到后面来深入。当前我的目标就是对python基础有个全貌的了解。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>python的字符串</title>
    <url>/2019-06-23-python%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要对python的字符串操作进行探讨与分析</p>
<h4 id="字符串基础"><a href="#字符串基础" class="headerlink" title="字符串基础"></a>字符串基础</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">'jason'</span></span><br><span class="line">city=<span class="string">'''shanghai'''</span></span><br><span class="line">text=<span class="string">"welcome to shanghai"</span></span><br><span class="line">print(name)</span><br><span class="line">print(city)</span><br><span class="line">print(text)</span><br></pre></td></tr></table></figure>

<p>python的字符串通常包含在单引号，双引号以及三引号中</p>
<h4 id="字符串的常用操作"><a href="#字符串的常用操作" class="headerlink" title="字符串的常用操作"></a>字符串的常用操作</h4><p>可以将字符串想象成由单个字符组成的数组，即python的字符串支持索引，切片和遍历等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">"XuXiaoJin"</span></span><br><span class="line">print(name[<span class="number">0</span>])</span><br><span class="line">print(name[<span class="number">1</span>:<span class="number">2</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p>其中特别要注意的就是python的字符串是不可变的(immutable)这一点跟元组有点类似</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">"XuXiaoJin"</span></span><br><span class="line">name[<span class="number">0</span>]=<span class="string">'j'</span></span><br><span class="line"><span class="comment">#报错，'str' object does not support item assignment</span></span><br></pre></td></tr></table></figure>

<p>所以跟元组类似，如果要改变python的字符串，只能通过创建新的字符串来完成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">"XuXiaoJin"</span></span><br><span class="line">a=<span class="string">'j'</span>+name[<span class="number">1</span>:]</span><br><span class="line">print(a)</span><br><span class="line">b=name.replace(<span class="string">'X'</span>,<span class="string">'j'</span>)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<p>接着我们来看+=操作符的字符串拼接方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">firstname=<span class="string">'Xu'</span></span><br><span class="line">secondename=<span class="string">'Xiao'</span></span><br><span class="line">thirdname=<span class="string">'Jin'</span></span><br><span class="line">firstname+=<span class="string">' '</span>+secondename+<span class="string">" "</span>+thirdname</span><br><span class="line">print(firstname)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在拼接的时候，python解释器首先会检测是否还有其他引用，如果没有的话会在原地扩充字符串buffer的大小(后面要跟stringBuild联系起来)</span></span><br></pre></td></tr></table></figure>

<p>我们再看一下字符串的分割函数split(separator),表示把字符串分割成子字符串，并且返回一个分割后的字符串组合的里列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=firstname.split(<span class="string">" "</span>) <span class="comment">#以空格分隔</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> a:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure>

<p>还需要看一下字符串处理的操作</p>
<ul>
<li>string.strip(str),去掉<strong>首尾</strong>的str字符串</li>
<li>string.lstrip(str),去掉<strong>开头</strong>的str字符串</li>
<li>string.rstrip(str)去掉<strong>尾部</strong>的str字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">firstname=<span class="string">' Xu'</span></span><br><span class="line">secondename=<span class="string">'Xiao'</span></span><br><span class="line">thirdname=<span class="string">'Jin '</span></span><br><span class="line">firstname+=<span class="string">' '</span>+secondename+<span class="string">" "</span>+thirdname</span><br><span class="line">a=firstname.strip(<span class="string">' '</span>)</span><br><span class="line">b=firstname.lstrip(<span class="string">' '</span>)</span><br><span class="line">c=firstname.rstrip(<span class="string">' '</span>)</span><br><span class="line">print(firstname)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br><span class="line"><span class="comment">#用来去掉空格很有效果，验证密码什么的</span></span><br></pre></td></tr></table></figure>

<h4 id="字符串的格式化"><a href="#字符串的格式化" class="headerlink" title="字符串的格式化"></a>字符串的格式化</h4><p>先来看一个例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=[(<span class="number">1</span>,<span class="string">'xujin'</span>)]</span><br><span class="line"><span class="keyword">for</span> id,name <span class="keyword">in</span> l:</span><br><span class="line">    print(<span class="string">'the id:&#123;&#125;,name:&#123;&#125;'</span>.format(id,name))</span><br></pre></td></tr></table></figure>

<p>这里的string.format()就是**格式化函数，而{}就是格式符，用来为后面的真实值预留位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=[(<span class="number">1</span>,<span class="string">'xujin'</span>)]</span><br><span class="line"><span class="keyword">for</span> id,name <span class="keyword">in</span> l:</span><br><span class="line">    print(<span class="string">'the id: %s,name: %s'</span>%(id,name))</span><br></pre></td></tr></table></figure>

<p>这个是之前python版本处理相通功能的做法，当然我更喜欢用{}因为这样看起来比较规范</p>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>这篇文章主要讨论了python的字符串，总结一下</p>
<ol>
<li>python的字符串三种表现形式</li>
<li>python字符串的操作，索引，切片，遍历，拼接，分割，处理</li>
<li>python的字符的格式化，用来处理一些日志</li>
<li>python的字符串是不可变的与元组相同</li>
</ol>
<p>好了~可以滚去复习了，考试周来了！</p>
]]></content>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>python的字符串</title>
    <url>/2019-06-23-python%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要对python的字符串操作进行探讨与分析</p>
<h4 id="字符串基础"><a href="#字符串基础" class="headerlink" title="字符串基础"></a>字符串基础</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">'jason'</span></span><br><span class="line">city=<span class="string">'''shanghai'''</span></span><br><span class="line">text=<span class="string">"welcome to shanghai"</span></span><br><span class="line">print(name)</span><br><span class="line">print(city)</span><br><span class="line">print(text)</span><br></pre></td></tr></table></figure>

<p>python的字符串通常包含在单引号，双引号以及三引号中</p>
<h4 id="字符串的常用操作"><a href="#字符串的常用操作" class="headerlink" title="字符串的常用操作"></a>字符串的常用操作</h4><p>可以将字符串想象成由单个字符组成的数组，即python的字符串支持索引，切片和遍历等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">"XuXiaoJin"</span></span><br><span class="line">print(name[<span class="number">0</span>])</span><br><span class="line">print(name[<span class="number">1</span>:<span class="number">2</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p>其中特别要注意的就是python的字符串是不可变的(immutable)这一点跟元组有点类似</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">"XuXiaoJin"</span></span><br><span class="line">name[<span class="number">0</span>]=<span class="string">'j'</span></span><br><span class="line"><span class="comment">#报错，'str' object does not support item assignment</span></span><br></pre></td></tr></table></figure>

<p>所以跟元组类似，如果要改变python的字符串，只能通过创建新的字符串来完成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">"XuXiaoJin"</span></span><br><span class="line">a=<span class="string">'j'</span>+name[<span class="number">1</span>:]</span><br><span class="line">print(a)</span><br><span class="line">b=name.replace(<span class="string">'X'</span>,<span class="string">'j'</span>)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<p>接着我们来看+=操作符的字符串拼接方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">firstname=<span class="string">'Xu'</span></span><br><span class="line">secondename=<span class="string">'Xiao'</span></span><br><span class="line">thirdname=<span class="string">'Jin'</span></span><br><span class="line">firstname+=<span class="string">' '</span>+secondename+<span class="string">" "</span>+thirdname</span><br><span class="line">print(firstname)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在拼接的时候，python解释器首先会检测是否还有其他引用，如果没有的话会在原地扩充字符串buffer的大小(后面要跟stringBuild联系起来)</span></span><br></pre></td></tr></table></figure>

<p>我们再看一下字符串的分割函数split(separator),表示把字符串分割成子字符串，并且返回一个分割后的字符串组合的里列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=firstname.split(<span class="string">" "</span>) <span class="comment">#以空格分隔</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> a:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure>

<p>还需要看一下字符串处理的操作</p>
<ul>
<li>string.strip(str),去掉<strong>首尾</strong>的str字符串</li>
<li>string.lstrip(str),去掉<strong>开头</strong>的str字符串</li>
<li>string.rstrip(str)去掉<strong>尾部</strong>的str字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">firstname=<span class="string">' Xu'</span></span><br><span class="line">secondename=<span class="string">'Xiao'</span></span><br><span class="line">thirdname=<span class="string">'Jin '</span></span><br><span class="line">firstname+=<span class="string">' '</span>+secondename+<span class="string">" "</span>+thirdname</span><br><span class="line">a=firstname.strip(<span class="string">' '</span>)</span><br><span class="line">b=firstname.lstrip(<span class="string">' '</span>)</span><br><span class="line">c=firstname.rstrip(<span class="string">' '</span>)</span><br><span class="line">print(firstname)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br><span class="line"><span class="comment">#用来去掉空格很有效果，验证密码什么的</span></span><br></pre></td></tr></table></figure>

<h4 id="字符串的格式化"><a href="#字符串的格式化" class="headerlink" title="字符串的格式化"></a>字符串的格式化</h4><p>先来看一个例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=[(<span class="number">1</span>,<span class="string">'xujin'</span>)]</span><br><span class="line"><span class="keyword">for</span> id,name <span class="keyword">in</span> l:</span><br><span class="line">    print(<span class="string">'the id:&#123;&#125;,name:&#123;&#125;'</span>.format(id,name))</span><br></pre></td></tr></table></figure>

<p>这里的string.format()就是**格式化函数，而{}就是格式符，用来为后面的真实值预留位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=[(<span class="number">1</span>,<span class="string">'xujin'</span>)]</span><br><span class="line"><span class="keyword">for</span> id,name <span class="keyword">in</span> l:</span><br><span class="line">    print(<span class="string">'the id: %s,name: %s'</span>%(id,name))</span><br></pre></td></tr></table></figure>

<p>这个是之前python版本处理相通功能的做法，当然我更喜欢用{}因为这样看起来比较规范</p>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>这篇文章主要讨论了python的字符串，总结一下</p>
<ol>
<li>python的字符串三种表现形式</li>
<li>python字符串的操作，索引，切片，遍历，拼接，分割，处理</li>
<li>python的字符的格式化，用来处理一些日志</li>
<li>python的字符串是不可变的与元组相同</li>
</ol>
<p>好了~可以滚去复习了，考试周来了！</p>
]]></content>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>递归函数的时间复杂度分析方法</title>
    <url>/2019-06-22-%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<p>##前言</p>
<p>递归函数的时间复杂度[Master theorem]</p>
<h3 id="几个例子"><a href="#几个例子" class="headerlink" title="几个例子"></a>几个例子</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sum</span><span class="params">(n <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n+Sum(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析一下：</p>
<ul>
<li>Sum(1)的时间复杂度为 T(1)=k1</li>
<li>如果n&gt;1，这个时间复杂度会变成 T(n)=k2+T(n-1).当然我们这里考虑的n都很大，所以我们可以把K1=K2=1</li>
</ul>
<blockquote>
<p>T(n)=1+T(n-1)=2+T(n-2)=…..=n-1+T(1)=O(n)</p>
</blockquote>
<p>通过上面递推公式，我们可以得到该时间复杂度为<strong>O(n)</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Find</span><span class="params">(a []<span class="keyword">int</span>,x <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> <span class="built_in">len</span>(a) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> x &lt;= a[<span class="number">0</span>] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    mid := <span class="number">1</span> + (<span class="built_in">len</span>(a)<span class="number">-1</span>)/<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> x &lt;= a[mid<span class="number">-1</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> Find(a[:mid], x)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mid + Find(a[mid:], x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该函数的作用是二分查找</span></span><br></pre></td></tr></table></figure>

<p>分析一下：</p>
<ul>
<li>T(1)=1</li>
<li>T(n)=1+T(n/2)</li>
</ul>
<blockquote>
<p>T(n)=1+T(n/2)=2+T(n/4)=3+T(n/8)=….=k+T(n/2^k)=logn+T(n/2^logn)=logn+T(1)=logn+1=O(logn)</p>
</blockquote>
<p>通过上面的递推公式我们可以得到时间复杂度为<strong>O(logn)</strong></p>
<p>###Master theorem</p>
<p>首先递归函数都具有一下的形式</p>
<blockquote>
<p>T(n)=aT(n/b)+f(n)</p>
<p>//例如 二分查找 T(n)=1*T(n/2)+1</p>
</blockquote>
<p>Master theorem公式表示</p>
<p>if f(n)=O(n^d) where d&gt;=0,then</p>
<ul>
<li>T(n)=O(n^d)  if a&lt;b^d</li>
<li>T(n)=O(n^dlogn) if a=b^d</li>
<li>T(n)=O(nlogb(a)) if a&gt;b^d</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>看到文章我想着有这个公式好像可以解决很多问题了，不过呢，当我深入读下去的时候。我觉得公式反而不是重要的，推这个时间复杂度的过程真的很有思考的意味，用递推公式最终得到时间复杂度。</p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>时间复杂度</tag>
      </tags>
  </entry>
  <entry>
    <title>递归函数的时间复杂度分析方法</title>
    <url>/2019-06-22-%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>##前言</p>
<p>递归函数的时间复杂度[Master theorem]</p>
<h3 id="几个例子"><a href="#几个例子" class="headerlink" title="几个例子"></a>几个例子</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sum</span><span class="params">(n <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n+Sum(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析一下：</p>
<ul>
<li>Sum(1)的时间复杂度为 T(1)=k1</li>
<li>如果n&gt;1，这个时间复杂度会变成 T(n)=k2+T(n-1).当然我们这里考虑的n都很大，所以我们可以把K1=K2=1</li>
</ul>
<blockquote>
<p>T(n)=1+T(n-1)=2+T(n-2)=…..=n-1+T(1)=O(n)</p>
</blockquote>
<p>通过上面递推公式，我们可以得到该时间复杂度为<strong>O(n)</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Find</span><span class="params">(a []<span class="keyword">int</span>,x <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> <span class="built_in">len</span>(a) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> x &lt;= a[<span class="number">0</span>] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    mid := <span class="number">1</span> + (<span class="built_in">len</span>(a)<span class="number">-1</span>)/<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> x &lt;= a[mid<span class="number">-1</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> Find(a[:mid], x)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mid + Find(a[mid:], x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该函数的作用是二分查找</span></span><br></pre></td></tr></table></figure>

<p>分析一下：</p>
<ul>
<li>T(1)=1</li>
<li>T(n)=1+T(n/2)</li>
</ul>
<blockquote>
<p>T(n)=1+T(n/2)=2+T(n/4)=3+T(n/8)=….=k+T(n/2^k)=logn+T(n/2^logn)=logn+T(1)=logn+1=O(logn)</p>
</blockquote>
<p>通过上面的递推公式我们可以得到时间复杂度为<strong>O(logn)</strong></p>
<p>###Master theorem</p>
<p>首先递归函数都具有一下的形式</p>
<blockquote>
<p>T(n)=aT(n/b)+f(n)</p>
<p>//例如 二分查找 T(n)=1*T(n/2)+1</p>
</blockquote>
<p>Master theorem公式表示</p>
<p>if f(n)=O(n^d) where d&gt;=0,then</p>
<ul>
<li>T(n)=O(n^d)  if a&lt;b^d</li>
<li>T(n)=O(n^dlogn) if a=b^d</li>
<li>T(n)=O(nlogb(a)) if a&gt;b^d</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>看到文章我想着有这个公式好像可以解决很多问题了，不过呢，当我深入读下去的时候。我觉得公式反而不是重要的，推这个时间复杂度的过程真的很有思考的意味，用递推公式最终得到时间复杂度。</p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>时间复杂度</tag>
      </tags>
  </entry>
  <entry>
    <title>图系列二</title>
    <url>/2019-06-21-%E5%9B%BE%E7%B3%BB%E5%88%97%E4%BA%8C/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里主要是一些关于图(2)的算法，其的核心代码以及全部代码。</p>
<p>使用语言C++</p>
<h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><p>####Prim核心代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minKey</span><span class="params">(<span class="keyword">int</span> key[V],<span class="keyword">bool</span> MSTset[V])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=INT_MAX,min_index;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(MSTset[i]==<span class="literal">false</span>&amp;&amp;key[i]&lt;<span class="built_in">min</span>)&#123;</span><br><span class="line">            <span class="built_in">min</span>=key[i],min_index=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min_index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">primMST</span><span class="params">(<span class="keyword">int</span> gaph[V][V])</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> count=<span class="number">0</span>;count&lt;V<span class="number">-1</span>;count++)&#123;</span><br><span class="line">            <span class="keyword">int</span> u=minKey(key,MSTset);</span><br><span class="line">            MSTset[u]=<span class="literal">true</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(graph[u][i]&amp;&amp;MSTset[i]==<span class="literal">false</span>&amp;&amp;graph[u][i]&lt;key[i])&#123;</span><br><span class="line">                    key[i]=graph[u][i];</span><br><span class="line">                    parent[i]=u;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="prim全部代码"><a href="#prim全部代码" class="headerlink" title="prim全部代码"></a>prim全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printMST</span><span class="params">(<span class="keyword">int</span> parent[], <span class="keyword">int</span> graph[V][V])</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Edge \tWeight\n"</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; V; i++)  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;parent[i]&lt;&lt;<span class="string">" - "</span>&lt;&lt;i&lt;&lt;<span class="string">" \t"</span>&lt;&lt;graph[i][parent[i]]&lt;&lt;<span class="string">" \n"</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minKey</span><span class="params">(<span class="keyword">int</span> key[V],<span class="keyword">bool</span> MSTset[V])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=INT_MAX,min_index;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(MSTset[i]==<span class="literal">false</span>&amp;&amp;key[i]&lt;<span class="built_in">min</span>)&#123;</span><br><span class="line">            <span class="built_in">min</span>=key[i];</span><br><span class="line">            min_index=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min_index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">primMST</span><span class="params">(<span class="keyword">int</span> graph[V][V])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> parent[V];</span><br><span class="line">    <span class="keyword">int</span> key[V];</span><br><span class="line">    <span class="keyword">bool</span> MSTset[V];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        key[i]=INT_MAX;</span><br><span class="line">        MSTset[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    key[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    parent[<span class="number">0</span>]=<span class="number">-1</span>; <span class="comment">//取根节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> count=<span class="number">0</span>;count&lt;V<span class="number">-1</span>;count++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=minKey(key,MSTset);</span><br><span class="line"></span><br><span class="line">        MSTset[u]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(graph[u][i]&amp;&amp;MSTset[i]==<span class="literal">false</span>&amp;&amp;graph[u][i]&lt;key[i])&#123;</span><br><span class="line">                key[i]=graph[u][i];</span><br><span class="line">                parent[i]=u;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printMST(parent, graph);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> graph[V][V] = &#123; </span><br><span class="line">                       &#123; <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span> &#125;,  </span><br><span class="line">                        &#123; <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span> &#125;,  </span><br><span class="line">                        &#123; <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span> &#125;,  </span><br><span class="line">                        &#123; <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span> &#125;,  </span><br><span class="line">                        &#123; <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">0</span> &#125; </span><br><span class="line">                       &#125;;  </span><br><span class="line">  </span><br><span class="line">    primMST(graph);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="kruskul核心代码"><a href="#kruskul核心代码" class="headerlink" title="kruskul核心代码"></a>kruskul核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><h4 id="dijkstra核心代码"><a href="#dijkstra核心代码" class="headerlink" title="dijkstra核心代码"></a>dijkstra核心代码</h4><p>今天脑子有点昏，还是怎么了，把这个算法想成了多源的最短路径</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跟prim算法有点像，其中不一样的地方就是在更新</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(graph[u][i]&amp;&amp;!sptSet[i]&amp;&amp;dist[u]!=INT_MAX&amp;&amp;graph[u][i]+dist[u]&lt;dist[i]&#123;</span><br><span class="line">        dist[i]=graph[u][i]+dist[u];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V 9 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(<span class="keyword">int</span> dist[V],<span class="keyword">bool</span> sptSet[V])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=INT_MAX,min_index;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sptSet[i]==<span class="literal">false</span>&amp;&amp;dist[i]&lt;<span class="built_in">min</span>)&#123;</span><br><span class="line">            <span class="built_in">min</span>=dist[i],min_index=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min_index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printSolution</span><span class="params">(<span class="keyword">int</span> dist[], <span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Vertex   Distance from Source\n"</span>); </span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++) </span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d tt %d\n"</span>, i, dist[i]); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> graph[V][V],<span class="keyword">int</span> src)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dist[V];</span><br><span class="line">    <span class="keyword">bool</span> sptSet[V];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        dist[i]=INT_MAX,sptSet[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dist[src]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> count=<span class="number">0</span>;count&lt;V<span class="number">-1</span>;count++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=minDistance(dist,sptSet);</span><br><span class="line"></span><br><span class="line">        sptSet[u]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(graph[u][i]&amp;&amp;!sptSet[i]&amp;&amp;dist[u]!=INT_MAX&amp;&amp;dist[u]+graph[u][i]&lt;dist[i])&#123;</span><br><span class="line">                dist[i]=dist[u]+graph[u][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printSolution(dist, V); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> graph[V][V] = &#123;</span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">4</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">8</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>&#125; </span><br><span class="line">                     &#125;; </span><br><span class="line">    dijkstra(graph,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="floyd核心代码"><a href="#floyd核心代码" class="headerlink" title="floyd核心代码"></a>floyd核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;V;k++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;V;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dist[i][k]+dist[k][j]&lt;dist[i][j])</span><br><span class="line">                dist[i][j]=dist[i][k]+dist[k][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="floyd全部代码"><a href="#floyd全部代码" class="headerlink" title="floyd全部代码"></a>floyd全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 99999  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSolution</span><span class="params">(<span class="keyword">int</span> dist[][V])</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"The following matrix shows the shortest distances"</span></span><br><span class="line">            <span class="string">" between every pair of vertices \n"</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; V; j++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (dist[i][j] == INF)  </span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"INF"</span>&lt;&lt;<span class="string">"   "</span>;  </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;dist[i][j]&lt;&lt;<span class="string">"  "</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">(<span class="keyword">int</span> graph[V][V])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dist[V][V];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;V;j++)&#123;</span><br><span class="line">            dist[i][j]=graph[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;V;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;V;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dist[i][k]+dist[k][j]&lt;dist[i][j])</span><br><span class="line">                 dist[i][j]=dist[i][k]+dist[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     printSolution(dist);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> graph[V][V] = &#123; &#123;<span class="number">0</span>, <span class="number">5</span>, INF, <span class="number">10</span>&#125;,  </span><br><span class="line">                        &#123;INF, <span class="number">0</span>, <span class="number">3</span>, INF&#125;,  </span><br><span class="line">                        &#123;INF, INF, <span class="number">0</span>, <span class="number">1</span>&#125;,  </span><br><span class="line">                        &#123;INF, INF, INF, <span class="number">0</span>&#125;  </span><br><span class="line">                    &#125;;  </span><br><span class="line"></span><br><span class="line">    floyd(graph);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><p>//原本的想法是通过度，用一个表存放度的表，然后更新这个表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">topologicalSort:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)</span><br><span class="line">    <span class="keyword">if</span>(!visited[i])</span><br><span class="line">        topologicalSortUtil(i,visited,<span class="built_in">stack</span>)</span><br><span class="line">        </span><br><span class="line">topologicalSortUtil:</span><br><span class="line">&#123;</span><br><span class="line">    visited[v]=<span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator i;</span><br><span class="line">    <span class="keyword">for</span>(i=adj[i].<span class="built_in">begin</span>();i!=adj.<span class="built_in">end</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[*i])</span><br><span class="line">            topologicalSortUtil(*i,visited,<span class="built_in">stack</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span>.push(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在核心代码里我们看不到度，但是其实用了栈和递归，通过这种方法的存储，使得v的邻接的点总是比v先入栈，然后利用栈的“先进后出”得到我们的拓扑排序序列</span></span><br></pre></td></tr></table></figure>

<h4 id="全部代码-1"><a href="#全部代码-1" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//topological</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> V;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; *adj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">topologicalSortUtil</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">bool</span> visited[],<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; &amp;<span class="built_in">stack</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> V);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">topologicalSort</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Graph::Graph(<span class="keyword">int</span> V)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;V=V;</span><br><span class="line">    adj=<span class="keyword">new</span> <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;[V];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Graph::addEdge</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    adj[v].push_back(w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Graph::topologicalSortUtil</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">bool</span> visited[],<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; &amp;<span class="built_in">stack</span>)</span></span>&#123;</span><br><span class="line">    visited[v]=<span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=adj[v].<span class="built_in">begin</span>();i!=adj[v].<span class="built_in">end</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[*i])</span><br><span class="line">            topologicalSortUtil(*i,visited,<span class="built_in">stack</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span>.push(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Graph::topologicalSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> *visited=<span class="keyword">new</span> <span class="keyword">bool</span>[V];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        visited[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visited[i]==<span class="literal">false</span>)</span><br><span class="line">            topologicalSortUtil(i,visited,<span class="built_in">stack</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">stack</span>.empty()==<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">stack</span>.top()&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">stack</span>.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">// Create a graph given in the above diagram </span></span><br><span class="line">    <span class="function">Graph <span class="title">g</span><span class="params">(<span class="number">6</span>)</span></span>; </span><br><span class="line">    g.addEdge(<span class="number">5</span>, <span class="number">2</span>); </span><br><span class="line">    g.addEdge(<span class="number">5</span>, <span class="number">0</span>); </span><br><span class="line">    g.addEdge(<span class="number">4</span>, <span class="number">0</span>); </span><br><span class="line">    g.addEdge(<span class="number">4</span>, <span class="number">1</span>); </span><br><span class="line">    g.addEdge(<span class="number">2</span>, <span class="number">3</span>); </span><br><span class="line">    g.addEdge(<span class="number">3</span>, <span class="number">1</span>); </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Following is a Topological Sort of the given graph \n"</span>; </span><br><span class="line">    g.topologicalSort(); </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>图系列二</title>
    <url>/2019-06-21-%E5%9B%BE%E7%B3%BB%E5%88%97%E4%BA%8C%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里主要是一些关于图(2)的算法，其的核心代码以及全部代码。</p>
<p>使用语言C++</p>
<h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><p>####Prim核心代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minKey</span><span class="params">(<span class="keyword">int</span> key[V],<span class="keyword">bool</span> MSTset[V])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=INT_MAX,min_index;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(MSTset[i]==<span class="literal">false</span>&amp;&amp;key[i]&lt;<span class="built_in">min</span>)&#123;</span><br><span class="line">            <span class="built_in">min</span>=key[i],min_index=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min_index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">primMST</span><span class="params">(<span class="keyword">int</span> gaph[V][V])</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> count=<span class="number">0</span>;count&lt;V<span class="number">-1</span>;count++)&#123;</span><br><span class="line">            <span class="keyword">int</span> u=minKey(key,MSTset);</span><br><span class="line">            MSTset[u]=<span class="literal">true</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(graph[u][i]&amp;&amp;MSTset[i]==<span class="literal">false</span>&amp;&amp;graph[u][i]&lt;key[i])&#123;</span><br><span class="line">                    key[i]=graph[u][i];</span><br><span class="line">                    parent[i]=u;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="prim全部代码"><a href="#prim全部代码" class="headerlink" title="prim全部代码"></a>prim全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printMST</span><span class="params">(<span class="keyword">int</span> parent[], <span class="keyword">int</span> graph[V][V])</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Edge \tWeight\n"</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; V; i++)  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;parent[i]&lt;&lt;<span class="string">" - "</span>&lt;&lt;i&lt;&lt;<span class="string">" \t"</span>&lt;&lt;graph[i][parent[i]]&lt;&lt;<span class="string">" \n"</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minKey</span><span class="params">(<span class="keyword">int</span> key[V],<span class="keyword">bool</span> MSTset[V])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=INT_MAX,min_index;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(MSTset[i]==<span class="literal">false</span>&amp;&amp;key[i]&lt;<span class="built_in">min</span>)&#123;</span><br><span class="line">            <span class="built_in">min</span>=key[i];</span><br><span class="line">            min_index=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min_index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">primMST</span><span class="params">(<span class="keyword">int</span> graph[V][V])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> parent[V];</span><br><span class="line">    <span class="keyword">int</span> key[V];</span><br><span class="line">    <span class="keyword">bool</span> MSTset[V];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        key[i]=INT_MAX;</span><br><span class="line">        MSTset[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    key[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    parent[<span class="number">0</span>]=<span class="number">-1</span>; <span class="comment">//取根节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> count=<span class="number">0</span>;count&lt;V<span class="number">-1</span>;count++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=minKey(key,MSTset);</span><br><span class="line"></span><br><span class="line">        MSTset[u]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(graph[u][i]&amp;&amp;MSTset[i]==<span class="literal">false</span>&amp;&amp;graph[u][i]&lt;key[i])&#123;</span><br><span class="line">                key[i]=graph[u][i];</span><br><span class="line">                parent[i]=u;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printMST(parent, graph);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> graph[V][V] = &#123; </span><br><span class="line">                       &#123; <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span> &#125;,  </span><br><span class="line">                        &#123; <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span> &#125;,  </span><br><span class="line">                        &#123; <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span> &#125;,  </span><br><span class="line">                        &#123; <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span> &#125;,  </span><br><span class="line">                        &#123; <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">0</span> &#125; </span><br><span class="line">                       &#125;;  </span><br><span class="line">  </span><br><span class="line">    primMST(graph);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="kruskul核心代码"><a href="#kruskul核心代码" class="headerlink" title="kruskul核心代码"></a>kruskul核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><h4 id="dijkstra核心代码"><a href="#dijkstra核心代码" class="headerlink" title="dijkstra核心代码"></a>dijkstra核心代码</h4><p>今天脑子有点昏，还是怎么了，把这个算法想成了多源的最短路径</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跟prim算法有点像，其中不一样的地方就是在更新</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(graph[u][i]&amp;&amp;!sptSet[i]&amp;&amp;dist[u]!=INT_MAX&amp;&amp;graph[u][i]+dist[u]&lt;dist[i]&#123;</span><br><span class="line">        dist[i]=graph[u][i]+dist[u];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V 9 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(<span class="keyword">int</span> dist[V],<span class="keyword">bool</span> sptSet[V])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=INT_MAX,min_index;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sptSet[i]==<span class="literal">false</span>&amp;&amp;dist[i]&lt;<span class="built_in">min</span>)&#123;</span><br><span class="line">            <span class="built_in">min</span>=dist[i],min_index=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min_index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printSolution</span><span class="params">(<span class="keyword">int</span> dist[], <span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Vertex   Distance from Source\n"</span>); </span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++) </span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d tt %d\n"</span>, i, dist[i]); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> graph[V][V],<span class="keyword">int</span> src)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dist[V];</span><br><span class="line">    <span class="keyword">bool</span> sptSet[V];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        dist[i]=INT_MAX,sptSet[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dist[src]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> count=<span class="number">0</span>;count&lt;V<span class="number">-1</span>;count++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=minDistance(dist,sptSet);</span><br><span class="line"></span><br><span class="line">        sptSet[u]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(graph[u][i]&amp;&amp;!sptSet[i]&amp;&amp;dist[u]!=INT_MAX&amp;&amp;dist[u]+graph[u][i]&lt;dist[i])&#123;</span><br><span class="line">                dist[i]=dist[u]+graph[u][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printSolution(dist, V); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> graph[V][V] = &#123;</span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">4</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">8</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>&#125; </span><br><span class="line">                     &#125;; </span><br><span class="line">    dijkstra(graph,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="floyd核心代码"><a href="#floyd核心代码" class="headerlink" title="floyd核心代码"></a>floyd核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;V;k++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;V;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dist[i][k]+dist[k][j]&lt;dist[i][j])</span><br><span class="line">                dist[i][j]=dist[i][k]+dist[k][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="floyd全部代码"><a href="#floyd全部代码" class="headerlink" title="floyd全部代码"></a>floyd全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 99999  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSolution</span><span class="params">(<span class="keyword">int</span> dist[][V])</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"The following matrix shows the shortest distances"</span></span><br><span class="line">            <span class="string">" between every pair of vertices \n"</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; V; j++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (dist[i][j] == INF)  </span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"INF"</span>&lt;&lt;<span class="string">"   "</span>;  </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;dist[i][j]&lt;&lt;<span class="string">"  "</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">(<span class="keyword">int</span> graph[V][V])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dist[V][V];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;V;j++)&#123;</span><br><span class="line">            dist[i][j]=graph[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;V;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;V;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dist[i][k]+dist[k][j]&lt;dist[i][j])</span><br><span class="line">                 dist[i][j]=dist[i][k]+dist[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     printSolution(dist);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> graph[V][V] = &#123; &#123;<span class="number">0</span>, <span class="number">5</span>, INF, <span class="number">10</span>&#125;,  </span><br><span class="line">                        &#123;INF, <span class="number">0</span>, <span class="number">3</span>, INF&#125;,  </span><br><span class="line">                        &#123;INF, INF, <span class="number">0</span>, <span class="number">1</span>&#125;,  </span><br><span class="line">                        &#123;INF, INF, INF, <span class="number">0</span>&#125;  </span><br><span class="line">                    &#125;;  </span><br><span class="line"></span><br><span class="line">    floyd(graph);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><p>//原本的想法是通过度，用一个表存放度的表，然后更新这个表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">topologicalSort:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)</span><br><span class="line">    <span class="keyword">if</span>(!visited[i])</span><br><span class="line">        topologicalSortUtil(i,visited,<span class="built_in">stack</span>)</span><br><span class="line">        </span><br><span class="line">topologicalSortUtil:</span><br><span class="line">&#123;</span><br><span class="line">    visited[v]=<span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator i;</span><br><span class="line">    <span class="keyword">for</span>(i=adj[i].<span class="built_in">begin</span>();i!=adj.<span class="built_in">end</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[*i])</span><br><span class="line">            topologicalSortUtil(*i,visited,<span class="built_in">stack</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span>.push(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在核心代码里我们看不到度，但是其实用了栈和递归，通过这种方法的存储，使得v的邻接的点总是比v先入栈，然后利用栈的“先进后出”得到我们的拓扑排序序列</span></span><br></pre></td></tr></table></figure>

<h4 id="全部代码-1"><a href="#全部代码-1" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//topological</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> V;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; *adj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">topologicalSortUtil</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">bool</span> visited[],<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; &amp;<span class="built_in">stack</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> V);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">topologicalSort</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Graph::Graph(<span class="keyword">int</span> V)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;V=V;</span><br><span class="line">    adj=<span class="keyword">new</span> <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;[V];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Graph::addEdge</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    adj[v].push_back(w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Graph::topologicalSortUtil</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">bool</span> visited[],<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; &amp;<span class="built_in">stack</span>)</span></span>&#123;</span><br><span class="line">    visited[v]=<span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=adj[v].<span class="built_in">begin</span>();i!=adj[v].<span class="built_in">end</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[*i])</span><br><span class="line">            topologicalSortUtil(*i,visited,<span class="built_in">stack</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span>.push(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Graph::topologicalSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> *visited=<span class="keyword">new</span> <span class="keyword">bool</span>[V];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        visited[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visited[i]==<span class="literal">false</span>)</span><br><span class="line">            topologicalSortUtil(i,visited,<span class="built_in">stack</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">stack</span>.empty()==<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">stack</span>.top()&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">stack</span>.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">// Create a graph given in the above diagram </span></span><br><span class="line">    <span class="function">Graph <span class="title">g</span><span class="params">(<span class="number">6</span>)</span></span>; </span><br><span class="line">    g.addEdge(<span class="number">5</span>, <span class="number">2</span>); </span><br><span class="line">    g.addEdge(<span class="number">5</span>, <span class="number">0</span>); </span><br><span class="line">    g.addEdge(<span class="number">4</span>, <span class="number">0</span>); </span><br><span class="line">    g.addEdge(<span class="number">4</span>, <span class="number">1</span>); </span><br><span class="line">    g.addEdge(<span class="number">2</span>, <span class="number">3</span>); </span><br><span class="line">    g.addEdge(<span class="number">3</span>, <span class="number">1</span>); </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Following is a Topological Sort of the given graph \n"</span>; </span><br><span class="line">    g.topologicalSort(); </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>攻克链表难关</title>
    <url>/2019-06-21-%E6%94%BB%E5%85%8B%E9%93%BE%E8%A1%A8%E9%9A%BE%E5%85%B3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>链表一直是我比较怕的东西，其实应该是我没有理解指针的定义。</p>
<p>我需要从机器的角度思考，机器可不会存储“箭头”，机器存储的是“地址”。当我明白了这个的时候，我瞬间感觉自己好像有点恍然大悟。</p>
<h4 id="反转单链表"><a href="#反转单链表" class="headerlink" title="反转单链表"></a>反转单链表</h4><p>#####思路</p>
<p>每一个节点都可以通过其的前驱节点找到，即pre-&gt;next表示的就是当前节点 pre-&gt;next-&gt;next表示当前节点的要存储的地址，如果是反转的话应该就是 pre-&gt;next-&gt;next=pre;这样就反转了。</p>
<h5 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h5><p>通过上面思路，很容易想到我们可以通过递归的方法，从后往前，因为后面的节点总能够被前面节点找到，如果前面节点没有发生改变。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(head==<span class="literal">NULL</span>||head-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">       </span><br><span class="line">       ListNode* p=reverseList(head-&gt;next);</span><br><span class="line">       </span><br><span class="line">       head-&gt;next-&gt;next=head;</span><br><span class="line">       head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">       <span class="keyword">return</span> p;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>还可以不通过使用递归的方法，这个时候我们从头开始遍历，但是呢会出现一个问题，那就是你前面节点改变了，你后面的节点可能就找不到了，所以这个时候要存下两个节点，即当前节点和pre</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">      ListNode *pre=<span class="literal">NULL</span>;</span><br><span class="line">      ListNode *curr=head;</span><br><span class="line">       </span><br><span class="line">      <span class="keyword">while</span>(curr!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">          ListNode *nextNode=curr-&gt;next;</span><br><span class="line">          curr-&gt;next=pre;</span><br><span class="line">          pre=curr;</span><br><span class="line">          curr=nextNode;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> pre;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="链表中环的检测"><a href="#链表中环的检测" class="headerlink" title="链表中环的检测"></a>链表中环的检测</h4><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p>使用快慢指针，类似于跑步，当两个人的速度一快一慢的时候，总能够在环形跑道上相遇，利用这个特点，可以很好的用来判断链表中是否有环。</p>
<h5 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>||head-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ListNode *slow=head;</span><br><span class="line">        ListNode *fast=head-&gt;next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(fast!=slow)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast==<span class="literal">NULL</span>||fast-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">            fast=fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h4><h5 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h5><p>合并有序链表，其实跟排序中的归并排序类似，不过呢这里是通过链表存储的数据，对于单链表来说，如果没有头结点的话，是找不到这个单链表，所以对于单链表来说头结点很重要。</p>
<h5 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode *preHead=<span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        ListNode *pre=preHead;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">NULL</span>&amp;&amp;l2!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1-&gt;val&lt;l2-&gt;val)&#123;</span><br><span class="line">                pre-&gt;next=l1;</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre-&gt;next=l2;</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            pre=pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next=l1!=<span class="literal">NULL</span>?l1:l2;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> preHead-&gt;next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="删除链表倒数第N个节点"><a href="#删除链表倒数第N个节点" class="headerlink" title="删除链表倒数第N个节点"></a>删除链表倒数第N个节点</h4><h5 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h5><p>删除链表节点好做，但是我需要找到倒数的第N+1个节点，可以通过双指针，这两个指针相差N个节点，当一个指针走到最后一个节点的时候，前一个指针正好走到倒数第N个节点，在进行微调一下。</p>
<h5 id="核心代码-3"><a href="#核心代码-3" class="headerlink" title="核心代码"></a>核心代码</h5><p>思路虽然想出来了，但是实现中却也碰到一些问题，那就是如果只有一个节点呢，参考了题解，恍然大悟，增加一个哨兵，可以解决这个问题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy-&gt;next=head;</span><br><span class="line">        ListNode* first=dummy;</span><br><span class="line">        ListNode* second=dummy;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            first=first-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(first!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            first=first-&gt;next;</span><br><span class="line">            second=second-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        second-&gt;next=second-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="求链表的中间节点"><a href="#求链表的中间节点" class="headerlink" title="求链表的中间节点"></a>求链表的中间节点</h4><h5 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h5><p>继续使用快慢指针，快的指针每次会比慢指针多走一步，这样当快指针到达链表尾部时，慢指针正好在链表的中间</p>
<h5 id="核心代码-4"><a href="#核心代码-4" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *fast=head;</span><br><span class="line">        ListNode *slow=head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">NULL</span>&amp;&amp;fast-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">            fast=fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h4><p>通过以上的训练，我们基本上理清楚了链表的Next存的是什么，是地址所以只要把握这个原则就可以很好的理解很多链表相关的东西。</p>
<h4 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h4><p>LeetCode 206,141,21,19,876</p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>攻克链表难关</title>
    <url>/2019-06-21-%E6%94%BB%E5%85%8B%E9%93%BE%E8%A1%A8%E9%9A%BE%E5%85%B3%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>链表一直是我比较怕的东西，其实应该是我没有理解指针的定义。</p>
<p>我需要从机器的角度思考，机器可不会存储“箭头”，机器存储的是“地址”。当我明白了这个的时候，我瞬间感觉自己好像有点恍然大悟。</p>
<h4 id="反转单链表"><a href="#反转单链表" class="headerlink" title="反转单链表"></a>反转单链表</h4><p>#####思路</p>
<p>每一个节点都可以通过其的前驱节点找到，即pre-&gt;next表示的就是当前节点 pre-&gt;next-&gt;next表示当前节点的要存储的地址，如果是反转的话应该就是 pre-&gt;next-&gt;next=pre;这样就反转了。</p>
<h5 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h5><p>通过上面思路，很容易想到我们可以通过递归的方法，从后往前，因为后面的节点总能够被前面节点找到，如果前面节点没有发生改变。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(head==<span class="literal">NULL</span>||head-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">       </span><br><span class="line">       ListNode* p=reverseList(head-&gt;next);</span><br><span class="line">       </span><br><span class="line">       head-&gt;next-&gt;next=head;</span><br><span class="line">       head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">       <span class="keyword">return</span> p;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>还可以不通过使用递归的方法，这个时候我们从头开始遍历，但是呢会出现一个问题，那就是你前面节点改变了，你后面的节点可能就找不到了，所以这个时候要存下两个节点，即当前节点和pre</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">      ListNode *pre=<span class="literal">NULL</span>;</span><br><span class="line">      ListNode *curr=head;</span><br><span class="line">       </span><br><span class="line">      <span class="keyword">while</span>(curr!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">          ListNode *nextNode=curr-&gt;next;</span><br><span class="line">          curr-&gt;next=pre;</span><br><span class="line">          pre=curr;</span><br><span class="line">          curr=nextNode;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> pre;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="链表中环的检测"><a href="#链表中环的检测" class="headerlink" title="链表中环的检测"></a>链表中环的检测</h4><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p>使用快慢指针，类似于跑步，当两个人的速度一快一慢的时候，总能够在环形跑道上相遇，利用这个特点，可以很好的用来判断链表中是否有环。</p>
<h5 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>||head-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ListNode *slow=head;</span><br><span class="line">        ListNode *fast=head-&gt;next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(fast!=slow)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast==<span class="literal">NULL</span>||fast-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">            fast=fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h4><h5 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h5><p>合并有序链表，其实跟排序中的归并排序类似，不过呢这里是通过链表存储的数据，对于单链表来说，如果没有头结点的话，是找不到这个单链表，所以对于单链表来说头结点很重要。</p>
<h5 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode *preHead=<span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        ListNode *pre=preHead;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">NULL</span>&amp;&amp;l2!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1-&gt;val&lt;l2-&gt;val)&#123;</span><br><span class="line">                pre-&gt;next=l1;</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre-&gt;next=l2;</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            pre=pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next=l1!=<span class="literal">NULL</span>?l1:l2;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> preHead-&gt;next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="删除链表倒数第N个节点"><a href="#删除链表倒数第N个节点" class="headerlink" title="删除链表倒数第N个节点"></a>删除链表倒数第N个节点</h4><h5 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h5><p>删除链表节点好做，但是我需要找到倒数的第N+1个节点，可以通过双指针，这两个指针相差N个节点，当一个指针走到最后一个节点的时候，前一个指针正好走到倒数第N个节点，在进行微调一下。</p>
<h5 id="核心代码-3"><a href="#核心代码-3" class="headerlink" title="核心代码"></a>核心代码</h5><p>思路虽然想出来了，但是实现中却也碰到一些问题，那就是如果只有一个节点呢，参考了题解，恍然大悟，增加一个哨兵，可以解决这个问题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy-&gt;next=head;</span><br><span class="line">        ListNode* first=dummy;</span><br><span class="line">        ListNode* second=dummy;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            first=first-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(first!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            first=first-&gt;next;</span><br><span class="line">            second=second-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        second-&gt;next=second-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="求链表的中间节点"><a href="#求链表的中间节点" class="headerlink" title="求链表的中间节点"></a>求链表的中间节点</h4><h5 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h5><p>继续使用快慢指针，快的指针每次会比慢指针多走一步，这样当快指针到达链表尾部时，慢指针正好在链表的中间</p>
<h5 id="核心代码-4"><a href="#核心代码-4" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *fast=head;</span><br><span class="line">        ListNode *slow=head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">NULL</span>&amp;&amp;fast-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">            fast=fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h4><p>通过以上的训练，我们基本上理清楚了链表的Next存的是什么，是地址所以只要把握这个原则就可以很好的理解很多链表相关的东西。</p>
<h4 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h4><p>LeetCode 206,141,21,19,876</p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>排序(Sort)</title>
    <url>/2019-06-20-%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>将一些常见的排序算法，通过c++实现。</p>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(ElementType &amp;A[],<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        k=i;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;N;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[j]&lt;A[k]) k=j;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(&amp;A[i],&amp;A[k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findmin</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> start,<span class="keyword">int</span> <span class="built_in">end</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=pre_sort[start];</span><br><span class="line">    <span class="keyword">int</span> minindex=start;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;<span class="built_in">end</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre_sort[i]&lt;<span class="built_in">min</span>)&#123;</span><br><span class="line">            <span class="built_in">min</span>=pre_sort[i];</span><br><span class="line">            minindex=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minindex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=pre_sort[i];</span><br><span class="line">    pre_sort[i]=pre_sort[j];</span><br><span class="line">    pre_sort[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">choose_sort</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> minindex=findmin(pre_sort,i,n);</span><br><span class="line">        <span class="keyword">if</span>(minindex!=i)&#123;</span><br><span class="line">            swap(pre_sort,i,minindex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pre_sort[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    choose_sort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这段代码以有边界为key</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(itemType a[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    ItemType v;</span><br><span class="line">    <span class="keyword">if</span>(right&gt;left)&#123;</span><br><span class="line">        v=a[right];</span><br><span class="line">        i=left<span class="number">-1</span>;</span><br><span class="line">        j=right;</span><br><span class="line">        <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">            <span class="keyword">while</span>(a[++i]&lt;v);</span><br><span class="line">            <span class="keyword">while</span>(a[--j]&gt;v);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=j) <span class="keyword">break</span>;</span><br><span class="line">            swap(a,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a,i,right);</span><br><span class="line">        quicksort(a,left,i<span class="number">-1</span>);</span><br><span class="line">        quicksort(a,i+<span class="number">1</span>,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码-1"><a href="#全部代码-1" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partion</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> startindex=left;</span><br><span class="line">    <span class="keyword">int</span> key=pre_sort[left];</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="keyword">while</span>(pre_sort[left+<span class="number">1</span>]&lt;key) left++;</span><br><span class="line">        <span class="keyword">while</span>(pre_sort[right]&gt;key) right--;</span><br><span class="line">        <span class="keyword">if</span>(left&lt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp=pre_sort[left];</span><br><span class="line">            pre_sort[left]=pre_sort[right];</span><br><span class="line">            pre_sort[right]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left==right||left&gt;right)&#123;</span><br><span class="line">            pre_sort[startindex]=pre_sort[left];</span><br><span class="line">            pre_sort[left]=key;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">int</span> p=partion(pre_sort,left,right);</span><br><span class="line">        quick_sort(pre_sort,left,p<span class="number">-1</span>);</span><br><span class="line">        quick_sort(pre_sort,p+<span class="number">1</span>,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;  <span class="comment">//对于这种有序的 快速排序的效率并不高</span></span><br><span class="line">    quick_sort(pre_sort,<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h4 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(DataType A[])</span></span>&#123;</span><br><span class="line">    DataType temp;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N<span class="number">-1</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i]&lt;A[i<span class="number">-1</span>])&#123;</span><br><span class="line">            temp=A[i];</span><br><span class="line">            <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;temp&lt;A[j];--j)</span><br><span class="line">                A[j+<span class="number">1</span>]=A[j];</span><br><span class="line">            A[j+<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//这段核心代码真的精简</span></span><br></pre></td></tr></table></figure>

<h4 id="全部代码-2"><a href="#全部代码-2" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre_sort[i]&lt;pre_sort[i<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="keyword">int</span> j,temp=pre_sort[i];</span><br><span class="line">            <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;temp&lt;pre_sort[j];--j)&#123;</span><br><span class="line">                pre_sort[j+<span class="number">1</span>]=pre_sort[j];</span><br><span class="line">            &#125;</span><br><span class="line">            pre_sort[j+<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    insertSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><h4 id="核心代码-3"><a href="#核心代码-3" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> incre[],<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,temp,increment;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        increment=incre[i];</span><br><span class="line">        <span class="keyword">for</span>(j=increment;j&lt;n;j++)&#123;</span><br><span class="line">            temp=a[j];</span><br><span class="line">            <span class="keyword">for</span>(k=j;k-incremnt&gt;=<span class="number">0</span>;k-=increment)&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp&gt;=a[k-increment]) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> a[k]=a[k-increment];</span><br><span class="line">            &#125;</span><br><span class="line">            a[k]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码-3"><a href="#全部代码-3" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n,<span class="keyword">int</span> incre[],<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,increment,temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        increment=incre[i];</span><br><span class="line">        <span class="keyword">for</span>(j=increment;j&lt;n;j++)&#123;</span><br><span class="line">            temp=pre_sort[j];</span><br><span class="line">            <span class="keyword">for</span>(k=j;k-increment&gt;=<span class="number">0</span>;k-=increment)&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp&gt;=pre_sort[k-increment]) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> pre_sort[k]=pre_sort[k-increment];</span><br><span class="line">            &#125;</span><br><span class="line">            pre_sort[k]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pre_sort[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> increment[<span class="number">3</span>]=&#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    shell_sort(pre_sort,<span class="number">10</span>,increment,<span class="number">3</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h4 id="核心代码-4"><a href="#核心代码-4" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从前往后</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre_sort[j]&gt;pre_sort[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        swap(&amp;pre_sort[j],&amp;pre_sort[j+<span class="number">1</span>]);</span><br><span class="line">            flag=<span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码-4"><a href="#全部代码-4" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=pre_sort[i];</span><br><span class="line">    pre_sort[i]=pre_sort[j];</span><br><span class="line">    pre_sort[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pre_sort[j]&gt;pre_sort[j+<span class="number">1</span>])&#123;</span><br><span class="line">                swap(pre_sort,j,j+<span class="number">1</span>);</span><br><span class="line">                flag=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pre_sort[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    bubbleSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><h4 id="核心代码-5"><a href="#核心代码-5" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//堆化过程</span></span><br><span class="line"><span class="comment">//从i开始堆化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> largest=i;</span><br><span class="line">    <span class="keyword">int</span> l=i*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> r=i*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;n&amp;&amp;arr[l]&gt;arr[largest]) largest=l;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;n&amp;&amp;arr[r]&gt;arr[largest]) largest=r;</span><br><span class="line">    <span class="keyword">if</span>(largest!=i)&#123;</span><br><span class="line">        swap(&amp;arr[i],&amp;arr[largest]);</span><br><span class="line">        heapify(arr,n,largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="较简洁代码"><a href="#较简洁代码" class="headerlink" title="较简洁代码"></a>较简洁代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> largeset=i;</span><br><span class="line">    <span class="keyword">int</span> l=i*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> r=i*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;n&amp;&amp;arr[l]&gt;arr[largeset]) largeset=l;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;n&amp;&amp;arr[r]&gt;arr[largeset]) largeset=r;</span><br><span class="line">    <span class="keyword">if</span>(largeset!=i)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=arr[largeset];</span><br><span class="line">        arr[largeset]=arr[i];</span><br><span class="line">        arr[i]=temp;</span><br><span class="line">        heapify(arr,n,largeset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">//进行堆化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        heapify(arr,n,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=arr[i];</span><br><span class="line">        arr[i]=arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>]=temp;</span><br><span class="line">        heapify(arr,i,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    heapSort(arr,n);</span><br><span class="line">    printSort(arr,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=pre_sort[i];</span><br><span class="line">        <span class="keyword">int</span> child=i*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(child&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(child+<span class="number">1</span>&lt;n&amp;&amp;pre_sort[child]&lt;pre_sort[child+<span class="number">1</span>]) child+=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(temp&lt;pre_sort[child])&#123;</span><br><span class="line">                pre_sort[(child<span class="number">-1</span>)/<span class="number">2</span>]=pre_sort[child];</span><br><span class="line">                child=child*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pre_sort[(child<span class="number">-1</span>)/<span class="number">2</span>]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify2</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> i,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> child=i*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> temp=pre_sort[i];</span><br><span class="line">    <span class="keyword">while</span>(child&lt;n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(child+<span class="number">1</span>&lt;n&amp;&amp;pre_sort[child]&lt;pre_sort[child+<span class="number">1</span>]) child+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp&lt;pre_sort[child])&#123;</span><br><span class="line">            pre_sort[(child<span class="number">-1</span>)/<span class="number">2</span>]=pre_sort[child];</span><br><span class="line">            child=child*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pre_sort[(child<span class="number">-1</span>)/<span class="number">2</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">       <span class="keyword">int</span> temp=pre_sort[i];</span><br><span class="line">       pre_sort[i]=pre_sort[<span class="number">0</span>];</span><br><span class="line">       pre_sort[<span class="number">0</span>]=temp;</span><br><span class="line">       heapify2(pre_sort,<span class="number">0</span>,i);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    heapify(pre_sort,<span class="number">10</span>);</span><br><span class="line">    heapSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><h4 id="核心代码-6"><a href="#核心代码-6" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//merge是核心代码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> presort[],<span class="keyword">int</span> l,<span class="keyword">int</span> m,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=l,j=m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> result[r-l+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=m&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(presort[i]&lt;presort[j])&#123;</span><br><span class="line">            result[num]=presort[i];</span><br><span class="line">            i++,num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result[num]=presort[j];</span><br><span class="line">            j++,num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=m)&#123;</span><br><span class="line">        result[num]=presort[i];</span><br><span class="line">        num++,i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)&#123;</span><br><span class="line">        result[num]=presort[j];</span><br><span class="line">        num++,j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=l;j&lt;=r;i++,j++)&#123;</span><br><span class="line">        presort[j]=result[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码-5"><a href="#全部代码-5" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> l,<span class="keyword">int</span> m,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result[r-l+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i=l,j=m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=m&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre_sort[i]&lt;pre_sort[j])&#123;</span><br><span class="line">            result[num]=pre_sort[i];</span><br><span class="line">            i++;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result[num]=pre_sort[j];</span><br><span class="line">            j++;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=m)&#123;</span><br><span class="line">            result[num]=pre_sort[i];</span><br><span class="line">            num++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(j&lt;=r)&#123;</span><br><span class="line">            result[num]=pre_sort[j];</span><br><span class="line">            num++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>,y=l;y&lt;=r;x++,y++)&#123;</span><br><span class="line">            pre_sort[y]=result[x];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> start,<span class="keyword">int</span> <span class="built_in">end</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//先取中点</span></span><br><span class="line">    <span class="keyword">int</span> mid=(start+<span class="built_in">end</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(start&lt;<span class="built_in">end</span>)&#123;</span><br><span class="line">        mergeSort(pre_sort,start,mid);</span><br><span class="line">        mergeSort(pre_sort,mid+<span class="number">1</span>,<span class="built_in">end</span>);</span><br><span class="line">        merge(pre_sort,start,mid,<span class="built_in">end</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pre_sort[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="keyword">sizeof</span>(pre_sort)/<span class="keyword">sizeof</span>(pre_sort[<span class="number">0</span>]);</span><br><span class="line">    mergeSort(pre_sort,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    printSort(pre_sort,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><h4 id="核心代码-7"><a href="#核心代码-7" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//countSort</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">countSort</span><span class="params">(<span class="keyword">int</span> sort[],<span class="keyword">int</span> n,<span class="keyword">int</span> <span class="built_in">exp</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,output[n],count[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        count[(sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]++;</span><br><span class="line">   	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        count[i]+=count[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        output[count[(sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]<span class="number">-1</span>]=sort[i];</span><br><span class="line">    	count[(sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        sort[i]=output[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码-6"><a href="#全部代码-6" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mx=pre_sort[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre_sort[i]&gt;mx) mx=pre_sort[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">countSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n,<span class="keyword">int</span> <span class="built_in">exp</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,output[n],count[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        count[(pre_sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        count[i]+=count[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        output[count[(pre_sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]<span class="number">-1</span>]=pre_sort[i];</span><br><span class="line">        count[(pre_sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        pre_sort[i]=output[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> m=getMax(pre_sort,n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> <span class="built_in">exp</span>=<span class="number">1</span>;m/<span class="built_in">exp</span>&gt;<span class="number">0</span>;<span class="built_in">exp</span>*=<span class="number">10</span>)</span><br><span class="line">        countSort(pre_sort,n,<span class="built_in">exp</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[]=&#123;<span class="number">170</span>, <span class="number">45</span>, <span class="number">75</span>, <span class="number">90</span>, <span class="number">802</span>, <span class="number">24</span>, <span class="number">2</span>, <span class="number">66</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="keyword">sizeof</span>(pre_sort)/<span class="keyword">sizeof</span>(pre_sort[<span class="number">0</span>]);</span><br><span class="line">    radixSort(pre_sort,n);</span><br><span class="line">    <span class="built_in">print</span>(pre_sort,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>说实话，我原本不是很喜欢算法，觉得很枯燥，但是就在今天，我发现同一算法，我实现起来很啰嗦，代码重复度高。通过看优秀代码，才恍然大悟，可以这么简洁，这个理解了原来是这么用的。才发现算法真的很有趣，可以发现自己脑中思维的漏洞，逻辑的缺陷。</p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>排序(Sort)</title>
    <url>/2019-06-20-%E6%8E%92%E5%BA%8F%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>将一些常见的排序算法，通过c++实现。</p>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(ElementType &amp;A[],<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        k=i;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;N;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[j]&lt;A[k]) k=j;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(&amp;A[i],&amp;A[k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findmin</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> start,<span class="keyword">int</span> <span class="built_in">end</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=pre_sort[start];</span><br><span class="line">    <span class="keyword">int</span> minindex=start;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;<span class="built_in">end</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre_sort[i]&lt;<span class="built_in">min</span>)&#123;</span><br><span class="line">            <span class="built_in">min</span>=pre_sort[i];</span><br><span class="line">            minindex=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minindex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=pre_sort[i];</span><br><span class="line">    pre_sort[i]=pre_sort[j];</span><br><span class="line">    pre_sort[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">choose_sort</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> minindex=findmin(pre_sort,i,n);</span><br><span class="line">        <span class="keyword">if</span>(minindex!=i)&#123;</span><br><span class="line">            swap(pre_sort,i,minindex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pre_sort[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    choose_sort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这段代码以有边界为key</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(itemType a[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    ItemType v;</span><br><span class="line">    <span class="keyword">if</span>(right&gt;left)&#123;</span><br><span class="line">        v=a[right];</span><br><span class="line">        i=left<span class="number">-1</span>;</span><br><span class="line">        j=right;</span><br><span class="line">        <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">            <span class="keyword">while</span>(a[++i]&lt;v);</span><br><span class="line">            <span class="keyword">while</span>(a[--j]&gt;v);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=j) <span class="keyword">break</span>;</span><br><span class="line">            swap(a,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a,i,right);</span><br><span class="line">        quicksort(a,left,i<span class="number">-1</span>);</span><br><span class="line">        quicksort(a,i+<span class="number">1</span>,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码-1"><a href="#全部代码-1" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partion</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> startindex=left;</span><br><span class="line">    <span class="keyword">int</span> key=pre_sort[left];</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="keyword">while</span>(pre_sort[left+<span class="number">1</span>]&lt;key) left++;</span><br><span class="line">        <span class="keyword">while</span>(pre_sort[right]&gt;key) right--;</span><br><span class="line">        <span class="keyword">if</span>(left&lt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp=pre_sort[left];</span><br><span class="line">            pre_sort[left]=pre_sort[right];</span><br><span class="line">            pre_sort[right]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left==right||left&gt;right)&#123;</span><br><span class="line">            pre_sort[startindex]=pre_sort[left];</span><br><span class="line">            pre_sort[left]=key;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">int</span> p=partion(pre_sort,left,right);</span><br><span class="line">        quick_sort(pre_sort,left,p<span class="number">-1</span>);</span><br><span class="line">        quick_sort(pre_sort,p+<span class="number">1</span>,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;  <span class="comment">//对于这种有序的 快速排序的效率并不高</span></span><br><span class="line">    quick_sort(pre_sort,<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h4 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(DataType A[])</span></span>&#123;</span><br><span class="line">    DataType temp;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N<span class="number">-1</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i]&lt;A[i<span class="number">-1</span>])&#123;</span><br><span class="line">            temp=A[i];</span><br><span class="line">            <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;temp&lt;A[j];--j)</span><br><span class="line">                A[j+<span class="number">1</span>]=A[j];</span><br><span class="line">            A[j+<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//这段核心代码真的精简</span></span><br></pre></td></tr></table></figure>

<h4 id="全部代码-2"><a href="#全部代码-2" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre_sort[i]&lt;pre_sort[i<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="keyword">int</span> j,temp=pre_sort[i];</span><br><span class="line">            <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;temp&lt;pre_sort[j];--j)&#123;</span><br><span class="line">                pre_sort[j+<span class="number">1</span>]=pre_sort[j];</span><br><span class="line">            &#125;</span><br><span class="line">            pre_sort[j+<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    insertSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><h4 id="核心代码-3"><a href="#核心代码-3" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> incre[],<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,temp,increment;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        increment=incre[i];</span><br><span class="line">        <span class="keyword">for</span>(j=increment;j&lt;n;j++)&#123;</span><br><span class="line">            temp=a[j];</span><br><span class="line">            <span class="keyword">for</span>(k=j;k-incremnt&gt;=<span class="number">0</span>;k-=increment)&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp&gt;=a[k-increment]) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> a[k]=a[k-increment];</span><br><span class="line">            &#125;</span><br><span class="line">            a[k]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码-3"><a href="#全部代码-3" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n,<span class="keyword">int</span> incre[],<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,increment,temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        increment=incre[i];</span><br><span class="line">        <span class="keyword">for</span>(j=increment;j&lt;n;j++)&#123;</span><br><span class="line">            temp=pre_sort[j];</span><br><span class="line">            <span class="keyword">for</span>(k=j;k-increment&gt;=<span class="number">0</span>;k-=increment)&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp&gt;=pre_sort[k-increment]) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> pre_sort[k]=pre_sort[k-increment];</span><br><span class="line">            &#125;</span><br><span class="line">            pre_sort[k]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pre_sort[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> increment[<span class="number">3</span>]=&#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    shell_sort(pre_sort,<span class="number">10</span>,increment,<span class="number">3</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h4 id="核心代码-4"><a href="#核心代码-4" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从前往后</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre_sort[j]&gt;pre_sort[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        swap(&amp;pre_sort[j],&amp;pre_sort[j+<span class="number">1</span>]);</span><br><span class="line">            flag=<span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码-4"><a href="#全部代码-4" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=pre_sort[i];</span><br><span class="line">    pre_sort[i]=pre_sort[j];</span><br><span class="line">    pre_sort[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pre_sort[j]&gt;pre_sort[j+<span class="number">1</span>])&#123;</span><br><span class="line">                swap(pre_sort,j,j+<span class="number">1</span>);</span><br><span class="line">                flag=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pre_sort[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    bubbleSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><h4 id="核心代码-5"><a href="#核心代码-5" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//堆化过程</span></span><br><span class="line"><span class="comment">//从i开始堆化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> largest=i;</span><br><span class="line">    <span class="keyword">int</span> l=i*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> r=i*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;n&amp;&amp;arr[l]&gt;arr[largest]) largest=l;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;n&amp;&amp;arr[r]&gt;arr[largest]) largest=r;</span><br><span class="line">    <span class="keyword">if</span>(largest!=i)&#123;</span><br><span class="line">        swap(&amp;arr[i],&amp;arr[largest]);</span><br><span class="line">        heapify(arr,n,largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="较简洁代码"><a href="#较简洁代码" class="headerlink" title="较简洁代码"></a>较简洁代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> largeset=i;</span><br><span class="line">    <span class="keyword">int</span> l=i*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> r=i*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;n&amp;&amp;arr[l]&gt;arr[largeset]) largeset=l;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;n&amp;&amp;arr[r]&gt;arr[largeset]) largeset=r;</span><br><span class="line">    <span class="keyword">if</span>(largeset!=i)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=arr[largeset];</span><br><span class="line">        arr[largeset]=arr[i];</span><br><span class="line">        arr[i]=temp;</span><br><span class="line">        heapify(arr,n,largeset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">//进行堆化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        heapify(arr,n,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=arr[i];</span><br><span class="line">        arr[i]=arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>]=temp;</span><br><span class="line">        heapify(arr,i,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    heapSort(arr,n);</span><br><span class="line">    printSort(arr,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=pre_sort[i];</span><br><span class="line">        <span class="keyword">int</span> child=i*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(child&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(child+<span class="number">1</span>&lt;n&amp;&amp;pre_sort[child]&lt;pre_sort[child+<span class="number">1</span>]) child+=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(temp&lt;pre_sort[child])&#123;</span><br><span class="line">                pre_sort[(child<span class="number">-1</span>)/<span class="number">2</span>]=pre_sort[child];</span><br><span class="line">                child=child*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pre_sort[(child<span class="number">-1</span>)/<span class="number">2</span>]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify2</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> i,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> child=i*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> temp=pre_sort[i];</span><br><span class="line">    <span class="keyword">while</span>(child&lt;n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(child+<span class="number">1</span>&lt;n&amp;&amp;pre_sort[child]&lt;pre_sort[child+<span class="number">1</span>]) child+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp&lt;pre_sort[child])&#123;</span><br><span class="line">            pre_sort[(child<span class="number">-1</span>)/<span class="number">2</span>]=pre_sort[child];</span><br><span class="line">            child=child*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pre_sort[(child<span class="number">-1</span>)/<span class="number">2</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">       <span class="keyword">int</span> temp=pre_sort[i];</span><br><span class="line">       pre_sort[i]=pre_sort[<span class="number">0</span>];</span><br><span class="line">       pre_sort[<span class="number">0</span>]=temp;</span><br><span class="line">       heapify2(pre_sort,<span class="number">0</span>,i);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    heapify(pre_sort,<span class="number">10</span>);</span><br><span class="line">    heapSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><h4 id="核心代码-6"><a href="#核心代码-6" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//merge是核心代码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> presort[],<span class="keyword">int</span> l,<span class="keyword">int</span> m,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=l,j=m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> result[r-l+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=m&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(presort[i]&lt;presort[j])&#123;</span><br><span class="line">            result[num]=presort[i];</span><br><span class="line">            i++,num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result[num]=presort[j];</span><br><span class="line">            j++,num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=m)&#123;</span><br><span class="line">        result[num]=presort[i];</span><br><span class="line">        num++,i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)&#123;</span><br><span class="line">        result[num]=presort[j];</span><br><span class="line">        num++,j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=l;j&lt;=r;i++,j++)&#123;</span><br><span class="line">        presort[j]=result[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码-5"><a href="#全部代码-5" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> l,<span class="keyword">int</span> m,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result[r-l+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i=l,j=m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=m&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre_sort[i]&lt;pre_sort[j])&#123;</span><br><span class="line">            result[num]=pre_sort[i];</span><br><span class="line">            i++;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result[num]=pre_sort[j];</span><br><span class="line">            j++;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=m)&#123;</span><br><span class="line">            result[num]=pre_sort[i];</span><br><span class="line">            num++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(j&lt;=r)&#123;</span><br><span class="line">            result[num]=pre_sort[j];</span><br><span class="line">            num++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>,y=l;y&lt;=r;x++,y++)&#123;</span><br><span class="line">            pre_sort[y]=result[x];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> start,<span class="keyword">int</span> <span class="built_in">end</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//先取中点</span></span><br><span class="line">    <span class="keyword">int</span> mid=(start+<span class="built_in">end</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(start&lt;<span class="built_in">end</span>)&#123;</span><br><span class="line">        mergeSort(pre_sort,start,mid);</span><br><span class="line">        mergeSort(pre_sort,mid+<span class="number">1</span>,<span class="built_in">end</span>);</span><br><span class="line">        merge(pre_sort,start,mid,<span class="built_in">end</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pre_sort[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="keyword">sizeof</span>(pre_sort)/<span class="keyword">sizeof</span>(pre_sort[<span class="number">0</span>]);</span><br><span class="line">    mergeSort(pre_sort,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    printSort(pre_sort,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><h4 id="核心代码-7"><a href="#核心代码-7" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//countSort</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">countSort</span><span class="params">(<span class="keyword">int</span> sort[],<span class="keyword">int</span> n,<span class="keyword">int</span> <span class="built_in">exp</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,output[n],count[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        count[(sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]++;</span><br><span class="line">   	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        count[i]+=count[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        output[count[(sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]<span class="number">-1</span>]=sort[i];</span><br><span class="line">    	count[(sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        sort[i]=output[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码-6"><a href="#全部代码-6" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mx=pre_sort[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre_sort[i]&gt;mx) mx=pre_sort[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">countSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n,<span class="keyword">int</span> <span class="built_in">exp</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,output[n],count[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        count[(pre_sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        count[i]+=count[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        output[count[(pre_sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]<span class="number">-1</span>]=pre_sort[i];</span><br><span class="line">        count[(pre_sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        pre_sort[i]=output[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> m=getMax(pre_sort,n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> <span class="built_in">exp</span>=<span class="number">1</span>;m/<span class="built_in">exp</span>&gt;<span class="number">0</span>;<span class="built_in">exp</span>*=<span class="number">10</span>)</span><br><span class="line">        countSort(pre_sort,n,<span class="built_in">exp</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[]=&#123;<span class="number">170</span>, <span class="number">45</span>, <span class="number">75</span>, <span class="number">90</span>, <span class="number">802</span>, <span class="number">24</span>, <span class="number">2</span>, <span class="number">66</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="keyword">sizeof</span>(pre_sort)/<span class="keyword">sizeof</span>(pre_sort[<span class="number">0</span>]);</span><br><span class="line">    radixSort(pre_sort,n);</span><br><span class="line">    <span class="built_in">print</span>(pre_sort,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>说实话，我原本不是很喜欢算法，觉得很枯燥，但是就在今天，我发现同一算法，我实现起来很啰嗦，代码重复度高。通过看优秀代码，才恍然大悟，可以这么简洁，这个理解了原来是这么用的。才发现算法真的很有趣，可以发现自己脑中思维的漏洞，逻辑的缺陷。</p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第三周</title>
    <url>/2019-06-06-ARTS%E7%AC%AC%E4%B8%89%E5%91%A8%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ARTS第三周</p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>快速排序</p>
<blockquote>
<p>QuickSort is a Divide and Conquer algorithm.It picks an element as pivot and partitions the given array around the picked pivot.There are many different versions of quickSort that pick pivot in different ways</p>
<p>1.Always pick first element as pivot</p>
<p>2.Always pick last element as pivot</p>
<p>3.Pick a random element as pivot</p>
<p>4.Pick median as pivot</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>* a,<span class="keyword">int</span>* b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=*a;</span><br><span class="line">    *a=*b;</span><br><span class="line">    *b=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot=arr[high];</span><br><span class="line">    <span class="keyword">int</span> i=low<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=low;j&lt;=high<span class="number">-1</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j]&lt;pivot)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            swap(&amp;arr[i],&amp;arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(&amp;arr[i+<span class="number">1</span>],&amp;arr[high]);</span><br><span class="line">    <span class="keyword">return</span> (i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">        <span class="keyword">int</span> pi=partition(arr,low,high);</span><br><span class="line"></span><br><span class="line">        quickSort(arr,low,pi<span class="number">-1</span>);</span><br><span class="line">        quickSort(arr,pi+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArr</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">43</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    quickSort(arr,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    printArr(arr,n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot=arr[high];</span><br><span class="line">        <span class="keyword">int</span> i=low-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=low;j&lt;=high-<span class="number">1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;pivot)&#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">int</span> temp=arr[i];</span><br><span class="line">                arr[i]=arr[j];</span><br><span class="line">                arr[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp=arr[i+<span class="number">1</span>];</span><br><span class="line">        arr[i+<span class="number">1</span>]=arr[high];</span><br><span class="line">        arr[high]=temp;</span><br><span class="line">        <span class="keyword">return</span> (i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">            <span class="keyword">int</span> pi=partition(arr,low,high);</span><br><span class="line"></span><br><span class="line">            sort(arr,low,pi-<span class="number">1</span>);</span><br><span class="line">            sort(arr,pi+<span class="number">1</span>,high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArr</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:arr)&#123;</span><br><span class="line">            System.out.print(i+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String...args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[]=&#123;<span class="number">10</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> n=arr.length;</span><br><span class="line"></span><br><span class="line">        QuickSort ob=<span class="keyword">new</span> QuickSort();</span><br><span class="line">        ob.sort(arr,<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        printArr(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h4><p><a href="https://medium.com/@gustavo.ponce.ch/spring-boot-spring-mvc-spring-security-mysql-a5d8545d837d" target="_blank" rel="noopener">SpringMVC</a></p>
<p>最近在学SpringBoot，所以就找了一篇SpringMVC的教程。</p>
<h4 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h4><p>最近学会用visual studio code</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第三周</title>
    <url>/2019-06-06-ARTS%E7%AC%AC%E4%B8%89%E5%91%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ARTS第三周</p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>快速排序</p>
<blockquote>
<p>QuickSort is a Divide and Conquer algorithm.It picks an element as pivot and partitions the given array around the picked pivot.There are many different versions of quickSort that pick pivot in different ways</p>
<p>1.Always pick first element as pivot</p>
<p>2.Always pick last element as pivot</p>
<p>3.Pick a random element as pivot</p>
<p>4.Pick median as pivot</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>* a,<span class="keyword">int</span>* b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=*a;</span><br><span class="line">    *a=*b;</span><br><span class="line">    *b=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot=arr[high];</span><br><span class="line">    <span class="keyword">int</span> i=low<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=low;j&lt;=high<span class="number">-1</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j]&lt;pivot)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            swap(&amp;arr[i],&amp;arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(&amp;arr[i+<span class="number">1</span>],&amp;arr[high]);</span><br><span class="line">    <span class="keyword">return</span> (i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">        <span class="keyword">int</span> pi=partition(arr,low,high);</span><br><span class="line"></span><br><span class="line">        quickSort(arr,low,pi<span class="number">-1</span>);</span><br><span class="line">        quickSort(arr,pi+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArr</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">43</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    quickSort(arr,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    printArr(arr,n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot=arr[high];</span><br><span class="line">        <span class="keyword">int</span> i=low-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=low;j&lt;=high-<span class="number">1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;pivot)&#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">int</span> temp=arr[i];</span><br><span class="line">                arr[i]=arr[j];</span><br><span class="line">                arr[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp=arr[i+<span class="number">1</span>];</span><br><span class="line">        arr[i+<span class="number">1</span>]=arr[high];</span><br><span class="line">        arr[high]=temp;</span><br><span class="line">        <span class="keyword">return</span> (i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">            <span class="keyword">int</span> pi=partition(arr,low,high);</span><br><span class="line"></span><br><span class="line">            sort(arr,low,pi-<span class="number">1</span>);</span><br><span class="line">            sort(arr,pi+<span class="number">1</span>,high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArr</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:arr)&#123;</span><br><span class="line">            System.out.print(i+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String...args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[]=&#123;<span class="number">10</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> n=arr.length;</span><br><span class="line"></span><br><span class="line">        QuickSort ob=<span class="keyword">new</span> QuickSort();</span><br><span class="line">        ob.sort(arr,<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        printArr(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h4><p><a href="https://medium.com/@gustavo.ponce.ch/spring-boot-spring-mvc-spring-security-mysql-a5d8545d837d" target="_blank" rel="noopener">SpringMVC</a></p>
<p>最近在学SpringBoot，所以就找了一篇SpringMVC的教程。</p>
<h4 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h4><p>最近学会用visual studio code</p>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>继续学习SpringBoot</title>
    <url>/2019-06-01-%E7%BB%A7%E7%BB%AD%E5%AD%A6%E4%B9%A0SpringBoot/</url>
    <content><![CDATA[<p>####配置单数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;  <span class="comment">//用来做jdbc操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	    SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        showConnction();</span><br><span class="line">        showData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	    jdbcTemplate.queryForList(<span class="string">"SELECT * FROM FOO"</span>).forEach(row-&gt;log.info(row.toString()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showConnction</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">	    log.info(dataSource.toString());</span><br><span class="line">	    Connection conn=dataSource.getConnection();</span><br><span class="line">	    log.info(conn.toString());</span><br><span class="line">	    conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>废话不多说，直接进入学习</p>
<p>因为我们做的是一个配置数据源(数据的来源),所以我们需要一个DataSource对象，如果我们要做sql操作，则需要一个JdbcTemplate用来做sql操作</p>
<p>现在我们来解决一些问题：</p>
<ul>
<li><p>We’re using Spring’s @SpringBootApplication annotation on our main class to enable auto-configuration</p>
<p>使用这个注解让springboot自动帮助我们配置一些东西</p>
</li>
<li><blockquote>
<p>This class also implements Spring’s CommandLineRunner interface.CommandLineRunner is a simple Spring Boot interface with a run method.Spring Boot will automatically call the run method of all beans implementing this interface after the application context has been loaded</p>
</blockquote>
<p>这个接口CommandLineRunner只有一个简单的方法Run，当Spring Boot加载完应用上下文的时候会自动执行这个方法</p>
</li>
<li><p>JdbcTemplate这个类稍微复杂点，不过现在只要记住，要执行sql语句需要使用JdbcTemplate</p>
</li>
<li><p>@Autowired&amp;@Bean</p>
</li>
</ul>
<blockquote>
<p>@Autowired says’please give me an instance of this class,for example,one that I created with an @Bean annotation earlier</p>
<p>@Bean tells Spring ‘here is an instance of this class,please keep hold of it and give it back to me when I ask’</p>
</blockquote>
<p>所以要使用@Autowired前我们需要先告知Spring这个类是一个实例(@Bean)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">management.endpoints.web.exposure.include&#x3D;*</span><br><span class="line">spring.output.ansi.enabled&#x3D;always   &#x2F;&#x2F;为了让控制台输出有颜色，没有什么大的作用</span><br><span class="line"></span><br><span class="line">spring.datasource.url&#x3D;jdbc:h2:mem:testdb</span><br><span class="line">spring.datasource.username&#x3D;sa</span><br><span class="line">spring.datasource.password&#x3D;</span><br><span class="line">spring.datasource.hikari.maximumPoolSize&#x3D;5</span><br><span class="line">spring.datasource.hikari.minmumIdle&#x3D;5</span><br><span class="line">spring.datasource.hikari.idle-timeout&#x3D;600000</span><br><span class="line">spring.datasource.hikari.connection-timeout&#x3D;30000</span><br><span class="line">spring.datasource.hikari.max-lifetime&#x3D;1800000</span><br></pre></td></tr></table></figure>

<ul>
<li><p>endpoints这里我们得先谈到Actuator</p>
<blockquote>
<p>Actuator：Spring Boot provides actuator to monitor and manage our application.Actuator is a tool which has HTTP endpoints.when application is pushed to production,you can choose to manage and monitor your application using HTTP endpoints</p>
</blockquote>
<p>Actuator可以帮助你监控和管理SpringBoot应用，所有的这些特性都是通过HTTP endpoints来获得</p>
<p>Actuator创建了所谓的endpoint来暴露HTTP或者JMX来监控和管理应用</p>
<ol>
<li>/health的endpoint提供了关于应用健康的基础信息</li>
<li>/metrics endpoint展示了几个有用的度量信息，比如JVM内存使用情况，系统CPU使用情况、打开文件等等</li>
</ol>
<p>所以为了暴露HTTP我们首先得把endpoints暴露出去</p>
</li>
<li><blockquote>
<p>A .properties file is a simple collection of key-value pairs that can be parsed by java.util.Properties class.</p>
<p>Properties files are widely used for many purposes in all kinds of JAVA application,often to store configuration or localization data</p>
</blockquote>
<p>.properties文件通过key-value来存储输出。</p>
</li>
</ul>
<h4 id="配置多数据源"><a href="#配置多数据源" class="headerlink" title="配置多数据源"></a>配置多数据源</h4><p>tips:</p>
<ol>
<li>不同数据源的配置要分开</li>
<li>关注每次使用的数据源，需要自己判断使用哪个数据源，系统无法自动帮助你判断</li>
</ol>
<p>SpringBoot两种方法</p>
<ol>
<li>配置@Primary类型的Bean–这个将作为主要的Bean</li>
<li>排除SpringBoot的自动配置</li>
</ol>
<p>这里我们先使用第二种方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">DataSourceTransactionManagerAutoConfiguration</span>.<span class="title">class</span>, <span class="title">JdbcTemplateAutoConfiguration</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Slf4j</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DemoApplication</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">fooDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DataSourceProperties dataSourceProperties=fooDataSourceProperties();</span><br><span class="line">        log.info(<span class="string">"foo datasource:&#123;&#125;"</span>,dataSourceProperties.getUrl());</span><br><span class="line">        <span class="keyword">return</span> dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(<span class="string">"foo.datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceProperties <span class="title">fooDataSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">fooTxManager</span><span class="params">(DataSource fooDataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(fooDataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(<span class="string">"bar.datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceProperties <span class="title">barDataSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">barDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSourceProperties dataSourceProperties = barDataSourceProperties();</span><br><span class="line">        log.info(<span class="string">"bar datasource: &#123;&#125;"</span>, dataSourceProperties.getUrl());</span><br><span class="line">        <span class="keyword">return</span> dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">barTxManager</span><span class="params">(DataSource barDataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(barDataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先来解决一些问题：</p>
<ul>
<li><blockquote>
<p>Bean:是一个Java类，有Spring容器创建并且托管的实例，Java应用是由一个个组件组成，就像是咖啡是由一个个豆子组成，所以Bean就是类的意思</p>
</blockquote>
</li>
<li><p>ConfigurationProperties(“foo.datasource”)先来看这个，这个注解是为了让.properties文件里的foo.datasource对创建出来的DataSourceProperties进行赋值</p>
</li>
</ul>
<h4 id="Spring-Batch"><a href="#Spring-Batch" class="headerlink" title="Spring Batch"></a>Spring Batch</h4>]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>数据源配置</tag>
      </tags>
  </entry>
  <entry>
    <title>继续学习SpringBoot</title>
    <url>/2019-06-01-%E7%BB%A7%E7%BB%AD%E5%AD%A6%E4%B9%A0SpringBoot%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<p>####配置单数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;  <span class="comment">//用来做jdbc操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	    SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        showConnction();</span><br><span class="line">        showData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	    jdbcTemplate.queryForList(<span class="string">"SELECT * FROM FOO"</span>).forEach(row-&gt;log.info(row.toString()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showConnction</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">	    log.info(dataSource.toString());</span><br><span class="line">	    Connection conn=dataSource.getConnection();</span><br><span class="line">	    log.info(conn.toString());</span><br><span class="line">	    conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>废话不多说，直接进入学习</p>
<p>因为我们做的是一个配置数据源(数据的来源),所以我们需要一个DataSource对象，如果我们要做sql操作，则需要一个JdbcTemplate用来做sql操作</p>
<p>现在我们来解决一些问题：</p>
<ul>
<li><p>We’re using Spring’s @SpringBootApplication annotation on our main class to enable auto-configuration</p>
<p>使用这个注解让springboot自动帮助我们配置一些东西</p>
</li>
<li><blockquote>
<p>This class also implements Spring’s CommandLineRunner interface.CommandLineRunner is a simple Spring Boot interface with a run method.Spring Boot will automatically call the run method of all beans implementing this interface after the application context has been loaded</p>
</blockquote>
<p>这个接口CommandLineRunner只有一个简单的方法Run，当Spring Boot加载完应用上下文的时候会自动执行这个方法</p>
</li>
<li><p>JdbcTemplate这个类稍微复杂点，不过现在只要记住，要执行sql语句需要使用JdbcTemplate</p>
</li>
<li><p>@Autowired&amp;@Bean</p>
</li>
</ul>
<blockquote>
<p>@Autowired says’please give me an instance of this class,for example,one that I created with an @Bean annotation earlier</p>
<p>@Bean tells Spring ‘here is an instance of this class,please keep hold of it and give it back to me when I ask’</p>
</blockquote>
<p>所以要使用@Autowired前我们需要先告知Spring这个类是一个实例(@Bean)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">management.endpoints.web.exposure.include&#x3D;*</span><br><span class="line">spring.output.ansi.enabled&#x3D;always   &#x2F;&#x2F;为了让控制台输出有颜色，没有什么大的作用</span><br><span class="line"></span><br><span class="line">spring.datasource.url&#x3D;jdbc:h2:mem:testdb</span><br><span class="line">spring.datasource.username&#x3D;sa</span><br><span class="line">spring.datasource.password&#x3D;</span><br><span class="line">spring.datasource.hikari.maximumPoolSize&#x3D;5</span><br><span class="line">spring.datasource.hikari.minmumIdle&#x3D;5</span><br><span class="line">spring.datasource.hikari.idle-timeout&#x3D;600000</span><br><span class="line">spring.datasource.hikari.connection-timeout&#x3D;30000</span><br><span class="line">spring.datasource.hikari.max-lifetime&#x3D;1800000</span><br></pre></td></tr></table></figure>

<ul>
<li><p>endpoints这里我们得先谈到Actuator</p>
<blockquote>
<p>Actuator：Spring Boot provides actuator to monitor and manage our application.Actuator is a tool which has HTTP endpoints.when application is pushed to production,you can choose to manage and monitor your application using HTTP endpoints</p>
</blockquote>
<p>Actuator可以帮助你监控和管理SpringBoot应用，所有的这些特性都是通过HTTP endpoints来获得</p>
<p>Actuator创建了所谓的endpoint来暴露HTTP或者JMX来监控和管理应用</p>
<ol>
<li>/health的endpoint提供了关于应用健康的基础信息</li>
<li>/metrics endpoint展示了几个有用的度量信息，比如JVM内存使用情况，系统CPU使用情况、打开文件等等</li>
</ol>
<p>所以为了暴露HTTP我们首先得把endpoints暴露出去</p>
</li>
<li><blockquote>
<p>A .properties file is a simple collection of key-value pairs that can be parsed by java.util.Properties class.</p>
<p>Properties files are widely used for many purposes in all kinds of JAVA application,often to store configuration or localization data</p>
</blockquote>
<p>.properties文件通过key-value来存储输出。</p>
</li>
</ul>
<h4 id="配置多数据源"><a href="#配置多数据源" class="headerlink" title="配置多数据源"></a>配置多数据源</h4><p>tips:</p>
<ol>
<li>不同数据源的配置要分开</li>
<li>关注每次使用的数据源，需要自己判断使用哪个数据源，系统无法自动帮助你判断</li>
</ol>
<p>SpringBoot两种方法</p>
<ol>
<li>配置@Primary类型的Bean–这个将作为主要的Bean</li>
<li>排除SpringBoot的自动配置</li>
</ol>
<p>这里我们先使用第二种方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">DataSourceTransactionManagerAutoConfiguration</span>.<span class="title">class</span>, <span class="title">JdbcTemplateAutoConfiguration</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Slf4j</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DemoApplication</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">fooDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DataSourceProperties dataSourceProperties=fooDataSourceProperties();</span><br><span class="line">        log.info(<span class="string">"foo datasource:&#123;&#125;"</span>,dataSourceProperties.getUrl());</span><br><span class="line">        <span class="keyword">return</span> dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(<span class="string">"foo.datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceProperties <span class="title">fooDataSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">fooTxManager</span><span class="params">(DataSource fooDataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(fooDataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(<span class="string">"bar.datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceProperties <span class="title">barDataSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">barDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSourceProperties dataSourceProperties = barDataSourceProperties();</span><br><span class="line">        log.info(<span class="string">"bar datasource: &#123;&#125;"</span>, dataSourceProperties.getUrl());</span><br><span class="line">        <span class="keyword">return</span> dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">barTxManager</span><span class="params">(DataSource barDataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(barDataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先来解决一些问题：</p>
<ul>
<li><blockquote>
<p>Bean:是一个Java类，有Spring容器创建并且托管的实例，Java应用是由一个个组件组成，就像是咖啡是由一个个豆子组成，所以Bean就是类的意思</p>
</blockquote>
</li>
<li><p>ConfigurationProperties(“foo.datasource”)先来看这个，这个注解是为了让.properties文件里的foo.datasource对创建出来的DataSourceProperties进行赋值</p>
</li>
</ul>
<h4 id="Spring-Batch"><a href="#Spring-Batch" class="headerlink" title="Spring Batch"></a>Spring Batch</h4>]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>数据源配置</tag>
      </tags>
  </entry>
  <entry>
    <title>图系列一</title>
    <url>/2019-05-29-%E5%9B%BE%E7%B3%BB%E5%88%97%E4%B8%80%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天我们来学习一个新的数据结构–图。</p>
<p>在学的过程中看到这么一段话</p>
<blockquote>
<p>基础的数据结构就是<strong>数组</strong>和<strong>链表</strong>，而后面更加复杂的树、队列、图等等都可以通过<strong>数组</strong>和<strong>链表</strong>的方式存储，出现这些数据结构的原因就是为了解决部分问题处理过程中的复杂度过高的额原因，所以数据结构就是为了算法而生。</p>
</blockquote>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote>
<p>A Graph is a non-linear data structure consisting of nodes and edges.The nodes are sometimes also referred to as vertices(顶点) and the edges are lines or arcs that connect any two nodes in the graph.</p>
<p>A Graph consists of a finite set of vertices(or nodes)and set of Edges which connect a pair of nodes.</p>
</blockquote>
<h4 id="图的存储方式"><a href="#图的存储方式" class="headerlink" title="图的存储方式"></a>图的存储方式</h4><h5 id="邻接矩阵-Adjacency-Matrix"><a href="#邻接矩阵-Adjacency-Matrix" class="headerlink" title="邻接矩阵(Adjacency Matrix)"></a>邻接矩阵(Adjacency Matrix)</h5><p>底层依赖的是一个二维数组，通过二维数组的index让其表示两个顶点之间的边，这个值可以是权重也可以是某个特殊的flag表示这张图的情况。</p>
<h5 id="邻接表-Adjacency-List"><a href="#邻接表-Adjacency-List" class="headerlink" title="邻接表(Adjacency List)"></a>邻接表(Adjacency List)</h5><p>上面讲的邻接矩阵有个不好的地方，如果是稀疏图的话，对于内存空间浪费太大，所以我们引入了<strong>邻接表</strong>。邻接表如果你学了散列表中为了解决冲突的中<strong>链表法</strong>，你会发现两者其实是差不多的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> v;<span class="comment">//顶点个数</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Integer&gt; adj[];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.v=v;</span><br><span class="line">        adj=<span class="keyword">new</span> LinkedList[v];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v;i++)&#123;</span><br><span class="line">            adj[i]=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">        adj[s].add(t);</span><br><span class="line">        adj[t].add(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="有关图的算法"><a href="#有关图的算法" class="headerlink" title="有关图的算法"></a>有关图的算法</h4><h5 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==t) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">boolean</span>[] visited=<span class="keyword">new</span> <span class="keyword">boolean</span>[v];</span><br><span class="line">    visited[s]=<span class="keyword">true</span>;</span><br><span class="line">    Queue&lt;Integer&gt; queue=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    queue.add(s);</span><br><span class="line">    <span class="keyword">int</span>[] prev=<span class="keyword">new</span> <span class="keyword">int</span>[v];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v;i++)&#123;</span><br><span class="line">        prev[i]=-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> w=queue.poll();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;adj[w].size();++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> q=adj[w].get(i);</span><br><span class="line">            <span class="keyword">if</span>(!visited[q])&#123;</span><br><span class="line">                prev[q]=w;</span><br><span class="line">                <span class="keyword">if</span>(q==t)&#123;</span><br><span class="line">                    print(prev,s,t);</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                visited[q]=<span class="keyword">true</span>;</span><br><span class="line">                queue.add(q);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[] prev,<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prev[t]!=-<span class="number">1</span>&amp;&amp;t!=s)&#123;</span><br><span class="line">        print(prev,s,prev[t]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(t+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="深度优先算法"><a href="#深度优先算法" class="headerlink" title="深度优先算法"></a>深度优先算法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> found=<span class="keyword">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    found=<span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span>[] visited=<span class="keyword">new</span> <span class="keyword">boolean</span>[v];</span><br><span class="line">    <span class="keyword">int</span>[] prev=<span class="keyword">new</span> <span class="keyword">int</span>[v];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v;i++)&#123;</span><br><span class="line">       	prev[i]=-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    recurDfs(s,t,visited,prev);</span><br><span class="line">    print(prev,s,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recurDfs</span><span class="params">(<span class="keyword">int</span> w,<span class="keyword">int</span> t,<span class="keyword">boolean</span>[] visited,<span class="keyword">int</span>[] prev)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(found==<span class="keyword">true</span>) <span class="keyword">return</span>;</span><br><span class="line">    visited[w]=<span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(w==t)&#123;</span><br><span class="line">        found==<span class="keyword">true</span>;</span><br><span class="line">      	<span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;adj[w].size();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> q=adj[w].get(i);</span><br><span class="line">        <span class="keyword">if</span>(!visited[q])&#123;</span><br><span class="line">            prev[q]=w;</span><br><span class="line">			recurDfs(q,t,visited,prev);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="最小生成树算法"><a href="#最小生成树算法" class="headerlink" title="最小生成树算法"></a>最小生成树算法</h4><h5 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h5><p>思考：首先通过邻接矩阵存储图，然后有三个数组</p>
<p>​        parent[v] 表示当前树生长过程中，每个顶点的父节点 key[v] 表示当前顶点与生成树中最小的距离 mstSet[V] 表示当前顶点是否在生成树里</p>
<p>​        接着我们来看一下思路，首先我们取顶点0位根节点</p>
<p>​        minKey()函数用来找到未加入生成树种key最小的index(顶点下标)</p>
<p>​        key 更新在一个for里，如果当前顶点u加入到生成树，我们判断u与所有未加入到生成树的顶点之间的距离graph与key的关系 更新key，让key永远存储最小值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V 5</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minKey</span><span class="params">(<span class="keyword">int</span> key[V], <span class="keyword">bool</span> mstSet[V])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=INT_MAX,minIndex;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mstSet[i]==<span class="literal">false</span>&amp;&amp;key[i]&lt;<span class="built_in">min</span>)&#123;</span><br><span class="line">            <span class="built_in">min</span>=key[i]; minIndex=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMST</span><span class="params">(<span class="keyword">int</span> parent[], <span class="keyword">int</span> n, <span class="keyword">int</span> graph[V][V])</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Edge \tWeight\n"</span>); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; V; i++) </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d - %d \t%d \n"</span>, parent[i], i, graph[i][parent[i]]); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">primMST</span><span class="params">(<span class="keyword">int</span> graph[][V])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示生成树的顶点</span></span><br><span class="line">    <span class="keyword">int</span> parent[V];</span><br><span class="line">    <span class="comment">//表示加入到生成树后更新距离</span></span><br><span class="line">    <span class="keyword">int</span> key[V];</span><br><span class="line">    <span class="comment">//表示是否在生成树中</span></span><br><span class="line">    <span class="keyword">bool</span> mstSet[V];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        key[i]=INT_MAX;</span><br><span class="line">        mstSet[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//刚开始把 0 当做第一个节点</span></span><br><span class="line">    parent[<span class="number">0</span>]=<span class="number">-1</span>;  <span class="comment">//表示根节点</span></span><br><span class="line">    key[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> count=<span class="number">0</span>;count&lt;V<span class="number">-1</span>;count++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=minKey(key,mstSet);</span><br><span class="line"></span><br><span class="line">        mstSet[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//进行更新</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(graph[u][i]&amp;&amp;mstSet[i]==<span class="literal">false</span>&amp;&amp;graph[u][i]&lt;key[i])&#123;</span><br><span class="line">                parent[i]=u;</span><br><span class="line">                key[i]=graph[u][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printMST(parent,V,graph);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> graph[V][V] = &#123;</span><br><span class="line">      				&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>&#125;, </span><br><span class="line">                    &#123;<span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>&#125;, </span><br><span class="line">                    &#123;<span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>&#125;, </span><br><span class="line">                    &#123;<span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>&#125;, </span><br><span class="line">                    &#123;<span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">0</span>&#125;</span><br><span class="line">  					&#125;; </span><br><span class="line">  </span><br><span class="line">  primMST(graph);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h5><p>思路：</p>
<p>​    首先是存储图，在这里选择用邻接表来表示</p>
<p>​    对其权重进行排序，并且初始化子集。</p>
<p>​    然后找到最小的权重</p>
<p>​    接着判断是否构成环，就是其parent是否相同。</p>
<p>​    并且更新</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> src,dest,weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> V,E;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>* <span class="title">edge</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct Graph* <span class="title">createGraph</span><span class="params">(<span class="keyword">int</span> V, <span class="keyword">int</span> E)</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>* <span class="title">graph</span>=<span class="title">new</span> <span class="title">Graph</span>;</span></span><br><span class="line">        graph-&gt;V=V;</span><br><span class="line">        graph-&gt;E=E;</span><br><span class="line">        graph-&gt;edge=<span class="keyword">new</span> Edge[E];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">subset</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> parent;</span><br><span class="line">    <span class="keyword">int</span> rank;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(struct subset subsets[],<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(subsets[i].parent!=i)</span><br><span class="line">        subsets[i].parent=<span class="built_in">find</span>(subsets,subsets[i].parent);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> subsets[i].parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(struct subset subsets[],<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> xroot=<span class="built_in">find</span>(subsets,x);</span><br><span class="line">    <span class="keyword">int</span> yroot=<span class="built_in">find</span>(subsets,y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(subsets[xroot].rank&lt;subsets[yroot].rank)</span><br><span class="line">        subsets[xroot].parent=yroot;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(subsets[xroot].rank&gt;subsets[yroot].rank)</span><br><span class="line">        subsets[yroot].parent=xroot;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        subsets[yroot].parent=xroot;</span><br><span class="line">        subsets[xroot].rank++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myComp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a,<span class="keyword">const</span> <span class="keyword">void</span>* b)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>* <span class="title">a1</span>=(<span class="title">struct</span> <span class="title">Edge</span>*)<span class="title">a</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>* <span class="title">b1</span>=(<span class="title">struct</span> <span class="title">Edge</span>*)<span class="title">b</span>;</span></span><br><span class="line">    <span class="keyword">return</span> a1-&gt;weight&gt;b1-&gt;weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KruskalMST</span><span class="params">(struct Graph* graph)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> V=graph-&gt;V;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> <span class="title">result</span>[<span class="title">V</span>];</span></span><br><span class="line">    <span class="keyword">int</span> e=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    qsort(graph-&gt;edge,graph-&gt;E,<span class="keyword">sizeof</span>(graph-&gt;edge[<span class="number">0</span>]),myComp);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">subset</span> *<span class="title">subsets</span>=(<span class="title">struct</span> <span class="title">subset</span>*)<span class="title">malloc</span>(<span class="title">V</span>*<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">subset</span>));</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;V;++v)&#123;</span><br><span class="line">        subsets[v].parent=v;</span><br><span class="line">        subsets[v].rank=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(e&lt;V<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> <span class="title">next_edge</span>=<span class="title">graph</span>-&gt;<span class="title">edge</span>[<span class="title">i</span>++];</span></span><br><span class="line">        <span class="keyword">int</span> x=<span class="built_in">find</span>(subsets,next_edge.src);</span><br><span class="line">        <span class="keyword">int</span> y=<span class="built_in">find</span>(subsets,next_edge.dest);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">            result[e++]=next_edge;</span><br><span class="line">            Union(subsets,x,y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Following are the edges in the constructed MST\n"</span>); </span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; e; ++i) </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d -- %d == %d\n"</span>, result[i].src, result[i].dest, result[i].weight); </span><br><span class="line">	<span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> V=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> E=<span class="number">5</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>* <span class="title">graph</span>=<span class="title">createGraph</span>(<span class="title">V</span>,<span class="title">E</span>);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// add edge 0-1 </span></span><br><span class="line">	graph-&gt;edge[<span class="number">0</span>].src = <span class="number">0</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">0</span>].dest = <span class="number">1</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">0</span>].weight = <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line">	<span class="comment">// add edge 0-2 </span></span><br><span class="line">	graph-&gt;edge[<span class="number">1</span>].src = <span class="number">0</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">1</span>].dest = <span class="number">2</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">1</span>].weight = <span class="number">6</span>; </span><br><span class="line"></span><br><span class="line">	<span class="comment">// add edge 0-3 </span></span><br><span class="line">	graph-&gt;edge[<span class="number">2</span>].src = <span class="number">0</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">2</span>].dest = <span class="number">3</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">2</span>].weight = <span class="number">5</span>; </span><br><span class="line"></span><br><span class="line">	<span class="comment">// add edge 1-3 </span></span><br><span class="line">	graph-&gt;edge[<span class="number">3</span>].src = <span class="number">1</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">3</span>].dest = <span class="number">3</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">3</span>].weight = <span class="number">15</span>; </span><br><span class="line"></span><br><span class="line">	<span class="comment">// add edge 2-3 </span></span><br><span class="line">	graph-&gt;edge[<span class="number">4</span>].src = <span class="number">2</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">4</span>].dest = <span class="number">3</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">4</span>].weight = <span class="number">4</span>; </span><br><span class="line"></span><br><span class="line">    KruskalMST(graph);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="最短路径算法"><a href="#最短路径算法" class="headerlink" title="最短路径算法"></a>最短路径算法</h4><h5 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h5><p>思路：这个算法的思路跟前面的prim思路基本一致</p>
<p>​    有两个集合，一个集合表示在最短路径里(parent),一个表示不在(sptSet)</p>
<p>​    然后每次更新，并且找到小的路程</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V 9 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(<span class="keyword">bool</span> sptSet[V],<span class="keyword">int</span> dist[V])</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=INT_MAX,minIndex;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sptSet[i]==<span class="literal">false</span>&amp;&amp;dist[i]&lt;<span class="built_in">min</span>)&#123;</span><br><span class="line">            <span class="built_in">min</span>=dist[i];</span><br><span class="line">            minIndex=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printSolution</span><span class="params">(<span class="keyword">int</span> dist[], <span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Vertex Distance from Source\n"</span>); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++) </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d tt %d\n"</span>, i, dist[i]); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> graph[][V])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化两个函数</span></span><br><span class="line">    <span class="keyword">bool</span> sptSet[V];</span><br><span class="line">    <span class="keyword">int</span> dist[V];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        sptSet[i]=<span class="literal">false</span>;</span><br><span class="line">        dist[i]=INT_MAX;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将节点0作为根节点</span></span><br><span class="line">    dist[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="comment">//先找到最小的距离</span></span><br><span class="line">        <span class="keyword">int</span> u=minDistance(sptSet,dist);</span><br><span class="line"></span><br><span class="line">        sptSet[u]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始更新</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!sptSet[i]&amp;&amp;graph[u][i]&amp;&amp;dist[u]!=INT_MAX&amp;&amp;dist[u]+graph[u][i]&lt;dist[i])&#123;</span><br><span class="line">                dist[i]=dist[u]+graph[u][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printSolution(dist, V); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> graph[V][V] = &#123;</span><br><span class="line">                    &#123;<span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>&#125;, </span><br><span class="line">					&#123;<span class="number">4</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>&#125;, </span><br><span class="line">					&#123;<span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>&#125;, </span><br><span class="line">					&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">					&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">					&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">					&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>&#125;, </span><br><span class="line">					&#123;<span class="number">8</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>&#125;, </span><br><span class="line">					&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>&#125; </span><br><span class="line">					&#125;; </span><br><span class="line"></span><br><span class="line">    dijkstra(graph);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">(<span class="keyword">int</span> graph[][N])</span></span>&#123;</span><br><span class="line">    <span class="comment">//首先进行初始化</span></span><br><span class="line">    <span class="keyword">int</span> dist[N][N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)</span><br><span class="line">        dist[i][j]=graph[i][j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历并且找到图的路径</span></span><br><span class="line">    <span class="keyword">int</span> path[N][N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;N;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dist[i][j]&gt;dist[i][k]+dist[k][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    dist[i][j]=dist[i][k]+dist[k][j];</span><br><span class="line">                    path[k][j]=k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建图</span></span><br><span class="line">    <span class="keyword">int</span> graph[N][N];</span><br><span class="line"></span><br><span class="line">    floyd(graph);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>图系列一</title>
    <url>/2019-05-29-%E5%9B%BE%E7%B3%BB%E5%88%97%E4%B8%80/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天我们来学习一个新的数据结构–图。</p>
<p>在学的过程中看到这么一段话</p>
<blockquote>
<p>基础的数据结构就是<strong>数组</strong>和<strong>链表</strong>，而后面更加复杂的树、队列、图等等都可以通过<strong>数组</strong>和<strong>链表</strong>的方式存储，出现这些数据结构的原因就是为了解决部分问题处理过程中的复杂度过高的额原因，所以数据结构就是为了算法而生。</p>
</blockquote>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote>
<p>A Graph is a non-linear data structure consisting of nodes and edges.The nodes are sometimes also referred to as vertices(顶点) and the edges are lines or arcs that connect any two nodes in the graph.</p>
<p>A Graph consists of a finite set of vertices(or nodes)and set of Edges which connect a pair of nodes.</p>
</blockquote>
<h4 id="图的存储方式"><a href="#图的存储方式" class="headerlink" title="图的存储方式"></a>图的存储方式</h4><h5 id="邻接矩阵-Adjacency-Matrix"><a href="#邻接矩阵-Adjacency-Matrix" class="headerlink" title="邻接矩阵(Adjacency Matrix)"></a>邻接矩阵(Adjacency Matrix)</h5><p>底层依赖的是一个二维数组，通过二维数组的index让其表示两个顶点之间的边，这个值可以是权重也可以是某个特殊的flag表示这张图的情况。</p>
<h5 id="邻接表-Adjacency-List"><a href="#邻接表-Adjacency-List" class="headerlink" title="邻接表(Adjacency List)"></a>邻接表(Adjacency List)</h5><p>上面讲的邻接矩阵有个不好的地方，如果是稀疏图的话，对于内存空间浪费太大，所以我们引入了<strong>邻接表</strong>。邻接表如果你学了散列表中为了解决冲突的中<strong>链表法</strong>，你会发现两者其实是差不多的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> v;<span class="comment">//顶点个数</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Integer&gt; adj[];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.v=v;</span><br><span class="line">        adj=<span class="keyword">new</span> LinkedList[v];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v;i++)&#123;</span><br><span class="line">            adj[i]=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">        adj[s].add(t);</span><br><span class="line">        adj[t].add(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="有关图的算法"><a href="#有关图的算法" class="headerlink" title="有关图的算法"></a>有关图的算法</h4><h5 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==t) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">boolean</span>[] visited=<span class="keyword">new</span> <span class="keyword">boolean</span>[v];</span><br><span class="line">    visited[s]=<span class="keyword">true</span>;</span><br><span class="line">    Queue&lt;Integer&gt; queue=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    queue.add(s);</span><br><span class="line">    <span class="keyword">int</span>[] prev=<span class="keyword">new</span> <span class="keyword">int</span>[v];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v;i++)&#123;</span><br><span class="line">        prev[i]=-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> w=queue.poll();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;adj[w].size();++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> q=adj[w].get(i);</span><br><span class="line">            <span class="keyword">if</span>(!visited[q])&#123;</span><br><span class="line">                prev[q]=w;</span><br><span class="line">                <span class="keyword">if</span>(q==t)&#123;</span><br><span class="line">                    print(prev,s,t);</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                visited[q]=<span class="keyword">true</span>;</span><br><span class="line">                queue.add(q);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[] prev,<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prev[t]!=-<span class="number">1</span>&amp;&amp;t!=s)&#123;</span><br><span class="line">        print(prev,s,prev[t]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(t+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="深度优先算法"><a href="#深度优先算法" class="headerlink" title="深度优先算法"></a>深度优先算法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> found=<span class="keyword">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    found=<span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span>[] visited=<span class="keyword">new</span> <span class="keyword">boolean</span>[v];</span><br><span class="line">    <span class="keyword">int</span>[] prev=<span class="keyword">new</span> <span class="keyword">int</span>[v];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v;i++)&#123;</span><br><span class="line">       	prev[i]=-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    recurDfs(s,t,visited,prev);</span><br><span class="line">    print(prev,s,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recurDfs</span><span class="params">(<span class="keyword">int</span> w,<span class="keyword">int</span> t,<span class="keyword">boolean</span>[] visited,<span class="keyword">int</span>[] prev)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(found==<span class="keyword">true</span>) <span class="keyword">return</span>;</span><br><span class="line">    visited[w]=<span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(w==t)&#123;</span><br><span class="line">        found==<span class="keyword">true</span>;</span><br><span class="line">      	<span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;adj[w].size();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> q=adj[w].get(i);</span><br><span class="line">        <span class="keyword">if</span>(!visited[q])&#123;</span><br><span class="line">            prev[q]=w;</span><br><span class="line">			recurDfs(q,t,visited,prev);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="最小生成树算法"><a href="#最小生成树算法" class="headerlink" title="最小生成树算法"></a>最小生成树算法</h4><h5 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h5><p>思考：首先通过邻接矩阵存储图，然后有三个数组</p>
<p>​        parent[v] 表示当前树生长过程中，每个顶点的父节点 key[v] 表示当前顶点与生成树中最小的距离 mstSet[V] 表示当前顶点是否在生成树里</p>
<p>​        接着我们来看一下思路，首先我们取顶点0位根节点</p>
<p>​        minKey()函数用来找到未加入生成树种key最小的index(顶点下标)</p>
<p>​        key 更新在一个for里，如果当前顶点u加入到生成树，我们判断u与所有未加入到生成树的顶点之间的距离graph与key的关系 更新key，让key永远存储最小值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V 5</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minKey</span><span class="params">(<span class="keyword">int</span> key[V], <span class="keyword">bool</span> mstSet[V])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=INT_MAX,minIndex;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mstSet[i]==<span class="literal">false</span>&amp;&amp;key[i]&lt;<span class="built_in">min</span>)&#123;</span><br><span class="line">            <span class="built_in">min</span>=key[i]; minIndex=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMST</span><span class="params">(<span class="keyword">int</span> parent[], <span class="keyword">int</span> n, <span class="keyword">int</span> graph[V][V])</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Edge \tWeight\n"</span>); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; V; i++) </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d - %d \t%d \n"</span>, parent[i], i, graph[i][parent[i]]); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">primMST</span><span class="params">(<span class="keyword">int</span> graph[][V])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示生成树的顶点</span></span><br><span class="line">    <span class="keyword">int</span> parent[V];</span><br><span class="line">    <span class="comment">//表示加入到生成树后更新距离</span></span><br><span class="line">    <span class="keyword">int</span> key[V];</span><br><span class="line">    <span class="comment">//表示是否在生成树中</span></span><br><span class="line">    <span class="keyword">bool</span> mstSet[V];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        key[i]=INT_MAX;</span><br><span class="line">        mstSet[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//刚开始把 0 当做第一个节点</span></span><br><span class="line">    parent[<span class="number">0</span>]=<span class="number">-1</span>;  <span class="comment">//表示根节点</span></span><br><span class="line">    key[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> count=<span class="number">0</span>;count&lt;V<span class="number">-1</span>;count++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=minKey(key,mstSet);</span><br><span class="line"></span><br><span class="line">        mstSet[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//进行更新</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(graph[u][i]&amp;&amp;mstSet[i]==<span class="literal">false</span>&amp;&amp;graph[u][i]&lt;key[i])&#123;</span><br><span class="line">                parent[i]=u;</span><br><span class="line">                key[i]=graph[u][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printMST(parent,V,graph);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> graph[V][V] = &#123;</span><br><span class="line">      				&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>&#125;, </span><br><span class="line">                    &#123;<span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>&#125;, </span><br><span class="line">                    &#123;<span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>&#125;, </span><br><span class="line">                    &#123;<span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>&#125;, </span><br><span class="line">                    &#123;<span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">0</span>&#125;</span><br><span class="line">  					&#125;; </span><br><span class="line">  </span><br><span class="line">  primMST(graph);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h5><p>思路：</p>
<p>​    首先是存储图，在这里选择用邻接表来表示</p>
<p>​    对其权重进行排序，并且初始化子集。</p>
<p>​    然后找到最小的权重</p>
<p>​    接着判断是否构成环，就是其parent是否相同。</p>
<p>​    并且更新</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> src,dest,weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> V,E;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>* <span class="title">edge</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct Graph* <span class="title">createGraph</span><span class="params">(<span class="keyword">int</span> V, <span class="keyword">int</span> E)</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>* <span class="title">graph</span>=<span class="title">new</span> <span class="title">Graph</span>;</span></span><br><span class="line">        graph-&gt;V=V;</span><br><span class="line">        graph-&gt;E=E;</span><br><span class="line">        graph-&gt;edge=<span class="keyword">new</span> Edge[E];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">subset</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> parent;</span><br><span class="line">    <span class="keyword">int</span> rank;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(struct subset subsets[],<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(subsets[i].parent!=i)</span><br><span class="line">        subsets[i].parent=<span class="built_in">find</span>(subsets,subsets[i].parent);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> subsets[i].parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(struct subset subsets[],<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> xroot=<span class="built_in">find</span>(subsets,x);</span><br><span class="line">    <span class="keyword">int</span> yroot=<span class="built_in">find</span>(subsets,y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(subsets[xroot].rank&lt;subsets[yroot].rank)</span><br><span class="line">        subsets[xroot].parent=yroot;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(subsets[xroot].rank&gt;subsets[yroot].rank)</span><br><span class="line">        subsets[yroot].parent=xroot;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        subsets[yroot].parent=xroot;</span><br><span class="line">        subsets[xroot].rank++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myComp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a,<span class="keyword">const</span> <span class="keyword">void</span>* b)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>* <span class="title">a1</span>=(<span class="title">struct</span> <span class="title">Edge</span>*)<span class="title">a</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>* <span class="title">b1</span>=(<span class="title">struct</span> <span class="title">Edge</span>*)<span class="title">b</span>;</span></span><br><span class="line">    <span class="keyword">return</span> a1-&gt;weight&gt;b1-&gt;weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KruskalMST</span><span class="params">(struct Graph* graph)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> V=graph-&gt;V;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> <span class="title">result</span>[<span class="title">V</span>];</span></span><br><span class="line">    <span class="keyword">int</span> e=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    qsort(graph-&gt;edge,graph-&gt;E,<span class="keyword">sizeof</span>(graph-&gt;edge[<span class="number">0</span>]),myComp);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">subset</span> *<span class="title">subsets</span>=(<span class="title">struct</span> <span class="title">subset</span>*)<span class="title">malloc</span>(<span class="title">V</span>*<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">subset</span>));</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;V;++v)&#123;</span><br><span class="line">        subsets[v].parent=v;</span><br><span class="line">        subsets[v].rank=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(e&lt;V<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> <span class="title">next_edge</span>=<span class="title">graph</span>-&gt;<span class="title">edge</span>[<span class="title">i</span>++];</span></span><br><span class="line">        <span class="keyword">int</span> x=<span class="built_in">find</span>(subsets,next_edge.src);</span><br><span class="line">        <span class="keyword">int</span> y=<span class="built_in">find</span>(subsets,next_edge.dest);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">            result[e++]=next_edge;</span><br><span class="line">            Union(subsets,x,y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Following are the edges in the constructed MST\n"</span>); </span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; e; ++i) </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d -- %d == %d\n"</span>, result[i].src, result[i].dest, result[i].weight); </span><br><span class="line">	<span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> V=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> E=<span class="number">5</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>* <span class="title">graph</span>=<span class="title">createGraph</span>(<span class="title">V</span>,<span class="title">E</span>);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// add edge 0-1 </span></span><br><span class="line">	graph-&gt;edge[<span class="number">0</span>].src = <span class="number">0</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">0</span>].dest = <span class="number">1</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">0</span>].weight = <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line">	<span class="comment">// add edge 0-2 </span></span><br><span class="line">	graph-&gt;edge[<span class="number">1</span>].src = <span class="number">0</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">1</span>].dest = <span class="number">2</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">1</span>].weight = <span class="number">6</span>; </span><br><span class="line"></span><br><span class="line">	<span class="comment">// add edge 0-3 </span></span><br><span class="line">	graph-&gt;edge[<span class="number">2</span>].src = <span class="number">0</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">2</span>].dest = <span class="number">3</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">2</span>].weight = <span class="number">5</span>; </span><br><span class="line"></span><br><span class="line">	<span class="comment">// add edge 1-3 </span></span><br><span class="line">	graph-&gt;edge[<span class="number">3</span>].src = <span class="number">1</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">3</span>].dest = <span class="number">3</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">3</span>].weight = <span class="number">15</span>; </span><br><span class="line"></span><br><span class="line">	<span class="comment">// add edge 2-3 </span></span><br><span class="line">	graph-&gt;edge[<span class="number">4</span>].src = <span class="number">2</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">4</span>].dest = <span class="number">3</span>; </span><br><span class="line">	graph-&gt;edge[<span class="number">4</span>].weight = <span class="number">4</span>; </span><br><span class="line"></span><br><span class="line">    KruskalMST(graph);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="最短路径算法"><a href="#最短路径算法" class="headerlink" title="最短路径算法"></a>最短路径算法</h4><h5 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h5><p>思路：这个算法的思路跟前面的prim思路基本一致</p>
<p>​    有两个集合，一个集合表示在最短路径里(parent),一个表示不在(sptSet)</p>
<p>​    然后每次更新，并且找到小的路程</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V 9 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(<span class="keyword">bool</span> sptSet[V],<span class="keyword">int</span> dist[V])</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=INT_MAX,minIndex;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sptSet[i]==<span class="literal">false</span>&amp;&amp;dist[i]&lt;<span class="built_in">min</span>)&#123;</span><br><span class="line">            <span class="built_in">min</span>=dist[i];</span><br><span class="line">            minIndex=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printSolution</span><span class="params">(<span class="keyword">int</span> dist[], <span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Vertex Distance from Source\n"</span>); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++) </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d tt %d\n"</span>, i, dist[i]); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> graph[][V])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化两个函数</span></span><br><span class="line">    <span class="keyword">bool</span> sptSet[V];</span><br><span class="line">    <span class="keyword">int</span> dist[V];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        sptSet[i]=<span class="literal">false</span>;</span><br><span class="line">        dist[i]=INT_MAX;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将节点0作为根节点</span></span><br><span class="line">    dist[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="comment">//先找到最小的距离</span></span><br><span class="line">        <span class="keyword">int</span> u=minDistance(sptSet,dist);</span><br><span class="line"></span><br><span class="line">        sptSet[u]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始更新</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!sptSet[i]&amp;&amp;graph[u][i]&amp;&amp;dist[u]!=INT_MAX&amp;&amp;dist[u]+graph[u][i]&lt;dist[i])&#123;</span><br><span class="line">                dist[i]=dist[u]+graph[u][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printSolution(dist, V); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> graph[V][V] = &#123;</span><br><span class="line">                    &#123;<span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>&#125;, </span><br><span class="line">					&#123;<span class="number">4</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>&#125;, </span><br><span class="line">					&#123;<span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>&#125;, </span><br><span class="line">					&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">					&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">					&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">					&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>&#125;, </span><br><span class="line">					&#123;<span class="number">8</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>&#125;, </span><br><span class="line">					&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>&#125; </span><br><span class="line">					&#125;; </span><br><span class="line"></span><br><span class="line">    dijkstra(graph);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">(<span class="keyword">int</span> graph[][N])</span></span>&#123;</span><br><span class="line">    <span class="comment">//首先进行初始化</span></span><br><span class="line">    <span class="keyword">int</span> dist[N][N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)</span><br><span class="line">        dist[i][j]=graph[i][j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历并且找到图的路径</span></span><br><span class="line">    <span class="keyword">int</span> path[N][N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;N;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dist[i][j]&gt;dist[i][k]+dist[k][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    dist[i][j]=dist[i][k]+dist[k][j];</span><br><span class="line">                    path[k][j]=k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建图</span></span><br><span class="line">    <span class="keyword">int</span> graph[N][N];</span><br><span class="line"></span><br><span class="line">    floyd(graph);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>硬着头皮肝Java</title>
    <url>/2019-05-23-%E7%A1%AC%E7%9D%80%E5%A4%B4%E7%9A%AE%E8%82%9DJava/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每次用Java的时候总会在数组这里犯错误，还有size()与length</p>
<p>这篇文章克服这个问题</p>
<h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><p>数组 length size()  动态数组ArrayList 引用 Integer Collections 自动装箱、拆箱</p>
<h4 id="初始数组"><a href="#初始数组" class="headerlink" title="初始数组"></a>初始数组</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];  <span class="comment">//这个表示创建一个可以容纳5个int元素的数组</span></span><br><span class="line">                         <span class="comment">//定义一个数组变量 使用数组类型 "类型[]"</span></span><br><span class="line"><span class="keyword">int</span>[] array=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; <span class="comment">//定义初始化元素，变量大小由编辑器自动算出</span></span><br><span class="line"><span class="comment">//进一步可以简化为</span></span><br><span class="line"><span class="keyword">int</span>[] array=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>some tips:</p>
<ol>
<li>数组一旦创建完后，其大小就不可变</li>
<li>要得到数组的长度可以通过 “数组变量名.length”</li>
</ol>
<h4 id="length-amp-size"><a href="#length-amp-size" class="headerlink" title="length&amp;size()"></a>length&amp;size()</h4><blockquote>
<p>length is constant  which is used to find out the array storing capacity.</p>
<p>size is the number of elements in the array</p>
<p>but you cannot invoke size() for a array such as in[] </p>
</blockquote>
<p>举个不恰当的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] test=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">     test[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">     System.out.println(test.length);  <span class="comment">//这个结果是5</span></span><br><span class="line">     System.out.println(test.size);     <span class="comment">//这个报错，但是设想的结果应该是 1</span></span><br></pre></td></tr></table></figure>

<p>进一步深入</p>
<blockquote>
<p>ArrayList doesn’t have length() method,the size() method of ArrayList provides the number of objects avaliable in the collection</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span>[] test=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">      test[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">      System.out.println(test.length);    <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">       ArrayList&lt;Integer&gt; arrayList=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">       arrayList.add(<span class="number">1</span>);</span><br><span class="line">       System.out.println(arrayList.size());   <span class="comment">//1</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>现在我们稍微有点清楚了，length表示的array的存储容量，size()表示的是arraylist的元素个数。</p>
<p>为什么array没有size?这个是因为array会默认初始化，所以其实里面都有元素，即元素个数都为其容量</p>
<h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><blockquote>
<p>It provides us dynamic arrays in java</p>
</blockquote>
<p>构造函数</p>
<ol>
<li>ArrayList() 用来建立一个空的数组列表</li>
<li>ArrayList(Collection c) 用来建立一个数组，数组里初始化的参数来自c</li>
<li>ArrayList(int capacity)用来建立一个数组，数组的存储能力为capacity</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; arrayList=<span class="keyword">new</span> ArrayList&lt;Integer&gt;(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>



<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>引入问题，我发现引用这块我掌握的不是很好</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] names = &#123;<span class="string">"ABC"</span>, <span class="string">"XYZ"</span>, <span class="string">"zoo"</span>&#125;;</span><br><span class="line">        String s = names[<span class="number">1</span>];</span><br><span class="line">        names[<span class="number">1</span>] = <span class="string">"cat"</span>;</span><br><span class="line">        System.out.println(s); <span class="comment">// s是"XYZ"还是"cat"?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h4><blockquote>
<p>A collection is a group of individual objects represented as a single unit.</p>
<p>The standard methods for grouping Java objects (or collections) were Arrays or Vectors or Hashtables.All </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Vector&lt;Integer&gt; v = <span class="keyword">new</span> Vector();</span><br><span class="line">       Hashtable&lt;Integer, String&gt; h = <span class="keyword">new</span> Hashtable();</span><br><span class="line">       v.addElement(<span class="number">1</span>);</span><br><span class="line">       v.addElement(<span class="number">2</span>);</span><br><span class="line">       h.put(<span class="number">1</span>,<span class="string">"geeks"</span>);</span><br></pre></td></tr></table></figure>

<h4 id="Integer-amp-Int"><a href="#Integer-amp-Int" class="headerlink" title="Integer&amp;Int"></a>Integer&amp;Int</h4><blockquote>
<p>两者关系：Integer是int对应的包装类。</p>
<p>In java,int is a primitive data type while Integer is a wrapper class</p>
</blockquote>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>硬着头皮肝Java</title>
    <url>/2019-05-23-%E7%A1%AC%E7%9D%80%E5%A4%B4%E7%9A%AE%E8%82%9DJava%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每次用Java的时候总会在数组这里犯错误，还有size()与length</p>
<p>这篇文章克服这个问题</p>
<h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><p>数组 length size()  动态数组ArrayList 引用 Integer Collections 自动装箱、拆箱</p>
<h4 id="初始数组"><a href="#初始数组" class="headerlink" title="初始数组"></a>初始数组</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];  <span class="comment">//这个表示创建一个可以容纳5个int元素的数组</span></span><br><span class="line">                         <span class="comment">//定义一个数组变量 使用数组类型 "类型[]"</span></span><br><span class="line"><span class="keyword">int</span>[] array=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; <span class="comment">//定义初始化元素，变量大小由编辑器自动算出</span></span><br><span class="line"><span class="comment">//进一步可以简化为</span></span><br><span class="line"><span class="keyword">int</span>[] array=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>some tips:</p>
<ol>
<li>数组一旦创建完后，其大小就不可变</li>
<li>要得到数组的长度可以通过 “数组变量名.length”</li>
</ol>
<h4 id="length-amp-size"><a href="#length-amp-size" class="headerlink" title="length&amp;size()"></a>length&amp;size()</h4><blockquote>
<p>length is constant  which is used to find out the array storing capacity.</p>
<p>size is the number of elements in the array</p>
<p>but you cannot invoke size() for a array such as in[] </p>
</blockquote>
<p>举个不恰当的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] test=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">     test[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">     System.out.println(test.length);  <span class="comment">//这个结果是5</span></span><br><span class="line">     System.out.println(test.size);     <span class="comment">//这个报错，但是设想的结果应该是 1</span></span><br></pre></td></tr></table></figure>

<p>进一步深入</p>
<blockquote>
<p>ArrayList doesn’t have length() method,the size() method of ArrayList provides the number of objects avaliable in the collection</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span>[] test=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">      test[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">      System.out.println(test.length);    <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">       ArrayList&lt;Integer&gt; arrayList=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">       arrayList.add(<span class="number">1</span>);</span><br><span class="line">       System.out.println(arrayList.size());   <span class="comment">//1</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>现在我们稍微有点清楚了，length表示的array的存储容量，size()表示的是arraylist的元素个数。</p>
<p>为什么array没有size?这个是因为array会默认初始化，所以其实里面都有元素，即元素个数都为其容量</p>
<h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><blockquote>
<p>It provides us dynamic arrays in java</p>
</blockquote>
<p>构造函数</p>
<ol>
<li>ArrayList() 用来建立一个空的数组列表</li>
<li>ArrayList(Collection c) 用来建立一个数组，数组里初始化的参数来自c</li>
<li>ArrayList(int capacity)用来建立一个数组，数组的存储能力为capacity</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; arrayList=<span class="keyword">new</span> ArrayList&lt;Integer&gt;(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>



<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>引入问题，我发现引用这块我掌握的不是很好</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] names = &#123;<span class="string">"ABC"</span>, <span class="string">"XYZ"</span>, <span class="string">"zoo"</span>&#125;;</span><br><span class="line">        String s = names[<span class="number">1</span>];</span><br><span class="line">        names[<span class="number">1</span>] = <span class="string">"cat"</span>;</span><br><span class="line">        System.out.println(s); <span class="comment">// s是"XYZ"还是"cat"?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h4><blockquote>
<p>A collection is a group of individual objects represented as a single unit.</p>
<p>The standard methods for grouping Java objects (or collections) were Arrays or Vectors or Hashtables.All </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Vector&lt;Integer&gt; v = <span class="keyword">new</span> Vector();</span><br><span class="line">       Hashtable&lt;Integer, String&gt; h = <span class="keyword">new</span> Hashtable();</span><br><span class="line">       v.addElement(<span class="number">1</span>);</span><br><span class="line">       v.addElement(<span class="number">2</span>);</span><br><span class="line">       h.put(<span class="number">1</span>,<span class="string">"geeks"</span>);</span><br></pre></td></tr></table></figure>

<h4 id="Integer-amp-Int"><a href="#Integer-amp-Int" class="headerlink" title="Integer&amp;Int"></a>Integer&amp;Int</h4><blockquote>
<p>两者关系：Integer是int对应的包装类。</p>
<p>In java,int is a primitive data type while Integer is a wrapper class</p>
</blockquote>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>学点Git,跟上这个时代</title>
    <url>/2019-05-18-%E5%AD%A6%E7%82%B9Git,%E8%B7%9F%E4%B8%8A%E8%BF%99%E4%B8%AA%E6%97%B6%E4%BB%A3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直以来都是使用Github Desktop，但是作为未来的<strong>程序员</strong>，不会点git太说不过去了，这次凑巧看到<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰老师</a>教程，所以就跟着过一遍。<del>至少以后可以吹逼嘛</del></p>
<h3 id="一些语法"><a href="#一些语法" class="headerlink" title="一些语法"></a>一些语法</h3><p>####创建版本库</p>
<p>#####初始化Git仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">&#x2F;&#x2F;会在当前目录下多一个.git的目录</span><br></pre></td></tr></table></figure>

<p>#####添加文件到Git仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一步：</span><br><span class="line">git add &lt;file&gt; &#x2F;&#x2F;可以反复使用 添加多个文件</span><br><span class="line"></span><br><span class="line">第二步：</span><br><span class="line">git commit -m &lt;message&gt; &#x2F;&#x2F;提交到git仓库 message表示提交的信息 像修改了...之类</span><br></pre></td></tr></table></figure>

<h4 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h4><h5 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status &#x2F;&#x2F;掌握当前仓库的状态</span><br></pre></td></tr></table></figure>

<h5 id="查看具体修改了哪些内容"><a href="#查看具体修改了哪些内容" class="headerlink" title="查看具体修改了哪些内容"></a>查看具体修改了哪些内容</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff &#x2F;&#x2F;对比修改内容</span><br></pre></td></tr></table></figure>

<h5 id="查看修改的历史记录"><a href="#查看修改的历史记录" class="headerlink" title="查看修改的历史记录"></a>查看修改的历史记录</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如果觉得输出信息太多可以用</span><br><span class="line">git log --pretty&#x3D;oneline</span><br></pre></td></tr></table></figure>

<h5 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;回退到上一个版本  HEAD^  上上一个版本 HEAD^^ 上100个版本 HEAD~100</span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;不过这个时候如果你查看 git log你会发现你刚才提交的信息不见了 为了能够再回去</span><br><span class="line">git reflog &#x2F;&#x2F;查看历史的commit_id</span><br><span class="line">git reset --hard commit_id</span><br></pre></td></tr></table></figure>

<h5 id="工作区-amp-版本库"><a href="#工作区-amp-版本库" class="headerlink" title="工作区&amp;版本库"></a>工作区&amp;版本库</h5><blockquote>
<p>工作区就是电脑中可以看到的目录 例如我现在电脑下的learngit文件夹</p>
<p>版本库工作区下面有个.git文件 是Git的版本库</p>
</blockquote>
<p>some keys:</p>
<blockquote>
<p>git status</p>
<p>提示 untracked表示 从来没有被添加过</p>
<p>提示 modified表示修改了</p>
</blockquote>
<p>其中版本库中有个很重要的概念是<strong>stage</strong>的暂存区</p>
<p>分解 添加文件到git仓库的步骤</p>
<ol>
<li>git add <file>  把要提交的所有修改放到暂存区</li>
<li>git commit 可以一次性把暂存区的所有修改提交到分支</li>
</ol>
<h5 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h5><blockquote>
<p>Git跟踪的是修改，而非文件</p>
</blockquote>
<p>举个例子 ：如果你第一次修改了-&gt;git add-&gt;第二次修改-&gt;git commit</p>
<p>结果是只提交了第一次修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff HEAD -- readme.txt &#x2F;&#x2F;可以查看 工作区 与版本库里面最新版的区别</span><br></pre></td></tr></table></figure>

<h5 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h5><p>场景1：修改了工作区里某个文件的内容，想要丢弃工作区里的修改时</p>
<p>这里有两种情况 一种是 在工作区中修改了，还没有放到暂存区里，现在撤销回到版本库中一模一样的状态 另外一种就是先前修改放到暂存区了，但是又进行修改，现在撤销回到暂存区一模一样的状态。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>场景2：当你修改了工作区的文件，又添加到暂存区里，这个时候想要丢弃修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;&#x2F;&#x2F;可以把暂存区里的修改退到工作区</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;然后就跟场景1一样了</span><br><span class="line">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>场景3：当你不仅修改了，而且commit了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<p>tips:</p>
<p>git checkout 其实使用版本库里的版本替换掉工作区的版本，可以做到“一键还原”</p>
<h5 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5><p>场景：在工作区下删除文件 或者rm <filename></p>
<p>可能1:确实是要删除的文件，这个时候版本库里并没有被删除，所以需要提交一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm &lt;filename&gt;</span><br><span class="line">git commit -m&lt;message&gt;</span><br></pre></td></tr></table></figure>

<p>可能2:误删了，现在需要从版本库中恢复</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>可能3：你通过git rm删除文件，这个时候添加到了暂存区，需要退回版本 然后在checkout</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm &lt;filename&gt;</span><br><span class="line">git reset HEAD &lt;filename&gt;</span><br><span class="line">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><p>强大的github来了</p>
<p>首先需要建立ssh(在用户的目录下可以看到.ssh)然后在github上add ssh就可以将其关联起来，</p>
<p>在github下new repo 然后可以看到将这个repo clone到本地或者将本地的仓库push到repo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;第一次推送</span><br><span class="line">git push -u origin master</span><br><span class="line">&#x2F;&#x2F;每次在本地操作完之后</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h4><blockquote>
<p>分支的作用：你需要开发一个版本，但是这个版本的时间需要两周，如果你没写完就提交到master会导致别人无法进行操作，所以你需要自己开一个新的分支，然后把代码提交到这个分支上，当全部完成后在提交到master</p>
</blockquote>
<h5 id="创建和合并分支"><a href="#创建和合并分支" class="headerlink" title="创建和合并分支"></a>创建和合并分支</h5><p>由前面我们可以知道，git有个主分支master，master指向提交，HEAD指向当前分支。所以创建分支的操作为</p>
<ol>
<li>创建一个新的分支,指向master相同的提交(可以得到当前的版本库中最新的版本–现在要分道扬镳了,我开发我的)</li>
<li>把HEAD指向这个新分支上，就表示当前分支</li>
</ol>
<p>合并分支：</p>
<p>前面我们知道，创建一个新的分支，我们可以得到当前分支，然后后面的修改都在这个新的分支上，要合并分支，只要把master指向这个新的分支就可以了,并且删除这个新的分支(这里有个疑惑，不知道后面会不会解决掉。<strong>如果多人协作合并分支？</strong>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch  &#x2F;&#x2F;查看分支 如果分支前面有*表示当前分支 就是HEAD指针指向的分支</span><br><span class="line">git branch &lt;name&gt;&#x2F;&#x2F;创建分支</span><br><span class="line">git checkout &lt;name&gt;&#x2F;&#x2F;切换分支</span><br><span class="line">git checout -b &lt;name&gt;&#x2F;&#x2F;创建分支并且切换分支</span><br><span class="line">git merge &lt;name&gt;&#x2F;&#x2F;将name这个分支合并到当前分支</span><br><span class="line">git branch -d &lt;name&gt;&#x2F;&#x2F;删除分支</span><br></pre></td></tr></table></figure>

<p>tips:</p>
<p>如果在新分支上修改并且没有add commit，在master分支上也可以看到修改的内容，因为此时的修改是在工作区，仓库并不知道你对的是谁的修改。</p>
<p>但是一旦你add commit后就看不到了</p>
<h5 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h5><p>当冲突无法自动合并的时候首先需要解决冲突，解决冲突之后，再提交，合并完成.</p>
<p><strong>需要手动编辑</strong>解决冲突(上面那个问题解决了)，没有别的解决方案就是解决冲突</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log --graph --pretty&#x3D;oneline --abbrev-commit&#x2F;&#x2F;图形化显示分支的情况</span><br></pre></td></tr></table></figure>

<h5 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h5><blockquote>
<p>Git合并分支会用Fast forward模式，这个模式下，删除分支，会丢失分支信息</p>
</blockquote>
<h5 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h5><p>场景：你正在dev分支上开发，但是突然接到需要修复一个bug，但是你此时还没有开发完，并且无法提交。</p>
<ol>
<li>首先在dev分支上 git stash 将当前工作现场存储起来</li>
<li>在需要的分支下建立修复bug的分支</li>
<li>修复bug，合并分支</li>
<li>回到dev git stash pop恢复的同时把stash内容也删了</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git checkout master</span><br><span class="line">git checkout -b issue-101</span><br><span class="line">&#x2F;&#x2F;处理bug</span><br><span class="line">git merge --no-ff issue-101</span><br><span class="line">git checkout dev</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<h5 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h5><p>场景：你需要开发一个新功能，但是还没开发完需要对你刚才操作进行强制删除</p>
<ol>
<li>开发新功能最好是新建一个分支feature</li>
<li>强制删除 git branch -D <name></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git ckeckout -b feature</span><br><span class="line">&#x2F;&#x2F;操作</span><br><span class="line">git checkout master&#x2F;&#x2F;正准备合并 就要让我删除</span><br><span class="line">git branch -d feature&#x2F;&#x2F;不让删除 因为还未合并</span><br><span class="line">git branch -D feature&#x2F;&#x2F;可以删除</span><br></pre></td></tr></table></figure>

<h5 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h5><p>tips:</p>
<p>远程仓库的默认名为 origin</p>
<p>查看远程库的信息 git remote  查看更加详细的信息 git remote -v</p>
<p>推送分支 git push origin master  推送其他分支 git push origin dev</p>
<p>some key:</p>
<ol>
<li>master dev 分支需要推送</li>
<li>bug分支其实可以不用推送</li>
<li>feature分支看是否与人协作</li>
</ol>
<p>场景：另外一个开发人员A需要跟你开发dev分支</p>
<ol>
<li>A需要在本地git clone仓库，不过默认情况下只能查看master分支(说好的一起开发？？)</li>
<li>A在本地创建dev分支并且与远程绑定起来 git checkout -b dev origin/dev</li>
<li>A开发推送(push) 你也开发推送，不过A快你一步，这个时候你push不上去因为发现有冲突</li>
<li>你需要git pull，但是先前没有指定dev与远程的origin/dev分支的连接，要设置两者之间的连接 git branch –set-upstream-to=origin/dev dev</li>
<li>你解决了冲突，然后提交上去</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A:</span><br><span class="line">git clone git@github.com:jiayouxujin&#x2F;learngit.git</span><br><span class="line">git checkout -b dev origin&#x2F;dev</span><br><span class="line">&#x2F;&#x2F;修改</span><br><span class="line">git push origin dev</span><br><span class="line"></span><br><span class="line">我：</span><br><span class="line">git push origin dev&#x2F;&#x2F;冲突</span><br><span class="line">git branch --set-upstream-to&#x3D;origin&#x2F;dev dev</span><br><span class="line">git pull</span><br><span class="line">&#x2F;&#x2F;解决冲突</span><br><span class="line">git push origin&#x2F;dev</span><br></pre></td></tr></table></figure>

<h4 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h4><p>先来看看标签管理有什么用？</p>
<blockquote>
<p>请把上周一的那个版本打包发布，commit号是6a5819e…”</p>
<p>“一串乱七八糟的数字不好找！”</p>
<p>如果换一个办法：</p>
<p>“请把上周一的那个版本打包发布，版本号是v1.2”</p>
<p>“好的，按照tag v1.2查找commit就行！”</p>
</blockquote>
<h5 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h5><p>场景：在最新commit下打标签,即在HEAD</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure>

<p>场景：如果先前commit忘记了打标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log --pretty&#x3D;online --abbrev-commit</span><br><span class="line">&#x2F;&#x2F;找到commit_id</span><br><span class="line">git tag &lt;tagname&gt; commit_id</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;也可以指定标签信息</span><br><span class="line">git tag -a &lt;tagname&gt; -m&lt;message&gt; commit_id &#x2F;&#x2F;-a指定标签名 -m指定说明文字</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag&#x2F;&#x2F;查看所有tag信息</span><br><span class="line">git show &lt;tagname&gt;查看具体信息 可以知道那个commit_id 然后拿到它</span><br></pre></td></tr></table></figure>

<p>some keys:</p>
<p>tag是跟commit绑定，但是其有存在的意义，就是方便查找</p>
<h5 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h5><p>场景1：本地删除tag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag -d &lt;tagname&gt;</span><br></pre></td></tr></table></figure>

<p>场景2：推送到远程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin &lt;tagname&gt; &#x2F;&#x2F;推送某一个tag</span><br><span class="line">git push origin --tags&#x2F;&#x2F;将本地tag全部推送</span><br></pre></td></tr></table></figure>

<p>场景3:删除远程tag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;先把本地的删除</span><br><span class="line">git tag -d &lt;tagname&gt;</span><br><span class="line">&#x2F;&#x2F;删除远程</span><br><span class="line">git push origin :refs&#x2F;tags&#x2F;&lt;tagname&gt;</span><br></pre></td></tr></table></figure>

<p>场景4：得到某个tag的版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git show &lt;tagname&gt;</span><br><span class="line">&#x2F;&#x2F;得到commit_id</span><br><span class="line">git reset --hard commit_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;回退</span><br><span class="line">git reflog </span><br><span class="line">&#x2F;&#x2F;找到commit_id</span><br><span class="line">git reset --hard commit_id</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>至此，我大约过了一遍教程。一个过程下来就一个字来形容，爽。为什么？因为以前学过，但是看不懂，甚至畏惧命令行代码，这次打下来真的爽真的爽。</p>
<p>其实我一开始是想要用个故事把这些命令行串起来。敬请期待</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>学点Git,跟上这个时代</title>
    <url>/2019-05-18-%E5%AD%A6%E7%82%B9Git,%E8%B7%9F%E4%B8%8A%E8%BF%99%E4%B8%AA%E6%97%B6%E4%BB%A3%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直以来都是使用Github Desktop，但是作为未来的<strong>程序员</strong>，不会点git太说不过去了，这次凑巧看到<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰老师</a>教程，所以就跟着过一遍。<del>至少以后可以吹逼嘛</del></p>
<h3 id="一些语法"><a href="#一些语法" class="headerlink" title="一些语法"></a>一些语法</h3><p>####创建版本库</p>
<p>#####初始化Git仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">&#x2F;&#x2F;会在当前目录下多一个.git的目录</span><br></pre></td></tr></table></figure>

<p>#####添加文件到Git仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一步：</span><br><span class="line">git add &lt;file&gt; &#x2F;&#x2F;可以反复使用 添加多个文件</span><br><span class="line"></span><br><span class="line">第二步：</span><br><span class="line">git commit -m &lt;message&gt; &#x2F;&#x2F;提交到git仓库 message表示提交的信息 像修改了...之类</span><br></pre></td></tr></table></figure>

<h4 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h4><h5 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status &#x2F;&#x2F;掌握当前仓库的状态</span><br></pre></td></tr></table></figure>

<h5 id="查看具体修改了哪些内容"><a href="#查看具体修改了哪些内容" class="headerlink" title="查看具体修改了哪些内容"></a>查看具体修改了哪些内容</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff &#x2F;&#x2F;对比修改内容</span><br></pre></td></tr></table></figure>

<h5 id="查看修改的历史记录"><a href="#查看修改的历史记录" class="headerlink" title="查看修改的历史记录"></a>查看修改的历史记录</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如果觉得输出信息太多可以用</span><br><span class="line">git log --pretty&#x3D;oneline</span><br></pre></td></tr></table></figure>

<h5 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;回退到上一个版本  HEAD^  上上一个版本 HEAD^^ 上100个版本 HEAD~100</span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;不过这个时候如果你查看 git log你会发现你刚才提交的信息不见了 为了能够再回去</span><br><span class="line">git reflog &#x2F;&#x2F;查看历史的commit_id</span><br><span class="line">git reset --hard commit_id</span><br></pre></td></tr></table></figure>

<h5 id="工作区-amp-版本库"><a href="#工作区-amp-版本库" class="headerlink" title="工作区&amp;版本库"></a>工作区&amp;版本库</h5><blockquote>
<p>工作区就是电脑中可以看到的目录 例如我现在电脑下的learngit文件夹</p>
<p>版本库工作区下面有个.git文件 是Git的版本库</p>
</blockquote>
<p>some keys:</p>
<blockquote>
<p>git status</p>
<p>提示 untracked表示 从来没有被添加过</p>
<p>提示 modified表示修改了</p>
</blockquote>
<p>其中版本库中有个很重要的概念是<strong>stage</strong>的暂存区</p>
<p>分解 添加文件到git仓库的步骤</p>
<ol>
<li>git add <file>  把要提交的所有修改放到暂存区</li>
<li>git commit 可以一次性把暂存区的所有修改提交到分支</li>
</ol>
<h5 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h5><blockquote>
<p>Git跟踪的是修改，而非文件</p>
</blockquote>
<p>举个例子 ：如果你第一次修改了-&gt;git add-&gt;第二次修改-&gt;git commit</p>
<p>结果是只提交了第一次修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff HEAD -- readme.txt &#x2F;&#x2F;可以查看 工作区 与版本库里面最新版的区别</span><br></pre></td></tr></table></figure>

<h5 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h5><p>场景1：修改了工作区里某个文件的内容，想要丢弃工作区里的修改时</p>
<p>这里有两种情况 一种是 在工作区中修改了，还没有放到暂存区里，现在撤销回到版本库中一模一样的状态 另外一种就是先前修改放到暂存区了，但是又进行修改，现在撤销回到暂存区一模一样的状态。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>场景2：当你修改了工作区的文件，又添加到暂存区里，这个时候想要丢弃修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;&#x2F;&#x2F;可以把暂存区里的修改退到工作区</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;然后就跟场景1一样了</span><br><span class="line">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>场景3：当你不仅修改了，而且commit了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<p>tips:</p>
<p>git checkout 其实使用版本库里的版本替换掉工作区的版本，可以做到“一键还原”</p>
<h5 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5><p>场景：在工作区下删除文件 或者rm <filename></p>
<p>可能1:确实是要删除的文件，这个时候版本库里并没有被删除，所以需要提交一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm &lt;filename&gt;</span><br><span class="line">git commit -m&lt;message&gt;</span><br></pre></td></tr></table></figure>

<p>可能2:误删了，现在需要从版本库中恢复</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>可能3：你通过git rm删除文件，这个时候添加到了暂存区，需要退回版本 然后在checkout</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm &lt;filename&gt;</span><br><span class="line">git reset HEAD &lt;filename&gt;</span><br><span class="line">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><p>强大的github来了</p>
<p>首先需要建立ssh(在用户的目录下可以看到.ssh)然后在github上add ssh就可以将其关联起来，</p>
<p>在github下new repo 然后可以看到将这个repo clone到本地或者将本地的仓库push到repo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;第一次推送</span><br><span class="line">git push -u origin master</span><br><span class="line">&#x2F;&#x2F;每次在本地操作完之后</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h4><blockquote>
<p>分支的作用：你需要开发一个版本，但是这个版本的时间需要两周，如果你没写完就提交到master会导致别人无法进行操作，所以你需要自己开一个新的分支，然后把代码提交到这个分支上，当全部完成后在提交到master</p>
</blockquote>
<h5 id="创建和合并分支"><a href="#创建和合并分支" class="headerlink" title="创建和合并分支"></a>创建和合并分支</h5><p>由前面我们可以知道，git有个主分支master，master指向提交，HEAD指向当前分支。所以创建分支的操作为</p>
<ol>
<li>创建一个新的分支,指向master相同的提交(可以得到当前的版本库中最新的版本–现在要分道扬镳了,我开发我的)</li>
<li>把HEAD指向这个新分支上，就表示当前分支</li>
</ol>
<p>合并分支：</p>
<p>前面我们知道，创建一个新的分支，我们可以得到当前分支，然后后面的修改都在这个新的分支上，要合并分支，只要把master指向这个新的分支就可以了,并且删除这个新的分支(这里有个疑惑，不知道后面会不会解决掉。<strong>如果多人协作合并分支？</strong>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch  &#x2F;&#x2F;查看分支 如果分支前面有*表示当前分支 就是HEAD指针指向的分支</span><br><span class="line">git branch &lt;name&gt;&#x2F;&#x2F;创建分支</span><br><span class="line">git checkout &lt;name&gt;&#x2F;&#x2F;切换分支</span><br><span class="line">git checout -b &lt;name&gt;&#x2F;&#x2F;创建分支并且切换分支</span><br><span class="line">git merge &lt;name&gt;&#x2F;&#x2F;将name这个分支合并到当前分支</span><br><span class="line">git branch -d &lt;name&gt;&#x2F;&#x2F;删除分支</span><br></pre></td></tr></table></figure>

<p>tips:</p>
<p>如果在新分支上修改并且没有add commit，在master分支上也可以看到修改的内容，因为此时的修改是在工作区，仓库并不知道你对的是谁的修改。</p>
<p>但是一旦你add commit后就看不到了</p>
<h5 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h5><p>当冲突无法自动合并的时候首先需要解决冲突，解决冲突之后，再提交，合并完成.</p>
<p><strong>需要手动编辑</strong>解决冲突(上面那个问题解决了)，没有别的解决方案就是解决冲突</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log --graph --pretty&#x3D;oneline --abbrev-commit&#x2F;&#x2F;图形化显示分支的情况</span><br></pre></td></tr></table></figure>

<h5 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h5><blockquote>
<p>Git合并分支会用Fast forward模式，这个模式下，删除分支，会丢失分支信息</p>
</blockquote>
<h5 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h5><p>场景：你正在dev分支上开发，但是突然接到需要修复一个bug，但是你此时还没有开发完，并且无法提交。</p>
<ol>
<li>首先在dev分支上 git stash 将当前工作现场存储起来</li>
<li>在需要的分支下建立修复bug的分支</li>
<li>修复bug，合并分支</li>
<li>回到dev git stash pop恢复的同时把stash内容也删了</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git checkout master</span><br><span class="line">git checkout -b issue-101</span><br><span class="line">&#x2F;&#x2F;处理bug</span><br><span class="line">git merge --no-ff issue-101</span><br><span class="line">git checkout dev</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<h5 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h5><p>场景：你需要开发一个新功能，但是还没开发完需要对你刚才操作进行强制删除</p>
<ol>
<li>开发新功能最好是新建一个分支feature</li>
<li>强制删除 git branch -D <name></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git ckeckout -b feature</span><br><span class="line">&#x2F;&#x2F;操作</span><br><span class="line">git checkout master&#x2F;&#x2F;正准备合并 就要让我删除</span><br><span class="line">git branch -d feature&#x2F;&#x2F;不让删除 因为还未合并</span><br><span class="line">git branch -D feature&#x2F;&#x2F;可以删除</span><br></pre></td></tr></table></figure>

<h5 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h5><p>tips:</p>
<p>远程仓库的默认名为 origin</p>
<p>查看远程库的信息 git remote  查看更加详细的信息 git remote -v</p>
<p>推送分支 git push origin master  推送其他分支 git push origin dev</p>
<p>some key:</p>
<ol>
<li>master dev 分支需要推送</li>
<li>bug分支其实可以不用推送</li>
<li>feature分支看是否与人协作</li>
</ol>
<p>场景：另外一个开发人员A需要跟你开发dev分支</p>
<ol>
<li>A需要在本地git clone仓库，不过默认情况下只能查看master分支(说好的一起开发？？)</li>
<li>A在本地创建dev分支并且与远程绑定起来 git checkout -b dev origin/dev</li>
<li>A开发推送(push) 你也开发推送，不过A快你一步，这个时候你push不上去因为发现有冲突</li>
<li>你需要git pull，但是先前没有指定dev与远程的origin/dev分支的连接，要设置两者之间的连接 git branch –set-upstream-to=origin/dev dev</li>
<li>你解决了冲突，然后提交上去</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A:</span><br><span class="line">git clone git@github.com:jiayouxujin&#x2F;learngit.git</span><br><span class="line">git checkout -b dev origin&#x2F;dev</span><br><span class="line">&#x2F;&#x2F;修改</span><br><span class="line">git push origin dev</span><br><span class="line"></span><br><span class="line">我：</span><br><span class="line">git push origin dev&#x2F;&#x2F;冲突</span><br><span class="line">git branch --set-upstream-to&#x3D;origin&#x2F;dev dev</span><br><span class="line">git pull</span><br><span class="line">&#x2F;&#x2F;解决冲突</span><br><span class="line">git push origin&#x2F;dev</span><br></pre></td></tr></table></figure>

<h4 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h4><p>先来看看标签管理有什么用？</p>
<blockquote>
<p>请把上周一的那个版本打包发布，commit号是6a5819e…”</p>
<p>“一串乱七八糟的数字不好找！”</p>
<p>如果换一个办法：</p>
<p>“请把上周一的那个版本打包发布，版本号是v1.2”</p>
<p>“好的，按照tag v1.2查找commit就行！”</p>
</blockquote>
<h5 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h5><p>场景：在最新commit下打标签,即在HEAD</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure>

<p>场景：如果先前commit忘记了打标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log --pretty&#x3D;online --abbrev-commit</span><br><span class="line">&#x2F;&#x2F;找到commit_id</span><br><span class="line">git tag &lt;tagname&gt; commit_id</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;也可以指定标签信息</span><br><span class="line">git tag -a &lt;tagname&gt; -m&lt;message&gt; commit_id &#x2F;&#x2F;-a指定标签名 -m指定说明文字</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag&#x2F;&#x2F;查看所有tag信息</span><br><span class="line">git show &lt;tagname&gt;查看具体信息 可以知道那个commit_id 然后拿到它</span><br></pre></td></tr></table></figure>

<p>some keys:</p>
<p>tag是跟commit绑定，但是其有存在的意义，就是方便查找</p>
<h5 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h5><p>场景1：本地删除tag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag -d &lt;tagname&gt;</span><br></pre></td></tr></table></figure>

<p>场景2：推送到远程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin &lt;tagname&gt; &#x2F;&#x2F;推送某一个tag</span><br><span class="line">git push origin --tags&#x2F;&#x2F;将本地tag全部推送</span><br></pre></td></tr></table></figure>

<p>场景3:删除远程tag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;先把本地的删除</span><br><span class="line">git tag -d &lt;tagname&gt;</span><br><span class="line">&#x2F;&#x2F;删除远程</span><br><span class="line">git push origin :refs&#x2F;tags&#x2F;&lt;tagname&gt;</span><br></pre></td></tr></table></figure>

<p>场景4：得到某个tag的版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git show &lt;tagname&gt;</span><br><span class="line">&#x2F;&#x2F;得到commit_id</span><br><span class="line">git reset --hard commit_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;回退</span><br><span class="line">git reflog </span><br><span class="line">&#x2F;&#x2F;找到commit_id</span><br><span class="line">git reset --hard commit_id</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>至此，我大约过了一遍教程。一个过程下来就一个字来形容，爽。为什么？因为以前学过，但是看不懂，甚至畏惧命令行代码，这次打下来真的爽真的爽。</p>
<p>其实我一开始是想要用个故事把这些命令行串起来。敬请期待</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>项目中的JS</title>
    <url>/2019-05-17-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84JS%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<p>#前言</p>
<p>JavaScript前端三件套中的一个，最近有幸接触到。所以对其有了个大致的了解。这里主要针对本次项目中所用到的JavaScript语法，进行一个详细跟扩展。掌握这些知识应该可以完成大部分开发实战的任务。祝你好运。我们开始吧。[后文统一将JavaScript称为JS]</p>
<p>所用资料来自<a href="https://www.liaoxuefeng.com/wiki/1022910821149312" target="_blank" rel="noopener">廖雪峰老师</a></p>
<p><del>不想作为代码的搬运工</del>，所以这里采用的方式为对教程里的思考，some keys</p>
<p>##需要解决的问题</p>
<h4 id="这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题"><a href="#这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题" class="headerlink" title="这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题"></a>这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题</h4><h4 id="这个技术的优势和劣势分别是什么"><a href="#这个技术的优势和劣势分别是什么" class="headerlink" title="这个技术的优势和劣势分别是什么"></a>这个技术的优势和劣势分别是什么</h4><h4 id="这个技术的应用场景"><a href="#这个技术的应用场景" class="headerlink" title="这个技术的应用场景"></a>这个技术的应用场景</h4><blockquote>
<p>网页的动态交互</p>
<p>构建网页–利用大多数框架</p>
</blockquote>
<h4 id="技术的组成部分和关键点"><a href="#技术的组成部分和关键点" class="headerlink" title="技术的组成部分和关键点"></a>技术的组成部分和关键点</h4><h4 id="技术的底层原理和关键实现"><a href="#技术的底层原理和关键实现" class="headerlink" title="技术的底层原理和关键实现"></a>技术的底层原理和关键实现</h4><h4 id="已有的实现和它之间的对比"><a href="#已有的实现和它之间的对比" class="headerlink" title="已有的实现和它之间的对比"></a>已有的实现和它之间的对比</h4><blockquote>
<p>JavaScript是唯一的浏览器原生语言</p>
</blockquote>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023442583285984" target="_blank" rel="noopener">资料</a></p>
<p>some keys:</p>
<ol>
<li>Js可以写 ；也可以不写。不过为了能够符合自己平时的编程习惯，所以还是让自己写 ;</li>
</ol>
<h4 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h4><p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023020925712064" target="_blank" rel="noopener">资料</a></p>
<h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>some keys:</p>
<ol>
<li>用 ‘ ‘ 和 “ “括起来表示字符串 出现字符串里有 ‘ 或 “的需要用 /‘ /“来表示</li>
<li>可以用+拼接字符串  不过 ${name}这个也是模板字符串(use strict)</li>
<li><strong>字符串是不可变的</strong>，that is say:if you use s[0]=’x’ which can’t work</li>
<li>indexOf()  substring(start,end-1) </li>
</ol>
<h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><p>some keys:</p>
<ol>
<li>由键值对xxx:xxx组成 用{…}表示一个对象,最后在末尾不要加 ; 会报错</li>
<li>得到属性值  Varname.Propertyname</li>
<li>判断是否有某个属性 hasOwnProperty(‘name’)</li>
</ol>
<h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><p>some keys:</p>
<ol>
<li>arr.length 可以改变arr的值 (这次项目中清空数组就用了 arr.length=0)</li>
<li>slice 是Array的substring版本</li>
<li>push和pop在末尾添加/删除元素  unshift和shift在头部添加/删除元素</li>
<li>splice万能方法 arr.splice(index,remove_count,item_list) 从起始下标开始，删除几个元素，然后添加</li>
</ol>
<p>####循环</p>
<p>some keys：</p>
<ol>
<li>for…in 可以把一个对象的所有属性一次循环出来(因为Array也是对象，所以可以把其的索引循环出来)</li>
</ol>
<h4 id="Map-amp-Set"><a href="#Map-amp-Set" class="headerlink" title="Map&amp;Set"></a>Map&amp;Set</h4><p>some keys:</p>
<ol>
<li><p>Map是为了解决Array查找速度慢的问题，是一组键值对的结构。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'name'</span>,<span class="string">'xujin'</span>]]);</span><br><span class="line">        <span class="built_in">console</span>.log(map.get(<span class="string">'name'</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>Set是一个没有重复的Key的集合，不存储value</p>
</li>
</ol>
<h4 id="Iterale"><a href="#Iterale" class="headerlink" title="Iterale"></a>Iterale</h4><p>some keys:</p>
<ol>
<li><p>for…of 与 for…in的区别对比一下就知道了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">        array.name=<span class="string">'xujin'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> array)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//0 1 2 name</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">of</span> array)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//7 8 9</span></span><br></pre></td></tr></table></figure>

<p>说明for of 值循环集合本身的元素，for in 遍历的是对象属性的名称，但是因为array也是对象，所以就会出错。</p>
<p>2.forEach()大法好</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> array=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">        array.name=<span class="string">'xujin'</span>;</span><br><span class="line">        array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,array</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"value:"</span>+value+<span class="string">" index:"</span>+index);</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">value:7 index:0</span></span><br><span class="line"><span class="comment">value:8 index:1</span></span><br><span class="line"><span class="comment">value:9 index:2</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="JS函数"><a href="#JS函数" class="headerlink" title="JS函数"></a>JS函数</h2><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"> <span class="comment">//TODO SOMETHING   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为函数也是一个对象(前面我们也学习了array也是一个对象),函数名abs可以看做是指向该函数的变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs=<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//TODO SOMETHING</span></span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>

<p>这种定义方式function(x)是一个匿名函数，没有函数名，不过这个赋值给了变量abs</p>
<p>#####arguments</p>
<p>JS允许传入多个参数，但是为了操作这些参数，有一个arguments的关键字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)</span><br></pre></td></tr></table></figure>

<h4 id="变量作用域与解构赋值"><a href="#变量作用域与解构赋值" class="headerlink" title="变量作用域与解构赋值"></a>变量作用域与解构赋值</h4><p>Tips:js有一个怪异的特性，就是会<strong>提升变量的声明</strong>。但是并不会<strong>提升变量的赋值</strong>。所以需要严格遵守在函数内部首先申明所有变量这一个规则</p>
<p>some keys:</p>
<p>JavaScript实际上只有一个全局作用域(window），任何变量(函数也视为变量)，如果在当前函数内没有找到这个变量，那就继续往上找，如果在全局作用域中都没有找到的，就会报错。</p>
<h5 id="名字空间"><a href="#名字空间" class="headerlink" title="名字空间"></a>名字空间</h5><p>刚才我们提到所有全局变量会绑定在window上，不过如果有相同名字的话就会出现冲突，所以需要自己定义命名空间</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> MYAPP=&#123;&#125;;</span><br><span class="line">       MYAPP.name=<span class="string">'myapp'</span>;</span><br><span class="line">       MYAPP.version=<span class="string">'1.0'</span>;</span><br><span class="line">       MYAPP.abs=<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(x&gt;=<span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">return</span> -x;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(MYAPP.abs(<span class="number">-1</span>));</span><br></pre></td></tr></table></figure>

<h5 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h5><p>我们刚刚提到，js的作用域有两个一个是函数内部，一个就是全局作用域，所以会出现下面这种情况</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">               <span class="comment">//TODO SOMETHING</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">       &#125;;</span><br><span class="line">       test();</span><br><span class="line"><span class="comment">//输出结果为2</span></span><br></pre></td></tr></table></figure>

<p>为了解决这个问题ES6用let替代var</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><blockquote>
<p>在一个对象中绑定函数，称为这个对象的方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">           name:<span class="string">'xujin'</span>,</span><br><span class="line">           birth:<span class="string">'1999'</span>,</span><br><span class="line">           age:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="keyword">var</span> y=<span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">               <span class="keyword">return</span> y-<span class="keyword">this</span>.birth;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(person.age());</span><br></pre></td></tr></table></figure>

<p>Tips:JS的this的坑很多</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">          name:<span class="string">'xujin'</span>,</span><br><span class="line">          birth:<span class="string">'1999'</span>,</span><br><span class="line">          age:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="keyword">var</span> that=<span class="keyword">this</span>;</span><br><span class="line">              <span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">var</span> y=<span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">                  <span class="keyword">return</span> y-that.birth;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> getAge();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>可能你会觉得上面这个var that=this有点鸡肋，但是呢，当你提前捕获的时候，就可以在这个方法里的其他区域定义函数，并且用上that。</p>
<p>不过为了指定this的指向，我们可以用apply()和call()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">var</span> y=<span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">           <span class="keyword">return</span> y-<span class="keyword">this</span>.birth;</span><br><span class="line">       &#125;</span><br><span class="line">      <span class="keyword">var</span> person=&#123;</span><br><span class="line">          name:<span class="string">'xujin'</span>,</span><br><span class="line">          birth:<span class="string">'1999'</span>,</span><br><span class="line">          age:getAge</span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">      <span class="built_in">console</span>.log(getAge.apply(person,[]));</span><br><span class="line">      <span class="built_in">console</span>.log(getAge.call(person));</span><br></pre></td></tr></table></figure>

<h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><blockquote>
<p>一个函数可以接受另外一个函数作为参数，这种函数称为高阶函数</p>
</blockquote>
<p>这里有许多高阶函数。</p>
<h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><p>###标准对象</p>
<h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><p>some keys:</p>
<ol>
<li>JS的Date对象月份值从0开始，牢记0=1月</li>
</ol>
<p>####RegExp</p>
<p>####JSON</p>
<p>some keys:</p>
<ol>
<li>JSON的字符串规定必须用双引号””,Object的键也必须用双引号””</li>
<li>将对象序列化为JSON格式 var s=JSON.stringify(obj,[show])</li>
<li>将JSON格式反序列化 JSON.parse(‘{“name”:”xujin”}’)</li>
</ol>
<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><h4 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h4><p>some keys:</p>
<ol>
<li>window对象不但是全局作用域，而且表示浏览器窗口【这次项目中用了window.onload();</li>
</ol>
<h4 id="document"><a href="#document" class="headerlink" title="document"></a>document</h4><p>some keys:</p>
<ol>
<li><p>document对象表示当前页面（因为HTML以DOM形式表示为树形结构，document对象就是整个DOM树的根节点)</p>
</li>
<li><p>document对象提供的getElementById()和getElementsByTagName()可以通过ID获得一个DOM节点和按Tag名称获得一组DOM节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> menu=<span class="built_in">document</span>.getElementById(<span class="string">"drink-menu"</span>);</span><br><span class="line"><span class="keyword">var</span> drinks=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'dt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(menu.tagName);</span><br><span class="line"><span class="built_in">console</span>.log(drinks);</span><br><span class="line"><span class="keyword">var</span> s=<span class="string">'提供的饮料有：'</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;drinks.length;i++)&#123;</span><br><span class="line">    s=s+drinks[i].innerText+<span class="string">','</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h4><h5 id="更新DOM"><a href="#更新DOM" class="headerlink" title="更新DOM"></a>更新DOM</h5><ol>
<li>通过修改innerHTML属性，可以修改文本内容还有其DOM的内部结构(就是不仅可改文本还可以赋予HTML属性)</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p=<span class="built_in">document</span>.getElementById(<span class="string">'test'</span>);</span><br><span class="line">p.innerHTML=<span class="string">'&lt;span style="color:red"&gt;12&lt;/span&gt;'</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>通过修改innerText属性，只能修改文本值，无法设置HTML标签</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p=<span class="built_in">document</span>.getElementById(<span class="string">'test'</span>);</span><br><span class="line">p.innerText=<span class="string">"alert('12')"</span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="插入DOM"><a href="#插入DOM" class="headerlink" title="插入DOM"></a>插入DOM</h5><ol>
<li><p>通过appendChild，把一个子节点添加到父节点的最后一个节点(就是添加到后面)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> js=<span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">  js.id=<span class="string">"javascript"</span>;</span><br><span class="line">  js.innerHTML=<span class="string">'javascript'</span>;</span><br><span class="line"> <span class="keyword">var</span> ls=<span class="built_in">document</span>.getElementById(<span class="string">"list"</span>);</span><br><span class="line"> ls.appendChild(js);</span><br></pre></td></tr></table></figure>

<p>//其中创建一个新的节点是通过createElement</p>
</li>
<li><p>插到指定位置 可以通过 insertBefore(newElement,referenceElement)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> js=<span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line"> js.id=<span class="string">"javascript"</span>;</span><br><span class="line"> js.innerHTML=<span class="string">'javascript'</span>;</span><br><span class="line"><span class="keyword">var</span> ls=<span class="built_in">document</span>.getElementById(<span class="string">"list"</span>);</span><br><span class="line"><span class="keyword">var</span> py=<span class="built_in">document</span>.getElementById(<span class="string">'python'</span>);</span><br><span class="line">ls.insertBefore(js,py);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="删除DOM"><a href="#删除DOM" class="headerlink" title="删除DOM"></a>删除DOM</h5><ol>
<li><p>通过得到要删除节点的父节点 调用removeChild()删除</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> children=<span class="built_in">document</span>.getElementById(<span class="string">'python'</span>);</span><br><span class="line">  <span class="keyword">var</span> parent=children.parentElement;</span><br><span class="line">  <span class="built_in">console</span>.log(parent.id);</span><br><span class="line">  <span class="built_in">console</span>.log(parent);</span><br><span class="line">  <span class="keyword">var</span> remove=parent.removeChild(children);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="操作表单"><a href="#操作表单" class="headerlink" title="操作表单"></a>操作表单</h4><p>some keys:</p>
<ol>
<li>对于 text password hidden select 可以通过value来得到值 对于 单选框和复选框应用 checked判断</li>
</ol>
<h3 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h3><p>使用JQuery</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://code.jquery.com/jquery-latest.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/在线引用</span></span><br></pre></td></tr></table></figure>

<p>$符号</p>
<p>JQuery把功能封装在一个全局变量JQuery中，$是一个合法变量名，是变量JQuery的别名</p>
<h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><ol>
<li>通过id查找 $(‘#dom-id’)</li>
<li>通过tag查找 $(‘tag’)</li>
<li>按属性查找 $(‘[name=email]’)</li>
</ol>
<h5 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h5><p>$(‘ancestor descendant’)</p>
<h4 id="操作DOM-1"><a href="#操作DOM-1" class="headerlink" title="操作DOM"></a>操作DOM</h4><h5 id="修改Text和HTML"><a href="#修改Text和HTML" class="headerlink" title="修改Text和HTML"></a>修改Text和HTML</h5><p>text()和html()方法分别获取节点的文本和原始的HTML文本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test=$(<span class="string">'#test'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br><span class="line"><span class="built_in">console</span>.log(test.text())</span><br><span class="line"><span class="built_in">console</span>.log(test.html());</span><br></pre></td></tr></table></figure>

<p>设置文本和HTML只要向函数传入参数，就会变成设置文本</p>
<h5 id="隐藏和显示DOM"><a href="#隐藏和显示DOM" class="headerlink" title="隐藏和显示DOM"></a>隐藏和显示DOM</h5><p>调用show()和hide()函数</p>
<h5 id="操作DOM节点的属性"><a href="#操作DOM节点的属性" class="headerlink" title="操作DOM节点的属性"></a>操作DOM节点的属性</h5><p>调用attr()和removeAttr()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div.attr(<span class="string">'name'</span>,<span class="string">'hello'</span>);</span><br><span class="line">div.removeAttr(<span class="string">'name'</span>)</span><br></pre></td></tr></table></figure>

<h5 id="操作表单-1"><a href="#操作表单-1" class="headerlink" title="操作表单"></a>操作表单</h5><p>val()可以完成输入框的取值和赋值问题</p>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><h5 id="click事件"><a href="#click事件" class="headerlink" title="click事件"></a>click事件</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#test'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line"> $(<span class="string">'#test'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<h5 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h5><p>包括以下 click鼠标单击时触发……</p>
<h5 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h5><p>仅作用在当前焦点的DOM上，通常是<input>和<textarea></p>
<h5 id="ready"><a href="#ready" class="headerlink" title="ready"></a>ready</h5><blockquote>
<p>当页面被载入并且DOM树完成初始化后触发</p>
<p>适合用来写其他的初始化代码</p>
</blockquote>
<p>初始化代码必须放到 document对象的ready事件中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//这个是document对象的ready事件处理函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="取消绑定"><a href="#取消绑定" class="headerlink" title="取消绑定"></a>取消绑定</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">off(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>)</span></span><br></pre></td></tr></table></figure>

<h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><h4 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h4><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>try{….}catch(e){….}finally{…}</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>跟着教程，过了一遍JS语法，而要掌握一门语言，就是多练，后面会学习Vue并且不断去练习。</p>
<p>不过呢，前文提到要解决的问题，我短时间内没有办法解决。</p>
<p>不过呢，后面随着我的学习，会解决的。</p>
<p>未完…待续</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>项目中的JS</title>
    <url>/2019-05-17-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84JS/</url>
    <content><![CDATA[<p>#前言</p>
<p>JavaScript前端三件套中的一个，最近有幸接触到。所以对其有了个大致的了解。这里主要针对本次项目中所用到的JavaScript语法，进行一个详细跟扩展。掌握这些知识应该可以完成大部分开发实战的任务。祝你好运。我们开始吧。[后文统一将JavaScript称为JS]</p>
<p>所用资料来自<a href="https://www.liaoxuefeng.com/wiki/1022910821149312" target="_blank" rel="noopener">廖雪峰老师</a></p>
<p><del>不想作为代码的搬运工</del>，所以这里采用的方式为对教程里的思考，some keys</p>
<p>##需要解决的问题</p>
<h4 id="这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题"><a href="#这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题" class="headerlink" title="这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题"></a>这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题</h4><h4 id="这个技术的优势和劣势分别是什么"><a href="#这个技术的优势和劣势分别是什么" class="headerlink" title="这个技术的优势和劣势分别是什么"></a>这个技术的优势和劣势分别是什么</h4><h4 id="这个技术的应用场景"><a href="#这个技术的应用场景" class="headerlink" title="这个技术的应用场景"></a>这个技术的应用场景</h4><blockquote>
<p>网页的动态交互</p>
<p>构建网页–利用大多数框架</p>
</blockquote>
<h4 id="技术的组成部分和关键点"><a href="#技术的组成部分和关键点" class="headerlink" title="技术的组成部分和关键点"></a>技术的组成部分和关键点</h4><h4 id="技术的底层原理和关键实现"><a href="#技术的底层原理和关键实现" class="headerlink" title="技术的底层原理和关键实现"></a>技术的底层原理和关键实现</h4><h4 id="已有的实现和它之间的对比"><a href="#已有的实现和它之间的对比" class="headerlink" title="已有的实现和它之间的对比"></a>已有的实现和它之间的对比</h4><blockquote>
<p>JavaScript是唯一的浏览器原生语言</p>
</blockquote>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023442583285984" target="_blank" rel="noopener">资料</a></p>
<p>some keys:</p>
<ol>
<li>Js可以写 ；也可以不写。不过为了能够符合自己平时的编程习惯，所以还是让自己写 ;</li>
</ol>
<h4 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h4><p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023020925712064" target="_blank" rel="noopener">资料</a></p>
<h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>some keys:</p>
<ol>
<li>用 ‘ ‘ 和 “ “括起来表示字符串 出现字符串里有 ‘ 或 “的需要用 /‘ /“来表示</li>
<li>可以用+拼接字符串  不过 ${name}这个也是模板字符串(use strict)</li>
<li><strong>字符串是不可变的</strong>，that is say:if you use s[0]=’x’ which can’t work</li>
<li>indexOf()  substring(start,end-1) </li>
</ol>
<h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><p>some keys:</p>
<ol>
<li>由键值对xxx:xxx组成 用{…}表示一个对象,最后在末尾不要加 ; 会报错</li>
<li>得到属性值  Varname.Propertyname</li>
<li>判断是否有某个属性 hasOwnProperty(‘name’)</li>
</ol>
<h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><p>some keys:</p>
<ol>
<li>arr.length 可以改变arr的值 (这次项目中清空数组就用了 arr.length=0)</li>
<li>slice 是Array的substring版本</li>
<li>push和pop在末尾添加/删除元素  unshift和shift在头部添加/删除元素</li>
<li>splice万能方法 arr.splice(index,remove_count,item_list) 从起始下标开始，删除几个元素，然后添加</li>
</ol>
<p>####循环</p>
<p>some keys：</p>
<ol>
<li>for…in 可以把一个对象的所有属性一次循环出来(因为Array也是对象，所以可以把其的索引循环出来)</li>
</ol>
<h4 id="Map-amp-Set"><a href="#Map-amp-Set" class="headerlink" title="Map&amp;Set"></a>Map&amp;Set</h4><p>some keys:</p>
<ol>
<li><p>Map是为了解决Array查找速度慢的问题，是一组键值对的结构。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'name'</span>,<span class="string">'xujin'</span>]]);</span><br><span class="line">        <span class="built_in">console</span>.log(map.get(<span class="string">'name'</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>Set是一个没有重复的Key的集合，不存储value</p>
</li>
</ol>
<h4 id="Iterale"><a href="#Iterale" class="headerlink" title="Iterale"></a>Iterale</h4><p>some keys:</p>
<ol>
<li><p>for…of 与 for…in的区别对比一下就知道了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">        array.name=<span class="string">'xujin'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> array)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//0 1 2 name</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">of</span> array)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//7 8 9</span></span><br></pre></td></tr></table></figure>

<p>说明for of 值循环集合本身的元素，for in 遍历的是对象属性的名称，但是因为array也是对象，所以就会出错。</p>
<p>2.forEach()大法好</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> array=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">        array.name=<span class="string">'xujin'</span>;</span><br><span class="line">        array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,array</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"value:"</span>+value+<span class="string">" index:"</span>+index);</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">value:7 index:0</span></span><br><span class="line"><span class="comment">value:8 index:1</span></span><br><span class="line"><span class="comment">value:9 index:2</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="JS函数"><a href="#JS函数" class="headerlink" title="JS函数"></a>JS函数</h2><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"> <span class="comment">//TODO SOMETHING   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为函数也是一个对象(前面我们也学习了array也是一个对象),函数名abs可以看做是指向该函数的变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs=<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//TODO SOMETHING</span></span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>

<p>这种定义方式function(x)是一个匿名函数，没有函数名，不过这个赋值给了变量abs</p>
<p>#####arguments</p>
<p>JS允许传入多个参数，但是为了操作这些参数，有一个arguments的关键字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)</span><br></pre></td></tr></table></figure>

<h4 id="变量作用域与解构赋值"><a href="#变量作用域与解构赋值" class="headerlink" title="变量作用域与解构赋值"></a>变量作用域与解构赋值</h4><p>Tips:js有一个怪异的特性，就是会<strong>提升变量的声明</strong>。但是并不会<strong>提升变量的赋值</strong>。所以需要严格遵守在函数内部首先申明所有变量这一个规则</p>
<p>some keys:</p>
<p>JavaScript实际上只有一个全局作用域(window），任何变量(函数也视为变量)，如果在当前函数内没有找到这个变量，那就继续往上找，如果在全局作用域中都没有找到的，就会报错。</p>
<h5 id="名字空间"><a href="#名字空间" class="headerlink" title="名字空间"></a>名字空间</h5><p>刚才我们提到所有全局变量会绑定在window上，不过如果有相同名字的话就会出现冲突，所以需要自己定义命名空间</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> MYAPP=&#123;&#125;;</span><br><span class="line">       MYAPP.name=<span class="string">'myapp'</span>;</span><br><span class="line">       MYAPP.version=<span class="string">'1.0'</span>;</span><br><span class="line">       MYAPP.abs=<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(x&gt;=<span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">return</span> -x;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(MYAPP.abs(<span class="number">-1</span>));</span><br></pre></td></tr></table></figure>

<h5 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h5><p>我们刚刚提到，js的作用域有两个一个是函数内部，一个就是全局作用域，所以会出现下面这种情况</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">               <span class="comment">//TODO SOMETHING</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">       &#125;;</span><br><span class="line">       test();</span><br><span class="line"><span class="comment">//输出结果为2</span></span><br></pre></td></tr></table></figure>

<p>为了解决这个问题ES6用let替代var</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><blockquote>
<p>在一个对象中绑定函数，称为这个对象的方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">           name:<span class="string">'xujin'</span>,</span><br><span class="line">           birth:<span class="string">'1999'</span>,</span><br><span class="line">           age:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="keyword">var</span> y=<span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">               <span class="keyword">return</span> y-<span class="keyword">this</span>.birth;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(person.age());</span><br></pre></td></tr></table></figure>

<p>Tips:JS的this的坑很多</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">          name:<span class="string">'xujin'</span>,</span><br><span class="line">          birth:<span class="string">'1999'</span>,</span><br><span class="line">          age:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="keyword">var</span> that=<span class="keyword">this</span>;</span><br><span class="line">              <span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">var</span> y=<span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">                  <span class="keyword">return</span> y-that.birth;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> getAge();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>可能你会觉得上面这个var that=this有点鸡肋，但是呢，当你提前捕获的时候，就可以在这个方法里的其他区域定义函数，并且用上that。</p>
<p>不过为了指定this的指向，我们可以用apply()和call()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">var</span> y=<span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">           <span class="keyword">return</span> y-<span class="keyword">this</span>.birth;</span><br><span class="line">       &#125;</span><br><span class="line">      <span class="keyword">var</span> person=&#123;</span><br><span class="line">          name:<span class="string">'xujin'</span>,</span><br><span class="line">          birth:<span class="string">'1999'</span>,</span><br><span class="line">          age:getAge</span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">      <span class="built_in">console</span>.log(getAge.apply(person,[]));</span><br><span class="line">      <span class="built_in">console</span>.log(getAge.call(person));</span><br></pre></td></tr></table></figure>

<h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><blockquote>
<p>一个函数可以接受另外一个函数作为参数，这种函数称为高阶函数</p>
</blockquote>
<p>这里有许多高阶函数。</p>
<h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><p>###标准对象</p>
<h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><p>some keys:</p>
<ol>
<li>JS的Date对象月份值从0开始，牢记0=1月</li>
</ol>
<p>####RegExp</p>
<p>####JSON</p>
<p>some keys:</p>
<ol>
<li>JSON的字符串规定必须用双引号””,Object的键也必须用双引号””</li>
<li>将对象序列化为JSON格式 var s=JSON.stringify(obj,[show])</li>
<li>将JSON格式反序列化 JSON.parse(‘{“name”:”xujin”}’)</li>
</ol>
<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><h4 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h4><p>some keys:</p>
<ol>
<li>window对象不但是全局作用域，而且表示浏览器窗口【这次项目中用了window.onload();</li>
</ol>
<h4 id="document"><a href="#document" class="headerlink" title="document"></a>document</h4><p>some keys:</p>
<ol>
<li><p>document对象表示当前页面（因为HTML以DOM形式表示为树形结构，document对象就是整个DOM树的根节点)</p>
</li>
<li><p>document对象提供的getElementById()和getElementsByTagName()可以通过ID获得一个DOM节点和按Tag名称获得一组DOM节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> menu=<span class="built_in">document</span>.getElementById(<span class="string">"drink-menu"</span>);</span><br><span class="line"><span class="keyword">var</span> drinks=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'dt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(menu.tagName);</span><br><span class="line"><span class="built_in">console</span>.log(drinks);</span><br><span class="line"><span class="keyword">var</span> s=<span class="string">'提供的饮料有：'</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;drinks.length;i++)&#123;</span><br><span class="line">    s=s+drinks[i].innerText+<span class="string">','</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h4><h5 id="更新DOM"><a href="#更新DOM" class="headerlink" title="更新DOM"></a>更新DOM</h5><ol>
<li>通过修改innerHTML属性，可以修改文本内容还有其DOM的内部结构(就是不仅可改文本还可以赋予HTML属性)</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p=<span class="built_in">document</span>.getElementById(<span class="string">'test'</span>);</span><br><span class="line">p.innerHTML=<span class="string">'&lt;span style="color:red"&gt;12&lt;/span&gt;'</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>通过修改innerText属性，只能修改文本值，无法设置HTML标签</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p=<span class="built_in">document</span>.getElementById(<span class="string">'test'</span>);</span><br><span class="line">p.innerText=<span class="string">"alert('12')"</span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="插入DOM"><a href="#插入DOM" class="headerlink" title="插入DOM"></a>插入DOM</h5><ol>
<li><p>通过appendChild，把一个子节点添加到父节点的最后一个节点(就是添加到后面)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> js=<span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">  js.id=<span class="string">"javascript"</span>;</span><br><span class="line">  js.innerHTML=<span class="string">'javascript'</span>;</span><br><span class="line"> <span class="keyword">var</span> ls=<span class="built_in">document</span>.getElementById(<span class="string">"list"</span>);</span><br><span class="line"> ls.appendChild(js);</span><br></pre></td></tr></table></figure>

<p>//其中创建一个新的节点是通过createElement</p>
</li>
<li><p>插到指定位置 可以通过 insertBefore(newElement,referenceElement)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> js=<span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line"> js.id=<span class="string">"javascript"</span>;</span><br><span class="line"> js.innerHTML=<span class="string">'javascript'</span>;</span><br><span class="line"><span class="keyword">var</span> ls=<span class="built_in">document</span>.getElementById(<span class="string">"list"</span>);</span><br><span class="line"><span class="keyword">var</span> py=<span class="built_in">document</span>.getElementById(<span class="string">'python'</span>);</span><br><span class="line">ls.insertBefore(js,py);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="删除DOM"><a href="#删除DOM" class="headerlink" title="删除DOM"></a>删除DOM</h5><ol>
<li><p>通过得到要删除节点的父节点 调用removeChild()删除</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> children=<span class="built_in">document</span>.getElementById(<span class="string">'python'</span>);</span><br><span class="line">  <span class="keyword">var</span> parent=children.parentElement;</span><br><span class="line">  <span class="built_in">console</span>.log(parent.id);</span><br><span class="line">  <span class="built_in">console</span>.log(parent);</span><br><span class="line">  <span class="keyword">var</span> remove=parent.removeChild(children);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="操作表单"><a href="#操作表单" class="headerlink" title="操作表单"></a>操作表单</h4><p>some keys:</p>
<ol>
<li>对于 text password hidden select 可以通过value来得到值 对于 单选框和复选框应用 checked判断</li>
</ol>
<h3 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h3><p>使用JQuery</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://code.jquery.com/jquery-latest.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/在线引用</span></span><br></pre></td></tr></table></figure>

<p>$符号</p>
<p>JQuery把功能封装在一个全局变量JQuery中，$是一个合法变量名，是变量JQuery的别名</p>
<h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><ol>
<li>通过id查找 $(‘#dom-id’)</li>
<li>通过tag查找 $(‘tag’)</li>
<li>按属性查找 $(‘[name=email]’)</li>
</ol>
<h5 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h5><p>$(‘ancestor descendant’)</p>
<h4 id="操作DOM-1"><a href="#操作DOM-1" class="headerlink" title="操作DOM"></a>操作DOM</h4><h5 id="修改Text和HTML"><a href="#修改Text和HTML" class="headerlink" title="修改Text和HTML"></a>修改Text和HTML</h5><p>text()和html()方法分别获取节点的文本和原始的HTML文本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test=$(<span class="string">'#test'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br><span class="line"><span class="built_in">console</span>.log(test.text())</span><br><span class="line"><span class="built_in">console</span>.log(test.html());</span><br></pre></td></tr></table></figure>

<p>设置文本和HTML只要向函数传入参数，就会变成设置文本</p>
<h5 id="隐藏和显示DOM"><a href="#隐藏和显示DOM" class="headerlink" title="隐藏和显示DOM"></a>隐藏和显示DOM</h5><p>调用show()和hide()函数</p>
<h5 id="操作DOM节点的属性"><a href="#操作DOM节点的属性" class="headerlink" title="操作DOM节点的属性"></a>操作DOM节点的属性</h5><p>调用attr()和removeAttr()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div.attr(<span class="string">'name'</span>,<span class="string">'hello'</span>);</span><br><span class="line">div.removeAttr(<span class="string">'name'</span>)</span><br></pre></td></tr></table></figure>

<h5 id="操作表单-1"><a href="#操作表单-1" class="headerlink" title="操作表单"></a>操作表单</h5><p>val()可以完成输入框的取值和赋值问题</p>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><h5 id="click事件"><a href="#click事件" class="headerlink" title="click事件"></a>click事件</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#test'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line"> $(<span class="string">'#test'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<h5 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h5><p>包括以下 click鼠标单击时触发……</p>
<h5 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h5><p>仅作用在当前焦点的DOM上，通常是<input>和<textarea></p>
<h5 id="ready"><a href="#ready" class="headerlink" title="ready"></a>ready</h5><blockquote>
<p>当页面被载入并且DOM树完成初始化后触发</p>
<p>适合用来写其他的初始化代码</p>
</blockquote>
<p>初始化代码必须放到 document对象的ready事件中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//这个是document对象的ready事件处理函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="取消绑定"><a href="#取消绑定" class="headerlink" title="取消绑定"></a>取消绑定</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">off(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>)</span></span><br></pre></td></tr></table></figure>

<h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><h4 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h4><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>try{….}catch(e){….}finally{…}</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>跟着教程，过了一遍JS语法，而要掌握一门语言，就是多练，后面会学习Vue并且不断去练习。</p>
<p>不过呢，前文提到要解决的问题，我短时间内没有办法解决。</p>
<p>不过呢，后面随着我的学习，会解决的。</p>
<p>未完…待续</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS第一周</title>
    <url>/2019-05-17-ARTS%E7%AC%AC%E4%B8%80%E5%91%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ARTS第一周</p>
<h4 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h4><p><strong>Floyd Warshall</strong></p>
<blockquote>
<p>Given a set of vertices V in a weighted graph where its edge weights w(u,v) can be negative,find the shortest-path weights d(s,v) from every source s for all vertices v present in the graph.If the graph contains negative-weight cycle report it.</p>
</blockquote>
<p>最短路径算法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INT_MAX 9999</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> Path[N]=&#123;<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPath</span><span class="params">(<span class="keyword">int</span> path[][N],<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(path[u][v]==u) <span class="keyword">return</span> ;</span><br><span class="line">    printPath(path,u,path[u][v]);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;Path[path[u][v]]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDist_Path</span><span class="params">(<span class="keyword">int</span> dist[][N],<span class="keyword">int</span> path[][N])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dist[i][j]==INT_MAX)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;setw(<span class="number">5</span>)&lt;&lt;<span class="string">"inf"</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;setw(<span class="number">5</span>)&lt;&lt;dist[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=j)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"the shortest path from "</span>&lt;&lt;Path[i]&lt;&lt;<span class="string">" to "</span>&lt;&lt;Path[j]&lt;&lt;<span class="string">" is "</span>&lt;&lt;Path[i];</span><br><span class="line">            printPath(path,i,j);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;Path[j]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">(<span class="keyword">int</span> adjMatrix[][N])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dist[N][N],path[N][N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)&#123;</span><br><span class="line">            dist[i][j]=adjMatrix[i][j];</span><br><span class="line">            <span class="keyword">if</span>(adjMatrix[i][j]==INT_MAX)</span><br><span class="line">                path[i][j]=<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==j)</span><br><span class="line">                path[i][j]=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> path[i][j]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;N;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dist[i][j]&gt;dist[i][k]+dist[k][j]&amp;&amp;i!=j)&#123;</span><br><span class="line">                    dist[i][j]=dist[i][k]+dist[k][j];</span><br><span class="line">                    path[i][j]=path[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printDist_Path(dist,path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> adjMatrix[N][N] =</span><br><span class="line">	&#123; </span><br><span class="line">		&#123;       <span class="number">0</span>, INT_MAX,      <span class="number">-2</span>, INT_MAX &#125;,</span><br><span class="line">		&#123;       <span class="number">4</span>,       <span class="number">0</span>,       <span class="number">3</span>, INT_MAX &#125;,</span><br><span class="line">		&#123; INT_MAX, INT_MAX,       <span class="number">0</span>,       <span class="number">2</span> &#125;,</span><br><span class="line">		&#123; INT_MAX,      <span class="number">-1</span>, INT_MAX,       <span class="number">0</span> &#125; </span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">    floyd(adjMatrix);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>some keys:</p>
<ol>
<li>path存储的是到达这一点的上一个节点，所以为了能够顺序打印出path，需要递归。</li>
</ol>
<h4 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h4><p><a href="http://blog.thefirehoseproject.com/posts/learn-to-code-and-be-self-reliant/" target="_blank" rel="noopener">The Key to Accelerating Your Coding Skills</a></p>
<p>*<em>The Tutorial Phase *</em>some keys:</p>
<ol>
<li>learn how to do specific tasks</li>
<li>Dealing with error messages and problems in this phase teaches you one of the most important skills of programming within a safe environment:being detail-oriented</li>
<li>You should learn from each message that you resolve,don’t just fix the error and be done with it.</li>
<li>You will never know everything you need to know to solve all your problems</li>
<li>Getting comfortable reading and following documentation on Github will give you a leg up when you’re on your own</li>
</ol>
<p><strong>The Inflection Point</strong> some keys:</p>
<ol>
<li>during the inflection phase, you will be coding 10-20 times slower than in the previous phase</li>
<li>You need to learn both domain-specific and procedural knowledge.</li>
<li>It’s not challenging anymore since I’ve solved all the interesting problems.</li>
<li>sorting algorithms, reversing linked lists,using stacks,queues and trees</li>
<li>You have a solid grasp on a web development framework</li>
<li>You have a solid grasp on writing algorithmically complex code in any programming language</li>
</ol>
<p>心得：</p>
<p>第一阶段：学会一些处理任务的code,然后关注细节，注意Bug，解决Bug并且从中学习到东西,在这个阶段，要多给自己一些挑战性的问题，解决没有教程的的问题，会让你的经验大大提高，放弃教程看文档。</p>
<p>第二阶段：上一个阶段达标的表现就是见过足够多的bug，并且每次出现bug都可以定位到信息，学会找到解决问题的方法。现在进入第二阶段,第二个阶段就是解决问题。</p>
<p>总结：</p>
<p>学会用文档解决问题，并且不断走出自己的舒适区，去挑战自己。</p>
<p>昨天(20190517)思考了一下，我觉得这篇文章想说的就是：提高自己解决问题的能力，而不是依靠别人(不知道自己理解的对不对)</p>
<h4 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h4><p><a href="https://www.cnblogs.com/invoker-/p/8994157.html" target="_blank" rel="noopener">IDEA的编程技巧</a></p>
<p>下回试着用后缀编程，爽。</p>
<h4 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h4><p>你还在低效的出卖时间吗？</p>
<p>这个观点先前看过，一个人的时间价值有许多的衡量标准，可以是基于过去(你现在的薪金)，现在(现在你在市场上值得多少钱)，未来(你未来的价值)。</p>
<p>不多对于我们来说，时间跟价值是1:1的关系吗？</p>
<p>如果是这样的话？就是说，你花了1小时 收获1 如果你想要收获10，你就必须花10小时。—这里应该就是我们的低效的原因。</p>
<p>我们要做的就是让先前花费的1小时，能够剩余变为后面的资产。</p>
<p>所以这里就是：从【出卖时间】到【积累资产】的思维转变。</p>
<p>some keys:</p>
<ol>
<li>尽量不做短期的事，记住是尽量不做短期的事，我们大部分人是抽出有限时间去做长期的事，在我们的头脑潜意识中，就不会给长期的事情表上<strong>重要</strong>。所以，我们应该尽量不做短期的事，让大部分时间去做长期的事，这样才能让自己从长期的事情上得到收益。如何判断长期的事：满足自己的愿望，对自己和家人都有益的事。</li>
<li>搭建一个自动转起来的系统，让自己的工作归于流程化，自动化。【刚才思考了下，最近收集资料，其实完全可以让大家自己去做】</li>
<li>延伸自己与世界的接触。思考+学习，记住让自己形成知识地图，将知识串起来。</li>
</ol>
]]></content>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL学习之旅</title>
    <url>/2019-05-17-SQL%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SQL语法的学习</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote>
<p>SQL是结构化查询语句的缩写，用来访问和操作数据库系统。</p>
<p>hhhh我知道你们会问什么是结构化查询语句：</p>
<p>Structured Query Language is a standard computer language for relational database management and data manipulation.(好吧用来操作和访问关系型数据库的语句)</p>
</blockquote>
<h4 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h4><p>some keys:</p>
<ol>
<li>通常情况下，字段应该避免允许为NULL，可以简化查询条件，加快查询速度</li>
</ol>
<p>三种关系 【班级表 学生表】</p>
<p>​    一对多的关系：一个班级对应着多个学生</p>
<p>​    多对一的关系：多个学生对应着一个班级</p>
<p>​    一对一的关系：一个班主任老师对应着一个班级</p>
<h5 id="主键some-kyes"><a href="#主键some-kyes" class="headerlink" title="主键some kyes"></a>主键some kyes</h5><ol>
<li>对于关系数据库，必须要求能够通过某个字段<strong>主键</strong>唯一区分出不同的记录。</li>
<li>作为<strong>主键</strong>最好是完全业务无关的字段(例如 身份证 手机号 邮箱 都不可以作为主键)，常见的可以用自增整数类型、全局唯一GUID类型</li>
</ol>
<h5 id="外键some-keys"><a href="#外键some-keys" class="headerlink" title="外键some keys"></a>外键some keys</h5><ol>
<li>在students表中，通过class_id的字段，可以把数据与一张表关联起来，这种列称为<strong>外键</strong></li>
<li>可以通过外键约束(无法插入class表中没有的id),不过这回影响性能，所以可以用应用逻辑来解决这个问题</li>
<li>多对多关系：通过一个中间表实现两个一对多的关系</li>
</ol>
<hr>
<p>更新，趁着复习间隙，入个门</p>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><h5 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> &lt;表名&gt;;</span><br></pre></td></tr></table></figure>

<p>该语句的作用，就是查询&lt;表&gt;的所有行，具体分析</p>
<ol>
<li>select 是关键字，表示要执行一个查询</li>
<li><em>表示*</em>所有列**</li>
<li>from表示从哪个表进行查询</li>
</ol>
<h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> &lt;表名&gt; <span class="keyword">where</span> &lt;条件表达式&gt;;</span><br></pre></td></tr></table></figure>

<p>该语句的作用是进行条件查询，where后面是条件,具体分析</p>
<ol>
<li>where关键词后面带着条件例如 score&gt;=80等等，其中score是表中的某一列</li>
<li>将条件表达式进阶 &lt;条件1&gt; and &lt;条件2&gt;;&lt;条件1&gt; or &lt;条件2&gt;;not &lt;条件&gt;</li>
<li>不加括号的优先级是 not and or</li>
</ol>
<p>更高级的 like</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> &lt;表名&gt; <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'a%'</span>;  //查询的name会以a开头</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">'a%'</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%a'</span>; //查询的name会以a结尾</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%a%'</span>; //查询的name里有a，不管a在什么位置</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'_r%'</span>;  //r会在第二个位置</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'a__%'</span>;  //a会在第一个位置，且查询的结果至少三个字符长度</span><br></pre></td></tr></table></figure>

<h5 id="投影查询"><a href="#投影查询" class="headerlink" title="投影查询"></a>投影查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 列<span class="number">1</span>，列<span class="number">2</span>，列<span class="number">3</span> <span class="keyword">from</span> &lt;表名&gt; <span class="keyword">where</span> &lt;条件&gt;</span><br></pre></td></tr></table></figure>

<p>该语句的作用就是不是返回满足条件的全部信息，只返回一部分列，具体分析</p>
<ol>
<li>通过 select 列1…其中注意列的名字需要与数据库同一字段，这种操作成为投影查询</li>
</ol>
<p>进阶</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 列<span class="number">1</span> 别名<span class="number">1</span>，列<span class="number">2</span> 别名<span class="number">2</span>，列<span class="number">3</span> 别名<span class="number">3</span> <span class="keyword">from</span>&lt;表名&gt; <span class="keyword">where</span> &lt;条件&gt;;</span><br></pre></td></tr></table></figure>

<p>该语句的作用就是，在取回的时候，显示列名是用别名，相当于在结果集中对列名进行重命名</p>
<h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 列<span class="number">1.</span>.. <span class="keyword">from</span> &lt;表名&gt; <span class="keyword">order</span> <span class="keyword">by</span> 列;</span><br></pre></td></tr></table></figure>

<p>该语句的作用就是，在结果集自己定义一种排序，原本默认的排序是以Id从小到大，具体分析</p>
<ol>
<li>order by 列，是以这个列进行从小到大的排序</li>
</ol>
<p>进阶，从高到低排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 列<span class="number">1.</span>.. <span class="keyword">from</span> &lt;表名&gt; <span class="keyword">order</span> <span class="keyword">by</span> 列 <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<p>desc的关键字表示倒序，即从大到小排序。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 列<span class="number">1.</span>.. <span class="keyword">from</span> &lt;表名&gt; <span class="keyword">order</span> <span class="keyword">by</span> 列<span class="number">1</span> <span class="keyword">desc</span>,列<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>该语句的作用，就是先通过列1进行倒序排序，如果列1中有相同的数据，则再按列2排序</p>
<p><strong>注意</strong></p>
<p>如果有where子句(即条件句)，要把order by子句放到where 后面</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 列<span class="number">1.</span>.. <span class="keyword">form</span> &lt;表名&gt; <span class="keyword">where</span> &lt;条件语句&gt; <span class="keyword">order</span> <span class="keyword">by</span> 列..</span><br></pre></td></tr></table></figure>

<h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><p>分页操作实际上就是从结果集截取出部分数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 列<span class="number">1.</span>.. <span class="keyword">from</span> &lt;表名&gt; <span class="keyword">order</span> <span class="keyword">by</span> 列.. <span class="keyword">limit</span> &lt;m&gt; <span class="keyword">offset</span> &lt;n&gt;;</span><br></pre></td></tr></table></figure>

<p>分析一下</p>
<ol>
<li>limit <M> 这里的M表示最多显示多少条数据，即一般设置为pageSize</li>
<li>offset <n> 这的n 表示从哪里开始，记住数据库中的索引是从0开始的，如果n值设置大于结果集的值，并不会报错，只是返回一个空集</li>
</ol>
<h5 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h5><p>即要计算表中的数据，使用聚合函数进行查询的就是聚合查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> &lt;表名&gt;</span><br></pre></td></tr></table></figure>

<p>该语句的表示查询所有列的函数，返回一个二维表，只是该二维表只有一行一列，并且列名是count(*)。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">num</span> <span class="keyword">from</span> &lt;表名&gt;</span><br></pre></td></tr></table></figure>

<p>该语句就是给这个二维表的列名取了一个别名num</p>
<p>进阶，加上条件语句，我们可以很容易统计出数据库中的字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">num</span> <span class="keyword">from</span> students <span class="keyword">where</span> score&gt;=<span class="number">80</span>;</span><br></pre></td></tr></table></figure>

<p>进一步，其他聚合函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(列) <span class="keyword">from</span> &lt;表名&gt;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(列) <span class="keyword">from</span> &lt;表名&gt;</span><br></pre></td></tr></table></figure>

<p>该语句的作用是，计算表中某列的总和/平均值，<strong>注意</strong>:该列必须为数值类型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(列) <span class="keyword">from</span> &lt;表名&gt;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(列) <span class="keyword">from</span> &lt;表名&gt;</span><br></pre></td></tr></table></figure>

<p>进阶</p>
<p>分组聚合</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> 列</span><br></pre></td></tr></table></figure>

<p>该语句的作用，就是将结果集按照group by 列 分组，然后统计每一组中的数量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 列，<span class="keyword">count</span>(*) <span class="keyword">from</span> &lt;表名&gt; <span class="keyword">group</span> <span class="keyword">by</span> 列，列</span><br></pre></td></tr></table></figure>

<h5 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> &lt;表<span class="number">1</span>&gt;,&lt;表<span class="number">2</span>&gt;</span><br></pre></td></tr></table></figure>

<p>该语句表示的是，从表1，表2中查询，结果集是这两个表数据的“乘积”，即表1与表2的每一行都两两拼在一起返回。结果集的列数是两个表的列数之和，行数是两个表的之积。这种查询又称为<strong>笛卡尔查询</strong>(是不是很熟悉)</p>
<p>进阶</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> students.id <span class="keyword">sid</span>,classes.id cid <span class="keyword">from</span> students,classes;</span><br></pre></td></tr></table></figure>

<p>该语句的作用是为了区分 id来自哪里，你可能注意到了studnets.id。不过还有个更简单的写法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.id <span class="keyword">sid</span>,c.id cid <span class="keyword">from</span> students s,classes c;</span><br></pre></td></tr></table></figure>

<h5 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h5><p>连接查询是另外一种的多表查询，就是对多个表进行JOIN运算，先确定一个主表作为结果集，然后将其他表的哼有选择性地“连接”在主表结果集上</p>
<h6 id="内连接-inner-join"><a href="#内连接-inner-join" class="headerlink" title="内连接 inner join"></a>内连接 inner join</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> .... <span class="keyword">from</span> &lt;表<span class="number">1</span>&gt; <span class="keyword">inner</span> <span class="keyword">join</span> &lt;表<span class="number">2</span>&gt; <span class="keyword">on</span> &lt;条件...&gt;</span><br></pre></td></tr></table></figure>

<p>…还有一些连接</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>以上部分我们解决了数据库中的“查”，回顾一下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//简单查询</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students</span><br><span class="line">//加上条件查询</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> score&gt;<span class="number">80</span></span><br><span class="line">//按我想要的要求排序</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> score&gt;<span class="number">80</span> <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>,gender</span><br><span class="line">//分页查询</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> score&gt;<span class="number">80</span> <span class="keyword">limit</span> <span class="number">3</span> <span class="keyword">offset</span> <span class="number">0</span></span><br><span class="line">//分组聚合</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> students <span class="keyword">where</span> score&gt;=<span class="number">80</span> <span class="keyword">group</span> <span class="keyword">by</span> class_id</span><br><span class="line">//返回一些列</span><br><span class="line"><span class="keyword">select</span> score <span class="keyword">from</span> students</span><br><span class="line">//别名</span><br><span class="line"><span class="keyword">select</span> score 别名，<span class="keyword">name</span> 别名 <span class="keyword">from</span> students 别名</span><br><span class="line">//多表查询</span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> students,classes</span><br><span class="line">//连接查询</span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">inner</span> <span class="keyword">by</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件</span><br></pre></td></tr></table></figure>

<hr>
<p>一股作气，然后下午散步的时候吸收</p>
<h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><h5 id="插入-insert"><a href="#插入-insert" class="headerlink" title="插入 insert"></a>插入 insert</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> &lt;表名&gt;(字段<span class="number">1</span>，字段<span class="number">2.</span>..) <span class="keyword">values</span>(值<span class="number">1</span>，值<span class="number">2.</span>..)</span><br></pre></td></tr></table></figure>

<p>一些注意的点</p>
<ol>
<li>id 不用自己写，因为id是一个自增的主键，可以由数据库自己算出来.</li>
<li>字段的顺序并不需要和数据库字段的顺序一致，但是值的顺序必须和字段的顺序一致</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students(class_id,<span class="keyword">name</span>,gender,score) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'大宝'</span>,‘M’，<span class="number">87</span>),(<span class="number">2</span>,<span class="string">'二宝'</span>,<span class="string">'M'</span>,<span class="number">81</span>);</span><br></pre></td></tr></table></figure>

<p>该语句的作用就是一下子插入两个数据。</p>
<h5 id="更新-update"><a href="#更新-update" class="headerlink" title="更新 update"></a>更新 update</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> &lt;表名&gt; <span class="keyword">set</span> 字段<span class="number">1</span>=值<span class="number">1</span>，字段<span class="number">2</span>=值<span class="number">2.</span>.. where...</span><br></pre></td></tr></table></figure>

<p>该语句的作用，在满足某条件下，将其字段进行更新</p>
<p>进阶：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> students <span class="keyword">set</span> score=score+<span class="number">10</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>注意：如果找不到满足的条件，不会报错，也不会更新。如果不使用where会更新全部数据！！！</p>
<h5 id="删除-delete"><a href="#删除-delete" class="headerlink" title="删除 delete"></a>删除 delete</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> &lt;表名&gt; where....</span><br></pre></td></tr></table></figure>

<p>同更新一样，如果找不到满足条件的数据，不会报错，也不会删除。</p>
<h2 id="写到后面"><a href="#写到后面" class="headerlink" title="写到后面"></a>写到后面</h2><p>通过这波，紧张刺激的学习。基本上我们过了数据库里的增删改查，算是入门了，接下来如果要进阶，像什么查询效率等等。需要与大佬切磋。</p>
<p>小结一下</p>
<p>增</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> &lt;表&gt;(字段...) <span class="keyword">values</span>(值...);</span><br></pre></td></tr></table></figure>

<p>删</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> &lt;表&gt; <span class="keyword">where</span> &lt;条件&gt;</span><br></pre></td></tr></table></figure>

<p>改</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> &lt;表&gt; <span class="keyword">set</span> 字段=值...where &lt;条件&gt;</span><br></pre></td></tr></table></figure>

<p>查</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> &lt;表&gt;</span><br></pre></td></tr></table></figure>











]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue前端框架</title>
    <url>/2019-05-14-Vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇是学习Vue.js前端框架，为了后面一个项目做准备</p>
<p>####这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题</p>
<blockquote>
<p>Vue是一套用于构建用户界面的<strong>渐进式框架</strong>，Vue被设计为可以自底向上逐层应用，只关注视图层</p>
</blockquote>
<p>####这个技术的优势和劣势分别是什么，或者说，这个技术的trade-off是什么</p>
<blockquote>
<p>Vue.JS was initially created as a lightweight alterantive to overcome the problems</p>
</blockquote>
<p>####这个技术使用的场景</p>
<p>####技术的组成部分和关键点</p>
<h6 id="1-Vue-components"><a href="#1-Vue-components" class="headerlink" title="1. Vue components"></a>1. Vue components</h6><p>show me the code</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'button-counter'</span>,&#123;</span><br><span class="line">		data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="keyword">return</span>&#123;</span><br><span class="line">				count:<span class="number">0</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		template:<span class="string">'&lt;button v-on:click="count++"&gt;You clicked me &#123;&#123; count &#125;&#125;times.&lt;/button&gt;'</span></span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">		el:<span class="string">'#app'</span></span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>some keys:</p>
<ol>
<li>Each time you use a component ,a new instance(实例) of it is created</li>
<li>data mush be a function.So that each instance can maintain an independent copy of the returned data object</li>
<li>Registered components globally,using Vue.component</li>
</ol>
<p>now We have to learn <strong>Props</strong></p>
<blockquote>
<p>Passing data to child components with props</p>
</blockquote>
<p>show me the code</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-post'</span>,&#123;</span><br><span class="line">		props:[<span class="string">'id'</span>,<span class="string">'title'</span>],</span><br><span class="line">		template:<span class="string">'&lt;h3&gt;&#123;&#123; id &#125;&#125;&#123;&#123; title &#125;&#125;&lt;/h3&gt;'</span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">		el:<span class="string">'#app'</span>,</span><br><span class="line">		data:&#123;</span><br><span class="line">			posts:[</span><br><span class="line">				&#123; <span class="attr">id</span>:<span class="number">1</span>, <span class="attr">title</span>:<span class="string">'My journey with Vue'</span>&#125;,</span><br><span class="line">				&#123; <span class="attr">id</span>:<span class="number">2</span>, <span class="attr">title</span>:<span class="string">'Blogging with Vue'</span>&#125;,</span><br><span class="line">				&#123; <span class="attr">id</span>:<span class="number">3</span>, <span class="attr">title</span>:<span class="string">'Why Vue is so fun'</span> &#125;</span><br><span class="line">			]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">			<span class="attr">v-for</span>=<span class="string">"post in posts"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">v-bind:id</span>=<span class="string">"post.id"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">v-bind:title</span>=<span class="string">"post.title"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>some key:</p>
<ol>
<li><p>Because HTML attribute names are case-insensitive,so browsers will interpret any uppercase characters as lowercase.That means when you’re using in-DOM templates，camelCased prop names need to use their kebab-cased equivalents;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-post'</span>,&#123;</span><br><span class="line">		props:[<span class="string">'postTitle'</span>],</span><br><span class="line">		template:<span class="string">'&lt;h3&gt;&#123;&#123; postTitle &#125;&#125;&lt;/h3&gt;'</span></span><br><span class="line">	&#125;)</span><br><span class="line">	</span><br><span class="line">&lt;blog-post postTitle=<span class="string">"hello"</span>&gt;</span><br><span class="line">		&lt;<span class="regexp">/blog-post&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/you can't see the hello until you use "post-title="hello"</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p>(好吧，我们还是用中文来，文档看英文，但是笔记用中文)</p>
<p>如果你想要在你的template中使用多个标签例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">&lt;div v-html="content"&gt;&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>

<p>这样是会报错的，因为每一个组件必须只用一个根元素(What，什么根元素。这个要看DOM，每个HTML页面都会被解释成 DOM文件，类似一棵树)</p>
<p>所以你可以这么做：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"blog-post"</span>&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div v-html="content"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样根元素就是div</p>
<p>场景：当你会了这招后，你想要传更多了的信息呢？难道一直v-bind:?所以这个时候就需要我们这个组件能够解释一个数组，数组里面的元素是对象,like this</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-post'</span>,&#123;</span><br><span class="line">       props:[<span class="string">'post'</span>],</span><br><span class="line">       template:<span class="string">'&lt;div class="blog-post"&gt;&lt;h3&gt;&#123;&#123;post.title&#125;&#125;&lt;/h3&gt;&lt;div v-html="post.content"&gt;&lt;/div&gt; &lt;/div&gt;'</span></span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">       el:<span class="string">'#components-demo'</span>,</span><br><span class="line">       data:&#123;</span><br><span class="line">           posts:[</span><br><span class="line">               &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">'My journey with Vue'</span>,<span class="attr">content</span>:<span class="string">'I'</span>&#125;,</span><br><span class="line">               &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">title</span>:<span class="string">'Blogging with Vue'</span>,<span class="attr">content</span>:<span class="string">'Can'</span>&#125;,</span><br><span class="line">               &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">title</span>:<span class="string">'Why Vue is so fun'</span>,<span class="attr">content</span>:<span class="string">'Do'</span>&#125;</span><br><span class="line">           ]</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<p>some tips:</p>
<p>javascript特性如果要分行写用``</p>
<p>场景：你使用了组件没错，但是这都是静态页面，我需要监听组件事件？这该怎么做呢？例如点击按钮让字体变大。</p>
<p>####技术的底层原理和关机实现</p>
<p>####已有的实现和它之间的对比</p>
<hr>
<p>some keys:</p>
<ol>
<li>当一个Vue实例创建的时候，他将data对象中所有的属性加入到Vue的响应式系统中。<strong>中途加的属性不会加入到响应式系统</strong></li>
</ol>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>晚上发现这么学习，效果不太好。学了前面的忘记了后面的。</p>
<p>所以改变策略等待我的Vue2.0</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>用工程的思维学习SpringBoot</title>
    <url>/2019-05-12-%E7%94%A8%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%80%9D%E7%BB%B4%E5%AD%A6%E4%B9%A0SpringBoot/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然写过Spring Boot，但是只是作为一个代码的搬运工，很多东西都不懂，所以就只能<strong>扫盲</strong>，通过工程来学习的思维确实不错，不过[真的好的东西不懂]，只能慢慢学了。</p>
<p>####actuator</p>
<p>可以监控应用的健康信息、统计应用的瞬间信息、发现应用挂掉了，发现应用瞬间信息不正常都可以发送报警信息，也可以将信息拉倒监控系统的数据系统中。</p>
<h4 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h4><blockquote>
<p>Lombok是一种Java实用工具，可用来帮助开发人员消除Java的冗长，尤其是对于简单的Java对象(POJO)。它通过<strong>注解</strong>实现这一目的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mountain</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> longitude;</span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要使用上述的这个类需要写 getter 和 setter方法，可能还要写一个构造器、equals方法等等<strong>样板式代码</strong>。</p>
<p>但是只是使用一个@Date就解决了这个问题</p>
<p><a href="https://blog.csdn.net/u010695794/article/details/70441432" target="_blank" rel="noopener">参考资料</a>   |  <a href="https://projectlombok.org/features/all" target="_blank" rel="noopener">官网</a></p>
<h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><blockquote>
<p>Maven是基于项目对象模型(POM project object model),可以通过一小段描述信息(配置)来管理项目的构建，报告和文档的软件项目管理工具</p>
</blockquote>
<p>通俗点就是：通过<strong>pom.xml</strong>文件的配置获取jar包，而不用手动去添加jar包</p>
<p><a href="https://www.cnblogs.com/whgk/p/7112560.html" target="_blank" rel="noopener">参考资料</a></p>
<h4 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h4><p>就是连接<strong>数据库</strong>的意思</p>
<p><strong>数据库连接池</strong>先打开一定数量的数据库连接，当使用的时候分配给调用者，调用完毕后返回给连接池，注意返回给连接池后并不关闭，而是等待分配给下一个调用者</p>
<p><a href="https://www.jianshu.com/p/68c8b934e26e" target="_blank" rel="noopener">参考资料</a></p>
<h4 id="SpringBoot常用的Bean注解"><a href="#SpringBoot常用的Bean注解" class="headerlink" title="SpringBoot常用的Bean注解"></a>SpringBoot常用的Bean注解</h4><p>Bean是什么？Bean可以理解为Spring容器实例化的一个对象，Spring容器也就是一个bean工厂。在简单点就是：保存数据的实体，通常与数据库中的表对应。</p>
<p><a href="https://www.cnblogs.com/ViviChan/p/4981712.html" target="_blank" rel="noopener">参考资料</a></p>
<p>什么是容器？打个比方</p>
<blockquote>
<p><strong>集装箱运载</strong></p>
<p>我把货物一辆兰博基尼跑车（好比开发好的应用APP），打包放到一容器集装箱里，它通过货轮可以轻而易举的从上海码头（CentOS7.2环境）运送到纽约码头（Ubuntu14.04环境）。而且运输期间，我的兰博基尼（APP）没有受到任何的损坏（文件没有丢失），在另外一个码头卸货后，依然可以完美风骚的赛跑（启动正常）。</p>
</blockquote>
<p>容器(Linux Container)就是解决了IT世界里“集装箱运输”问题</p>
<p><a href="https://www.cnblogs.com/qcloud1001/p/9273549.html" target="_blank" rel="noopener">参考资料</a></p>
<ul>
<li><p>Repository在数据访问层(DAO层)使用</p>
<ul>
<li>DAO是一个数据访问接口，数据访问：就是与数据库打交道。夹在业务逻辑与数据库资源中间</li>
</ul>
<p><a href="https://www.cnblogs.com/nicuty/p/6265303.html" target="_blank" rel="noopener">JpaRepository</a></p>
<p>ps:竟然有个分页功能，以后项目涉及到的到时候可以拿来用用</p>
</li>
<li><p>@Service在业务逻辑层(Service层)使用</p>
<ul>
<li>@Service(“serviceBeanId”)或@Service(value=”serviceBeanId”)使用value作为Bean名字</li>
</ul>
</li>
<li><p>@Controller用于标注控制层组件</p>
<ul>
<li>用于标注Web中控制层组件</li>
<li>和@RequestMapping、@RequestParam注解共同处理URL的映射</li>
<li>@RestController<ul>
<li>是一个组合注解 =@Controller+@ResponseBody</li>
<li>直接将返回的对象输出到客户端</li>
<li>如果返回字符串，直接返回</li>
<li>如果返回不是字符串，默认使用Jackson将对象序列化成JSON字符串后输出</li>
</ul>
</li>
</ul>
<p>[补充一个概念，序列化：为了把对象的状态保持下来，就需要把对象保存下来–后面会补充Serializable]</p>
<blockquote>
<p>小结：这几个注解其实效果都一样，不过如果按照他们的含义来注解的话，对于分层结构的WEB框架很有好处</p>
</blockquote>
<p><a href="https://blog.csdn.net/lipinganq/article/details/79155072" target="_blank" rel="noopener">参考资料</a></p>
<h4 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h4><blockquote>
<p>将大量的SQL打包成一个批次，发送给服务器，服务器接收到数据，打开批，一次执行批里的sql，这样减少与数据库的交互，提高程序的效率</p>
</blockquote>
</li>
</ul>
<hr>
<p>后续继续扫盲</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>扫盲行动</tag>
      </tags>
  </entry>
  <entry>
    <title>散列表(HashMap)</title>
    <url>/2019-05-08-%E6%95%A3%E5%88%97%E8%A1%A8(HashMap)/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近学习到了散列表，这个数据结构用的很经常，所以需要在这里整理下笔记。</p>
<h4 id="散列表-Hash-Table"><a href="#散列表-Hash-Table" class="headerlink" title="散列表-Hash Table"></a>散列表-Hash Table</h4><p>散列表用的是<strong>数组</strong>支持按照<strong>下标随机访问</strong>数据的特征，可以说是一种数组的扩展。</p>
<blockquote>
<p>Hashing is a technique that is used to uniquely identify a specific object from a group of similar objects.</p>
<p>Assume that you have an object and you want to assign a key to it to make searching easy.To store the key/value pair,you can use a simple array like a data structure where keys(integers) can be used directly as an index to store values.</p>
<p>However,in case where the keys are large and cannot be used directly as an index,you should use <strong>hashing</strong></p>
<p>In hashing,large keys are converted into small keys by using hash functions.The values are then stored in a data structure called hash table. </p>
</blockquote>
<h4 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h4><h5 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h5><ol>
<li>散列函数计算得到的散列值是一个非负整数</li>
<li>if key1==key2 则 hash(key1)==hash(key2)</li>
<li>if key1=/=key2 则 hash(key1)=/=hash(key2)</li>
</ol>
<h5 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h5><p>简单的散列函数设计</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>列子</th>
</tr>
</thead>
<tbody><tr>
<td>数据分析法</td>
<td>对于手机号，因为前几位重复的可能性很大，但是后面几位比较随机，所以可取后面几位作为散列值</td>
</tr>
<tr>
<td>除留法</td>
<td>可以通过对哈希表的长度取模</td>
</tr>
</tbody></table>
<p>####散列冲突</p>
<p>描述 ：<strong>装载因子</strong> 散列表的装载因子=填入表中的元素个数/散列表的长度</p>
<ol>
<li>开放寻址法</li>
</ol>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="left">做法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">线形探测</td>
<td align="left">1.计算hash(key)值 查找 如果该值已经有填充数据 则从当前位置出发，一次往后查找，直到找到空闲位置为止                                                                                                                         2.查找值的时候 先计算hash(key) 如果该位置是要查找的值 则结束 否则一直向后面找 直到找到空闲位置 (表示该值不在表中)                                                                                        3.删除值的时候 不可以简单直接删除 而是应该给个标记deleted</td>
</tr>
<tr>
<td align="center">二次探测</td>
<td align="left">跟线性探测很像，不同的地方就是 线性探测每次是 一个步长 二次探测的步长是原来步长的二次方</td>
</tr>
<tr>
<td align="center">双重探测</td>
<td align="left">有很多个散列函数 如果hash1(key)算出来的位置有数值 则用hash2(key)依次类推</td>
</tr>
</tbody></table>
<ol start="2">
<li><p>链表法</p>
<p>在散列表中，每个“bucket”或者”slot”会对应一条链表，所有散列值相同的元素都放到相同槽位对应的链表中。</p>
</li>
</ol>
<h4 id="工业级散列表源码分析—面试必问"><a href="#工业级散列表源码分析—面试必问" class="headerlink" title="工业级散列表源码分析—面试必问"></a>工业级散列表源码分析—面试必问</h4><p>构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                              initialCapacity);</span><br><span class="line">       <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">           initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">       <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                              loadFactor);</span><br><span class="line">       <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">       <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">       putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>初始化了三个参数</p>
<ul>
<li>initialCapacity 初始容量(默认16)</li>
<li>threshold阀值，hashMap所能容纳的最大价值对数量，超过则需要扩容</li>
<li>loadFactor装载因子</li>
</ul>
<p>Put方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">       <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//如果table尚未初始化，则此处进行初始化数组，并赋值初始容量，重新计算阈值</span></span><br><span class="line">           n = (tab = resize()).length;</span><br><span class="line">       <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">           <span class="comment">//通过hash找到下标，如果hash值指定的位置数据为空，则直接将数据存放进去</span></span><br><span class="line">           tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">       <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//如果通过hash找到的位置有数据，发生碰撞</span></span><br><span class="line">           Node&lt;K,V&gt; e; K k;</span><br><span class="line">           <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">               ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">               <span class="comment">//如果需要插入的key和当前hash值指定下标的key一样，先将e数组中已有的数据</span></span><br><span class="line">               e = p;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">               <span class="comment">//如果此时桶中数据类型为 treeNode，使用红黑树进行插入</span></span><br><span class="line">               e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//此时桶中数据类型为链表</span></span><br><span class="line">               <span class="comment">// 进行循环</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                   <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                       <span class="comment">//如果链表中没有最新插入的节点，将新放入的数据放到链表的末尾</span></span><br><span class="line">                       p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                       <span class="comment">//如果链表过长，达到树化阈值，将链表转化成红黑树</span></span><br><span class="line">                       <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                           treeifyBin(tab, hash);</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">//如果链表中有新插入的节点位置数据不为空，则此时e 赋值为节点的值，跳出循环</span></span><br><span class="line">                   <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                       ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   p = e;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//经过上面的循环后，如果e不为空，则说明上面插入的值已经存在于当前的hashMap中，那么更新指定位置的键值对</span></span><br><span class="line">           <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">               V oldValue = e.value;</span><br><span class="line">               <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                   e.value = value;</span><br><span class="line">               afterNodeAccess(e);</span><br><span class="line">               <span class="keyword">return</span> oldValue;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       ++modCount;</span><br><span class="line">       <span class="comment">//如果此时hashMap size大于阈值，则进行扩容</span></span><br><span class="line">       <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">           resize();</span><br><span class="line">       afterNodeInsertion(evict);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>分为三种情况</p>
<ul>
<li>table尚未初始化，对数据进行初始化</li>
<li>table已经初始化，且散列值的位置为空，直接将数据存放到指定位置</li>
<li>table已经初始化，发生hash冲突<ul>
<li>判断插入的值是否与该值相等</li>
<li>如果此时桶中数据类型为treeNode，使用红黑树进行插入</li>
<li>如果是列表则进行循环判断，并且判断是否需要转为红黑树</li>
</ul>
</li>
</ul>
<p>Get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt; e;</span><br><span class="line">       <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">       <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">           (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//1、根据hash算法找到对应位置的第一个数据，如果是指定的key，则直接返回</span></span><br><span class="line">           <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">               ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">               <span class="keyword">return</span> first;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">//如果该节点为红黑树，则通过树进行查找</span></span><br><span class="line">               <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                   <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">               <span class="comment">//如果该节点是链表，则遍历查找到数据</span></span><br><span class="line">               <span class="keyword">do</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                       ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                       <span class="keyword">return</span> e;</span><br><span class="line">               &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>逻辑</p>
<ol>
<li>通过hash查找，如果第一个值为查找的值，则直接放回</li>
<li>如果数据是TreeNode,则通过红黑树查找</li>
<li>如果是链表，则遍历查找</li>
<li>没有找到，返回null</li>
</ol>
<p>hash(key)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>key.hashCode()如果不进行重写的话返回的是根据内存地址得到的一个int值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt; e;</span><br><span class="line">       <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">           <span class="keyword">null</span> : e.value;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//根据key和key的hash值，查找到对应的元素</span></span><br><span class="line">       <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">           (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;</span><br><span class="line">           <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">               ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">               node = p;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                   node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">do</span> &#123;</span><br><span class="line">                       <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                           ((k = e.key) == key ||</span><br><span class="line">                            (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                           node = e;</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       p = e;</span><br><span class="line">                   &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//如果查找的了元素node，移除即可</span></span><br><span class="line">           <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                                (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">               <span class="comment">//如果是TreeNode，通过树进行移除</span></span><br><span class="line">               <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                   ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">               <span class="comment">//如果是第一个节点，移除第一个节点，将index下标的位置指向第二个节点</span></span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                   tab[index] = node.next;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   <span class="comment">//如果不是链表的第一个节点，则移除该节点</span></span><br><span class="line">                   p.next = node.next;</span><br><span class="line">               ++modCount;</span><br><span class="line">               --size;</span><br><span class="line">               afterNodeRemoval(node);</span><br><span class="line">               <span class="keyword">return</span> node;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>与get()方法的逻辑几乎一样</p>
<p>注意的点：</p>
<p>hashMap的容量是2的n次幂，无论初始化的时候传入的初始容量是多少，最终多会转为2的n次幂，为了使用&amp;操作</p>
<p><a href="https://mp.weixin.qq.com/s/SHJzWpZ0MscuJhPLRwWQxg" target="_blank" rel="noopener">参考文章</a></p>
<h4 id="找点题练下手"><a href="#找点题练下手" class="headerlink" title="找点题练下手"></a>找点题练下手</h4><p><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">leetcode1</a></p>
<p><strong>暴力法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]==target-nums[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i,j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>两遍哈希表</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> findNumber=target-nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(findNumber)&amp;&amp;map.get(findNumber)!=i)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i,map.get(findNumber)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>一遍哈希表</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> findNumber=target-nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(findNumber))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(findNumber),i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"no "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>####后记</p>
<p>这次，先到这里。过两天会再练几题，不过呢今天是第一次读源代码(虽然是看别人的文章)，也算是迈出了第一步。</p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>散列表</tag>
      </tags>
  </entry>
  <entry>
    <title>用好英语系列3</title>
    <url>/2019-05-08-%E7%94%A8%E5%A5%BD%E8%8B%B1%E8%AF%AD%E7%B3%BB%E5%88%973/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Nobody enjoys being a tramp.It’s just our souls have nowhere to rest.You gotta know it loud and clear,average people admire you not because how knowledgeable you actually are,but because how shallow and ignorant they turn out to be.</p>
<blockquote>
<p>He could have a bright future.</p>
<p>He Tackled the Gunman. </p>
<p>The instructions were spare but urgent.</p>
<p>pin someone down.把某人制服</p>
<p>She was overcome with grief.</p>
<p>I am not a big fan of…</p>
<p>We will not stop doing something until …</p>
</blockquote>
<blockquote>
<p>The synergy of     and     and the way that it panned out,it’s just incredible.And now the     ,which promises to be the most exciting    in history and we’re gonna get a glimpse of that</p>
<p><strong>ex</strong></p>
<p>The synergy of Marvel and Audi and the way that it panned out,it’s just incredible.And now the e-tron GT,which promises to be the most exciting electric vehicle in history and we’re gonna get a glimpse of that.</p>
<p>The synergy of art and technology and the that it panned out,it’s just incredible.And now the on-line gallery,which promises to be the most exciting art museum in history and we’re gonna get a glimpse of that.</p>
</blockquote>
<blockquote>
<p>So,welcome to lovely    .Thanks for joining     at this event.I’m actually pretty thrilled to be able to be part of this tonight.I didn’t want to make this announcement but I figured the crowd is so intimate. I’ve been having    for well over a     </p>
<p>It’s     ,started in     .Particularly in the last three years,going to the fourth years of    ,I’ve noticed that there’s this new     going.And I would     as I get the new    ,in a kind of way,their     ,the     -all this stuff    and    .And it feels like it was all coming to this new     which is what I guess you need to do to keep a     and     .What’s actually behind all this?</p>
<p><strong>ex</strong></p>
<p>So,welcome to the lovely downtown Los Angeles.Thanks for joining Audi&amp;I at this event.I am actually pretty thrilled to be able to be part of this tonight. I didn’t want to make this announcement but I figured the crowd is so intimate I’ve been having an extramarital affair for well over a decade.</p>
<p>So,welcome to the lovely West Lake,Hangzhou.Thanks for joining Qing-Class and I at this event.I am actually pretty thrilled to be able to be part of this tonight.I didn’t want to make this announcement  but I figured the crowd is so intimate. I’ve been having a bastard for well over a month.</p>
</blockquote>
<blockquote>
<p>extraordinary</p>
<p>She has an extraordinary memory and can remember details and names that I’ve long forgotten</p>
</blockquote>
<blockquote>
<p>The playback of EMF for the recent months has been pretty rough,especially when you lock the screen and the auto-play just stop,which is quite inconvenient when you’re listening on-the-go.I’m not sure if I’m the only one,but please take care of this problem.Thank you.</p>
</blockquote>
<blockquote>
<p>The brave men did not kill dragons.The brave men rode them.</p>
<p>The brave men did not avoid problems.The brave men solve them.</p>
<p>Not everyone who spoke you friendly was really your friend.</p>
<p>When you start learning the English,you success or you improve.</p>
</blockquote>
<blockquote>
<p>We are here to say “    “to our     ,to our     .Our fellow men and women who set aside their differences to     together    together,so that    </p>
<p><strong>ex</strong></p>
<p>We are here to say “Hi,nice to meet you.”to our teachers and professors,to our classmates and roommates,to our alumni.Our fellow men and women who set aside their differences to learn together and live together,so that PKU will thrive.</p>
</blockquote>
<blockquote>
<p>I     an ordinary    .My    is    and my    is     .So we are not struggling     ,but at the same time we are not like super    .</p>
<p><strong>ex</strong></p>
<p>I come from an ordinary family.My dad is an office clerk and my mom is a hairdresser,so we are not struggling financially,but at the same time we are not like super rich</p>
<p>I live in an ordinary apartment.My living room is 50 square meters and my bedroom is 30 square meters.So we are not struggling in housing condition,but at the same time we are not like super satisfied.</p>
</blockquote>
<blockquote>
<p>Right after    ,a group of really     up to me.    ,confident     -paced    ,I knew this type of     was exactly the reason I wanted to subscribe to this program.</p>
<p><strong>ex</strong></p>
<p>Right after the EMF started,a group of really fluent speaking student popped up to me.Authentic American Accent,confident well-paced speech,I knew this type of student was exactly the reason I wanted to subscribe to this program.</p>
</blockquote>
]]></content>
      <tags>
        <tag>用好英语</tag>
      </tags>
  </entry>
  <entry>
    <title>堆</title>
    <url>/2019-05-05-%E5%A0%86/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对于堆的数据结构，虽然上课听了，但是还是不熟悉。所以今天以这一篇文章来督促自己学习“堆”</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote>
<p>A heap is a complete binary tree.Heaps can be of two types: Max-Heap and Min-Heap</p>
<p><strong>Max-Heap</strong></p>
<p>the key present at the root node must be greatest among the keys present at all of it’s children.</p>
<p><strong>Min-Heap</strong></p>
<p>the key present at the root node must be minimum among the keys present at all of it’s children.</p>
</blockquote>
<p>看到这里，应该有点知道“堆”是啥玩意了。堆是利用<strong>完全二叉树</strong>的结构来维护的一组数据</p>
<p>下面的所有操作都是以<strong>小根堆</strong>为例</p>
<h4 id="上浮shift-up"><a href="#上浮shift-up" class="headerlink" title="上浮shift_up"></a>上浮shift_up</h4><p><strong>操作过程</strong>：</p>
<ol>
<li>从当前节点 i 开始，和它的父亲节点 i&gt;&gt;1(i/2) 比较，如果是比父亲节点小，则跟父亲节点交换</li>
<li>将当前节点 i 改为 i/2 </li>
</ol>
<p>否则退出</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line">shift_up(i)&#123;</span><br><span class="line">    <span class="keyword">while</span>((i/<span class="number">2</span>)&gt;<span class="number">1</span>)  <span class="comment">//根节点是1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">queue</span>[i]&lt;<span class="built_in">queue</span>[i&gt;&gt;<span class="number">1</span>])&#123;</span><br><span class="line">            swap(<span class="built_in">queue</span>[i],<span class="built_in">queue</span>[i&gt;&gt;<span class="number">1</span>]);</span><br><span class="line">            i=i&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="下浮shift-down"><a href="#下浮shift-down" class="headerlink" title="下浮shift_down"></a>下浮shift_down</h4><p><strong>操作过程</strong>：</p>
<ol>
<li>让当前节点的 i 开始跟它的左 2i 右 2i+1 孩子(如果有)比较 那个比较小就跟它交换</li>
<li>更新当前节点的下标 （谁跟它换就换成谁)</li>
</ol>
<p>否则退出</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line">shift_down(i)&#123;</span><br><span class="line">    <span class="keyword">while</span>((i&lt;&lt;<span class="number">1</span>)&lt;=<span class="built_in">size</span>)<span class="comment">//判断是否有左右孩子</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//进行比较</span></span><br><span class="line">        <span class="keyword">int</span> next=i&lt;&lt;<span class="number">1</span>; </span><br><span class="line">        <span class="keyword">if</span>(next+<span class="number">1</span>&lt;=<span class="built_in">size</span>&amp;&amp;<span class="built_in">queue</span>[next+<span class="number">1</span>]&lt;<span class="built_in">queue</span>[next])  <span class="comment">//如果右孩子的值小于左孩子</span></span><br><span class="line">            next++;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">queue</span>[i]&gt;<span class="built_in">queue</span>[next])<span class="comment">//如果孩子节点比父节点要小</span></span><br><span class="line">        &#123;</span><br><span class="line">            swap(<span class="built_in">queue</span>[i],<span class="built_in">queue</span>[next]);</span><br><span class="line">            i=next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;  <span class="comment">//退出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p><strong>操作过程</strong>:</p>
<p>每次插入到最后一个 即queue[++size]=insertnum 然后上浮 shift_up(size)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line">push(x)&#123;</span><br><span class="line">	<span class="built_in">queue</span>[++<span class="built_in">size</span>]=x;</span><br><span class="line">    shift_up(<span class="built_in">size</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="弹出"><a href="#弹出" class="headerlink" title="弹出"></a>弹出</h4><p><strong>操作过程</strong>：</p>
<p>让根节点跟尾节点进行交换，然后当当前的根节点元素下沉就可以了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line">Pop(x)&#123;</span><br><span class="line">    swap(<span class="built_in">queue</span>[<span class="number">1</span>],<span class="built_in">queue</span>[<span class="built_in">size</span>]);</span><br><span class="line">    <span class="built_in">size</span>--;  <span class="comment">//弹出</span></span><br><span class="line">    shift_down(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上我们已经讲了堆的基本操作，所以稍微懂了点</p>
<p>现在我们出发找点题练手啊<del>~</del></p>
<p>额，还不行。但目前为止，我们只是讲了堆的操作，但是并没有说一些应用</p>
<h4 id="堆排序算法"><a href="#堆排序算法" class="headerlink" title="堆排序算法"></a>堆排序算法</h4><p><strong>操作过程</strong>：</p>
<ol>
<li>建堆 两种方法<ol>
<li>假设只包含一个数据，就是下标为1的数据，然后通过不断插入。这样就可以得到n个数据的堆【这个想法还是比较好理解的】</li>
<li>利用下沉操作，从上往下的建立这个堆【这里我们详细的讲】</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为了区别上面，这里建立最大堆</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=size/<span class="number">2</span>;i&gt;=<span class="number">1</span>;--i)   <span class="comment">//size/2这个下标是第一个非叶子节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        shift_down(a,size,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shift_down</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> size,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>((i&lt;&lt;<span class="number">1</span>)&lt;=size)&#123;</span><br><span class="line">        <span class="keyword">int</span> next=i&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(next+<span class="number">1</span>&lt;=size&amp;&amp;a[next+<span class="number">1</span>]&gt;a[next])</span><br><span class="line">            next++;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;a[next])  <span class="comment">//父节点小于孩子节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            swap(a,i,next);</span><br><span class="line">            i=next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>排序</p>
<ol>
<li>就是不断删除堆顶的操作</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    buildHeap(a,n);</span><br><span class="line">    <span class="keyword">int</span> k=n;</span><br><span class="line">    <span class="keyword">while</span>(k&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        swap(a,<span class="number">1</span>,k);</span><br><span class="line">        --k;</span><br><span class="line">        shift_down(a,k,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里掌握的差不多了，不过呢！我们还是需要实现下堆的基本操作，然后我们上手练习，砍柴不过磨刀功。</p>
<p>####全部代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10010  <span class="comment">//可以自己定义堆的最大长度 </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//max-heap </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Heap</span>&#123;</span></span><br><span class="line">	<span class="comment">//定义结构</span></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>,heap[maxn];</span><br><span class="line">	<span class="comment">//初始化</span></span><br><span class="line">	Heap()&#123;</span><br><span class="line">		<span class="built_in">size</span>=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=maxn;i++)&#123;</span><br><span class="line">			heap[i]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//堆化</span></span><br><span class="line">	<span class="comment">//这里用从上往下的堆化 </span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>((i&lt;&lt;<span class="number">1</span>)&lt;=<span class="built_in">size</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> next=i&lt;&lt;<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(next+<span class="number">1</span>&lt;=<span class="built_in">size</span>&amp;&amp;heap[next+<span class="number">1</span>]&gt;heap[next])</span><br><span class="line">				next++;</span><br><span class="line">			<span class="keyword">if</span>(heap[i]&lt;heap[next])&#123;</span><br><span class="line">				<span class="keyword">int</span> temp=heap[i];</span><br><span class="line">				heap[i]=heap[next];</span><br><span class="line">				heap[next]=temp;</span><br><span class="line">				i=next;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//上浮</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">shift_up</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(i&gt;<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(heap[i]&gt;heap[(i&gt;&gt;<span class="number">1</span>)])&#123;</span><br><span class="line">				<span class="keyword">int</span> temp=heap[i/<span class="number">2</span>];</span><br><span class="line">				heap[i/<span class="number">2</span>]=heap[i];</span><br><span class="line">				heap[i]=temp;</span><br><span class="line">				i=i/<span class="number">2</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//下沉 见堆化</span></span><br><span class="line">	<span class="comment">//删除堆顶元素</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">		heap[i]=heap[<span class="built_in">size</span>];</span><br><span class="line">		<span class="built_in">size</span>--;</span><br><span class="line">		heapify(<span class="number">1</span>);<span class="comment">//重新堆化 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="comment">//先插入末尾</span></span><br><span class="line">		heap[++<span class="built_in">size</span>]=x;</span><br><span class="line">		shift_up(<span class="built_in">size</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">heapisempty</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">size</span>&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//堆排序</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">heapsort</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(heapisempty())&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;heap[<span class="number">1</span>]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">			pop(<span class="number">1</span>);</span><br><span class="line">			heapsort();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试样例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Heap Q;</span><br><span class="line">	<span class="keyword">int</span> n,a,i,j,l;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入堆的大小 不要操作10010"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">		Q.insert(a);</span><br><span class="line">	&#125;</span><br><span class="line">	Q.heapsort();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//不知道为什么有点小bug 现在用java试一遍</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Heap</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        a=<span class="keyword">new</span> <span class="keyword">int</span>[capacity+<span class="number">1</span>];</span><br><span class="line">        n=capacity;</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(count&gt;=n) <span class="keyword">return</span> ;</span><br><span class="line">        ++count;</span><br><span class="line">        a[count]=data;</span><br><span class="line">        <span class="keyword">int</span> i=count;</span><br><span class="line">        <span class="keyword">while</span>(i/<span class="number">2</span>&gt;<span class="number">0</span>&amp;&amp;a[i]&gt;a[i/<span class="number">2</span>])&#123;</span><br><span class="line">            swap(a,i,i/<span class="number">2</span>);</span><br><span class="line">            i=i/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        a[<span class="number">1</span>]=a[count];</span><br><span class="line">        --count;</span><br><span class="line">        heapify(a,count,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> count, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">while</span>((i&lt;&lt;<span class="number">1</span>)&lt;=count)&#123;</span><br><span class="line">           <span class="keyword">int</span> next=i&lt;&lt;<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span>(next+<span class="number">1</span>&lt;=count&amp;&amp;a[next+<span class="number">1</span>]&gt;a[next])</span><br><span class="line">               next++;</span><br><span class="line">           <span class="keyword">if</span>(a[i]&lt;a[next])&#123;</span><br><span class="line">               swap(a,i,next);</span><br><span class="line">               i=next;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(<span class="keyword">int</span> [] a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">            heapify(a,n,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        buildHeap(a,n);</span><br><span class="line">        <span class="keyword">int</span> k=n;</span><br><span class="line">        <span class="keyword">while</span>(k&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(a[<span class="number">1</span>]);</span><br><span class="line">            swap(a,<span class="number">1</span>,k);</span><br><span class="line">            --k;</span><br><span class="line">            heapify(a,k,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> i1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t=a[i];</span><br><span class="line">        a[i]=a[i1];</span><br><span class="line">        a[i1]=t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"建立堆"</span>);</span><br><span class="line">       Heap heap=<span class="keyword">new</span> Heap(<span class="number">10</span>);</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">           heap.a[i]=i;</span><br><span class="line">       &#125;</span><br><span class="line">       buildHeap(heap.a,<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">            System.out.println(heap.a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有bug的代码 待我静下心来认真研读</span></span><br></pre></td></tr></table></figure>

<h4 id="堆的应用"><a href="#堆的应用" class="headerlink" title="堆的应用"></a>堆的应用</h4><p>哈哈哈臭不要脸的，前面代码都有bug，不过呢，我相信我往后做，就可以发现和找到bug</p>
<p>这里留个坑，留到后面收个尾</p>
<p>####利用优先级队列合并 K 个有序数组</p>
<p>####求一组动态数据集合的最大 Top K</p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>堆</tag>
      </tags>
  </entry>
  <entry>
    <title>集合(Set)</title>
    <url>/2019-05-05-%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>集合这个数据结构，需要了解一下，因为对于一些数据只能用集合来存储,没有特定的顺序，并且数据不重复。</p>
<p>【这部分，我只找到一点材料，所以今天补充一下】</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote>
<p>A set is an abstract data type that can store certain values,without any particular order,and no repeated values.</p>
<p>The Sets data structure is usually used to test whether elements belong to set of values.</p>
</blockquote>
<p>这个定义说明，集合经常用来验证<strong>某个值是否在这里面</strong>。</p>
<h4 id="集合的表示"><a href="#集合的表示" class="headerlink" title="集合的表示"></a>集合的表示</h4><p>用一个数组表示，数组的index表示存储的值，数组存储的值表示 该集合的代表，如果就是集合的代表，则为-1</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Put</span><span class="params">(<span class="keyword">int</span> []set)</span></span>&#123;</span><br><span class="line">       <span class="comment">//以每个集合的第一个数为代表</span></span><br><span class="line">       Set[set[<span class="number">0</span>]]=-<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;set.length;i++)&#123;</span><br><span class="line">           Set[set[i]]=set[<span class="number">0</span>];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h4><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><p>沿当前节点往上查，当查到某个节点的值为-1时，就是其所在的集合</p>
<p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找某个元素所在的集合</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">       <span class="keyword">for</span>(;Set[num]&gt;=<span class="number">0</span>;num=Set[num]);</span><br><span class="line">       <span class="keyword">return</span> num;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h5 id="集合的并运算"><a href="#集合的并运算" class="headerlink" title="集合的并运算"></a>集合的并运算</h5><p>直接将另外一个集合接到当前集合下</p>
<p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//集合并运算</span></span><br><span class="line">   <span class="comment">//直接将第二个集合的代表元素接在第一个集合的代表元素后面</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> []set1,<span class="keyword">int</span> []set2)</span></span>&#123;</span><br><span class="line">       Set[set2[<span class="number">0</span>]]=set1[<span class="number">0</span>];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>改进版</strong></p>
<p>按秩合并</p>
<p>就是判断两个集合的大小，小的接到大的下面</p>
<p>路径压缩</p>
<p>查找某个值的时候，直接将这个值接到根节点下面</p>
<p>全部代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetPractice</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] Set;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> MAXN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化容量为MAXN</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SetPractice</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MAXN=<span class="number">16</span>;</span><br><span class="line">        Set=<span class="keyword">new</span> <span class="keyword">int</span>[MAXN];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Put</span><span class="params">(<span class="keyword">int</span> []set)</span></span>&#123;</span><br><span class="line">        <span class="comment">//以每个集合的第一个数为代表</span></span><br><span class="line">        Set[set[<span class="number">0</span>]]=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;set.length;i++)&#123;</span><br><span class="line">            Set[set[i]]=set[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查找某个元素所在的集合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(;Set[num]&gt;=<span class="number">0</span>;num=Set[num]);</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//集合并运算</span></span><br><span class="line">    <span class="comment">//直接将第二个集合的代表元素接在第一个集合的代表元素后面</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> []set1,<span class="keyword">int</span> []set2)</span></span>&#123;</span><br><span class="line">        Set[set2[<span class="number">0</span>]]=set1[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//按秩合并</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnionBysize</span><span class="params">(<span class="keyword">int</span> []set1,<span class="keyword">int</span> []set2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(set1.length&lt;set2.length)</span><br><span class="line">            Set[set2[<span class="number">0</span>]]=set1[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Set[set1[<span class="number">0</span>]]=set2[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//路径压缩</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FindAndShorten</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Set[num]&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> Set[num]=FindAndShorten(Set[num]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> set1[]=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> set2[]=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> set3[]=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        SetPractice setPractice=<span class="keyword">new</span> SetPractice();</span><br><span class="line">        setPractice.Put(set1);</span><br><span class="line">        setPractice.Put(set2);</span><br><span class="line">        setPractice.Put(set3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>我也奇怪，为什么集合没有好的材料？？？</p>
]]></content>
      <tags>
        <tag>集合</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>用好英语系列2</title>
    <url>/2019-05-01-%E7%94%A8%E5%A5%BD%E8%8B%B1%E8%AF%AD%E7%B3%BB%E5%88%972/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个系列第二篇来了.</p>
<blockquote>
<p>mental well-being 精神上非常富足，健康</p>
<p>overly concerned 过分担心</p>
<p>is one of the main symptoms症状</p>
<p>Not only that 不仅如此</p>
<p>insomnia失眠</p>
<p>inability to fall asleep 不能入睡，没有能力入睡</p>
<p>who do suffer do-表示强调</p>
</blockquote>
<blockquote>
<p>Our fatigue is often caused not by work,but by worry,frustration and resentment.</p>
</blockquote>
<blockquote>
<p>Of course your    play a role too.        is a big one.    what     ,always feeling     about        ,or being    can be    </p>
<p><strong>ex</strong></p>
<p>Of course your mental well-being plays a role too.Anxiety is a big one.Worrying what people think ,always feeling tense about work,or being overly concerned about every decision can be physically exhausting.</p>
<p>Of course your communication skills plays a role too.English is a big one.Understanding what client say,always feeling confident  about negotiation,or being extremely persuasive in every word can be commercially advantageous.</p>
</blockquote>
<blockquote>
<p>And     is one of the main symptoms of Generalized    .Not only that,but     may be affecting your     quality.</p>
<p><strong>ex</strong></p>
<p>And fatigue is one of the main symptoms of generalized anxiety disorder.Not only that,but anxiety may be affecting your sleep quality.</p>
<p>And irritation is one of the main symptoms of generalized Midlife Crisis.Not only that,but age may be affection your judgement quality.</p>
</blockquote>
<blockquote>
<p>Unfortunately there’s no quick  fix for the 99% of     who do suffer form     .So if you think you may be     ,        .</p>
<p><strong>ex</strong></p>
<p>Unfortunately,there’s no quick fix for the 10% of Americans who do suffer from depression.So if you think you may be depressed,see your physician or psychologist.</p>
<p>Unfortunately,there’s no quick fix for the 99% of English learners who do suffer from mispronunciation.So if you think you may be mispronunciation,go search “小麦老师” on social media.</p>
</blockquote>
<blockquote>
<p>It’s always clear sunny day as long as you enjoy your well-being 你若安好，便是晴天</p>
<p>There’s no need to feel tense about is.没有必要紧张</p>
</blockquote>
<blockquote>
<p>If you’d ask me what makes a great     ,I could give you hundreds of answers,If I have to sum them up into one answer- if the     makes you     every time you</p>
<p>One,the     behind it.I think     associated with    what makes them     and     to people .And I think     and     to  people.And I think that is what creates this incredible     people have     these    .</p>
<p>It’s always     ,    of     ,    of    ,    ,but most importantly the     of the     ,    are you     ?</p>
<p><strong>ex</strong></p>
<p>If you’d asked me what makes a great watch,I could give you a hundreds of answers,If I have sum them up into one answer-if it makes you smile every time you look at it.</p>
<p>One,the story behind it.I think what memories associated with watches are what makes them meaningful and important to people.And I think that is what creates this incredible bond that people have formed with these objects.</p>
<p>It’s always execution,execution of design,execution of finishing,manufacturing,but most importantly the execution of the intent.Why are you making it.</p>
<p><strong>ex</strong></p>
<p>If you’d asked me what makes a great speaker,I could give you hundreds of answers.If I have sum them up into one answer-if it makes you inspired every time you listen to him</p>
<p>One,the experience behind it,I think wisdom associated with speakers is what makes them powerful and persuasive to people,And I think that is what create this incredible trust people have placed in these orators.</p>
<p>It’s always expression,expression of ideas,expression of emotions,passions,but most importantly the expression of the wisdom,what are you getting across?</p>
</blockquote>
]]></content>
      <tags>
        <tag>用好英语</tag>
      </tags>
  </entry>
  <entry>
    <title>用好英语系列1</title>
    <url>/2019-04-23-%E7%94%A8%E5%A5%BD%E8%8B%B1%E8%AF%AD%E7%B3%BB%E5%88%971/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个系列的文章是学习[英语麦克风]一个积累的文章，这里面会涉及到句型，例句等等。</p>
<p>希望自己能通过写这个系列的文章，让自己的思维，英语能够有所提高。</p>
<p>这个系列的文章更新规则是：</p>
<p><del>尽量做到每天更新</del></p>
<p><del>每周1 3 5为单词的更新 2 4 6 为句型的更新</del></p>
<p><del>一周一篇。希望对你有所帮助</del></p>
<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul>
<li><input checked="" disabled="" type="checkbox"> 2019/4/23 <a href="#20190423">12岁女孩语惊四座，大人们羞愧难当</a></li>
</ul>
<p>###<span id="20190423">2019/4/23</span></p>
<blockquote>
<p><strong>Daily Must</strong></p>
<p>We can build a society where our actions align with our value</p>
<p>The most important thing is that everybody in car work together and turn the car around.</p>
</blockquote>
<p>align with 跟…一致</p>
<p>ex:Your actions should align with your words.</p>
<blockquote>
<p>​     is not like     or (growing) a few  in  .I am here to speak for all    to come.I am here to speak on behalf of the     around the world whose cries go unheard,for the countless    across this    because they have been    .</p>
<p><strong>ex1</strong></p>
<p>Losing our future is not like losing an election or a few points in stock market.I am here to speak for all generations to come.I am here to speak on behalf of the staving children around the world whose cries go unheard, for the countless animals dying across this planet because they have nowhere left to go.</p>
<p><strong>ex2</strong></p>
<p>Having a baby is not like keeping a pet or (growing) a few roses in the backyard.I am here to speak for all mothers to come.I am here to speak on behalf of the helpless mothers around the world whose cries go unheard,for the countless women struggling across this workplace because they have been treated unfairly.</p>
</blockquote>
<blockquote>
<p>Here you may be     of your     ,    or     ,but really your’re    and     ,    and     ,    and     ,and all of you are a    .</p>
<p><strong>ex1</strong></p>
<p>Here you may be delegates of your country,business people or politicians,but really you’re mothers and fathers,sisters and brothers,aunts and uncles,and all of you’re someone’s child. </p>
</blockquote>
<blockquote>
<p>And now    years have gone by,we have not even come close to achieving the     that we knew we needed back then.My    always say,”You are what you do,not what you say”.Well what you do makes me cry at night.You    say    .but I challenge you please make your actions reflect your words.Thank your.</p>
<p><strong>ex1</strong></p>
<p>And now twenty years have gone by,we have not even come close to achieving the sustainable transition that we knew we needed back then.My father always say,”You are what you do,not what you say.”Well,what you do makes cry at night.You grown-ups say you love us,but I challenge you,please make your actions reflect your words.Thank you.</p>
</blockquote>
<p>这部分内容全部都是演讲内容，演讲内容其实设计到一个Conclusion.</p>
<ol>
<li>So as you can see../To conclude…</li>
<li>First I told you about….,then I discussed …. and lastly,I explained…</li>
</ol>
<p>演讲的开头</p>
<ol>
<li>Coming up here today I have no hidden agenda.</li>
</ol>
<blockquote>
<p><strong>try</strong></p>
<p>Hello I am     speaking for 996.icu,the six days a week and every 12 hours a day organization.We’re a group of 24- and 40-year olds trying to make a difference.Coming up here today,I have no hidden agenda,I am fighting for my right.</p>
<p>I am here to speak for all employees to come.I am here to speak on behalf of the helpless workers around the world whose cries go unheard,for the countless people struggling across this workplace because they have been treated unfairly.</p>
<p>My teacher always says,”You are what you do ,not what you say”.Well,what you do makes me cry at night.You bosses say you love your employees,but I challenge you,please make your actions reflect your words.Thank you.</p>
</blockquote>
<h4 id="20190425"><a href="#20190425" class="headerlink" title="20190425"></a>20190425</h4><blockquote>
<p>pretty nerdy书呆子</p>
</blockquote>
<blockquote>
<p>How much did    pay    in    last year?They paid     more in     than    .This is    where     </p>
<p><strong>ex</strong></p>
<p>How much did a family pay for their child’s education in major cities last year?They paid 10 times more in education than those in rural areas.This is a competition where someone has already lost in very beginning.</p>
</blockquote>
<blockquote>
<p>There’s this massive appetite among    for solutions that will actually improve their    .I am the candidate to beat    because I’m focused on solving the     that    got    in the first place</p>
<p><strong>ex</strong></p>
<p>There’s this massive appetite among rural families for solutions that will actually improve their children’s education.I am the candidate to beat regional imbalance because I’m focused on solving the scarcity of educational resources that got those rural kids left behind in the first place. </p>
</blockquote>
<blockquote>
<p>Our     is not working for more and more Chinese and now I’m running for     to help change that and make     not the     in     anymore</p>
<p><strong>ex</strong></p>
<p>Our education system is not working for more and more Chinese and now I’m running for the  Minister Education to help change that and make our future generations not the losers in the global competition anytion</p>
</blockquote>
]]></content>
      <tags>
        <tag>用好英语</tag>
      </tags>
  </entry>
  <entry>
    <title>Java动态绑定和静态绑定详解</title>
    <url>/2019-04-20-java%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E5%92%8C%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为什么突然写Java系列？因为突然发现自己以前学习都没有深入去理解一个知识点，搞的自己看起来都会，其实都不会。所以这个系列里，我会专门来讲Java中的知识点，并且会把这个知识点设计到的每个小知识点都提到。</p>
<hr>
<h3 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h3><blockquote>
<p>When compiler is not  able to resolve the call/binding at compile time,such binding is known as Dynamic or late Binding 。</p>
</blockquote>
<p>看到这里，我的表情是这样的:cry:</p>
<p>我们来看一下example</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 总共两个类 主类Boy继承Human</span></span><br><span class="line"><span class="comment"> * 类Human里有个方法walk() Boy对该方法进行重写(overriding)</span></span><br><span class="line"><span class="comment"> * 然后有三个对象obj obj1 obj2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Human walks"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boy</span> <span class="keyword">extends</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Boy walks"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        Human obj=<span class="keyword">new</span> Boy();</span><br><span class="line">        Human obj2=<span class="keyword">new</span> Human();</span><br><span class="line">        Boy obj3=<span class="keyword">new</span> Boy();</span><br><span class="line"></span><br><span class="line">        obj.walk();</span><br><span class="line">        obj2.walk();</span><br><span class="line">        obj3.walk();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>tips:可以先自己想一下输出的结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">Boy walks</span><br><span class="line">Human walks</span><br><span class="line">Boy walks</span><br></pre></td></tr></table></figure>

<p>不知道跟你想的有没有一样？</p>
<p>好我们来分析一下这个代码:smile:在此之前我需要补充几个知识点【如果这两个知识点你还不熟悉的话，需要你往下看】</p>
<ul>
<li>java转型 向上转型或向下转型</li>
<li>重写和重载</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*obj是向下转型</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="java转型"><a href="#java转型" class="headerlink" title="java转型"></a>java转型</h3><h4 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h4><blockquote>
<p>upcasting is casting to a supertype and upcasting is always allowed</p>
</blockquote>
<blockquote>
<p>when we want to cast a Sub class to Super class to Super class</p>
</blockquote>
<p>这两句话的意思就是：当你想让子类转型成父类就是向上转型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有三个类 主类C的直接父类为B B的父类是A</span></span><br><span class="line"><span class="comment"> * 其中main函数定义了两个对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        A a=<span class="keyword">new</span> B();</span><br><span class="line">        a.a1();</span><br><span class="line">        B b=<span class="keyword">new</span> B();</span><br><span class="line">        b.a1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">B</span><br><span class="line">B</span><br></pre></td></tr></table></figure>

<p>可能看到这个结果有点疑惑[作为菜鸟的我又去查了资料]</p>
<blockquote>
<p>A cast from B to an A is an upcast,because B is-a A.In general,you can upcast whenever there is an is-a relationship between two classes.</p>
<p>[is-a]在知识表示、面向对象程序设计与面向对象设计的领域中表示类的父子继承关系</p>
</blockquote>
<p>现在应该比较好理解了，a呢实际上指向的是一个子类对象，只不过这个子类对象进行了upcasting。[不过由于向上转型，a对象可能会丢失和父类不同的方法—表示a对象只能调用父类继承过来的方法]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个代码是错误的不可运行</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        A a=<span class="keyword">new</span> B();</span><br><span class="line">        a.a1();</span><br><span class="line">        a.b1();<span class="comment">//这句话会报错</span></span><br><span class="line">        ((B) a).b1();</span><br><span class="line">        B b=<span class="keyword">new</span> B();</span><br><span class="line">        b.a1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可能会觉得疑惑，这个向上转型有什么用？—增强了程序的简洁性:question:</p>
<p>这里又会设计到另外一个概念：<strong>类的多态</strong></p>
<h5 id="类的多态"><a href="#类的多态" class="headerlink" title="类的多态"></a>类的多态</h5><p>先来看一下example</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name,String address,<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Constructing an Employee"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.address=address;</span><br><span class="line">        <span class="keyword">this</span>.number=number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mailCheck</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"with employee"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Salary</span><span class="params">(String name,String address,<span class="keyword">int</span> number,<span class="keyword">double</span> salary)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,address,number);</span><br><span class="line">        setSalary(salary);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(salary&gt;=<span class="number">0.0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.salary=salary;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mailCheck</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Within mailCkeck of Salary class"</span>);</span><br><span class="line">        System.out.println(<span class="string">"with salary"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VirtualDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        Salary s=<span class="keyword">new</span> Salary(<span class="string">"jin"</span>,<span class="string">"shanghai"</span>,<span class="number">1</span>,<span class="number">3.0</span>);</span><br><span class="line">        Employee e=<span class="keyword">new</span> Salary(<span class="string">"xu"</span>,<span class="string">"sh"</span>,<span class="number">2</span>,<span class="number">3.0</span>);</span><br><span class="line">        System.out.println(<span class="string">"Call mailCheck using Salary reference --"</span>);</span><br><span class="line">        s.mailCheck();</span><br><span class="line">        System.out.println(<span class="string">"Call mailCheck using Employee reference--"</span>);</span><br><span class="line">        e.mailCheck();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 预计运行结果</span></span><br><span class="line"><span class="comment"> * 都是通过mailCheck()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>先来猜测一下，输出结果是什么？</p>
<p>没错都是通过Salary类输出mailCheck();[在调试代码的时候，因为方法名字写错。对其有着更深理解 Salary类继承Empolyee 重写mailCheck()方法]</p>
<p>好了，那多态的概念是什么呢？</p>
<blockquote>
<p>多态指的是 Java的父类对象可以引用其所有子类对象。但是其引用完后，仍然是“父类对象”，只能调用父类中能够被子类继承的方法或者对象。</p>
</blockquote>
<p>从上面多态的例子和向上转型，你应该可以看出多态其实就是一种<strong>upcasting</strong>.</p>
<h4 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h4><blockquote>
<p>Downcasting is casting to a subtype and downcasting involves a type check and can throw a ClassCastException.</p>
</blockquote>
<p>定义就是讲，当父类对象转为子类，不过不像upcasting，会有ClassCastExeption的异常</p>
<p>你们查这个代码是否可以运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VirtualDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        Employee e=<span class="keyword">new</span> Salary(<span class="string">"xu"</span>,<span class="string">"sh"</span>,<span class="number">2</span>,<span class="number">3.0</span>);</span><br><span class="line">        Employee ee=<span class="keyword">new</span> Employee(<span class="string">"xu"</span>,<span class="string">"sh"</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        Salary sss= (Salary) ee;</span><br><span class="line">        Salary ss= (Salary) e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实不行，会有ClassCastExveption异常。</p>
<p>为什么呢？因为在运行的时候 ee就是 Employee,当你让他变成Salary，就会抛出异常</p>
<p>所以为了不抛出异常就需要提前判断 (A instanceof B)</p>
<blockquote>
<p>instanceof is used to check if an object is an instance of a specific class</p>
</blockquote>
<h3 id="重写-overrding-与重载-overloading"><a href="#重写-overrding-与重载-overloading" class="headerlink" title="重写(overrding)与重载(overloading)"></a>重写(overrding)与重载(overloading)</h3><blockquote>
<p>overlading occurs when two or more methods in one class have the same method name but different parameters.</p>
<p>overriding means having two methods with the same method name and parameters.One of the methods is in the parent class and the other is in the child class.</p>
</blockquote>
<p>从定义我们可以看到，重写是发生在extends中，子类重写父类的方法。重载则是在同一类中的方法。</p>
<h3 id="静态绑定"><a href="#静态绑定" class="headerlink" title="静态绑定"></a>静态绑定</h3><blockquote>
<p>Static binding in java occurs during compile time</p>
<p>private,final and static methods and variables user static binding and are bonded by compiler.</p>
<p>static binding uses type (class in java)information for binding</p>
<p>overloading methods are bonded using static bindign</p>
</blockquote>
<p>通过研究动态绑定，我们可以很简单的学会静态绑定</p>
<ol>
<li>静态绑定发生在 static final private[就是无法被继承的类型]上</li>
<li>静态绑定是由class 类型决定的，因为是发生在编译时期</li>
<li><strong>overloading</strong> 也是静态绑定</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VirtualDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        Salary s=<span class="keyword">new</span> Salary(<span class="string">"jin"</span>,<span class="string">"shanghai"</span>,<span class="number">1</span>,<span class="number">3.0</span>);</span><br><span class="line">        Employee e=<span class="keyword">new</span> Salary(<span class="string">"xu"</span>,<span class="string">"sh"</span>,<span class="number">2</span>,<span class="number">3.0</span>);</span><br><span class="line">        Employee ee=<span class="keyword">new</span> Employee(<span class="string">"xu"</span>,<span class="string">"sh"</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        VirtualDemo virtualDemo=<span class="keyword">new</span> VirtualDemo();</span><br><span class="line">        virtualDemo.testOverloading(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testOverloading</span><span class="params">(Employee e)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Employee"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testOverloading</span><span class="params">(Salary ss)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Salary"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你能猜到输出结果吗？</p>
<p>结果是Empoyee</p>
<p>是不是很惊喜？？？</p>
<p>我们来分析一下这个代码：<br>首先 testOverloading是一个重载方法，所以是静态绑定，而静态绑定是由类类型决定，并且e是Employee类型，虽然其指向Salary对象，不过一点都不影响其静态绑定.</p>
<p>看到这里你应该对静态绑定有更深刻的了解了吧！[说实话，昨天我以为我懂了，今天发现好伐又有新东西。真好]</p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>Here are a few important differences between static and dynamic binding:</p>
<ol>
<li>Static binding in Java occurs during compile time while dynamic binding occurs during runtime</li>
<li>private，final and static methods and variables use static binding and are bonded by compiler whiler virtual metods are bonded during runtime based upon runtime object</li>
<li>Static binding users Type (Class in Java) information for binding while dynamic binding uses object to resolve binding </li>
<li>Overloaded methods are bonded using static binding while overridden methods are boned using dynamic binding at runtime</li>
</ol>
</blockquote>
<p>如定义所说：动态绑定就是指在运行的时候，调用方法才跟方法体联系起来，而静态绑定是在编译的时候就联系起来。并且只有 final static private.这种没法被继承的，(在upcasting或者体现类多态的时候才会有“静态绑定”这一个说法)</p>
<p>以个例子收尾</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name,String address,<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Constructing an Employee"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.address=address;</span><br><span class="line">        <span class="keyword">this</span>.number=number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mailCheck</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"the static method of employee"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mailCheck2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"the public method of employee"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mailCheck3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"the private employee method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> flag=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Salary</span><span class="params">(String name,String address,<span class="keyword">int</span> number,<span class="keyword">double</span> salary)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,address,number);</span><br><span class="line">        setSalary(salary);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(salary&gt;=<span class="number">0.0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.salary=salary;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mailCheck</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"with salary static method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mailCheck2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"public method of salary"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mailCheck3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"private method of salary"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VirtualDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        Salary s=<span class="keyword">new</span> Salary(<span class="string">"jin"</span>,<span class="string">"shanghai"</span>,<span class="number">1</span>,<span class="number">3.0</span>);</span><br><span class="line">        Employee e=<span class="keyword">new</span> Salary(<span class="string">"xu"</span>,<span class="string">"sh"</span>,<span class="number">2</span>,<span class="number">3.0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 初始化完后 需要进行验证</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 验证static 是静态绑定</span></span><br><span class="line"><span class="comment">         * 由分析得  s应该就是salary里的方法 e应该是employee里的方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        s.mailCheck();</span><br><span class="line">        e.mailCheck();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 验证final是静态绑定</span></span><br><span class="line"><span class="comment">         * 由分析得  s应该是2</span></span><br><span class="line"><span class="comment">         *          e应该是1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(s.flag);</span><br><span class="line">        System.out.println(e.flag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 最后验证public 是动态绑定 提升就是可以继承的是动态绑定</span></span><br><span class="line"><span class="comment">         * 由分析的 s是salary</span></span><br><span class="line"><span class="comment">         *          e也是salary</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        s.mailCheck2();</span><br><span class="line">        e.mailCheck2();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 没有想到如何验证private</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最后运行结果：</span><br><span class="line">这里留个悬念，希望读者自己去实现</span><br></pre></td></tr></table></figure>

<p>可以发现与分析结果完全相同。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>绑定</tag>
      </tags>
  </entry>
  <entry>
    <title>开启我的博客之旅</title>
    <url>/2019-04-20-%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是我尝试很多次去搭的一个博客</p>
<p>从一开始就想搭建博客，并且也尝试了，但是最后都没有坚持下来</p>
<p>我觉得，还是一个出发点的问题。</p>
<p>所以我不会去以<strong>发博客</strong>为任务，这样我感觉不到快乐。</p>
<p>而更多的是记录自己<strong>思考</strong>的过程以及疑惑</p>
<p>如果你对我的博文有疑惑，欢迎<strong>评论</strong>提出。[当然评论功能后面会推出]</p>
<p>在这里感谢<a href="https://www.jianshu.com/p/e68fba58f75c" target="_blank" rel="noopener">By</a>，才有了这个博客的轮子。我很兴奋[原来博客也可以这么方便]</p>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>树</title>
    <url>/2019-04-20-%E6%A0%91/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为什么写这个系列，因为数据结构是计算机的基础课，而数据结构单单看是学不会的，所以需要练，并且这个系列中的每个专题都会不断更新。如有疑问欢迎提出</p>
<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul>
<li><input checked="" disabled="" type="checkbox"> <p>2019-04-20首发日志</p>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>2019-04-21更新<a href="#20190421">“有序数组构造二叉搜索树”</a></p>
</li>
<li><input disabled="" type="checkbox"> <p>2019-0-29更新<a href="#20190429">“二叉树的最大宽度”</a></p>
</li>
</ul>
<h3 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h3><p>简单说一些概念[容易跟《离散数学》混淆的定义]</p>
<ul>
<li>节点的度：节点拥有的子树数，在离散数学中即指的是 <strong>出度</strong></li>
<li>树的度：max(节点的度)</li>
</ul>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h4><ol>
<li>对任何一棵二叉树T，如果其叶子数为n0,度为2的节点数为n2,则<strong>n0=n2+1</strong></li>
<li>具有n个节点的完全二叉树的深度为[log2(2)]+1</li>
</ol>
<h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><p>#####前序遍历</p>
<p><strong>前序遍历</strong>指的是根节点、左节点、右节点</p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="noopener">leetcode114</a></p>
<p><strong>递归法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        preorderTraversal(root.left);</span><br><span class="line">        preorderTraversal(root.right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>迭代法</strong></p>
<p>迭代法主要是利用到栈的结构，通过遍历我们可以看到 二叉树首先是 root 然后是root.left 当root.left==null的时候才是root.right; 这很符合栈的结构 <strong>先进后出</strong>。所以就是朝左节点遍历到最低，然后遍历右节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//先判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="keyword">null</span>||!stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                list.add(root.val);</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root=root.left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                root=stack.pop();</span><br><span class="line">                root=root.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><p><strong>中序遍历</strong>左节点、根节点、右节点</p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener">leetcode94</a></p>
<p><strong>递归法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">        inorderTraversal(root.left);</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        inorderTraversal(root.right);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>迭代法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="keyword">null</span>||!stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root=root.left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                root=stack.pop();</span><br><span class="line">                list.add(root.val);</span><br><span class="line">                root=root.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><p><strong>后序遍历</strong>左节点、右节点、根节点</p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/" target="_blank" rel="noopener">leetcode145</a></p>
<p><strong>递归</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">        postorderTraversal(root.left);</span><br><span class="line">        postorderTraversal(root.right);</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>迭代法</strong></p>
<h5 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h5><p><strong>层序遍历</strong>顾名思义就是一层一层的遍历，从左往右的遍历.用到了队列的数据结构FIFO。先将根节点加入到队列中，然后遍历其左节点和右节点，如果不为空将其加入到队列中。</p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">leetcode102</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> count=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)</span><br><span class="line">                    queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)</span><br><span class="line">                    queue.add(node.right);</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/" target="_blank" rel="noopener">leetcode107</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;List&lt;Integer&gt;&gt; stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt;queue =<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> count=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)</span><br><span class="line">                    queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)</span><br><span class="line">                    queue.add(node.right);</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            res.add(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解法二</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;List&lt;Integer&gt;&gt; stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt;queue =<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> count=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)</span><br><span class="line">                    queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)</span><br><span class="line">                    queue.add(node.right);</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>,j=res.size()-<span class="number">1</span>;i&lt;j;i++,j--)&#123;</span><br><span class="line">            List&lt;Integer&gt; temp=res.get(i);</span><br><span class="line">            res.set(i,res.get(j));</span><br><span class="line">            res.set(j,temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二叉树深度问题"><a href="#二叉树深度问题" class="headerlink" title="二叉树深度问题"></a>二叉树深度问题</h3><p>二叉树深度问题，其实就是用递归，刚才笔者又犯了个错误[递归如果如果去想清楚每一步怎么走是想不出来的]</p>
<ol>
<li>递归停止的 root==null</li>
<li>递归方程 depth=max(ld,rd)+1</li>
</ol>
<p>[递归的思想真的很巧妙，还是要多训练:smile:]</p>
<p><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">leetcode104</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ld=maxDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> rd=maxDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(ld,rd)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/" target="_blank" rel="noopener">leetcode111</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="keyword">null</span>&amp;&amp;root.right==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="keyword">null</span>&amp;&amp;root.right==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> minDepth(root.left)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="keyword">null</span>&amp;&amp;root.left==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> minDepth(root.right)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> Math.min(minDepth(root.left),minDepth(root.right))+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="确定二叉树"><a href="#确定二叉树" class="headerlink" title="确定二叉树"></a>确定二叉树</h3><h4 id="中序遍历-前序遍历确定二叉树"><a href="#中序遍历-前序遍历确定二叉树" class="headerlink" title="中序遍历+前序遍历确定二叉树"></a>中序遍历+前序遍历确定二叉树</h4><p>解决步骤</p>
<ol>
<li>找到中序遍历跟前序遍历的第一个节点相等的地方</li>
<li>将中序遍历和前序遍历分为左右子树【这个地方特别小心】小心数组越界</li>
<li>递归</li>
</ol>
<p><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/" target="_blank" rel="noopener">leetcode105</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        TreeNode head=solu(preorder,inorder,<span class="number">0</span>,preorder.length-<span class="number">1</span>,<span class="number">0</span>,inorder.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">solu</span><span class="params">(<span class="keyword">int</span>[] pre,<span class="keyword">int</span>[] in,<span class="keyword">int</span> prestart,<span class="keyword">int</span> preend,<span class="keyword">int</span> instart,<span class="keyword">int</span> inend)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prestart&gt;preend) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(prestart==preend) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(pre[prestart]);</span><br><span class="line">        <span class="comment">//开始构建 首先是前序遍历的第一个节点就是树或者（子树）的根节点</span></span><br><span class="line">        TreeNode head=<span class="keyword">new</span> TreeNode(pre[prestart]);</span><br><span class="line">        <span class="comment">//从中序遍历中找到这个根节点 将其分为左右子树</span></span><br><span class="line">        <span class="keyword">int</span> low=instart;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=low;i&lt;=inend;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(in[i]==pre[prestart])&#123;</span><br><span class="line">                head.left=solu(pre,in,prestart+<span class="number">1</span>,prestart+i-instart,instart,i-<span class="number">1</span>);</span><br><span class="line">                head.right=solu(pre,in,prestart+i-instart+<span class="number">1</span>,preend,i+<span class="number">1</span>,inend);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">其中特别注意的是 prestart+i-instart.这个地方没有想到，因为你后面子树的结尾是要从你开头加起来，具体加多少，要看你移动了多少</span><br></pre></td></tr></table></figure>

<p>####中序遍历+后序遍历确定二叉树</p>
<p>解决方案</p>
<ol>
<li>从中序遍历中找到跟后序遍历的尾节点相同的点</li>
<li>将中序遍历和后序遍历分为左右两个子树</li>
<li>递归</li>
</ol>
<p><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/" target="_blank" rel="noopener">leetcode106</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line">        TreeNode head=solu(inorder,postorder,<span class="number">0</span>,inorder.length-<span class="number">1</span>,<span class="number">0</span>,postorder.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">solu</span><span class="params">(<span class="keyword">int</span>[] inorder,<span class="keyword">int</span>[] postorder,<span class="keyword">int</span> instart,<span class="keyword">int</span> inend,<span class="keyword">int</span> poststart,<span class="keyword">int</span> postend)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(poststart&gt;postend) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(poststart==postend) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(postorder[poststart]);</span><br><span class="line">        <span class="comment">//现在开始构建树 后续遍历的最后一个就是根节点</span></span><br><span class="line">        TreeNode head=<span class="keyword">new</span> TreeNode(postorder[postend]);</span><br><span class="line">        <span class="comment">//遍历中序遍历找到根节点 然后将其分为左右子树</span></span><br><span class="line">        <span class="keyword">int</span> low=instart;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=low;i&lt;=inend;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(inorder[i]==postorder[postend])&#123;</span><br><span class="line">            head.left=solu(inorder,postorder,instart,i-<span class="number">1</span>,poststart,poststart+i-instart-<span class="number">1</span>);</span><br><span class="line">            head.right=solu(inorder,postorder,i+<span class="number">1</span>,inend,poststart+i-instart,postend-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="先序遍历构造二叉树"><a href="#先序遍历构造二叉树" class="headerlink" title="先序遍历构造二叉树"></a>先序遍历构造二叉树</h4><p>因为先序遍历无法确定，但是我们可以构造二叉树其中的一种特殊的树–二叉搜索树</p>
<p><a href="https://leetcode-cn.com/problems/construct-binary-search-tree-from-preorder-traversal/" target="_blank" rel="noopener">leetcode1008</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">bstFromPreorder</span><span class="params">(<span class="keyword">int</span>[] preorder)</span> </span>&#123;</span><br><span class="line">        TreeNode root=<span class="keyword">new</span> TreeNode(preorder[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;preorder.length;i++)&#123;</span><br><span class="line">            setTreeNode(root,preorder[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTreeNode</span><span class="params">(TreeNode root,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left!=<span class="keyword">null</span>) setTreeNode(root.left,i);</span><br><span class="line">            <span class="keyword">else</span> root.left=<span class="keyword">new</span> TreeNode(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.val&lt;i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.right!=<span class="keyword">null</span>) setTreeNode(root.right,i);</span><br><span class="line">            <span class="keyword">else</span> root.right=<span class="keyword">new</span> TreeNode(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="完全二叉树的节点个数"><a href="#完全二叉树的节点个数" class="headerlink" title="完全二叉树的节点个数"></a>完全二叉树的节点个数</h4><p>首先我们可以知道完全二叉树的形式，都是先满足左节点，然后在满足右节点。所以可以通过不断遍历其左节点，就可以知道其深度。</p>
<ol>
<li>当左右子树的深度相同时，就说明左子树是一颗<strong>满二叉树</strong>其节点个数为(1&lt;&lt;ld) 其中ld为其深度+右子树的节点个数</li>
<li>当左右子树的深度不相同时，就说明右子树是一颗<strong>满二叉树</strong>其节点个数为(1&lt;&lt;rd)其中rd为其深度+左子树的节点个数</li>
</ol>
<p><a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/submissions/" target="_blank" rel="noopener">LeetCode222</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countNodes</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过不断查找左节点可以得到其节点个数</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ld=getDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> rd=getDepth(root.right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(ld==rd) <span class="keyword">return</span> (<span class="number">1</span>&lt;&lt;ld)+countNodes(root.right);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> (<span class="number">1</span>&lt;&lt;rd)+countNodes(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDepth</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> depth=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            depth++;</span><br><span class="line">            root=root.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二叉树其他问题"><a href="#二叉树其他问题" class="headerlink" title="二叉树其他问题"></a>二叉树其他问题</h3><h4 id="二叉树最近的公共祖先问题"><a href="#二叉树最近的公共祖先问题" class="headerlink" title="二叉树最近的公共祖先问题"></a>二叉树最近的公共祖先问题</h4><p>[占个坑 LCA问题]</p>
<h4 id="二叉树的最大宽度"><a href="#二叉树的最大宽度" class="headerlink" title="二叉树的最大宽度"></a><span id="20190429">二叉树的最大宽度</span></h4><p>思路：原先想用层序遍历，不过呢，这个最大宽度有涉及到Null节点。</p>
<p>​    所以需要对其用数组下标来遍历，对于任意的下标 i 节点，它的左节点下标为2*i 右节点下标为 2i+1</p>
<pre><code>用一个list来存储每一层的最左边的节点，然后通过 用右节点的下标位置-左节点下标位置，修改max</code></pre><p><a href="https://leetcode-cn.com/problems/maximum-width-of-binary-tree/" target="_blank" rel="noopener">leetcode662</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxW=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">widthOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        dfs(root,<span class="number">1</span>,<span class="number">1</span>,<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> maxW;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode r,<span class="keyword">int</span> level,<span class="keyword">int</span> index,List&lt;Integer&gt; left)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(r==<span class="keyword">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(level&gt;left.size()) left.add(index);</span><br><span class="line">        maxW=Math.max(maxW,index-left.get(level-<span class="number">1</span>)+<span class="number">1</span>);</span><br><span class="line">        dfs(r.left,level+<span class="number">1</span>,index*<span class="number">2</span>,left);</span><br><span class="line">        dfs(r.right,level+<span class="number">1</span>,index*<span class="number">2</span>+<span class="number">1</span>,left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><blockquote>
<p>A Binary Search Tree (BST) is a tree in which all the nodes follow the bellow-mentions propries-</p>
<ul>
<li>the left sub-tree of a node  has a key less than or equal to its parent node’s key</li>
<li>the right sub-tree of a node has a key greater than  to its parent node’s key </li>
</ul>
</blockquote>
<h4 id="二叉搜索树的插入操作"><a href="#二叉搜索树的插入操作" class="headerlink" title="二叉搜索树的插入操作"></a>二叉搜索树的插入操作</h4><p>通过二叉搜索树的结构特征，可以观察到。其<strong>左节点值&lt;根节点值&lt;右节点值</strong>。所以其插入的判断较为简单[当然是在原二叉树中没有该值的时候]。不过，在实现的过程中确犯了两个错误，虽然通过调试都找到了</p>
<ol>
<li>return  root.我将root用来进行操作，这样就找不到原先的那棵树的根节点，而根节点一旦找不到，这棵树就“vanish”</li>
<li>while(true)  我只判断if，这样做是不行的，因为你得不断判断。将新值插入到二叉树中为止</li>
</ol>
<p><a href="https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/submissions/" target="_blank" rel="noopener">leetcode701</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">insertIntoBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">        TreeNode cur=root;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(val&gt;cur.val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                cur.right=<span class="keyword">new</span> TreeNode(val);</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">                cur.left=<span class="keyword">new</span> TreeNode(val);</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二叉搜索树的删除操作"><a href="#二叉搜索树的删除操作" class="headerlink" title="二叉搜索树的删除操作"></a>二叉搜索树的删除操作</h4><p>通过二叉搜索树的结构特征，删除操作主要有这三种情况</p>
<ol>
<li>要删除的节点，其左子树为空，那么这个时候<strong>右子树</strong>就作为其根节点</li>
<li>要删除的节点，其右子树为空，那么这个时候<strong>左子树</strong>就作为其根节点</li>
<li>要删除的节点其左右子树都不为空，这个时候需要右子树中最小的值(即右子树中最左的节点)作为其根节点</li>
</ol>
<p>在进行编写代码的时候，笔者又不小心翻了车(找到最小的点的时候 应该先删除 然后在进 successor.left=root.left,不理解的可以拿起笔来画画)</p>
<p><a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/submissions/" target="_blank" rel="noopener">leetcode450</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deleteNode</span><span class="params">(TreeNode root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;key)&#123;</span><br><span class="line">            <span class="comment">//删除的节点在左子树</span></span><br><span class="line">            root.left=deleteNode(root.left,key);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;key)&#123;</span><br><span class="line">            <span class="comment">//删除的节点在右子树</span></span><br><span class="line">            root.right=deleteNode(root.right,key);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//当前节点即为删除的节点</span></span><br><span class="line">            <span class="keyword">if</span>(root.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> root.left;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> root.right;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                TreeNode successor=min(root.right);</span><br><span class="line">                successor.right=delete(root.right);   <span class="comment">//笔者翻车的地方就在这里</span></span><br><span class="line">                successor.left=root.left;            <span class="comment">//可以把这两行代码对调一下</span></span><br><span class="line">                <span class="keyword">return</span> successor;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">min</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min(node.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">delete</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> node.right;</span><br><span class="line">        &#125;</span><br><span class="line">        node.left=delete(node.left);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二叉搜索树的搜索操作"><a href="#二叉搜索树的搜索操作" class="headerlink" title="二叉搜索树的搜索操作"></a>二叉搜索树的搜索操作</h4><p>二叉搜索树的搜索操作，依据这其结构特征<strong>左节点&lt;根节点&lt;右节点</strong>+<strong>递归</strong>，可以很好的找到要搜索的值。</p>
<p><a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/" target="_blank" rel="noopener">leetcode700</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">searchBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;val)&#123;</span><br><span class="line">            <span class="comment">//要查找的值在左子树</span></span><br><span class="line">            <span class="keyword">return</span> searchBST(root.left,val);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;val)&#123;</span><br><span class="line">            <span class="comment">//要查找的值在右子树</span></span><br><span class="line">            <span class="keyword">return</span> searchBST(root.right,val);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是不满足于递归解决，我要用非递归的方法去解决,说实话一开始没有想到这么简单的方法，还是向上面那样，先来三个if然后在while。这个时候代码就非常庞大并且丑陋。[还是需要多看别人写的代码]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">searchBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.val&gt;val) root=root.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;val) root=root.right;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否是BST"><a href="#判断是否是BST" class="headerlink" title="判断是否是BST"></a>判断是否是BST</h4><p>由前中序遍历和BST的结构可以得出，如果是一棵BST其中序遍历为升序</p>
<p><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/" target="_blank" rel="noopener">leetcode98</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> last=-Double.MAX_VALUE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(isValidBST(root.left))&#123;</span><br><span class="line">            <span class="keyword">if</span>(last&lt;root.val)&#123;</span><br><span class="line">                last=root.val;</span><br><span class="line">                <span class="keyword">return</span> isValidBST(root.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="将有序数组转为二叉搜索树"><a href="#将有序数组转为二叉搜索树" class="headerlink" title="将有序数组转为二叉搜索树"></a><span id="20190421">将有序数组转为二叉搜索树</span></h4><p>有序数组其实对应着二叉树的中序遍历，所以这个应该属于二叉搜索树中序遍历的一种逆序</p>
<p>因为题目要求要构造一颗平衡二叉树，所以这就需要充数组中间，将其分为左右子树，然后反复递归</p>
<p><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/" target="_blank" rel="noopener">leetcod108</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums==<span class="keyword">null</span>?<span class="keyword">null</span>:buildTree(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> m=l+(r-l)/<span class="number">2</span>;</span><br><span class="line">        TreeNode root=<span class="keyword">new</span> TreeNode(nums[m]);</span><br><span class="line">        root.left=buildTree(nums,l,m-<span class="number">1</span>);</span><br><span class="line">        root.right=buildTree(nums,m+<span class="number">1</span>,r);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><h4 id="验证是否是平衡二叉树"><a href="#验证是否是平衡二叉树" class="headerlink" title="验证是否是平衡二叉树"></a>验证是否是平衡二叉树</h4><blockquote>
<p>平衡二叉树的严格定义是，任一个节点的左右子树的深度差不能超过1</p>
<p>所以我们就需要求 深度 ，由前面解题来看，我们可以用递归来求深度</p>
<p>并且因为是任意节点所以这里也考虑递归</p>
</blockquote>
<p><a href="https://leetcode-cn.com/problems/balanced-binary-tree/" target="_blank" rel="noopener">leetcod110</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ld=deep(root.left);</span><br><span class="line">        <span class="keyword">int</span> rd=deep(root.right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Math.abs(ld-rd)&lt;=<span class="number">1</span>&amp;&amp;isBalanced(root.left)&amp;&amp;isBalanced(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deep</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ld=deep(root.left);</span><br><span class="line">        <span class="keyword">int</span> rd=deep(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(ld,rd)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
</search>
