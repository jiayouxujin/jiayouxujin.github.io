<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java8日期</title>
    <url>/2895406079.html</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记得开始写的时候，对日期这个问题一直模糊着，现在学习下。</p>
<h1 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date wrongDate = <span class="keyword">new</span> Date(<span class="number">2019</span>, <span class="number">12</span>, <span class="number">31</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>);</span><br><span class="line">       System.out.println(wrongDate);</span><br><span class="line"></span><br><span class="line">       Date rightDate=<span class="keyword">new</span> Date(<span class="number">2019</span>-<span class="number">1900</span>,<span class="number">11</span>,<span class="number">31</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>);</span><br><span class="line">       System.out.println(rightDate);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>年份应该是和1900的差值，月应该是从0到11</p>
</blockquote>
<blockquote>
<ul>
<li>Date并没有时区问题，任何一台电脑使用new Date初始化得到的时间都一样，因为Date中保存的时间是UTC时间</li>
<li>Date中保存的是一个时间戳，代表从1970年1月1日0点到现在的毫秒数</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="keyword">new</span> Date(<span class="number">0</span>));</span><br><span class="line">        System.out.println(TimeZone.getDefault().getID()+<span class="string">":"</span>+TimeZone.getDefault().getRawOffset()/<span class="number">3600000</span>);</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202006011318_140.png" alt=""></p>
<h1 id="Calendar国际化"><a href="#Calendar国际化" class="headerlink" title="Calendar国际化"></a>Calendar国际化</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Calendar calendar=Calendar.getInstance();</span><br><span class="line">        calendar.set(<span class="number">2019</span>,<span class="number">11</span>,<span class="number">31</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>);</span><br><span class="line">        System.out.println(calendar.getTime());</span><br><span class="line">        Calendar calendar1=Calendar.getInstance(TimeZone.getTimeZone(<span class="string">"America/New_York"</span>));</span><br><span class="line">        calendar1.set(<span class="number">2019</span>,Calendar.DECEMBER,<span class="number">31</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>);</span><br><span class="line">        System.out.println(calendar1.getTime());</span><br></pre></td></tr></table></figure>

<blockquote>
<p>初始时，年份可以是当前年，月份是从0到11</p>
</blockquote>
<p><img src="http://cdn.xuxiaojin.com/202006011314_507.png" alt=""></p>
<h1 id="保存时间"><a href="#保存时间" class="headerlink" title="保存时间"></a>保存时间</h1><ol>
<li>使用UTC保存，保存的时间不带有时区的属性</li>
<li>以字面量保存<code>年/月/日 时:分:秒</code>，并且同时要保存时区信息</li>
</ol>
<h2 id="不保存时区，出现时间错乱"><a href="#不保存时区，出现时间错乱" class="headerlink" title="不保存时区，出现时间错乱"></a>不保存时区，出现时间错乱</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String stringDate=<span class="string">"2020-01-02 22:00:00"</span>;</span><br><span class="line">       SimpleDateFormat inputFormat=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">       Date date=inputFormat.parse(stringDate);</span><br><span class="line">       System.out.println(date+<span class="string">":"</span>+date.getTime());</span><br><span class="line"></span><br><span class="line">       inputFormat.setTimeZone(TimeZone.getTimeZone(<span class="string">"America/New_York"</span>));</span><br><span class="line">       Date date1=inputFormat.parse(stringDate);</span><br><span class="line">       System.out.println(date1+<span class="string">":"</span>+date1.getTime());</span><br></pre></td></tr></table></figure>

<p>如果保存字面量，不保存时区，那么解析的时候碰到国际化，就可能出现问题</p>
<p>保存的是<code>UTC</code>，解析出来的不是错乱的时间，而是对于同一个本地时间，不同时区解析到的时间一定是不同。并且不同时区的时间可能对应同一个UTC</p>
<h2 id="不同系统的默认时区，输出的时间不同"><a href="#不同系统的默认时区，输出的时间不同" class="headerlink" title="不同系统的默认时区，输出的时间不同"></a>不同系统的默认时区，输出的时间不同</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String stringDate=<span class="string">"2020-01-02 22:00:00"</span>;</span><br><span class="line">SimpleDateFormat inputFormat=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">Date date=inputFormat.parse(stringDate);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"[yyyy-MM-dd HH:mm:ss Z]"</span>).format(date));</span><br><span class="line"></span><br><span class="line">TimeZone.setDefault(TimeZone.getTimeZone(<span class="string">"America/New_York"</span>));</span><br><span class="line">System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"[yyyy-MM-dd HH:mm:ss Z]"</span>).format(date));</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202006011332_80.png" alt=""></p>
<p>有时候相同的时间，但是在不同系统里面的输出不同，是因为系统的默认时区不同。UTC时间要根据当前时区解析为正确的本地时间</p>
<blockquote>
<p>正确处理时间，存的时候要存正确的当前时间的UTC.取的时候也要正确的将其转化为当前的时区</p>
</blockquote>
<h1 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String stringDate=<span class="string">"2020-01-02 22:00:00"</span>;</span><br><span class="line">       ZoneId timeZoneSH=ZoneId.of(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line">       ZoneId timeZoneNY=ZoneId.of(<span class="string">"America/New_York"</span>);</span><br><span class="line">       ZoneId timeZoneJST= ZoneOffset.ofHours(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">       DateTimeFormatter dateTimeFormatter=DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">       ZonedDateTime dateTime=ZonedDateTime.of(LocalDateTime.parse(stringDate,dateTimeFormatter),timeZoneJST);</span><br><span class="line"></span><br><span class="line">       DateTimeFormatter dateTimeFormatter1=DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss Z"</span>);</span><br><span class="line">       System.out.println(timeZoneSH.getId()+dateTimeFormatter1.withZone(timeZoneSH).format(dateTime));</span><br><span class="line">       System.out.println(timeZoneNY.getId()+dateTimeFormatter1.withZone(timeZoneNY).format(dateTime));</span><br><span class="line">       System.out.println(timeZoneJST.getId()+dateTimeFormatter1.withZone(timeZoneJST).format(dateTime));</span><br></pre></td></tr></table></figure>

<p>对于国际化时间问题，使用<code>ZonedDateTime</code>保存时间，然后使用设置了<code>ZoneId</code>的<code>DateTimeFormatter</code>配合<code>ZonedDateTime</code>进行时间格式化得到本地时间表示</p>
<h1 id="时间格式的解析"><a href="#时间格式的解析" class="headerlink" title="时间格式的解析"></a>时间格式的解析</h1><h2 id="提前跨年"><a href="#提前跨年" class="headerlink" title="提前跨年"></a>提前跨年</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Locale.setDefault(Locale.SIMPLIFIED_CHINESE);</span><br><span class="line">      System.out.println(<span class="string">"defaultLocale:"</span>+Locale.getDefault());</span><br><span class="line">      Calendar calendar=Calendar.getInstance();</span><br><span class="line">      calendar.set(<span class="number">2019</span>,Calendar.DECEMBER,<span class="number">29</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">      SimpleDateFormat YYYY=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"YYYY-MM-dd"</span>);</span><br><span class="line">      System.out.println(String.format(<span class="string">"格式化"</span> + YYYY.format(calendar.getTime())));</span><br><span class="line">      System.out.println(<span class="string">"weekYear"</span>+calendar.getWeekYear());</span><br><span class="line">      System.out.println(<span class="string">"firstDayOfWeek"</span>+calendar.getFirstDayOfWeek());</span><br><span class="line">      System.out.println(<span class="string">"minimalDaysInFirstWeek"</span>+calendar.getMinimalDaysInFirstWeek());</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202006011358_215.png" alt=""></p>
<p>提前跨年的原因是：<code>YYYY</code>表示的当前所在周是属于哪一年，而<code>yyyy</code>表示的是年</p>
<h2 id="非线程安全"><a href="#非线程安全" class="headerlink" title="非线程安全"></a>非线程安全</h2><p><code>SimpleDateFormat</code>不是线程安全的，所以要小心在多线程里面的问题</p>
<h2 id="解析字符与格式不匹配"><a href="#解析字符与格式不匹配" class="headerlink" title="解析字符与格式不匹配"></a>解析字符与格式不匹配</h2><p>虽然不会报错，但是结果不符合预期</p>
<h1 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h1><p>解决上面的问题可以使用<code>DateTimeFormatter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DateTimeFormatter dateTimeFormatter=<span class="keyword">new</span> DateTimeFormatterBuilder()</span><br><span class="line">           .appendValue(ChronoField.YEAR)</span><br><span class="line">           .appendLiteral(<span class="string">"/"</span>)</span><br><span class="line">           .appendValue(ChronoField.MONTH_OF_YEAR)</span><br><span class="line">           .appendLiteral(<span class="string">"/"</span>)</span><br><span class="line">           .appendValue(ChronoField.DAY_OF_MONTH)</span><br><span class="line">           .appendLiteral(<span class="string">" "</span>)</span><br><span class="line">           .appendValue(ChronoField.HOUR_OF_DAY)</span><br><span class="line">           .appendLiteral(<span class="string">":"</span>)</span><br><span class="line">           .appendValue(ChronoField.MINUTE_OF_HOUR)</span><br><span class="line">           .appendLiteral(<span class="string">":"</span>)</span><br><span class="line">           .appendValue(ChronoField.SECOND_OF_MINUTE)</span><br><span class="line">           .appendLiteral(<span class="string">"."</span>)</span><br><span class="line">           .appendValue(ChronoField.MILLI_OF_SECOND)</span><br><span class="line">           .toFormatter();</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://time.geekbang.org/column/article/224240" target="_blank" rel="noopener">用好Java 8的日期时间类，少踩一些“老三样”的坑</a></li>
<li><a href="https://github.com/jiayouxujin/java8DateDemo" target="_blank" rel="noopener">github代码</a></li>
</ol>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>AOP入门</title>
    <url>/4186749648.html</url>
    <content><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天突然想到我怎么把搜索的代码跟原本后端的代码进行一个解耦。</p>
<p>有可能AOP可以用上</p>
<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>面向切面编程是一种通过横切关注点分离来增强代码模块性的方法，它能够在不修改主体代码的情况下，对它添加额外的行为</p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul>
<li>编译期间的静态织入，又称为编译时增强。指将切面代码和源业务代码链接起来的过程</li>
<li>运行期间的动态代理，又称为运行时增强，依靠预先创建或运行时创建的代理类来完成切面的功能</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://time.geekbang.org/column/article/143882" target="_blank" rel="noopener">剑走偏锋：面向切面编程</a></li>
<li></li>
</ol>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程池入门</title>
    <url>/602262795.html</url>
    <content><![CDATA[<hr>
<h1 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h1><p>阻塞队列在队列的基础上增加了阻塞的操作，简单来说，就是在队列为空的时候，从队头取数据会被阻塞。但队列已满的时候，那么插入数据的操作就会被阻塞。</p>
<p>这个就是典型的<code>生产者-消费者</code></p>
<h1 id="Java线程池"><a href="#Java线程池" class="headerlink" title="Java线程池"></a>Java线程池</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadPoolExecutor(</span><br><span class="line">	<span class="keyword">int</span> corePoolSize,</span><br><span class="line">    <span class="keyword">int</span> maximumPoolSize,</span><br><span class="line">    <span class="keyword">long</span> keepAliveTime,</span><br><span class="line">    TimeUnit unit,</span><br><span class="line">    BlockingQueue&lt;Runable&gt; workQueue,</span><br><span class="line">    ThreadFactory thredFactory,</span><br><span class="line">    RejectedExecutionHandler handler</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>corePoolSize</code>表示线程池中最小的线程数</li>
<li><code>maximumPoolSize</code>表示线程池创建的最大线程数</li>
<li><code>keepAliveTime&amp;unit</code>表示一个线程空闲了这么就，并且线程池的数量大于corePoolSize，那么这个线程就会被回收</li>
<li><code>workQueue</code>工作队列</li>
<li><code>threadFactory</code>自定义如何创建线程，可以给线程指定一个有意义的名字</li>
<li><code>handler</code>当所有线程都在忙碌的时候，这个时候提交的任务，通过handler来指定拒绝策略<ul>
<li>CallerRunsPolicy提交任务的线程自己去执行该任务</li>
<li>AbortPolicy默认的拒绝策略，会抛出RejectedExecutionException</li>
<li>DiscardPolicy直接丢弃任务，没有任何异常抛出</li>
<li>DiscardOldestPolicy丢弃最老的任务</li>
</ul>
</li>
</ul>
<h2 id="线程池的状态"><a href="#线程池的状态" class="headerlink" title="线程池的状态"></a>线程池的状态</h2><p>当线程池被创建后，初始时，线程池处于<code>RUNNING</code>状态</p>
<p>如果调用了shutdown()方法，线程池处于<code>SHUTDOWN</code>状态，此时线程池不能接受新的任务，会等待所有任务执行完毕</p>
<p>如果调用了shutdown()方法，线程池处于<code>STOP</code>的状态，此时线程池不能接受新的任务，并且会尝试去终止正在执行的任务</p>
<p>当线程池处于<code>SHUTDOWN或者STOP</code>状态，并且所有工作线程已经销毁，任务缓存队列已经清空或者执行结束后，线程池被设置为<code>TERMINATED</code>状态</p>
<h2 id="Executors类别"><a href="#Executors类别" class="headerlink" title="Executors类别"></a>Executors类别</h2><table>
<thead>
<tr>
<th>类别</th>
<th>特性</th>
</tr>
</thead>
<tbody><tr>
<td>newCachedThreadPool</td>
<td>线程池的大小不固定，可灵活回收空闲线程，若无可回收，则新建线程</td>
</tr>
<tr>
<td>newFixedThreadPool</td>
<td>固定大小的线程池，当有新任务提交，线程池中如果有空闲的线程，则立即执行，否则新的任务会被缓存到一个任务队列中，等待线程池释放空闲线程</td>
</tr>
<tr>
<td>newScheduledThreadPool</td>
<td>定时线程池，支持定时及周期性任务执行</td>
</tr>
<tr>
<td>newSingleThreadExecutor</td>
<td>只创建一个线程，它只用唯一的工作线程来执行任务，保证所有任务按照指定的顺序执行</td>
</tr>
</tbody></table>
<h2 id="线程数量"><a href="#线程数量" class="headerlink" title="线程数量"></a>线程数量</h2><ul>
<li>CPU密集型任务，消耗CPU资源，可以将线程数设置为N(CPU核心数)+1</li>
<li>I/O密集型任务，花费大量时间在处理I/O交互，设置为2N</li>
</ul>
<h1 id="手动声明线程池"><a href="#手动声明线程池" class="headerlink" title="手动声明线程池"></a>手动声明线程池</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                 <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>FixedThreadPool有固定长度的线程数组，忙不过来时会把任务放到无限长的队列里，这是因为LinkedBlockingQueue默认是一个无界队列</li>
<li>CachedThreadPool的maximumPoolSize是一个无限大的值，忙不过来的时候就无线创建临时线程，闲下来在回收。任务队列是SynchronousQueue,表示队列长度为0</li>
</ul>
<p>#参考链接</p>
<ol>
<li><a href="https://time.geekbang.org/column/article/41330" target="_blank" rel="noopener">队列：队列在线程池等有限资源池中的应用</a></li>
<li><a href="https://time.geekbang.org/column/article/90771" target="_blank" rel="noopener">Executor与线程池：如何创建正确的线程池？</a></li>
<li><a href="https://www.cnblogs.com/dolphin0520/p/3932921.html" target="_blank" rel="noopener">Java并发编程：线程池的使用</a></li>
<li><a href="https://time.geekbang.org/column/article/104094" target="_blank" rel="noopener">如何设置线程池大小？</a></li>
<li><a href="https://time.geekbang.org/column/article/101513" target="_blank" rel="noopener">Executor组件：Tomcat如何扩展Java线程池？</a></li>
</ol>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven入门</title>
    <url>/2369857982.html</url>
    <content><![CDATA[<hr>
<h2 id="Maven初概"><a href="#Maven初概" class="headerlink" title="Maven初概"></a>Maven初概</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>构建</li>
<li>文档生成</li>
<li>报告</li>
<li>依赖</li>
<li>SCMs</li>
<li>发布</li>
<li>分发</li>
<li>邮件列表</li>
</ul>
<h3 id="约定配置"><a href="#约定配置" class="headerlink" title="约定配置"></a>约定配置</h3><table>
<thead>
<tr>
<th>目录</th>
<th>目的</th>
</tr>
</thead>
<tbody><tr>
<td>basedir</td>
<td>存放pom.xml和所有子目录</td>
</tr>
<tr>
<td>basedir/src/main/java</td>
<td>项目java源代码</td>
</tr>
<tr>
<td>basedir/src/main/resource</td>
<td>项目资源</td>
</tr>
<tr>
<td>basedir/src/test/java</td>
<td>测试用的代码</td>
</tr>
<tr>
<td>basedir/src/test/resource</td>
<td>测试用的资源</td>
</tr>
<tr>
<td>basedir/src/main/webapp/WEB-INF</td>
<td>web应用文件目录</td>
</tr>
<tr>
<td>basedir/target</td>
<td>打包输出的目录</td>
</tr>
<tr>
<td>basedir/target/classes</td>
<td>编译输出目录</td>
</tr>
<tr>
<td>basedir/target/test-classes</td>
<td>测试编译输出目录</td>
</tr>
</tbody></table>
<p>##安装</p>
<p><img src="http://cdn.xuxiaojin.com/202005281624_237.png" alt=""></p>
<h2 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h2><blockquote>
<p>POM是Maven工程的基本工作单元，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖</p>
<ul>
<li>项目依赖</li>
<li>插件</li>
<li>执行目录</li>
<li>项目构建profile</li>
<li>项目版本</li>
<li>项目开发者列表</li>
<li>相关邮件列表</li>
</ul>
</blockquote>
<h3 id="创建pom"><a href="#创建pom" class="headerlink" title="创建pom"></a>创建pom</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>learnMaven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>learnMaven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>project工程的根标签</li>
<li>modelVersion模型版本需要设置为4.0</li>
<li>groupId工程组的表示，经常是域名<code>com.xuxiaojin.blog</code></li>
<li>artifactId工程的标识，通常是工程的名字，与groupId一起定义了在仓库中的位置</li>
<li>version版本号</li>
</ul>
<h3 id="POM标签"><a href="#POM标签" class="headerlink" title="POM标签"></a>POM标签</h3><h4 id="父项目坐标"><a href="#父项目坐标" class="headerlink" title="父项目坐标"></a>父项目坐标</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>定义项目继承的父项目，如果没有指定，则对应的值为项目中的默认值</p>
<h4 id="POM模型版本"><a href="#POM模型版本" class="headerlink" title="POM模型版本"></a>POM模型版本</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>项目描述符遵循哪一个pom模型版本，模型本身的版本很少改变，但是还是需要引入，在引入新的特性或者其他模型变更的时候，确保稳定性</p>
<h4 id="groupId"><a href="#groupId" class="headerlink" title="groupId"></a>groupId</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuxiaojin.blog<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>项目的全球唯一标识，通常使用全限定的包名区分该项目和其他项目，并且构建的生成路径也是由此生成，例如上述生成<code>/com/xuxiaojin/blog</code></p>
<h4 id="构建标识符artifactId"><a href="#构建标识符artifactId" class="headerlink" title="构建标识符artifactId"></a>构建标识符artifactId</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>learnMaven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>特定的groupId下，构建标识符要唯一，为了确定该项目</p>
<h4 id="构建类型"><a href="#构建类型" class="headerlink" title="构建类型"></a>构建类型</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packagin</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packagin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>项目打包生成的构建类型</p>
<h4 id="项目当前版本号"><a href="#项目当前版本号" class="headerlink" title="项目当前版本号"></a>项目当前版本号</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>项目当前的版本，格式为：<code>主版本.次版本.增量版本-限定版本号</code></p>
<p>####产生文档</p>
<p>#####项目名称</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>learnMaven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>#####项目主页的URL</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://blog.xuxiaojin.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="项目的详细描述"><a href="#项目的详细描述" class="headerlink" title="项目的详细描述"></a>项目的详细描述</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>A project<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="构建项目的前提条件"><a href="#构建项目的前提条件" class="headerlink" title="构建项目的前提条件"></a>构建项目的前提条件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">prerequisites</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">prerequisites</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="问题管理系统"><a href="#问题管理系统" class="headerlink" title="问题管理系统"></a>问题管理系统</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="tag">&lt;<span class="name">system</span>&gt;</span>jira<span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="项目持续集成信息"><a href="#项目持续集成信息" class="headerlink" title="项目持续集成信息"></a>项目持续集成信息</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ciManagement</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--持续集成系统的名字，例如continuum --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">system</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">notifiers</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--配置一种方式，当构建中断时，以该方式通知用户/开发者 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">notifier</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--传送通知的途径 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span> /&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--发生错误时是否通知 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">sendOnError</span> /&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--构建失败时是否通知 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">sendOnFailure</span> /&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--构建成功时是否通知 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">sendOnSuccess</span> /&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--发生警告时是否通知 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">sendOnWarning</span> /&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--不赞成使用。通知发送到哪里 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">address</span> /&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--扩展配置项 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">notifier</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">notifiers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ciManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="项目相关邮件列表"><a href="#项目相关邮件列表" class="headerlink" title="项目相关邮件列表"></a>项目相关邮件列表</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mailingLists</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mailingList</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--邮件的名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">post</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">post</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">subscribe</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">subscribe</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">unsubscribe</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">unsubscribe</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--你可以浏览邮件信息的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">archive</span>&gt;</span>http:/hi.baidu.com/banseon/demo/dev/<span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mailingList</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mailingLists</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="项目开发者者列表"><a href="#项目开发者者列表" class="headerlink" title="项目开发者者列表"></a>项目开发者者列表</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--某个项目开发者的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--SCM里项目开发者的唯一标识符 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>HELLO WORLD<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者的全名 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者的email --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者的主页的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>Project Manager<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>Architect<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者所属组织 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者所属组织的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span>http://hi.baidu.com/banseon<span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者属性，如即时消息如何处理等 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dept</span>&gt;</span>No<span class="tag">&lt;/<span class="name">dept</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者所在时区， -11到12范围内的整数。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timezone</span>&gt;</span>-5<span class="tag">&lt;/<span class="name">timezone</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="项目贡献者"><a href="#项目贡献者" class="headerlink" title="项目贡献者"></a>项目贡献者</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--项目的其他贡献者列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contributors</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目的其他贡献者。参见developers/developer元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">contributor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organizationUrl</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timezone</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">contributor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">contributors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="构建项目需要的信息"><a href="#构建项目需要的信息" class="headerlink" title="构建项目需要的信息"></a>构建项目需要的信息</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--构建项目需要的信息 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">sourceDirectory</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scriptSourceDirectory</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">testSourceDirectory</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--被编译过的应用程序class文件存放的目录。 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">outputDirectory</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--被编译过的测试class文件存放的目录。 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">testOutputDirectory</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--使用来自该项目的一系列构建扩展 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--描述使用到的构建扩展。 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--构建扩展的groupId --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--构建扩展的artifactId --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--构建扩展的版本 --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">defaultGoal</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--这个元素描述了项目相关或测试相关的所有资源路径 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。举个例 </span></span><br><span class="line"><span class="comment">                 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--描述存放资源的目录，该路径相对POM路径 --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--包含的模式列表，例如**/*.xml. --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--排除的模式列表，例如**/*.xml --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--构建产生的所有文件存放的目录 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">finalName</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--当filtering开关打开时，使用到的过滤器属性文件列表 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filters</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--使用的插件列表 。 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--plugin元素包含描述插件所需要的信息。 --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--插件在仓库里的group ID --&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--插件在仓库里的artifact ID --&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--被使用的插件的版本（或版本范围） --&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 --&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                     <span class="comment">&lt;!--execution元素包含了插件执行需要的信息 --&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                         <span class="comment">&lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                         <span class="comment">&lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line">                         <span class="comment">&lt;!--配置的执行目标 --&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                         <span class="comment">&lt;!--配置是否被传播到子POM --&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                         <span class="comment">&lt;!--作为DOM对象的配置 --&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--项目引入插件所需要的额外依赖 --&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                     <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                         ......</span><br><span class="line">                     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--任何配置是否被传播到子项目 --&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--作为DOM对象的配置 --&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--使用的插件列表 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                     ......</span><br><span class="line">                 <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="构建生命周期"><a href="#构建生命周期" class="headerlink" title="构建生命周期"></a>构建生命周期</h2><p>###标准的生命周期</p>
<blockquote>
<ul>
<li>clean 项目清理的处理</li>
<li>default(build) 项目部署的处理</li>
<li>site项目站点文档创建的处理</li>
</ul>
</blockquote>
<h3 id="Clean生命周期"><a href="#Clean生命周期" class="headerlink" title="Clean生命周期"></a>Clean生命周期</h3><h4 id="mvn-post-clean"><a href="#mvn-post-clean" class="headerlink" title="mvn post-clean"></a>mvn post-clean</h4><p>当执行上述操作的时候，完成下面这些工作</p>
<ul>
<li>pre-clean执行一些需要在clean之前完成的工作</li>
<li>clean移除所有上一次构建生成的文件</li>
<li>post-clean执行一些需要在clean之后立即完成的工作</li>
</ul>
<h4 id="mvn-clean"><a href="#mvn-clean" class="headerlink" title="mvn clean"></a>mvn clean</h4><p>完成两个阶段</p>
<ul>
<li>pre-clean</li>
<li>clean</li>
</ul>
]]></content>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习算法</title>
    <url>/3717741858.html</url>
    <content><![CDATA[<hr>
<h2 id="数据规范化"><a href="#数据规范化" class="headerlink" title="数据规范化"></a>数据规范化</h2><h3 id="Min-max规范化"><a href="#Min-max规范化" class="headerlink" title="Min-max规范化"></a>Min-max规范化</h3><p>把原始的数据变换到[0,1]的空间中</p>
<blockquote>
<p>新数值=(原数值-极小值)/(极大值-极小值)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">0.</span>, <span class="number">-3.</span>, <span class="number">1.</span>],</span><br><span class="line">              [<span class="number">3.</span>, <span class="number">1.</span>, <span class="number">2.</span>],</span><br><span class="line">              [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">-1.</span>]])</span><br><span class="line"></span><br><span class="line">min_max_scaler = preprocessing.MinMaxScaler()</span><br><span class="line">minmax_x = min_max_scaler.fit_transform(x)</span><br><span class="line">print(minmax_x)</span><br></pre></td></tr></table></figure>

<h3 id="Z-Score规范化"><a href="#Z-Score规范化" class="headerlink" title="Z-Score规范化"></a>Z-Score规范化</h3><blockquote>
<p>新数值=(原数值-均值)/标准差</p>
</blockquote>
<p>不受数据量级的影响，结果易于比较，但是需要整体数据的平均值和方差，并且得到的数据没有实际意义，只是用于比较</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">0.</span>, <span class="number">-3.</span>, <span class="number">1.</span>],</span><br><span class="line">              [<span class="number">3.</span>, <span class="number">1.</span>, <span class="number">2.</span>],</span><br><span class="line">              [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">-1.</span>]])</span><br><span class="line"></span><br><span class="line">scaled_x = preprocessing.scale(x)</span><br><span class="line">print(scaled_x)</span><br></pre></td></tr></table></figure>

<h2 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h2><h3 id="调包"><a href="#调包" class="headerlink" title="调包"></a>调包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model=svm.SVC(kernel=<span class="string">'rbf'</span>,C=<span class="number">1.0</span>,gamma=<span class="string">'auto'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>kernel表示核函数的选择<ul>
<li>rbf高斯和函数，默认</li>
<li>linear线性核函数</li>
<li>poly多项式核函数</li>
<li>sigmoid:sigmoid核函数</li>
</ul>
</li>
<li>C表示目标函数的惩罚系数，惩罚系数指的是分错样本是的惩罚程度，当C越大分类器的准确性越高，但是容错率越低，泛化能力会变差</li>
<li>gamma表示核函数的系数，默认为样本特征数的倒数</li>
</ul>
<h2 id="KNN"><a href="#KNN" class="headerlink" title="KNN"></a>KNN</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol>
<li>计算待分类物体与其他物体之间的距离</li>
<li>统计距离最近的K个邻居</li>
<li>对于K个最近的邻居，他们属于哪个分类比价最多，待分类物体就属于哪一类</li>
</ol>
<h3 id="距离计算"><a href="#距离计算" class="headerlink" title="距离计算"></a>距离计算</h3><ol>
<li>欧式距离</li>
<li>曼哈顿距离</li>
<li>闵可夫斯基距离</li>
</ol>
<h3 id="调包-1"><a href="#调包-1" class="headerlink" title="调包"></a>调包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">KNeighborsClassifier(n_neighbors=<span class="number">5</span>,weights=<span class="string">'uniform'</span>,algorithm=<span class="string">'auto'</span>,leaf_size=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>n_neighbors即KNN中的K值，表示邻居的数量，K值如果比较小，会造成过拟合</li>
<li>weights用来确定邻居的权重<ul>
<li>uniform表示所有权重相同</li>
<li>distance表示距离的单数</li>
</ul>
</li>
<li>algorithm用来规定计算邻居的方法<ul>
<li>auto根据数据的情况自动选择适合的算法</li>
<li>kd_tree KD树适用于维度少的情况</li>
<li>ball_tree 球树适用于维度大的情况</li>
<li>brute暴力搜索</li>
</ul>
</li>
<li>leaf_size表示构造KD树或球树时的叶子数，默认是30</li>
</ul>
<h2 id="K-Means"><a href="#K-Means" class="headerlink" title="K-Means"></a>K-Means</h2><h3 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h3><ol>
<li>选取K个点作为初始的类中心点，一般都是从数据集中随机抽取的</li>
<li>将每个点分配到最近的类中心，形成了K个类，重新计算每个类的中心</li>
<li>重复第二步，直到类不在发生变化，或者可以设置最大的迭代次数，超过最大的迭代次数就会自动结束</li>
</ol>
<h3 id="调包-2"><a href="#调包-2" class="headerlink" title="调包"></a>调包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">KMeans(n_clusters=<span class="number">8</span>, init=<span class="string">'k-means++'</span>, n_init=<span class="number">10</span>, max_iter=<span class="number">300</span>, tol=<span class="number">0.0001</span>, precompute_distances=<span class="string">'auto'</span>, verbose=<span class="number">0</span>, random_state=<span class="literal">None</span>, copy_x=<span class="literal">True</span>, n_jobs=<span class="number">1</span>, algorithm=<span class="string">'auto'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>n_clusters即K值</li>
<li>max_iter表示最大的迭代次数</li>
<li>n_init初始化中心点的运算次数</li>
<li>init初始值选择方法，默认使用优化过的<code>k-means++</code></li>
</ul>
<h2 id="Grid-SearchCV-网格搜索"><a href="#Grid-SearchCV-网格搜索" class="headerlink" title="Grid SearchCV 网格搜索"></a>Grid SearchCV 网格搜索</h2><blockquote>
<p>机器学习中需要人工选择的参数叫做超参数</p>
<ol>
<li>凭经验微调</li>
<li>选择不同大小的参数，代入模型，选择效果最好的模型</li>
</ol>
</blockquote>
<blockquote>
<p>Grid SearchCV网格搜索，表示一个中穷举的搜索，在所有候选的参数选择中，通过循环遍历，找到表现效果最好的一个参数</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://www.cnblogs.com/wj-1314/p/10422159.html" target="_blank" rel="noopener">Python机器学习笔记：Grid SearchCV（网格搜索）</a></li>
</ol>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书行动《深入理解计算机系统》</title>
    <url>/160663224.html</url>
    <content><![CDATA[<hr>
<h2 id="存储器层次结构"><a href="#存储器层次结构" class="headerlink" title="存储器层次结构"></a>存储器层次结构</h2><h3 id="静态RAM"><a href="#静态RAM" class="headerlink" title="静态RAM"></a>静态RAM</h3><p>SRAM只要有电，就能够永远保持它的值。这是因为SRAM把它的值存储在一个<code>双稳态</code>的存储器单元里面，这个电路有一个属性就是无限期保持在两个不同的电压配置或者状态之一，其他状态都是不稳定的。【类似于跷跷板，两端是稳定的，并且如果处于亚稳定的状态到了稳定的状态，就永远不可能恢复到亚稳定的状态】</p>
]]></content>
      <tags>
        <tag>拆书</tag>
        <tag>深入理解计算机系统</tag>
        <tag>经典</tag>
      </tags>
  </entry>
  <entry>
    <title>再学elasticsearch</title>
    <url>/3781284629.html</url>
    <content><![CDATA[<h2 id="文档管理"><a href="#文档管理" class="headerlink" title="文档管理"></a>文档管理</h2><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://blog.csdn.net/qq_43039260/article/details/87462377" target="_blank" rel="noopener">elasticsearch启动时报错：error=’Cannot allocate memory’ (errno=12)</a></li>
<li><a href="[https://esdoc.bbossgroups.com/#/db-es-tool?id=%e6%95%b0%e6%8d%ae%e5%af%bc%e5%85%a5elasticsearch%e6%a1%88%e4%be%8b%e5%88%86%e4%ba%ab](https://esdoc.bbossgroups.com/#/db-es-tool?id=数据导入elasticsearch案例分享)">数据导入Elasticsearch案例分享</a></li>
<li><a href="https://segmentfault.com/a/1190000020140461" target="_blank" rel="noopener">Docker下安装ElasticSearch和Kibana</a></li>
<li></li>
</ol>
]]></content>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ入门</title>
    <url>/3135873234.html</url>
    <content><![CDATA[<hr>
<p>##消息队列</p>
<p>消息队列是在消息的传输的过程中保存消息的容器。</p>
<p>典型的生产者和消费者模型</p>
<h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>RabbitMQ是一种应用程序之间的通信方法</p>
<h3 id="基本消息模型"><a href="#基本消息模型" class="headerlink" title="基本消息模型"></a>基本消息模型</h3><blockquote>
<p>生产者：发送消息的程序</p>
<p>消费者：消息的接受者，会等待消息到来</p>
<p>queue：消息队列，用来缓存消息</p>
</blockquote>
<p>####添加amqp-client依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>####连接工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtil</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory=<span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">"localhost"</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">"guest"</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">"guest"</span>);</span><br><span class="line"></span><br><span class="line">        Connection connection=connectionFactory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>####生产者发送消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> util.ConnectionUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        String message = <span class="string">"Hello World"</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"[x] sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>connection得到连接</li>
<li>channel创建通道，使用通道才能完成消息相关的操作</li>
<li>queueDeclare创建队列<ul>
<li>queue队列名称</li>
<li>durable是否持久化，如果请求化，mq重启后队列还存在</li>
<li>exclusive是否独占连接</li>
<li>autoDelete自动删除</li>
<li>arguments可以设置存活时间</li>
</ul>
</li>
<li>basicPublish表示向指定的队列中发送消息<ul>
<li>exchange交换机，如果不指定将使用mq默认的交换机</li>
<li>routingKey路由Key，交换机根据路由Key将信息发送到指定的队列中，如果使用默认的交换机，路由Key为队列名称</li>
<li>props消息属性</li>
<li>body消息内容</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="消费者接受消息"><a href="#消费者接受消息" class="headerlink" title="消费者接受消息"></a>消费者接受消息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> util.ConnectionUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line">                String exchange = envelope.getExchange();</span><br><span class="line">                <span class="keyword">long</span> deliveryTag = envelope.getDeliveryTag();</span><br><span class="line"></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>);</span><br><span class="line">                System.out.println(<span class="string">"[x] reveived :"</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>DefaultConsumer实现消费的方法<ul>
<li>handleDelivery获取消息时，该方法会被调用<ul>
<li>consumerTag消费者标签，用来表示消费者，在监听队列时设置为channel.basicConsumer</li>
<li>envelope信息通过envelope</li>
<li>properties消息属性</li>
<li>body消息内容</li>
</ul>
</li>
</ul>
</li>
<li>basicConsume表示监听队列<ul>
<li>queue队列名称</li>
<li>autoAck自动回复，当消费者接受消息后，要告诉mq消息已接受</li>
<li>callback消费方法，当消费者接收到消息要执行的方法</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="消息确认机制ACK"><a href="#消息确认机制ACK" class="headerlink" title="消息确认机制ACK"></a>消息确认机制ACK</h3><ul>
<li>自动ACK表示消息一旦被接收，就会自动发送ACK</li>
<li>手动ACK表示需要手动调用ACK</li>
</ul>
<h4 id="手动ACK"><a href="#手动ACK" class="headerlink" title="手动ACK"></a>手动ACK</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br></pre></td></tr></table></figure>

<p>将最后一行的true改成false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>

<p>并且在消费完消息后，发送一个ack</p>
<h4 id="自动ACK存在问题"><a href="#自动ACK存在问题" class="headerlink" title="自动ACK存在问题"></a>自动ACK存在问题</h4><p>如果在消费函数中出现异常，该消息没有被消费掉，但是队列中该消息由于<code>自动ACK</code>的原因会被删除掉</p>
<h3 id="综上"><a href="#综上" class="headerlink" title="综上"></a>综上</h3><p>上面演示的是一个简单的生产者消费者模型</p>
<p>在选择ACK的时候的时候，如果消息不重要，有无被正确执行消费函数都可以忍受，那么可以选择自动ACK</p>
<p>如果消息一定要被执行，那么必须使用手动ACK，手动ACK记得一定要在消费函数执行完成后，使用<code>basicAck</code>否则该消息不会从队列中移除</p>
<h3 id="work消息模型"><a href="#work消息模型" class="headerlink" title="work消息模型"></a>work消息模型</h3><p>工作队列或者<code>竞争消费者模式</code></p>
<p>即有多个消费者共同消费同一个队列中的消息，但是一个消息只能被一个消费者获取</p>
<h4 id="生产者发送50条消息"><a href="#生产者发送50条消息" class="headerlink" title="生产者发送50条消息"></a>生产者发送50条消息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> util.ConnectionUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"test_work_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            String message = <span class="string">"task..."</span> + i;</span><br><span class="line">            channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">"[x] sent"</span> + message);</span><br><span class="line"></span><br><span class="line">            Thread.sleep(i * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="消费者1"><a href="#消费者1" class="headerlink" title="消费者1"></a>消费者1</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> util.ConnectionUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv21</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"test_work_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"[消费者1] received: "</span> + msg);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="消费者2"><a href="#消费者2" class="headerlink" title="消费者2"></a>消费者2</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.generic.FADD;</span><br><span class="line"><span class="keyword">import</span> util.ConnectionUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv22</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUQUE_NAME = <span class="string">"test_work_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUQUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>);</span><br><span class="line">                System.out.println(<span class="string">"[消费者2] received"</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUQUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202005260858_906.png" alt=""></p>
<p><img src="http://cdn.xuxiaojin.com/202005260859_264.png" alt=""></p>
<p>通过运行结果，可以发现消费者各自消费了不同25条消息。</p>
<p>但是这里有个问题就是两个消费者处理消息的能力不同，两者拿到的任务缺失一样的。</p>
<p>在实际中应该做到，消费越快的人拿到的消息比较多。</p>
<p><code>rabbitMQ</code>可以通过prefetchCount=1使得每个consumer在同一个时间点组多处理一个消息，即在收到该消息的ack的时候不会分配信息的消息给该consumer，会将其分配给不是很忙的consumer。</p>
<blockquote>
<p>需要注意的是，该prefetchCount只能在手动ACK的时候才生效</p>
</blockquote>
<p><img src="http://cdn.xuxiaojin.com/202005260933_837.png" alt=""></p>
<h3 id="订阅模型"><a href="#订阅模型" class="headerlink" title="订阅模型"></a>订阅模型</h3><blockquote>
<p>订阅模型分类说明</p>
<ol>
<li>一个生产者多个消费者</li>
<li>每个消费者都有自己的队列</li>
<li>生产者没有将消息直接发送到队列上，而是发送个exchange</li>
<li>每个队列都要绑定在交换机上</li>
<li>生产者发送的消息，经过交换机到达队列，实现一个消息被多个消费者消费</li>
</ol>
</blockquote>
<p>例子：注册-&gt;发邮件、发短信</p>
<blockquote>
<p>关于交换机，交换机只负责转发消息，不负责存储消息，如果没有队列与其绑定，那么该消息就会丢失</p>
<p>类型有以下几种</p>
<ol>
<li>Fanout广播，将消息发送到所有与其绑定的队列上</li>
<li>Direct定向，发送给执行的routing Key的队列</li>
<li>Topic通配符，把信息交给符合routing pattern路由模式的队列</li>
<li>header模式，取消通配符，而是通过key/value匹配队列</li>
</ol>
</blockquote>
<h4 id="Publish-subscribe-交换机类型为Fanout，广播"><a href="#Publish-subscribe-交换机类型为Fanout，广播" class="headerlink" title="Publish/subscribe[交换机类型为Fanout，广播]"></a>Publish/subscribe[交换机类型为Fanout，广播]</h4><h5 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.sun.corba.se.pept.transport.ConnectionCache;</span><br><span class="line"><span class="keyword">import</span> util.ConnectionUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME=<span class="string">"test_fanout_exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection= ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel=connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME,<span class="string">"fanout"</span>);</span><br><span class="line"></span><br><span class="line">        String message=<span class="string">"注册成功!"</span>;</span><br><span class="line"></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME,<span class="string">""</span>,<span class="keyword">null</span>,message.getBytes());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"[生产者]Sent"</span>+message);</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个时候不创建queue而是创建exchange，并且把消息发送到exchagne</p>
</blockquote>
<h5 id="消费者1-1"><a href="#消费者1-1" class="headerlink" title="消费者1"></a>消费者1</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> util.ConnectionUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv31</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME=<span class="string">"fanout_exchange_queue_sms"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME=<span class="string">"test_fanout_exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection= ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel=connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        DefaultConsumer consumer=<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class="keyword">byte</span>[] body)</span></span>&#123;</span><br><span class="line">                String msg=<span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">"[短信服务] received"</span>+msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME,<span class="keyword">true</span>,consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="消费者2-1"><a href="#消费者2-1" class="headerlink" title="消费者2"></a>消费者2</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> util.ConnectionUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv32</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"fanout_exchange_queue_email"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"test_fanout_exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">"[邮件服务] received"</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><blockquote>
<p>注意如果先启动生产者，那个该消息会被丢失，因为并没有相应的队列与exchange绑定</p>
<p>所以要先启动两个消费者，在启动生产者</p>
</blockquote>
<p><img src="http://cdn.xuxiaojin.com/202005261011_380.png" alt=""></p>
<p><img src="http://cdn.xuxiaojin.com/202005261011_820.png" alt=""></p>
<h5 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h5><ol>
<li>publish/subscribe与work queueu的区别</li>
</ol>
<blockquote>
<p>work queue不需要定义交换机，但是底层实际上是把队列绑定到<code>默认的交换机</code>，这个跟publish有点像</p>
</blockquote>
<ol start="2">
<li>实际工作中建议使用publish/subscribe</li>
</ol>
<h4 id="Routing路由模型-交换机类型-direct"><a href="#Routing路由模型-交换机类型-direct" class="headerlink" title="Routing路由模型[交换机类型 direct]"></a>Routing路由模型[交换机类型 direct]</h4><blockquote>
<p>生产者，向exchange发送消息，发送消息时，会指定一个routing key</p>
<p>交换机接收到生产者的消息，把消息递送给routing key完全匹配的队列</p>
</blockquote>
<h5 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> util.ConnectionUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME=<span class="string">"test_direct_exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection= ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel=connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);</span><br><span class="line">        String message=<span class="string">"注册成功，请短信回复[T]退订"</span>;</span><br><span class="line"></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME,<span class="string">"sms"</span>,<span class="keyword">null</span>,message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"[x] sent"</span>+message);</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意这里的basicPublish带了一个route key</p>
<h5 id="消费者1-2"><a href="#消费者1-2" class="headerlink" title="消费者1"></a>消费者1</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> util.ConnectionUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv41</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"direct_exchange_queue_ms"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"test_direct_exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"sms"</span>);</span><br><span class="line"></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String comsumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">"[短信服务] received: "</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>队列与exchange绑定的时候，也带上了routing key</p>
<h5 id="消费者2-2"><a href="#消费者2-2" class="headerlink" title="消费者2"></a>消费者2</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> util.ConnectionUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv42</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"direct_exchange_queue_mail"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"test_direct_exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"email"</span>);</span><br><span class="line"></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">"[邮件服务] received "</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>#####运行</p>
<p><img src="http://cdn.xuxiaojin.com/202005261056_993.png" alt=""></p>
<p><img src="http://cdn.xuxiaojin.com/202005261056_526.png" alt=""></p>
<p>可以看到消费者1收到了消息</p>
<h4 id="Topics通配符模式-交换机类型topics"><a href="#Topics通配符模式-交换机类型topics" class="headerlink" title="Topics通配符模式[交换机类型topics]"></a>Topics通配符模式[交换机类型topics]</h4><blockquote>
<p>通配符规则</p>
<p>一般的RoutingKey由一个或者多个单词组成，多个单词之间以<code>.</code>分隔</p>
<p><code>#</code>匹配一个或者多个词</p>
<p><code>*</code>匹配一个词</p>
</blockquote>
<h5 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> util.ConnectionUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send5</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCAHGNE_NAME=<span class="string">"test_topic_exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection= ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel=connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EXCAHGNE_NAME, BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line">        String message=<span class="string">"这是一只行动迅速的橙色的兔子"</span>;</span><br><span class="line"></span><br><span class="line">        channel.basicPublish(EXCAHGNE_NAME,<span class="string">"quick.orange.rabbit"</span>,<span class="keyword">null</span>,message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"[动物描述] Sent"</span>+message);</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="消费者1-3"><a href="#消费者1-3" class="headerlink" title="消费者1"></a>消费者1</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> util.ConnectionUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv51</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME=<span class="string">"topic_exchange_queue_01"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME=<span class="string">"test_topic_exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection= ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel=connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,<span class="string">"*.orange.*"</span>);</span><br><span class="line"></span><br><span class="line">        DefaultConsumer consumer=<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class="keyword">byte</span>[] body)</span> </span>&#123;</span><br><span class="line">                String msg=<span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">"[消费者1] received"</span>+msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME,<span class="keyword">true</span>,consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="消费者2-3"><a href="#消费者2-3" class="headerlink" title="消费者2"></a>消费者2</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> util.ConnectionUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv52</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME=<span class="string">"topic_exchange_queue_02"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME=<span class="string">"test_topic_exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection= ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel=connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,<span class="string">"*.*.rabbit"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,<span class="string">"lazy.#"</span>);</span><br><span class="line"></span><br><span class="line">        DefaultConsumer consumer=<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class="keyword">byte</span>[] body)</span></span>&#123;</span><br><span class="line">                String msg=<span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">"[消费者2] received"</span>+msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME,<span class="keyword">true</span>,consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码<a href="https://github.com/jiayouxujin/java_rabbitmq.git" target="_blank" rel="noopener">github</a></p>
<h2 id="SpringBoot与RabbitMQ"><a href="#SpringBoot与RabbitMQ" class="headerlink" title="SpringBoot与RabbitMQ"></a>SpringBoot与RabbitMQ</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.rabbitmq.addresses</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.datasource.port</span>=<span class="string">5672</span></span><br><span class="line"><span class="meta">spring.rabbitmq.usename</span>=<span class="string">guest</span></span><br><span class="line"><span class="meta">spring.rabbitmq.password</span>=<span class="string">guest</span></span><br><span class="line"><span class="meta">spring.rabbitmq.template.exchange</span>=<span class="string">topic.exchange</span></span><br></pre></td></tr></table></figure>

<h3 id="定义配置类"><a href="#定义配置类" class="headerlink" title="定义配置类"></a>定义配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rabbitmqdemo.rabbitmqdemo.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.PUBLIC_MEMBER;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitmqConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_EMAIL = <span class="string">"queue_email"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_SMS = <span class="string">"queue_sms"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"topic.exchange"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTINGKEY_EMAIL = <span class="string">"topic.#.email.#"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTINGKEY_SMS = <span class="string">"topic.#.sms.#"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(EXCHANGE_NAME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">exchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_NAME).durable(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(QUEUE_EMAIL)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">emailQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(QUEUE_EMAIL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(QUEUE_SMS)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">smsQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(QUEUE_SMS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingEmail</span><span class="params">(@Qualifier(QUEUE_EMAIL)</span> Queue queue, @<span class="title">Qualifier</span><span class="params">(EXCHANGE_NAME)</span> Exchange exchange) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(ROUTINGKEY_EMAIL).noargs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingSMS</span><span class="params">(@Qualifier(QUEUE_SMS)</span> Queue queue, @<span class="title">Qualifier</span><span class="params">(EXCHANGE_NAME)</span> Exchange exchange) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(ROUTINGKEY_SMS).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="生产者-3"><a href="#生产者-3" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rabbitmqdemo.rabbitmqdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.rabbitmqdemo.rabbitmqdemo.demo.RabbitmqConfig;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsgByTopics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            String message = <span class="string">"恭喜您，注册成功!userid="</span> + i;</span><br><span class="line"></span><br><span class="line">            rabbitTemplate.convertAndSend(RabbitmqConfig.EXCHANGE_NAME, <span class="string">"topic.sms.email"</span>, message);</span><br><span class="line">            System.out.println(<span class="string">"[x] sent"</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rabbitmqdemo.rabbitmqdemo.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(value = <span class="meta">@Queue</span>(value = <span class="string">"queue_email"</span>, durable = <span class="string">"true"</span>), exchange = <span class="meta">@Exchange</span>(value = <span class="string">"topic.exchange"</span>, ignoreDeclarationExceptions = <span class="string">"true"</span>, type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = &#123;<span class="string">"topic.#.email.#"</span>, <span class="string">"emial.*"</span>&#125;</span><br><span class="line">    ))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rece_email</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[邮件服务] received"</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(value = <span class="meta">@Queue</span>(value = <span class="string">"queue_sms"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"topic.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC</span><br><span class="line">            ),</span><br><span class="line">            key = &#123;<span class="string">"topic.#.sms.#"</span>&#125;</span><br><span class="line">    ))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rece_sms</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[短信服务] received"</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>@Componet类上的注解，注册到Spring容器</p>
<p>@RabbitListener方法上的注解，声明该方法是一个消费者方法</p>
<p>bindings指定绑定关系，可以有多个</p>
<p> value与这个消费有关的队列</p>
<p>exchange这个队列绑定的交换机</p>
<p>key队列与交换机绑定的routingkey</p>
</blockquote>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p><img src="http://cdn.xuxiaojin.com/202005261715_673.png" alt=""></p>
<p><img src="http://cdn.xuxiaojin.com/202005261715_357.png" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上面代码<a href="https://github.com/jiayouxujin/springboot_rabbitmq.git" target="_blank" rel="noopener">github</a></p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>这个blog是复现<a href="https://blog.csdn.net/kavito/article/details/91403659" target="_blank" rel="noopener">RabbitMQ快速入门（详细）</a>这篇的文章</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://www.jianshu.com/p/14ffe0f3db94" target="_blank" rel="noopener">Docker 安装部署RabbitMQ</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1386102" target="_blank" rel="noopener">Docker—(7)Docker安装启动RabbitMQ</a></li>
<li><a href="https://blog.csdn.net/qq_22059611/article/details/88145166" target="_blank" rel="noopener">org.springframework.amqp.AmqpConnectException java.net.ConnectException的解决办法</a></li>
<li><a href="https://blog.csdn.net/liangyihuai/article/details/57406870" target="_blank" rel="noopener">在Intelij IDEA中修改maven为国内镜像（阿里）</a></li>
<li><a href="https://blog.csdn.net/weixin_30947631/article/details/85055796" target="_blank" rel="noopener">如何查看在rabbitMQ里面堆积的消息</a></li>
<li><a href="https://blog.csdn.net/kavito/article/details/91403659" target="_blank" rel="noopener">RabbitMQ快速入门（详细）</a></li>
</ol>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>RabbitMQ</tag>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM内存设置</title>
    <url>/2311727679.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="JVM内存设置"><a href="#JVM内存设置" class="headerlink" title="JVM内存设置"></a>JVM内存设置</h2><p>Java运行时内容是堆，分为新生代(默认占1/3)、老年代(默认占2/3)、永久代</p>
<p><img src="http://cdn.xuxiaojin.com/202005201630_499.png" alt=""></p>
<p>基本的内存设置</p>
<p><img src="http://cdn.xuxiaojin.com/202005201633_995.png" alt=""></p>
<blockquote>
<p>-Xms 初始对堆大小</p>
<p>-Xmx 最大堆大小</p>
<p>一般将这两个值设置为相同的值，避免重新分配堆</p>
<p>-XX:NewSize表示新生代，一般设置为堆的1/3</p>
<p>-XX:MaxPermSize表示最大永久代大小，如果加载的类库很多的时候，可以适当调高这个值</p>
<p>-XX:NewRatio表示新生代与年老代的比值</p>
</blockquote>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现关联规则的笔记</title>
    <url>/1583838332.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是个实验，自己一开始虽然知道算法很简单，但是写不出来</p>
<p>有点菜</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="支持度"><a href="#支持度" class="headerlink" title="支持度"></a>支持度</h3><p>支持度表示某个商品组合出现的次数与总次数之间的比例，支持度越高表示这个组合出现的概率越高</p>
<h3 id="置信度"><a href="#置信度" class="headerlink" title="置信度"></a>置信度</h3><p>条件概率，即购买了A多大概率会购买B。</p>
<p>有关规则如{‘鸡蛋’,’面包’}-&gt;{‘牛奶’} 置信度计算公式为{‘鸡蛋’,’面包’,’牛奶’}的支持度/{‘鸡蛋’,’面包’}的支持度</p>
<h3 id="提升度"><a href="#提升度" class="headerlink" title="提升度"></a>提升度</h3><p>单单看上面的支持度和置信度并不能够很好为推荐决策，所以我们可以通过提升度。提升度指的是购买A对购买B提升了多少</p>
<p>提升度(A-&gt;B)=置信度(A-&gt;B)/支持度(B)</p>
<h3 id="频繁项集"><a href="#频繁项集" class="headerlink" title="频繁项集"></a>频繁项集</h3><p>表示组合的支持度大于等于最小的支持度的项集</p>
<p>##Apriori算法</p>
<p>基本思路</p>
<ol>
<li>首先找到一项集，然后通过找到符合最小支持度的商品</li>
<li>在k项集中组合k+1，判断是否满足最小支持度</li>
<li>重复2，直到k+1项的集合为空</li>
</ol>
<h2 id="FP-growth"><a href="#FP-growth" class="headerlink" title="FP-growth"></a>FP-growth</h2><p>FP-growth的步骤分为两步，包括构建FP树，从FP树中挖掘频繁集</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><table>
<thead>
<tr>
<th>数据集</th>
</tr>
</thead>
<tbody><tr>
<td>a,b,c</td>
</tr>
<tr>
<td>c,d,b,a</td>
</tr>
<tr>
<td>d,e,a</td>
</tr>
<tr>
<td>b,a</td>
</tr>
</tbody></table>
<p>最小支持度为2</p>
<p>首先统计 a:4 b:3 c:2 d:2 e:1</p>
<p>因为e不满足最小支持度，去掉</p>
<p>再对每个数据集通过支持度进行一个排序</p>
<table>
<thead>
<tr>
<th>数据集</th>
<th>调整后的数据集</th>
</tr>
</thead>
<tbody><tr>
<td>a,b,c</td>
<td>a,b,c</td>
</tr>
<tr>
<td>c,d,b,a</td>
<td>a,b,c,d</td>
</tr>
<tr>
<td>d,e,a</td>
<td>a,d</td>
</tr>
<tr>
<td>b,a</td>
<td>a,b</td>
</tr>
</tbody></table>
<p>接着通过调整后的数据集创建FP树，同时更新头指针表</p>
<p>这个比较负载可以看文末的链接</p>
<p>可以得到频繁集为</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>频繁项集</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>{a}</td>
</tr>
<tr>
<td>b</td>
<td>{b},{b,a}</td>
</tr>
<tr>
<td>c</td>
<td>{c},{c,a},{c,b},{c,b,a}</td>
</tr>
<tr>
<td>d</td>
<td>{d},{d,a}</td>
</tr>
</tbody></table>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>自己写的代码跑出来的时间很长</p>
<p>然后在群里看到优化方法</p>
<p>就是二项集通过遍历，找到就行。</p>
<p><img src="http://cdn.xuxiaojin.com/202005201545_611.png" alt=""></p>
<p>直接从4000s降到50s。太强了</p>
<p><img src="http://cdn.xuxiaojin.com/202005201557_345.png" alt=""></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><p><a href="https://time.geekbang.org/column/article/82628" target="_blank" rel="noopener">关联规则挖掘（上）：如何用Apriori发现用户购物规则？</a></p>
</li>
<li><p><a href="https://www.ibm.com/developerworks/cn/analytics/library/machine-learning-hands-on2-fp-growth/index.html" target="_blank" rel="noopener">频繁项集与关联规则 FP-growth 的原理和实现</a></p>
</li>
<li><p><a href="https://paste.ubuntu.com/p/3RqBy4QN9r/" target="_blank" rel="noopener">50s的代码</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/90zeng/p/apriori.html" target="_blank" rel="noopener">基于Python的机器学习实战：Apriori</a></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Apriori</tag>
        <tag>FP-growth</tag>
      </tags>
  </entry>
  <entry>
    <title>JRebel热部署激活</title>
    <url>/316211045.html</url>
    <content><![CDATA[<hr>
<h2 id="SpringBoot热部署"><a href="#SpringBoot热部署" class="headerlink" title="SpringBoot热部署"></a>SpringBoot热部署</h2><p>SpringBoot提供热部署的方法就是使用<code>springboot-devtools</code>依赖，记得我先前配置过，但是并不好用，后面就没有用了。</p>
<h2 id="JRebel"><a href="#JRebel" class="headerlink" title="JRebel"></a>JRebel</h2><h3 id="在线激活"><a href="#在线激活" class="headerlink" title="在线激活"></a>在线激活</h3><ol>
<li>生成一个<a href="https://www.guidgen.com/" target="_blank" rel="noopener">GUID</a></li>
<li>根据方向代理服务器拼接激活地址</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://jrebel.qekang.com/&#123;GUID&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>激活之后选择work offline，这样每次就不要联网看这个licence是否正确</li>
</ol>
<h3 id="本地激活【没有尝试】"><a href="#本地激活【没有尝试】" class="headerlink" title="本地激活【没有尝试】"></a>本地激活【没有尝试】</h3><ol>
<li><a href="https://github.com/ilanyu/ReverseProxy/releases/tag/v1.4" target="_blank" rel="noopener">下载对应的机器版本</a></li>
<li>然后直接打开，生成一个GUID拼接到<code>http://127.0.0.1:8888</code></li>
<li>但是这个cmd需要一直打开，所以可以放到自己的服务器上。</li>
<li>使用别人提供的服务器<code>http://jrebel-license.jiweichengzhu.com/</code></li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://www.cnblogs.com/xzh0717/p/11717854.html#/cnblog/works/article/1117854" target="_blank" rel="noopener">JRebel 激活</a></li>
<li><a href="https://www.jianshu.com/p/bdc88bef0af2" target="_blank" rel="noopener">使用JRebel实现SpringBoot热部署</a></li>
</ol>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Logback日志</title>
    <url>/958704782.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>日志是一个很强的东西，但是自己都没有去注意他。特地的学习下。</p>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>springboot是一个非常好的框架，可以不进行日志配置就能够使用。</p>
<p>通过下面这个例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Logger logger = LoggerFactory.getLogger(LoggingController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.trace(<span class="string">"A TRACE Message"</span>);</span><br><span class="line">        logger.debug(<span class="string">"A DEBUG Message"</span>);</span><br><span class="line">        logger.info(<span class="string">"An INFO Message"</span>);</span><br><span class="line">        logger.warn(<span class="string">"A WARN Message"</span>);</span><br><span class="line">        logger.error(<span class="string">"An ERROR Message"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>运行结果</code></p>
<p><img src="http://cdn.xuxiaojin.com/202005191337_731.png" alt=""></p>
<p>可以看到对于<code>trace</code>和<code>debug</code>这种级别的日志看不到</p>
<p>如果不想通过修改配置来改掉显示，我们可以在运行的时候传入<code>-debug</code>或者<code>-trace</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar ....jar --trace</span><br></pre></td></tr></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configurations</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"logging.path"</span>  <span class="attr">source</span>=<span class="string">"logging.path"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>徐小晋<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span>&gt;</span></span><br><span class="line">    		//xxx</span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span>&gt;</span></span><br><span class="line">    		//xxx</span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    		//xxx</span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configurations</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>只需要为这个文件命名为<code>logback-spring.xml</code>放到resource下面，配置就会生效</p>
<blockquote>
<p><code>scan</code>设置为true表示配置文件如果发生改变了，将会被重新加载，默认值为true</p>
<p><code>scanPeriod</code>表示检测配置文件是否有发生修改的时间间隔</p>
<p><code>debug</code>设置为true的时候会打印出logback内部日志信息，查看logback运行状态</p>
</blockquote>
<blockquote>
<p><code>contextName</code>标签设置成其他名字，用于区分不同应用程序的记录</p>
<p><code>property</code>用于定义变量的标签</p>
<p><code>logger</code>指定某个包或者具体某个类的日志打印级别以及指定的appender</p>
<p><code>root</code>根loggere是一种logger，并且只有一种level的属性</p>
<p><code>appnder</code>负责写日志的组件</p>
</blockquote>
<blockquote>
<p>appender</p>
<ul>
<li>ConsoleAppender把日志添加到控制台</li>
<li>FileAppender把日志添加到文件</li>
<li>RollingFileAppender滚动记录文件，先将日志记录到指定的文件，当符合某个条件的时候，将日志记录到其他文件</li>
</ul>
</blockquote>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#设置应用的日志级别</span><br><span class="line">logging.level.com.example.log&#x3D;INFO</span><br><span class="line"></span><br><span class="line">#路径</span><br><span class="line">logging.file.path&#x3D;.&#x2F;logs</span><br></pre></td></tr></table></figure>

<h3 id="通过控制台输出"><a href="#通过控制台输出" class="headerlink" title="通过控制台输出"></a>通过控制台输出</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"SUDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %-5level %logger&#123;80&#125; -%msg%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">21</span>:<span class="number">19</span>:<span class="number">27</span>.<span class="number">871</span> INFO  com.example.log.logdemo.controller.LoggingController - LOG:INFO</span><br><span class="line"><span class="number">21</span>:<span class="number">19</span>:<span class="number">27</span>.<span class="number">871</span> ERROR com.example.log.logdemo.controller.LoggingController - LOG:ERROR</span><br></pre></td></tr></table></figure>

<h3 id="通过文件输出"><a href="#通过文件输出" class="headerlink" title="通过文件输出"></a>通过文件输出</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"logging.path"</span> <span class="attr">source</span>=<span class="string">"logging.path"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"logging.level"</span> <span class="attr">source</span>=<span class="string">"logging.level.com.example.log.logdemo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %-5level %logger&#123;80&#125; - %msg%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"XUJIN-LOGGERONE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>$&#123;logging.level&#125;<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">            $&#123;logging.path&#125;/log-spring-boot/log-loggerone.log</span><br><span class="line">        <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;logging.path&#125;/log-spring-boot/log-loggerone.log.%d&#123;yyyy-MM-dd&#125;<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"XUJIN-LOGGERONE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面这个配置会把启动的信息放到文件里，如果不想把这些信息放到日志文件里</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.example.log.logdemo.controller"</span> <span class="attr">level</span>=<span class="string">"$&#123;logging.level&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"XUJIN-LOGGERONE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"$&#123;logging.level&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个配置表示<code>logger</code>负责打印包<code>com.example.log.logdemo.controller</code>下的日志。</p>
<p><code>root</code>会指向控制台</p>
<h3 id="logger和appender"><a href="#logger和appender" class="headerlink" title="logger和appender"></a>logger和appender</h3><p>appender表示一个日志打印的组件，这里的组件定义了打印过滤的条件、打印输出的方式、滚动策略、编码方式、打印格式。但是只是一个打印组件如果不使用logger或者root的appender-ref指向某个具体的appender时。没有啥意义</p>
<p>logger可以告诉应用哪些包可以这么打</p>
<h3 id="appender详解"><a href="#appender详解" class="headerlink" title="appender详解"></a>appender详解</h3><ul>
<li>appender有两个属性，一个是name表示appender的名字，一个是class表示权限定名</li>
<li>append子标签，属性为true表示日志被追加到文件的末尾，否则清空现有文件</li>
<li>fillter子标签，过滤器<ul>
<li>ThresholdFilter临界值过滤器，过滤低于指定临界值的日志，当日志级别高于临界值，锅里会返回NEUTRAL，低于的话会被拒绝</li>
</ul>
</li>
<li>file子标签，表示写入的指定的文件名，没有默认值，可以使用相对目录也可以是绝对目录</li>
<li>rollingPolicy子标签用来描述滚动的策略<ul>
<li>TimeBaseRollingPolicy是事件滚动策略包含FileNamePattern和maxHistory</li>
</ul>
</li>
<li>encoder子标签，对日志信息转换成字节数组，把字节数组写入到输出流。只有<code>PattenLayoutEncoder</code>一种类型</li>
</ul>
<h3 id="logger配置详解"><a href="#logger配置详解" class="headerlink" title="logger配置详解"></a>logger配置详解</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.example.log.logdemo.controller"</span> <span class="attr">level</span>=<span class="string">"$&#123;logging.level&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个logger表示该包下的<code>${logging.level}</code>级别的日志就是配置文件里面写的设置。</p>
<p><code>addtivity</code>用来描述是否向上级<code>logger</code>传递打印信息，默认是true</p>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="错误案例1"><a href="#错误案例1" class="headerlink" title="错误案例1"></a>错误案例1</h3><p>####logger继承root</p>
<p>重复记录，我们前面了解到logger的addtivity表示会向上级传递打印信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%thread] [%-5level] [%logger&#123;40&#125;:%line] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.example.log.logdemo.controller"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202005192225_92.png" alt=""></p>
<p>所以我们可以通过添加additivity属性设为false就不会出现重复记录的情况了</p>
<p>但是我刚刚试了一下，如果单单直接添加该属性，并不会消除掉这个bug。还是会发生重复记录的问题。</p>
<p>解决掉这个bug的只需要去掉appender就可以</p>
<p>如果有个需求就是某个包下需要输出到某个文件里面可以通过添加addtivity属性，然后appender-ref指向对一个的file的appender组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.FileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>app.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%thread] [%-5level] [%logger&#123;40&#125;:%line] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%thread] [%-5level] [%logger&#123;40&#125;:%line] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.example.log.logdemo.controller"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="LevelFilter配置"><a href="#LevelFilter配置" class="headerlink" title="LevelFilter配置"></a>LevelFilter配置</h4><blockquote>
<p>如果是ThresholdFilter设置为WARN可以记录WARN和ERROR级别的日志</p>
<p>如果LevelFilter没有配置onMatch和onMismatch属性相当于这个过滤器是没有用的，导致INFO的级别日志都会被记录</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LevelFilter</span> <span class="keyword">extends</span> <span class="title">AbstractMatcherFilter</span>&lt;<span class="title">ILoggingEvent</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> FilterReply <span class="title">decide</span><span class="params">(ILoggingEvent event)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!isStarted()) &#123;</span><br><span class="line">          <span class="keyword">return</span> FilterReply.NEUTRAL;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (event.getLevel().equals(level)) &#123;</span><br><span class="line">          <span class="keyword">return</span> onMatch;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> onMismatch;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMatcherFilter</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Filter</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> FilterReply onMatch = FilterReply.NEUTRAL;</span><br><span class="line">    <span class="keyword">protected</span> FilterReply onMismatch = FilterReply.NEUTRAL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">[<span class="number">2020</span>-<span class="number">05</span>-<span class="number">19</span> <span class="number">22</span>:<span class="number">42</span>:<span class="number">43</span>.<span class="number">828</span>] [http-nio-<span class="number">8421</span>-exec-<span class="number">1</span>] [INFO ] [c.e.l.l.controller.LoggingController:<span class="number">19</span>] - LOG:INFO</span><br><span class="line">[<span class="number">2020</span>-<span class="number">05</span>-<span class="number">19</span> <span class="number">22</span>:<span class="number">42</span>:<span class="number">43</span>.<span class="number">829</span>] [http-nio-<span class="number">8421</span>-exec-<span class="number">1</span>] [ERROR] [c.e.l.l.controller.LoggingController:<span class="number">20</span>] - LOG:ERROR</span><br></pre></td></tr></table></figure>

<p>上面的源码表示如果匹配就调用onMatch如果不匹配就调用onMismatch</p>
<p>所以只要把对应的LevelFilter的onMatch属性设置为ACCEPT表示接受INFO</p>
<p>onMismatch属性设置为DENY表示除了INFO级别不进行记录</p>
<p><img src="http://cdn.xuxiaojin.com/202005192246_138.png" alt=""></p>
<h3 id="改善性能"><a href="#改善性能" class="headerlink" title="改善性能"></a>改善性能</h3><p>通过大佬分析的源码，发现在写日志的时候是同步，这个如果写入大量的日志会使得性能不好，可以通过异步存储来实现这个问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ASYNCFILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.AsyncAppender"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ASYNCFILE"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是技术没有银弹，虽然改善了性能，但是呢很大程度上会有一些问题</p>
<ul>
<li>记录异步日志撑爆内存</li>
<li>记录异步日志出现日志丢失</li>
<li>记录异步日志出现阻塞</li>
</ul>
<p>AsyncAppender提供的配置参数</p>
<ul>
<li>includeCallerData用于控制是否收集调用方的数据</li>
<li>queueSize用于控制阻塞队列的大小，默认大小是256即内存中最多保存256条记录</li>
<li>discardingThreshold表示控制丢弃日志的阀值。默认情况下队列的剩余量低于队列的长度20%就会丢弃TRACE、DEBUG和INFO级别的日志</li>
<li>neverBlock控制队列满的时候，加入的数据是否直接丢弃，不会阻塞等待</li>
</ul>
<blockquote>
<ul>
<li>如果考虑性能，neverBlock设置为true</li>
<li>如果数据绝对不能丢，设置discardingThreshold为0，queueSize设置大一点</li>
</ul>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://www.baeldung.com/spring-boot-logging" target="_blank" rel="noopener">Logging in Spring Boot</a></li>
<li><a href="https://blog.csdn.net/Mrs_chens/article/details/102455216" target="_blank" rel="noopener"><em>SpringBoot+logback优雅地配置日志！</em></a></li>
<li><a href="https://juejin.im/post/5b51f85c5188251af91a7525" target="_blank" rel="noopener">看完这个不会配置 logback ，请你吃瓜！</a></li>
<li><a href="https://time.geekbang.org/column/article/220307" target="_blank" rel="noopener">日志：日志记录真没你想象的那么简单</a></li>
</ol>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Logback</tag>
      </tags>
  </entry>
  <entry>
    <title>spring的IoC</title>
    <url>/3742925258.html</url>
    <content><![CDATA[<h2 id="Java-Reflection"><a href="#Java-Reflection" class="headerlink" title="Java Reflection"></a>Java Reflection</h2><p>Java Reflection能够在运行期间，在不知道类名，方法等的情况下，能够观察类，接口，属性和方法。</p>
<p>###访问属性</p>
<p>举个例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaInvokeDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaInvokeDemo</span><span class="params">(<span class="keyword">int</span> count, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">        JavaInvokeDemo javaInvokeDemo = <span class="keyword">new</span> JavaInvokeDemo(<span class="number">100</span>, <span class="string">"xujin"</span>);</span><br><span class="line"></span><br><span class="line">        Class clazz = JavaInvokeDemo<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Map&lt;Object, Object&gt; json = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Field field : clazz.getFields()) &#123;</span><br><span class="line">            json.put(field.getName(), field.get(javaInvokeDemo));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以用反射构造JSON格式的数据，像<code>GSON</code>这类工具库。</p>
<p>但是我在写代码的过程中，发现了一个问题，如果属性的作用域是私有的，那么就不会有结果输出，然后通过查询，发现可以通过一些特殊方法，使得可以访问私有作用域的属性。</p>
<p><img src="http://cdn.xuxiaojin.com/202005112054_716.png" alt=""></p>
<p>我们先来看一个概念</p>
<blockquote>
<p>getFields() can only be accessed in the class declared as<strong><em>\</em>Public field**</strong>Private field it can’t access .getDeclaredFields() can access the class<strong>All fields</strong>, has nothing to do with public, private, protect.</p>
</blockquote>
<p>通过上面我们可以知道getFields只能放回Public修饰的</p>
<p>getDeclaredFields()可以返回所有访问权限修饰的。所以我们可以通过<code>getDeclaredFields()</code>返回private，然后更改访问权限。就可以访问到private</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaInvokeDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    ........</span><br><span class="line">        <span class="keyword">for</span> (Field field : clazz.getDeclaredFields()) &#123;</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            json.put(field.getName(), field.get(javaInvokeDemo));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要访问一个静态的变量的话，我们不要传入一个引用，只要一个null就可以，因为静态变量是类的作用域，所用该类的实例共享</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = JavaInvokeDemo<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">      Field field = clazz.getField(<span class="string">"mesage"</span>);</span><br><span class="line">      System.out.println(field.get(<span class="keyword">null</span>));</span><br></pre></td></tr></table></figure>

<h3 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h3><p>有了上面的基础，我们可以很简单的想到如何去访问方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaInvokeDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaInvokeDemo</span><span class="params">(<span class="keyword">int</span> count, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">descript</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"count is "</span> + <span class="keyword">this</span>.count + <span class="string">" name is "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line"></span><br><span class="line">        JavaInvokeDemo javaInvokeDemo = <span class="keyword">new</span> JavaInvokeDemo(<span class="number">10</span>, <span class="string">"xujin"</span>);</span><br><span class="line">        Class clazz = JavaInvokeDemo<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Method descriptMethod = clazz.getMethod(<span class="string">"descript"</span>);</span><br><span class="line">        descriptMethod.invoke(javaInvokeDemo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如何实现反射"><a href="#如何实现反射" class="headerlink" title="如何实现反射"></a>如何实现反射</h2><p>这部分知识有点难，稍微学习下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">target</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Exception(<span class="string">"#"</span>+i).printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; klass=Class.forName(<span class="string">"Test"</span>);</span><br><span class="line">        Method method=klass.getMethod(<span class="string">"target"</span>, <span class="keyword">int</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        method.invoke(<span class="keyword">null</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">java.lang.Exception: #0</span></span><br><span class="line"><span class="comment">	at Test.target(Test.java:6)</span></span><br><span class="line"><span class="comment">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span></span><br><span class="line"><span class="comment">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span></span><br><span class="line"><span class="comment">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span></span><br><span class="line"><span class="comment">	at java.lang.reflect.Method.invoke(Method.java:498)</span></span><br><span class="line"><span class="comment">	at Test.main(Test.java:12)</span></span><br><span class="line"><span class="comment">	**/</span></span><br></pre></td></tr></table></figure>

<p>通过打印栈，我们可以看到先调用了Method.invoke，然后进入委托实现，在进入本地实现，最后进入目标方法</p>
<p>中间有一个委托实现，是因为Java的反射调用机制还设立一个动态生成字节码的实现，直接使用invoke来实现，使用委托实现能够在本地实现及动态实现中切换</p>
<p>动态实现的效率要快，因为不需要经过Java到C++在到Java的过程，但是如果只调用一次，反而更慢，因为生成字节码的过程中反而更慢。所以JVM设置一个阈值15，如果调用在15之下，采用本地实现。在15时，便生成动态字节码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.Exception: #19</span><br><span class="line">	at Test.target(Test.java:<span class="number">6</span>)</span><br><span class="line">	at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">	at Test.main(Test.java:<span class="number">13</span>)</span><br></pre></td></tr></table></figure>

<h2 id="反射小结"><a href="#反射小结" class="headerlink" title="反射小结"></a>反射小结</h2><p>通过上面反射的实现机制，我们可以看到反射的性能其实是不高的。</p>
<p>但是Spring里面用反射实现了很多操作</p>
<h2 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h2><p>IoC控制反转，说实话自己不是很懂，但是演示了一个例子后稍微有点懂</p>
<p>我们来看一个例子</p>
<p>###不使用IoC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.javacodegeeks.examples.beans.Animal;</span><br><span class="line"><span class="keyword">import</span> com.javacodegeeks.examples.beans.Dog;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IocSpringApplication</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(IocSpringApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">         </span><br><span class="line">        Animal animal = <span class="keyword">new</span> Dog();</span><br><span class="line">         </span><br><span class="line">        System.out.println(animal.getFavoritePastime());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不使用IoC，我们创建一个类的实例，需要通过类的构造函数，自己手动创建。</p>
<p>但是如果碰到需要更改这个实现，那么我们就需要更改这个类，因为实例的创建在这个类上。为了让代码解耦，我们需要让<code>框架来管理实例的创建</code>这个就是控制反转</p>
<h3 id="使用控制反转"><a href="#使用控制反转" class="headerlink" title="使用控制反转"></a>使用控制反转</h3><p>可以通过@Configuration来提供bean的配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.logexample.logdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.logexample.logdemo.beans.Animal;</span><br><span class="line"><span class="keyword">import</span> com.logexample.logdemo.beans.Dog;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogdemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ConfigurableApplicationContext configurableApplicationContext = SpringApplication.run(</span><br><span class="line">                LogdemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span></span></span><br><span class="line"><span class="class">        )</span>;</span><br><span class="line"></span><br><span class="line">        Animal animal = configurableApplicationContext.getBean(<span class="string">"dog"</span>, Animal<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(animal.getFavoritePastime());</span><br><span class="line">        configurableApplicationContext.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在懂了<code>restTempalte</code>为什么需要通过bean来注解一下，这样才能被框架的IoC容器管理</p>
<h3 id="通过注解使用"><a href="#通过注解使用" class="headerlink" title="通过注解使用"></a>通过注解使用</h3><p>可以通过@Component，@Controller，@Service，@Repository。通过这些注解的bean能够被IoC容器所管理</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="http://tutorials.jenkov.com/java-reflection/private-fields-and-methods.html" target="_blank" rel="noopener">Java Reflection - Private Fields and Methods</a></li>
<li>[<a href="http://www.programmersought.com/article/9551359183/]" target="_blank" rel="noopener">http://www.programmersought.com/article/9551359183/]</a>(The difference between getFields() and getDeclaredFields() in class name .class)</li>
<li><a href="https://time.geekbang.org/column/article/12192" target="_blank" rel="noopener">JVM是如何实现反射的？</a></li>
<li><a href="https://examples.javacodegeeks.com/ioc-spring-example/" target="_blank" rel="noopener">IoC Spring Example</a></li>
</ol>
]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Liunx进程命令</title>
    <url>/1547187792.html</url>
    <content><![CDATA[<hr>
<h2 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h2><blockquote>
<p>vmstat对系统的虚拟内存、进程、CPU活动进行监视，用来获得有关虚拟内存交换情况，进程，页面交换空间，IO读写情况及CPU活动的信息</p>
</blockquote>
<h3 id="模拟上下文切换问题"><a href="#模拟上下文切换问题" class="headerlink" title="模拟上下文切换问题"></a>模拟上下文切换问题</h3><blockquote>
<p>sysbench是一个多线程基准测试工具，用来评估不同系统参数下的数据库负载情况</p>
</blockquote>
<p><img src="http://cdn.xuxiaojin.com/202005100830_382.png" alt=""></p>
<p>先通过命令，我们模拟10个线程运行5分钟。</p>
<p>然后通过vmstat查看上下文切换情况,<code>vmstat 1</code>每隔1s输出一次</p>
<p><img src="http://cdn.xuxiaojin.com/202005100834_348.png" alt=""></p>
<blockquote>
<ul>
<li>cs每秒上下文切换次</li>
<li>in表示中断次数</li>
<li>r表示就绪队列的长度</li>
<li>b表示处于不可中断的睡眠状态</li>
</ul>
</blockquote>
<p>通过上面可以知道每秒的中断次数超过了1万左右，说明中断处理是问题</p>
<p>通过<code>pidstat -w -u 1</code>可以查看具体的进程</p>
<p>其中<code>cswch</code>表示自愿上下文切换，指的是没有进程所需自愿</p>
<p><code>ncswch</code>表示非自愿的上下文切换，指的是时间片到等原因</p>
<p><img src="http://cdn.xuxiaojin.com/202005100835_137.png" alt=""></p>
<p>到这里我们可以找到上下文切换严重的根源是sysbench</p>
<blockquote>
<ul>
<li>如果是自愿切换变多，表示IO称为瓶颈</li>
<li>如果是非自愿切换变多，表示CPU成为瓶颈</li>
<li>如果中断次数变多，可以通过查看/pro/interrupts查看具体的中断类型</li>
</ul>
</blockquote>
<h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p>先来看一下top命令的输出</p>
<p><img src="http://cdn.xuxiaojin.com/202005100850_231.png" alt=""></p>
<p>里面的S表示进程的状态</p>
<blockquote>
<ul>
<li>R表示在CPU的就绪队列中，正在运行或者正在等待运行</li>
<li>D表示不可中断状态的睡眠，表示跟硬件进行交互，并且不可以被其他进程中断</li>
<li>Z表示进程已经结束，但是还没有回收它的资源</li>
<li>S表示可中断状态睡眠，表示进程因为等待某个是而被系统挂起</li>
</ul>
</blockquote>
<p>通过top我们可以查看系统的僵尸进程，就是sleeping的进程</p>
<h2 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h2><h3 id="system"><a href="#system" class="headerlink" title="system"></a>system</h3><blockquote>
<p>int system(const char *command)</p>
</blockquote>
<p>表示运行括号里的程序,用字符串参数传递一个shell命令，并执行</p>
<h3 id="execl"><a href="#execl" class="headerlink" title="execl"></a>execl</h3><blockquote>
<p>int execl(const char *path,const char *arg0……,(char *)0)</p>
</blockquote>
<p>表示path字符串所代表的文件路径，后面的参数表示执行文件传过去的参数，以NULL做结束</p>
<h3 id="execlp"><a href="#execlp" class="headerlink" title="execlp"></a>execlp</h3><blockquote>
<p>int execlp(const char* file,const char * args0……(char *)0)</p>
</blockquote>
<p>表示从PATH变量中，找到file的文件，然后执行</p>
<h3 id="errno"><a href="#errno" class="headerlink" title="errno"></a>errno</h3><p>处理errno最好先把它的值存入另一个变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">char</span> *mesg;</span><br><span class="line">    <span class="keyword">if</span>((fd=<span class="built_in">open</span>(<span class="string">"no/such/file"</span>),<span class="number">0</span>)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"errno=%d\n"</span>,errno);</span><br><span class="line">        mesg=strerror(errno);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"the message is %s \n"</span>,mesg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>shell入门</title>
    <url>/383063768.html</url>
    <content><![CDATA[<hr>
<h2 id="Shebang行"><a href="#Shebang行" class="headerlink" title="Shebang行"></a>Shebang行</h2><blockquote>
<p>脚本第一行通常指定解释器，即该脚本需要通过什么样的解释器执行</p>
</blockquote>
<p><code>#!</code>后面就是脚本解释器的位置</p>
<h2 id="执行权限和路径"><a href="#执行权限和路径" class="headerlink" title="执行权限和路径"></a>执行权限和路径</h2><p>写完一个脚本无法直接运行,需要通过给该脚本的执行权限才能够运行<code>./script.sh</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">script.sh</span></span><br><span class="line"></span><br><span class="line">echo "hello world"</span><br></pre></td></tr></table></figure>

<p>给脚本的执行权限<code>chmod +x script.sh</code></p>
<p><img src="http://cdn.xuxiaojin.com/202005010853_192.png" alt=""></p>
<h2 id="脚本执行的方式"><a href="#脚本执行的方式" class="headerlink" title="脚本执行的方式"></a>脚本执行的方式</h2><ol>
<li>bash ./filename.sh</li>
<li>./filename.sh</li>
<li>source ./filename.sh</li>
<li>.filename.sh</li>
</ol>
<h3 id="bash-filename-sh"><a href="#bash-filename-sh" class="headerlink" title="bash ./filename.sh"></a>bash ./filename.sh</h3><p>首先通过<code>bash ./filename.sh</code>执行脚本文件并不需要是可执行的格式</p>
<p><img src="http://cdn.xuxiaojin.com/202005011336_21.png" alt=""></p>
<p>可以看到，我们bash其实是开了一个子进程来执行的，所以它执行完之后就会退出去。并不会改变当前shell的状态</p>
<p><img src="http://cdn.xuxiaojin.com/202005011337_891.png" alt=""></p>
<h3 id="filename-sh"><a href="#filename-sh" class="headerlink" title="./filename.sh"></a>./filename.sh</h3><p>如果是<code>./filename.sh</code>的话，对于不可执行的文件会提示权限不足</p>
<p><img src="http://cdn.xuxiaojin.com/202005011338_807.png" alt=""></p>
<p>通过<code>chmod u+rx filename.sh</code>可以将文件赋值成可执行文件</p>
<p><img src="http://cdn.xuxiaojin.com/202005011340_815.png" alt=""></p>
<p><img src="http://cdn.xuxiaojin.com/202005011341_292.png" alt=""></p>
<p>然后我们通过执行结果也知道了，该执行方式也是重新启动一个子进程，当shell脚本执行完后，就退回到父进程，并不会影响当前shell脚本的环境。</p>
<h3 id="source-filename与-filename-sh"><a href="#source-filename与-filename-sh" class="headerlink" title="source ./filename与. filename.sh"></a>source ./filename与. filename.sh</h3><p>source和.是等价的</p>
<p><img src="http://cdn.xuxiaojin.com/202005011344_705.png" alt=""></p>
<p>通过执行结果，我们看到source执行的文件，并需要是可执行权限。同时会改变当前shell的环境情况，即直接在父进程执行，并不会启动一个子进程。</p>
<p><img src="http://cdn.xuxiaojin.com/202005011346_979.png" alt=""></p>
<h2 id="管道和重定向"><a href="#管道和重定向" class="headerlink" title="管道和重定向"></a>管道和重定向</h2><blockquote>
<p>管道是进程间用来通信的一种工具，引入到shell做到了可以把一个程序的输出作为另外一个程序的输入</p>
<p>重定向可以把标准的输出到一个文件里面</p>
</blockquote>
<h3 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h3><p>管道符<code>|</code>，可以把前面一个程序的输出作为后面程序的输入。例如<code>ps | cat</code></p>
<p><img src="http://cdn.xuxiaojin.com/202005011356_920.png" alt=""></p>
<p>通过管道符，我们可以将前后两个命令(外部命令)分别建立新的子进程，进行连接</p>
<p>因为使用管道符是创建一个新的子进程的，如果使用内建命令的话，不会传到子进程。所以要规避使用内建命令。</p>
<h3 id="重定向符号"><a href="#重定向符号" class="headerlink" title="重定向符号"></a>重定向符号</h3><blockquote>
<p>一个进程默认会打开标准输入、标准输出、错误输出的三个文件描述符</p>
</blockquote>
<h4 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h4><p>标准输入重定向符为<code>&lt;</code></p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量引用及作用范围"><a href="#变量引用及作用范围" class="headerlink" title="变量引用及作用范围"></a>变量引用及作用范围</h3><p>通过<code>${}</code>使用变量</p>
<p><img src="http://cdn.xuxiaojin.com/202005021152_509.png" alt=""></p>
<p>变量的作用范围是当前bash，一旦进入子bash或者同级的bash都不行</p>
<p><img src="http://cdn.xuxiaojin.com/202005021153_468.png" alt=""></p>
<p><img src="http://cdn.xuxiaojin.com/202005021156_964.png" alt=""></p>
<p>通过变量的范围我们可以看到<code>bash</code>和<code>./</code>都是以子bash的方式启动的</p>
<p>通过<code>export</code>进行变量导出</p>
<p><img src="http://cdn.xuxiaojin.com/202005021158_354.png" alt=""></p>
<p>如果变量不使用了<code>unset</code></p>
<p><img src="http://cdn.xuxiaojin.com/202005021200_654.png" alt=""></p>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>所有shell都可以使用的变量</p>
<p><img src="http://cdn.xuxiaojin.com/202005021401_71.png" alt=""></p>
<p>每次执行命令都会在这下面路径找，如果命令的路径不在PATH上则会报错，需要将其加入到路径上</p>
<p><img src="http://cdn.xuxiaojin.com/202005021404_379.png" alt=""></p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>定义数组<code>IPS=( 101.0.0.1 10.0.0.2 10.0.03)</code></p>
<p>第一个元素<code>echo $IPS</code>，全部元素<code>echo ${IPS[@]}</code>,统计元素个数<code>echo ${#IPS[@]}</code></p>
<p><img src="http://cdn.xuxiaojin.com/202005021421_426.png" alt=""></p>
<h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><p><code>单引号</code>不会对变量进行解释</p>
<p><code>双引号</code>会对变量进行解释</p>
<p><img src="http://cdn.xuxiaojin.com/202005021437_145.png" alt=""></p>
<h2 id="脚本参数"><a href="#脚本参数" class="headerlink" title="脚本参数"></a>脚本参数</h2><blockquote>
<p>调用脚本的时候，可以一起带入参数。例如<code>script.sh word1 word2 word3</code></p>
</blockquote>
<p>在脚本内部，可以通过调用一些特殊变量，引用这些参数</p>
<ul>
<li><code>$0</code>表示脚本的文件名</li>
<li><code>$1</code>~<code>$9</code>对应脚本的第一个到第九个参数</li>
<li><code>$#</code>参数的总数</li>
<li><code>$@</code>表示全部参数，参数直接使用空格隔开</li>
</ul>
<h3 id="标志"><a href="#标志" class="headerlink" title="$标志"></a>$标志</h3><p>$在shell中是一个特殊字符，可以用来扩展val</p>
<h3 id="练习参数"><a href="#练习参数" class="headerlink" title="练习参数"></a>练习参数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">val.sh</span></span><br><span class="line"></span><br><span class="line">echo "全部参数:"$@</span><br><span class="line">echo "参数个数:"$#</span><br><span class="line">echo "脚本文件名:"$0</span><br><span class="line">echo '$1='$1</span><br><span class="line">echo '$2='$2</span><br><span class="line">echo '$3='$3</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202005010905_207.png" alt=""></p>
<h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if commands; then</span><br><span class="line">   commands</span><br><span class="line">[elif commands; then</span><br><span class="line">    commands....]</span><br><span class="line">[else</span><br><span class="line">    commands]</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>其中<code>elif</code>和<code>else</code>这两个部分是可选的</p>
<p><code>if</code>和<code>then</code>如果写到同一行，需要使用<code>;</code>来隔开。写成两行的话，就不需要使用分号</p>
<p>同时if后面也可以跟命令，如果该命令执行成功的话，则意味着判断条件成立。</p>
<p>需要注意的是，if后面可以跟很多数量的命令，但是只看最后一个，如果最后一个执行成功的话，则意味着判断条件成立。</p>
<p><img src="http://cdn.xuxiaojin.com/202005010954_231.png" alt=""></p>
<h3 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h3><p>if结构的判断条件，一般使用test命令，有三种形式</p>
<ol>
<li>test expression</li>
<li>[ expression ]</li>
<li>[[ expression ]]</li>
</ol>
<p>判断某个文件是否存在</p>
<p><img src="http://cdn.xuxiaojin.com/202005011002_35.png" alt=""></p>
<blockquote>
<p>这三种形式其实是等价的,[[  ]]可以用正则表达式</p>
</blockquote>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><blockquote>
<p>case “$变量” in</p>
<p>​        “情况1”  )</p>
<p>​              命令….;;</p>
<p>​        “情况2”  ）</p>
<p>​              命令…..;;</p>
<p>esac</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">case</span> demo</span></span><br><span class="line"></span><br><span class="line">case "$1" in</span><br><span class="line">        "start"|"START")</span><br><span class="line">       echo $0 starting.... ;;</span><br><span class="line">        "stop")</span><br><span class="line">       echo $0 stop...;;</span><br><span class="line">        "restart")</span><br><span class="line">          echo $0 restart ;;</span><br><span class="line">        *)</span><br><span class="line">        echo "USAGE: $0 &#123;start|stop|restart&#125;" ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202005021525_786.png" alt=""></p>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><blockquote>
<p>for 参数 in 列表</p>
<p>do 执行命令</p>
<p>done 封闭一个循环</p>
</blockquote>
<h3 id="C语言版"><a href="#C语言版" class="headerlink" title="C语言版"></a>C语言版</h3><blockquote>
<p>for (( i=1 ; i&lt;=10 ; i++ ))</p>
<p>do</p>
<p>  echo $i</p>
<p>done</p>
</blockquote>
]]></content>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>docker简明教程</title>
    <url>/3712198204.html</url>
    <content><![CDATA[<hr>
<h2 id="在Linux安装docker"><a href="#在Linux安装docker" class="headerlink" title="在Linux安装docker"></a>在Linux安装docker</h2><h3 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h3><p><img src="http://cdn.xuxiaojin.com/202005011427_260.png" alt=""></p>
<h3 id="win10"><a href="#win10" class="headerlink" title="win10"></a>win10</h3><p>这里放上自己安装配置过程中一些比较重要的点</p>
<h4 id="开启Hyper-V"><a href="#开启Hyper-V" class="headerlink" title="开启Hyper-V"></a>开启Hyper-V</h4><p>以管理员身份执行下面.cmd</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pushd</span> "%~dp0"</span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> /b <span class="variable">%SystemRoot%</span>\servicing\Packages\*Hyper-V*.mum &gt;hyper-v.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /f <span class="variable">%%i</span> <span class="keyword">in</span> ('<span class="built_in">findstr</span> /i . hyper-v.txt <span class="number">2</span>^&gt;<span class="built_in">nul</span>') <span class="keyword">do</span> dism /online /norestart /add-package:"<span class="variable">%SystemRoot%</span>\servicing\Packages\<span class="variable">%%i</span>"</span><br><span class="line"></span><br><span class="line"><span class="built_in">del</span> hyper-v.txt</span><br><span class="line"></span><br><span class="line">Dism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL</span><br></pre></td></tr></table></figure>

<p>####伪装成win10专业版</p>
<p>通过管理员身份打开cmd.【这个操作好骚】</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">REG ADD "HKEY_LOCAL_MACHINE\software\Microsoft\Windows NT\CurrentVersion" /v EditionId /T REG_EXPAND_SZ /d Professional /F</span><br></pre></td></tr></table></figure>

<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.cnblogs.com/samwu/p/10360943.html" target="_blank" rel="noopener">Win10 家庭版安装Docker for Windows</a></p>
<h2 id="虚拟化与容器"><a href="#虚拟化与容器" class="headerlink" title="虚拟化与容器"></a>虚拟化与容器</h2><p>虚拟这个词其实比较常见的，例如虚拟机啥的。所以我们应该并不陌生。</p>
<blockquote>
<p>虚拟化是一种将计算机物理资源进行抽象，转为虚拟的资源供程序使用</p>
</blockquote>
<p>简单说就是，将底层抽象。这个带来的好处就是：不用去操心底层的具体情况，程序不需要是适配不同的底层。</p>
<p>早在IBM公司为了解决底层的接口不同，提出了<strong>虚拟化</strong>的技术，从而实现程序跨平台这一功能。</p>
<p>虚拟化在<code>资源管理方面</code>能够提高资源的利用率，但是不会减少资源的占用率。利用率和占用率是不同的两个概念，所以要辨别好。</p>
<p>那么虚拟化是如何提高资源的利用率呢？</p>
<p>虽然我们能够在一个操作系统里面运行多个程序，但是前提是程序的本身不存在冲突，例如不能使用同一个端口等。虚拟化技术就是把程序隔离在不同环境里，既然环境不同，那么所运行的程序自然也就不会产生冲突。</p>
<p>接着来看虚拟机，虚拟机虽然屏蔽了底层。例如Java的JVM虽然能够使代码编写一次，到处运行【在开发过程中，无需关注不同系统提供的API】。但是虚拟机有个缺点就是所有指令都需要经过<code>虚拟机监视器</code>的处理才转为机器所能够识别的机器码。</p>
<p>容器技术是一种全新的虚拟化技术。</p>
<blockquote>
<p>容器化是这操作系统自身提供的一些接口，能够让应用程序间能够互不干扰的运行</p>
</blockquote>
<p>容器相对于虚拟机来说就是，<code>容器根本不对指令进行转换</code>，所以在性能上，容器要远远好过虚拟机。</p>
<p><img src="http://cdn.xuxiaojin.com/202004302305_269.png" alt=""></p>
<h2 id="Docker技术实现"><a href="#Docker技术实现" class="headerlink" title="Docker技术实现"></a>Docker技术实现</h2><blockquote>
<p>Docker技术的实现有三大技术，包括命名空间(Namespaces)、控制组(Control Groups)、联合文件系统(Union File System)</p>
</blockquote>
<p><img src="http://cdn.xuxiaojin.com/202005010717_323.png" alt=""></p>
<h3 id="命名空间Namespaces"><a href="#命名空间Namespaces" class="headerlink" title="命名空间Namespaces"></a>命名空间Namespaces</h3><p>命名空间我第一个想到的是C++中的<code>using namespaces</code>，在编程语言中Namespaces主要是为了划分不同模块，区别不同模块中相同的命名。</p>
<p>在操作系统也有相同的实现，能够将计算机资源进行切割和划分，形成各自独立的空间。例如<code>PID Namespaces</code>表示可以造就一个独立的进程运行空间，在该空间里，进程号又可以从1开始，不会感知到外界系统的其他进程或者其他命名空间中运行的程序。</p>
<p>Docker利用PID Namespaces实现了容器中隔离程序中运行的进程隔离。</p>
<h3 id="控制组Control-Groups"><a href="#控制组Control-Groups" class="headerlink" title="控制组Control Groups"></a>控制组Control Groups</h3><blockquote>
<p>CGroups用于控制计算机资源，与Namespaces不同的时，控制的是硬件资源。同时还有分配资源的作用</p>
</blockquote>
<p>分配资源是很重要的，可以指定某个隔离环境对任意资源的占用值和利用率。在实际生产环境中很重要，因为在实际生产环境中会有业务系统和监控系统，不希望监控系统占用的资源过多。</p>
<h3 id="联合文件系统Union-File-System"><a href="#联合文件系统Union-File-System" class="headerlink" title="联合文件系统Union File System"></a>联合文件系统Union File System</h3><blockquote>
<p>联合文件系统是指能够同时挂载不同实际文件或文件夹到同一个目录下，从而实现联合文件的结构</p>
</blockquote>
<p>联合文件系统不属于虚拟化技术，但是Docker却将其引入，从而实现Docker的快启快停的目的，并且不会占用太多的文件系统。</p>
<p>在Git中，我们虽然每个版本都commit，但是文件占用却没有增加，就是因为使用了联合文件系统。</p>
<h2 id="docker理念"><a href="#docker理念" class="headerlink" title="docker理念"></a>docker理念</h2><p>Docker推崇的是一种轻量级容器结构，例如要搭建一套LAMP结构。在docker中的最佳实践就是分别基于Apach、Mysql、Php三个镜像建立容器。然后分别运行。</p>
<p>所以自己一开始中的mysql啥的都是一个镜像一个容器做法符合Docker理念</p>
<h2 id="四大组成对象"><a href="#四大组成对象" class="headerlink" title="四大组成对象"></a>四大组成对象</h2><h3 id="image镜像"><a href="#image镜像" class="headerlink" title="image镜像"></a>image镜像</h3><blockquote>
<p>镜像指的是虚拟环境中运行的原始的文件系统</p>
</blockquote>
<p>docker基于联合文件系统，创建了一种<code>增量式的镜像结构</code></p>
<p><img src="http://cdn.xuxiaojin.com/202005011019_227.png" alt=""></p>
<p>每次对镜像的修改都会将以上修改成一个新的镜像层。所以这种结构，镜像实质上是无法修改的，每次修改都会产生新的镜像。</p>
<h3 id="Container容器"><a href="#Container容器" class="headerlink" title="Container容器"></a>Container容器</h3><blockquote>
<p>在docker中，容器就是用来隔离虚拟环境的基础设施。</p>
<p>如果把镜像理解为类，那么容器就是实例</p>
</blockquote>
<h3 id="Network网络"><a href="#Network网络" class="headerlink" title="Network网络"></a>Network网络</h3><p>网络在分布式系统中非常常见，用来在程序间作为信息或数据的交换。但是现在我对docker提供强大的网络还不是很了解</p>
<p><img src="http://cdn.xuxiaojin.com/202005011418_625.png" alt=""></p>
<h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><blockquote>
<p>在Docker中，将数据共享或持久化的文件和目录称为数据卷</p>
</blockquote>
<h2 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h2><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><p>通过执行<code>docker images</code>可以查看当前存放和管理的镜像</p>
<p><img src="http://cdn.xuxiaojin.com/202005011510_910.png" alt=""></p>
<p>可以查看镜像ID，构建时间，占用空间</p>
<h3 id="镜像命名"><a href="#镜像命名" class="headerlink" title="镜像命名"></a>镜像命名</h3><p><img src="http://cdn.xuxiaojin.com/202005011512_621.png" alt=""></p>
<p>镜像命名</p>
<ul>
<li>username:主要用于识别上传镜像的不同用户</li>
<li>repository:用于识别进行的内容</li>
<li>tag:表示镜像的版本，用来区分进行内容的不同细节</li>
</ul>
<p>另外docker镜像缺省的时候会用<code>latest</code>标签，所以在我们不需要软件的迭代周期，就可以下载软件的最新版。</p>
<h2 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h2><p>类似于git一样，镜像仓库就是用来托管镜像。借助镜像仓库，我们得到一个镜像的中转站，可以把开发环境所使用的镜像推送到镜像仓库，然后在测试或者生产环境上拉取它们。</p>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p><code>docker pull</code>拉取镜像，会先下载该镜像所需的所有镜像层，然后组装。如果本地有的话，就会跳过该镜像的下载。</p>
<p><img src="http://cdn.xuxiaojin.com/202005011613_238.png" alt=""></p>
<h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><p>可以通过<code>docker hub</code>来搜索镜像。也可以通过执行<code>docker search images</code></p>
<h3 id="管理镜像"><a href="#管理镜像" class="headerlink" title="管理镜像"></a>管理镜像</h3><p>通过<code>docker inspect</code>查看对应镜像的信息</p>
<h3 id="参数识别"><a href="#参数识别" class="headerlink" title="参数识别"></a>参数识别</h3><p>只要我们传入的参数能够表示对应的镜像就可以，不需要传入多余的参数</p>
<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>删除镜像的命令是<code>docker rmi</code></p>
<h2 id="容器生命周期"><a href="#容器生命周期" class="headerlink" title="容器生命周期"></a>容器生命周期</h2><p><img src="http://cdn.xuxiaojin.com/202005011607_887.png" alt=""></p>
<ul>
<li><code>created</code>表示容器已经被创建，容器所需的相关资源已经准备好了，但是容器中的程序还没有运行</li>
<li><code>running</code>表示容器正在运行，即容器中的程序正在运行</li>
<li><code>paused</code>表示容器已暂停，容器中所有程序都处于暂停状态</li>
<li><code>stopped</code>表示容器已经停止，所占用的资源和沙盘依然存在</li>
<li><code>deleted</code>表示容器已经被删除</li>
</ul>
<h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><p>选择好镜像后可以通过执行<code>docker create</code>来创建容器，但是如果每次都是通过容器ID来操作容器显得很繁琐，所以可以通过容器名来操作容器。</p>
<p>在创建容器的时候，可以通过<code>--name</code>来配置容器名</p>
<blockquote>
<p>非常推荐使用–name来配置容器名，这样方便后续操作</p>
</blockquote>
<p><img src="http://cdn.xuxiaojin.com/202005011619_540.png" alt=""></p>
<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>通过<code>docker create</code>启动的容器处于created状态，内部应用程序还没有执行，所以可以通过<code>docker start</code>命令来启动它。</p>
<p><img src="http://cdn.xuxiaojin.com/202005011628_6.png" alt=""></p>
<p>当然我们可以通过<code>docker run</code>将上述的create和start两个操作合并成同一步</p>
<p>并且要注意的是，通常我们启动一个容器喜欢将其放到后台运行，而不是衔接到当前的控制台上，所以需要加一个参数<code>-d</code>，这个会告诉docker程序启动后在后台运行与控制台分离</p>
<p><code>docker run --name nginx -d ningx</code></p>
<h3 id="管理容器"><a href="#管理容器" class="headerlink" title="管理容器"></a>管理容器</h3><p>我们可以通过<code>docker ps</code>查看当前正在运行的容器的信息。如果要查看更加详细的信息加上<code>-a</code>选项</p>
<h3 id="停止和删除容器"><a href="#停止和删除容器" class="headerlink" title="停止和删除容器"></a>停止和删除容器</h3><p>将正在运行的程序停止，通过执行<code>docker stop</code>即可。但是该操作，内部所做的修改仍然存在可以通过执行<code>docker start</code>继续执行</p>
<p>如果需要完全删除容器，可以通过<code>docker rm</code>命令将容器删除</p>
<p><del>如果是在运行中的容器默认是不可删除的，可以添加<code>-f</code>选项</del></p>
<blockquote>
<p>一个比较好的实践是如果容器短期内不会使用，就要将其删掉</p>
</blockquote>
<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>通过<code>docker exec</code>进入容器，相当于我们可以通过docker exec帮助我们在容器里面执行命令</p>
<p>比较好的操作是通过docker exec命令来启动sh或者bash</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it nginx bash</span><br></pre></td></tr></table></figure>

<p><code>-i</code>表示保持输入流，使用它才能保证控制台程序能够正确识别我们的命令</p>
<p><code>-t</code>表示启动一个为终端，形成与bash的交互，如果没有的话，没法看到bash内部的执行结果</p>
<p>【一直都跑这个代码，但是不知道什么意思】</p>
<h3 id="衔接到容器"><a href="#衔接到容器" class="headerlink" title="衔接到容器"></a>衔接到容器</h3><p>通过执行<code>docker attach</code>将当前的输入输出流连接到指定的容器</p>
<h2 id="容器网络"><a href="#容器网络" class="headerlink" title="容器网络"></a>容器网络</h2><h3 id="沙盒Sandbox"><a href="#沙盒Sandbox" class="headerlink" title="沙盒Sandbox"></a>沙盒Sandbox</h3><p>提供给容器虚拟的网路栈，隔离了容器网络与宿主主机网络，形成了完全独立的容器网络环境</p>
<h3 id="网路Network"><a href="#网路Network" class="headerlink" title="网路Network"></a>网路Network</h3><p>Docker内部的虚拟子网，网络内的参与者相互可见并能够通讯</p>
<h3 id="端点Endpoint"><a href="#端点Endpoint" class="headerlink" title="端点Endpoint"></a>端点Endpoint</h3><p>位于容器与网络隔离墙上的洞，其主要目的是形成一个可以控制的突破封闭的网路环境出入口</p>
<h3 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h3><p>在<code>docker create</code>或者<code>docker run</code>的时候创建<code>--link</code>选项进行配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql</span><br><span class="line">docker run -d --name webapp --link mysql webapp</span><br></pre></td></tr></table></figure>

<p>在webapp中只需要通过mysql这个名字就可以访问到</p>
<p><code>jdbc:mysql://mysql:3306/webapp</code>,不需要知道具体的Ip</p>
<h3 id="暴露端口"><a href="#暴露端口" class="headerlink" title="暴露端口"></a>暴露端口</h3><p>容器虽然运行了，但是并不代表可以随便访问。我们只能访问暴露出来的接口。</p>
<p>可以通过<code>--expose</code>选项暴露接口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=yes --expose 13306 --expose 23306 mysql:5.7</span><br></pre></td></tr></table></figure>

<h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><p>如果从容器外要访问容器提供的服务。我们可以把容器的端口映射到宿主操作系统的端口上，从外部访问宿主操作系统的端口，数据请求就会自动发送给与之关联的容器端口。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name nginx -p 80:80 -p 443:443 nginx</span><br></pre></td></tr></table></figure>

<p><code>-p &lt;ip&gt;:&lt;host-port&gt;:&lt;container-port&gt;</code>其中ip是宿主机器监听的ip，默认是0.0.0.0，host-port与container-port分别是宿主操作系统端口与容器的端口。这两者可以不一样。</p>
<p>通过docker ps，可以通过-&gt;标记了端口的映射关系</p>
<p><img src="http://cdn.xuxiaojin.com/202005011859_727.png" alt=""></p>
<h2 id="挂载方式"><a href="#挂载方式" class="headerlink" title="挂载方式"></a>挂载方式</h2><p>Docker提供三种试用不同场景的文件系统挂载方式</p>
<p><img src="http://cdn.xuxiaojin.com/202005011938_995.png" alt=""></p>
<ul>
<li><code>Bind Mount</code>能够直接将宿主操作系统中目录和文件挂载容器内的文件系统中。通过指定容器外的路径和容器内的路径，就可以形成挂载的关系。在容器内外对文件的读写都是互相可见的。</li>
<li><code>Volume</code>从宿主操作系统中挂载目录到容器内，只需要指定容器内的目录，不需要关系具体挂在到了宿主操作系统中的哪里</li>
<li><code>Tmpfs Mount</code>支持挂载系统内存中一部分到容器的文件系统里去</li>
</ul>
<h3 id="挂载文件到容器"><a href="#挂载文件到容器" class="headerlink" title="挂载文件到容器"></a>挂载文件到容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name nginx -v /webapp/html:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure>

<p><code>-v &lt;host-path&gt;:&lt;container-path&gt;</code>hostpath，containerpath分别表示宿主操作系统中的目录和容器中的目录。</p>
<p>定义目录的时候必须使用绝对路径</p>
<p>通过执行<code>docker inspect</code>中的<code>Mounts</code>可以看到数据挂载相关的部分。</p>
<h3 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h3><p>数据卷的本质是宿主操作系统上的一个目录，这个目录存放在Docker内部，接受Docker管理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name webapp -v /webapp/storage webapp</span><br></pre></td></tr></table></figure>

<p><code>-v &lt;name&gt;:&lt;container-path&gt;</code></p>
<p>两个容器可以通过挂载相同的数据卷来共享数据</p>
<p>可以通过<code>docker volume ls</code>查看已经创建的数据卷</p>
<h3 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h3><p>可以通过执行<code>docker volume rm volumename</code>删除掉没有被引用的数据卷。</p>
<p>如果在创建数据卷的时候，没有命名，那么很难被删除掉。可以通过下面三种方法</p>
<ol>
<li>docker rm -v containername 通过删除容器一起把关联的数据卷删除掉</li>
<li>docker volume rm 查看，找到没有关联的数据卷</li>
<li>docker volume prune可以删除掉没有被容器引用的数据卷</li>
</ol>
<p><img src="http://cdn.xuxiaojin.com/202005012013_132.png" alt=""></p>
<h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>数据卷容器指的就是没有一个具体的应用，甚至不需要运行。主要是为了定义一个或者多个数据卷并持有它们的引用</p>
<p><img src="http://cdn.xuxiaojin.com/202005012017_363.png" alt=""></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name appdata -v /webapp/storage ubuntu</span><br><span class="line">docker run -d --name webapp --volumes-from appdata webapp</span><br></pre></td></tr></table></figure>

<p><code>--volumes-from</code>打通了容器间文件系统的管理</p>
<h3 id="数据卷备份与恢复"><a href="#数据卷备份与恢复" class="headerlink" title="数据卷备份与恢复"></a>数据卷备份与恢复</h3><p>要备份数据卷，需要先通过一个临时容器，将要备份的目录和数据卷都挂载在这个容器上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm --volumes-from appdata -v /backup:/backup ubunt tar cvf /backup/backup.tar /webapp/storage</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202005012058_8.png" alt=""></p>
<p>恢复数据卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm --volumes-from appdata -v /backup:/backup ubuntu tar xvf /backup/backup.tar -C /webapp/storge --strip</span><br></pre></td></tr></table></figure>

<h2 id="保存和共享镜像"><a href="#保存和共享镜像" class="headerlink" title="保存和共享镜像"></a>保存和共享镜像</h2><h3 id="提交容器更改"><a href="#提交容器更改" class="headerlink" title="提交容器更改"></a>提交容器更改</h3><p>将容器中修改的内容保存成镜像的命令是<code>docker commit</code>，提交之后可以在本地镜像里中找到<code>docker images</code>。可以在提交容器更改的时候给一个提交信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit -m "Configuration" webapp</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202005012109_912.png" alt=""></p>
<h3 id="给镜像命名"><a href="#给镜像命名" class="headerlink" title="给镜像命名"></a>给镜像命名</h3><p>提交更新后的镜像没有<code>tag</code>和<code>repository</code></p>
<p>通过<code>docker tag</code>给镜像取名字</p>
<p><img src="http://cdn.xuxiaojin.com/202005012112_774.png" alt=""></p>
<p>也可以通过<code>docker tag</code>对已经存在的镜像命名，但是两者引用这相同的镜像层。对应的image id一样。</p>
<p><img src="http://cdn.xuxiaojin.com/202005012114_572.png" alt=""></p>
<blockquote>
<p>也可以通过使用docker commit -m”…” container repository:tag</p>
</blockquote>
<h3 id="镜像迁移"><a href="#镜像迁移" class="headerlink" title="镜像迁移"></a>镜像迁移</h3><p>通过执行<code>docker save</code>将镜像导出去</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker save -o ./webapp.tar webapp:1.0</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202005012119_665.png" alt=""></p>
<p><img src="http://cdn.xuxiaojin.com/202005012120_98.png" alt=""></p>
<h3 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h3><p>与<code>docker save</code>相对的是<code>docker load</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker load -i ./test.tar</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202005012125_623.png" alt=""></p>
<blockquote>
<p>通过docker save和docker load同时能够导出和恢复多个镜像</p>
</blockquote>
<h3 id="导出和导入容器"><a href="#导出和导入容器" class="headerlink" title="导出和导入容器"></a>导出和导入容器</h3><p>可以直接通过<code>docker export</code>和<code>docker import</code></p>
<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><blockquote>
<p>dockerfile包含了构建镜像过程中需要执行的命令和其他操作</p>
</blockquote>
<p>dockerfile内容比较简单一种是注释行，一种是指令行</p>
<h3 id="dockerfile的结构"><a href="#dockerfile的结构" class="headerlink" title="dockerfile的结构"></a>dockerfile的结构</h3><ul>
<li>基础指令：用于定义镜像的基础和性质</li>
<li>控制指令：描述镜像在构建过程中需要执行的命令</li>
<li>引入指令：用于将外部文件直接引入构建镜像的内部</li>
<li>执行指令：指定在启动的时候需要执行的脚本或者命令</li>
<li>配置指令：对网络、用户等内容进行配置</li>
</ul>
<h3 id="常见的dockerfile指令"><a href="#常见的dockerfile指令" class="headerlink" title="常见的dockerfile指令"></a>常见的dockerfile指令</h3><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>可以通过from指令指定一个基础镜像，接下来的指令都是基于这个基本镜像所展开</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> &lt;image&gt; [AS &lt;name&gt;]</span><br><span class="line"><span class="keyword">FROM</span> &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]</span><br><span class="line"><span class="keyword">FROM</span> &lt;image&gt;[@&lt;digest&gt;][AS &lt;name&gt;]</span><br></pre></td></tr></table></figure>

<p>####RUN</p>
<p>RUN用于向控制台发送命令的指令，在RUN指令之后，我们可以拼接上需要的命令，在构建Docker就会执行这些命令，把对系统文件的修改记录下俩，形成镜像的变化</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> &lt;<span class="built_in">command</span>&gt;</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">"executable"</span>,<span class="string">"param1"</span>,<span class="string">"param2"</span>]</span></span><br></pre></td></tr></table></figure>

<h4 id="ENTRYPOINT和CMD"><a href="#ENTRYPOINT和CMD" class="headerlink" title="ENTRYPOINT和CMD"></a>ENTRYPOINT和CMD</h4><p>通过ENTRYPOINT和CMD实现在容器启动的时候，根据镜像所定义的命令启动容器中进程号为1的进程</p>
<h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>EXPOSE指定容器明确暴露的端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</span><br></pre></td></tr></table></figure>

<h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>直接帮助用户定义数据卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">VOLUME ["/data"]</span><br></pre></td></tr></table></figure>

<h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>通过执行<code>docker build</code>构建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build ./webapp</span><br></pre></td></tr></table></figure>

<p>docker build后面接收的参数是本地路径或URL路径，不是dockerfile文件的路劲</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t webapp:latest -f ./webapp/a.Dockerfile ./webapp</span><br><span class="line">docker build -t webapp:latest ./webapp</span><br></pre></td></tr></table></figure>

<h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>通过配置文件，将与应用系统相关的软件和他们对应的容器进行配置。</p>
<p><img src="http://cdn.xuxiaojin.com/202005020835_423.png" alt=""></p>
<h3 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h3><p>通过执行<code>docker-compose up -d</code>会根据配置内容，创建所有的容器、网络、数据卷等内容，并启动</p>
<p>通过执行<code>docker-compose down</code>来停止</p>
<h2 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://juejin.im/book/5b7ba116e51d4556f30b476c/section" target="_blank" rel="noopener">开发者必备的 Docker 实践指南</a></p>
<p><img src="http://cdn.xuxiaojin.com/202005020944_533.png" alt=""></p>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Java拷贝与不可变类</title>
    <url>/1054070997.html</url>
    <content><![CDATA[<hr>
<h2 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h2><p>先区分一下<strong>对象拷贝</strong>和<strong>引用拷贝</strong></p>
<p>引用拷贝(reference copy)指的是如果有一个对象car,mycar执行这个对象，这个时候如果使用引用拷贝，会有两个变量mycar1,mycar2,但是只有一个对象car</p>
<p>不同于引用拷贝，对象拷贝指的是会有两个变量和两个对象。</p>
<h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>先来看一个浅拷贝的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Name name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Name name, Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Person originalPerson)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = originalPerson.name;</span><br><span class="line">        <span class="keyword">this</span>.address = originalPerson.address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name.printName();</span><br><span class="line">        <span class="keyword">this</span>.address.printAddress();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name.setFirstName(firstname);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Name name = <span class="keyword">new</span> Name(<span class="string">"xu"</span>, <span class="string">"jin"</span>);</span><br><span class="line">        Address address = <span class="keyword">new</span> Address(<span class="string">"shanghai"</span>, <span class="string">"fengxian"</span>);</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(name, address);</span><br><span class="line"></span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person(person);</span><br><span class="line"></span><br><span class="line">        person.printPerson();</span><br><span class="line">        person1.printPerson();</span><br><span class="line"></span><br><span class="line">        person.setFirstName(<span class="string">"xuxiao"</span>);</span><br><span class="line"></span><br><span class="line">        person.printPerson();</span><br><span class="line">        person1.printPerson();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202004272123_847.png" alt=""></p>
<p>从以上例子我们可以看到，两个person其实是共享了name和address，所以当某个对象修改了name的firstname，另外一个对象也会发生变化。</p>
<blockquote>
<p>自己在照着写demo的时候开始时没有写正确的。</p>
<p>我写的是setName</p>
<p>细想一下，如果我是setName的话，相当于把这个person的Name指向了一个新对象。</p>
</blockquote>
<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Person originalPerson)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="keyword">new</span> Name(originalPerson.name.getFirstName(), originalPerson.name.getLastName());</span><br><span class="line">        <span class="keyword">this</span>.address = originalPerson.address;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202004272132_401.png" alt=""></p>
<p>深度拷贝符合我们的预期。</p>
<p>所以我们写代码的时候要小心拷贝引起的代码侵入问题。</p>
<h2 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h2><p>现在的计算机一般是多核的，所以每个核都有自己的缓存，数据会被存储到缓存里，以减少读取所花费的时间。</p>
<p>但是就会引发一个并发线程的问题，多个线程运行在不同核看到的数据可能是不同的。</p>
<p>volatile就是解决这个。</p>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><blockquote>
<p>final修饰的类不能被继承，修饰的变量不能被修改，修改的方法不能被重写。</p>
</blockquote>
<p>###变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> variable;</span><br><span class="line">variable = <span class="number">1</span>;</span><br><span class="line">variable = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202004272025_724.png" alt=""></p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">finaldemo</span> <span class="keyword">extends</span> <span class="title">methoddemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">finaldemo</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printdemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"from son"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202004272029_521.png" alt=""></p>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p><img src="http://cdn.xuxiaojin.com/202004272029_146.png" alt=""></p>
<p>通过以上实验，我们知道了上面那句话描述的是什么了。</p>
<h2 id="final和immutable"><a href="#final和immutable" class="headerlink" title="final和immutable"></a>final和immutable</h2><p>原则:fianl并不等于immutable</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        strList.add(<span class="string">"Hello"</span>);</span><br><span class="line">        strList.add(<span class="string">"world"</span>);</span><br></pre></td></tr></table></figure>

<p>这段代码只能保证strList这个引用不能被赋值，但是该对象不被final影响，所以可以添加元素</p>
<p><img src="http://cdn.xuxiaojin.com/202004272037_434.png" alt=""></p>
<p>如果有应用需要，可以使用List.of创建。</p>
<h2 id="immutable类"><a href="#immutable类" class="headerlink" title="immutable类"></a>immutable类</h2><p>如何用Java写出不可变类呢？</p>
<blockquote>
<ol>
<li>变量都应该为private</li>
<li>对于可变的变量还要加上final修饰</li>
<li>所有变量都不要有setter</li>
<li>在构造函数里要使用深拷贝</li>
<li>在getter里不直接返回对象，而是要使用copy-on-write原则，复制一个对象出去</li>
</ol>
</blockquote>
<p>对于第五点还不是很清楚，我们来实验一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Name name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Name name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="keyword">new</span> Name(name.getFirstName(), name.getLastName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Name <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name.getFirstName() + <span class="string">"_"</span> + name.getLastName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="keyword">new</span> Name(<span class="string">"xu"</span>, <span class="string">"jin"</span>));</span><br><span class="line">        person.printPerson();</span><br><span class="line">        Name name = person.getName();</span><br><span class="line">        name.setFirstName(<span class="string">"xuxiao"</span>);</span><br><span class="line">        person.printPerson();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202004272241_399.png" alt=""></p>
<p>看到吗？这个结果不是我们想要的，我们想要的不可变的类，是要求它的状态都不可变。</p>
<p>所以需要对该getter进行修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Name <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Name(name.getFirstName(), name.getLastName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://dzone.com/articles/spring-auto-wiring-beans-with-autowired-annotation" target="_blank" rel="noopener">Shallow vs. Deep Copy in Java</a></li>
<li><a href="http://vmlens.com/articles/cp/why_volatile/" target="_blank" rel="noopener">Why do we need the volatile keyword?</a></li>
<li><a href="https://dzone.com/articles/how-to-create-an-immutable-class-in-java" target="_blank" rel="noopener">How to Create an Immutable Class in Java</a></li>
</ol>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java泛型与SpringBoot统一异常处理</title>
    <url>/751276839.html</url>
    <content><![CDATA[<hr>
<p>这是一篇大杂烩，包含着泛型和SpringBoot的统一异常处理。</p>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="为什么使用泛型"><a href="#为什么使用泛型" class="headerlink" title="为什么使用泛型"></a>为什么使用泛型</h3><p>在使用<code>collection</code>类的时候，经常写这些代码<code>List&lt;String&gt; list=new ArrayList&lt;&gt;()</code>，这里面就设计到泛型。</p>
<p>啥是泛型？</p>
<p>泛型就像是c++中模板，可以把类型作为参数传入到类，接口，方法中。</p>
<p>为什么使用泛型？先来看一段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generics</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">        Integer a=list.get(<span class="number">0</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202004211539_791.png" alt=""></p>
<p>这段代码无法通过编译，很奇怪是不是，我明明传入的是int，但是返回的结果是Object。虽然我可以通过强制类型转换，但是这样代码是不是多余的呢？</p>
<p>这就是泛型的一个作用，就时告诉编译器，这个类型是什么。它可以在编译器帮你检查代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList();</span><br><span class="line">       list.add(<span class="number">100</span>);</span><br><span class="line">       list.add(<span class="string">"hello world"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202004211846_483.png" alt=""></p>
<h3 id="泛型是怎么工作的"><a href="#泛型是怎么工作的" class="headerlink" title="泛型是怎么工作的"></a>泛型是怎么工作的</h3><p>首先第一个是<code>type safety</code>，编译器保证在只能用正确的类型，任何不正确的类型插入都会在编译器时期报错。</p>
<p>例如上面讲到的检查代码</p>
<p>第二个就是<code>type erasure</code>类型清除，讲的是在生成字节码的过程中，则会把对应的泛型删去，跟没有泛型的代码字节码一摸一样。为的是兼容前面的Java版本。</p>
<p>类型清除就会有一个冲突，我们一起来看<strong>泛型数组</strong>[Genrics Type Arrays]</p>
<p>数组要求其是相同类型的集合，也就是说，在代码运行的过程中，如果插入不是同一类型的值，则会抛出异常，那么就需要在运行过程中保持类型的信息。这样就跟上面的类型清除产生了冲突。所以基于上面的冲突，泛型数组是不存在的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericArray</span> &lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> T[] notYetInstantiatedArray;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T[] array=<span class="keyword">new</span> T[<span class="number">6</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码就是冲突，不能实例化。</p>
<h3 id="泛型类和泛型接口"><a href="#泛型类和泛型接口" class="headerlink" title="泛型类和泛型接口"></a>泛型类和泛型接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoClass</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DemoClass&lt;String&gt; instance=<span class="keyword">new</span> DemoClass&lt;&gt;();</span><br><span class="line">        instance.set(<span class="string">"lokesh"</span>);</span><br><span class="line">        instance.set(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的类确定了类型为T，并且我们规定它的类型为String，所以我们set(1)的时候在编译的时候就会报错。</p>
<h3 id="泛型方法和构造函数"><a href="#泛型方法和构造函数" class="headerlink" title="泛型方法和构造函数"></a>泛型方法和构造函数</h3><p>泛型方法和泛型类的区别就是，类型的范围。作用的范围就在方法体里。</p>
<h2 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h2><p>先来说说<strong>异常处理</strong>，我最近一直学异常，然后看到有关spring的统一异常处理。原先一直用错，在每一层中使用try…exception，然后前端乱用。</p>
<p>先来看一下怎么用</p>
<h3 id="统一返回结果集"><a href="#统一返回结果集" class="headerlink" title="统一返回结果集"></a>统一返回结果集</h3><p>不要使用Map，不容易控制，需要定义一个Java实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exceptiondemo.common;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Collection&lt;T&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ResultBean</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultBean <span class="title">error</span><span class="params">(<span class="keyword">int</span> code,String message)</span></span>&#123;</span><br><span class="line">        ResultBean resultBean=<span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(code);</span><br><span class="line">        resultBean.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultBean <span class="title">success</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ResultBean resultBean=<span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">0</span>);</span><br><span class="line">        resultBean.setMessage(<span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;V&gt; <span class="function">ResultBean&lt;V&gt; <span class="title">success</span><span class="params">(Collection&lt;V&gt; data)</span></span>&#123;</span><br><span class="line">        ResultBean resultBean=<span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">0</span>);</span><br><span class="line">        resultBean.setMessage(<span class="string">"success"</span>);</span><br><span class="line">        resultBean.setData(data);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="后端统一处理异常"><a href="#后端统一处理异常" class="headerlink" title="后端统一处理异常"></a>后端统一处理异常</h3><p>业务处理既然不抛出异常，那么就必然会抛出到controller层。就必须使用AOP对Controller层对所有方法处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exceptiondemo.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">unknownException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">"发生了未知异常"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> ResultBean.error(<span class="number">1</span>, <span class="string">"系统出现错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h3><p>业务层处理的代码就比较简单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exceptiondemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.exceptiondemo.common.ResultBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/goods"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResultBean&lt;HashMap&lt;String, String&gt;&gt; getAll() &#123;</span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"商品"</span>, <span class="string">"王老吉"</span>);</span><br><span class="line">        List&lt;HashMap&lt;String, String&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        result.add(map);</span><br><span class="line">        <span class="keyword">return</span> ResultBean.success(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/good"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">getGood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"运行异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202004212036_773.png" alt=""></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="http://zhaojun.im/springboot-exception/" target="_blank" rel="noopener">Spring MVC/Boot 统一异常处理最佳实践</a></li>
<li><a href="https://howtodoinjava.com/java/generics/complete-java-generics-tutorial/#why_generics" target="_blank" rel="noopener">Complete Java Generics Tutorial</a></li>
<li><a href="https://github.com/jiayouxujin/ExceptionHandler" target="_blank" rel="noopener">一个小demo</a></li>
</ol>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql实战笔记</title>
    <url>/422085835.html</url>
    <content><![CDATA[<h2 id="SQL查询语句是如何执行的"><a href="#SQL查询语句是如何执行的" class="headerlink" title="SQL查询语句是如何执行的"></a>SQL查询语句是如何执行的</h2><h3 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -h ip -P port -u root -p</span><br></pre></td></tr></table></figure>

<p>查看当前连接的状态</p>
<p><img src="http://cdn.xuxiaojin.com/202004162042_967.png" alt=""></p>
<p>连接包括<strong>长连接</strong>和<strong>短连接</strong>,长连接是指在建立成功连接后，如果有持续的请求，则就一直使用这个连接。短连接则在每次执行完很少的几次查询后就断开连接。</p>
<p>因为建立连接的过程是很复杂的，比较消耗性能。所以要尽量减少建立连接的动作，就是尽量使用<code>长连接</code>。</p>
<p>使用长连接会导致内存涨的比较快。</p>
<p>###分析器</p>
<p>这个跟编译原理的有点像，就是对输入的语句进行词法分析，识别当前语句需要做什么？然后根据语法规则判断是否满足语法。如果语句不对在这个时候会报错。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一条sql查询语句的执行过程是：先建立连接，但cp三次握手成功后，建立成功，之后会进行查询缓存，查看该查询时候有执行过【但是在Mysql8.0之后这个缓存的特性就被取消掉了，因为实在太鸡肋了，如果更新某个表之后，该表的全部缓存就全部清除了】。然后就是分析器，分析输入的语句是要执行什么内容，根据语法规则查看是否有语法错误。接着是进入到优化器，因为某一条语句的执行顺序可能有多种，mysql会进行筛选出某种顺序。最后是执行器，先检查是否有权限，如果有则根据该表的存储引擎进行执行该语句。</p>
<h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://time.geekbang.org/column/article/68319" target="_blank" rel="noopener">基础架构：一条SQL查询语句是如何执行的？</a></p>
<h2 id="SQL更新语句是如何执行的"><a href="#SQL更新语句是如何执行的" class="headerlink" title="SQL更新语句是如何执行的"></a>SQL更新语句是如何执行的</h2><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><p>redo log具有crash-safe的功能，在系统宕机后，提交的数据仍然不会丢失。在更新数据的时候，会现将其记录到redo log里，然后在写到内存上。最后在空闲的时候，写到硬盘上，然后把redo log上的记录擦掉。如果redo log满了的话，则会停下来，将数据写到硬盘上，然后擦掉redo log上的记录。</p>
<h3 id="bin-log"><a href="#bin-log" class="headerlink" title="bin log"></a>bin log</h3><p>redo log是InnoDB特有的，bin log是一开始的时候myisam中没有一个日志文件，作为插件放到server层中，所有存储引擎都可以用的<code>归档日志</code></p>
<table>
<thead>
<tr>
<th>特性</th>
<th>redo log</th>
<th>bin log</th>
</tr>
</thead>
<tbody><tr>
<td>在哪里</td>
<td>InnoDB特有，其他存储引擎所没有</td>
<td>在server层，所有存储引擎都可以使用</td>
</tr>
<tr>
<td>日志格式</td>
<td>物理日志，在这个页上作了什么改动，不会记录更新之后的状态</td>
<td>逻辑日志，记录某个语句的原始逻辑，在某个ID上更新。有两种格式statement格式记录的是sql语句，row格式记录的是行的内容，记录两条，更新前后</td>
</tr>
<tr>
<td>日志大小</td>
<td>循环写，会用完，在擦掉</td>
<td>追加写，不会覆盖前面的日志</td>
</tr>
</tbody></table>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>对某个更新语句进行如下操作：前置步骤跟查询语句很像，在执行器中，首先通过存储引擎查找该行数据，如果在内存中，则直接返回给执行器。如果不在，则从硬盘中取到内存中去，在返回给执行器。然后执行器拿到该数据，进行更新，调用存储引擎的接口写到内存中去，更新redo log，并且redo log变为prepare的状态，告知执行器执行完成了，可以提交事务。执行器生成该语句的bin log，并且把<strong>bin log写到硬盘上</strong>。执行器调用存储引擎的提交事务的接口，redo log状态变为commit</p>
<h3 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h3><p>前面我们提到redo log有prepare和commit的两种状态，这个就是<strong>两阶段提交</strong>。有什么作用呢？保证两个日志的逻辑一致。</p>
<p>在prepare和commit 中间的redo log 和bin log要么都完成，要么都不完成。</p>
<blockquote>
<p>如果先写redo log，在写bin log的时候发生crash，不使用两阶段的话，就会出现通过bin log恢复数据的时候数据发生不一致。</p>
<p>先写bin log,后写redo log发生crash的时候，则数据就不会更新，但是会把更新的记录写到bin log，如果使用bin log恢复数据，也会出现数据不一致的情况。</p>
</blockquote>
<h3 id="两个参数"><a href="#两个参数" class="headerlink" title="两个参数"></a>两个参数</h3><p><img src="http://cdn.xuxiaojin.com/202004162217_756.png" alt=""></p>
<p><code>innodb_flush_log_at_trx_commit</code>表示每次事务的redo log都会<code>直接</code>持久化到磁盘，这样可以保证异常重启之后数据不会丢失。</p>
<p><img src="http://cdn.xuxiaojin.com/202004162218_312.png" alt=""></p>
<p><code>sync_binlog</code>表示每次事务的bin log都会持久化到磁盘，也可以保证重启后，数据不会丢失。</p>
<h3 id="原文链接-1"><a href="#原文链接-1" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://time.geekbang.org/column/article/68633" target="_blank" rel="noopener">日志系统：一条SQL更新语句是如何执行的？</a></p>
<h2 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h2><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><blockquote>
<p>读未提交：可以查看到还未提交的数据</p>
<p>读提交：只能看到已经提交的数据</p>
<p>可重复读：在事务过程中看到的数据是一样的</p>
<p>串行化：通过加锁，来保证读写冲突</p>
</blockquote>
<p><img src="http://cdn.xuxiaojin.com/202004180810_150.png" alt=""></p>
<p>通过查看可以知道这是一个可重复读级别的事务隔离。可重复读的一个应用场景就是在<strong>数据校对逻辑</strong>。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在实现事务隔离的时候，靠的是<strong>视图</strong>，可重复读在启动的过程中就是创建一个视图，并且在整个事务期间，都以该视图为准。读提交是在SQL语句执行的时候进行创建的。读未提交是直接返回记录上的新值。串行化是通过加锁来避免并行访问。</p>
<p>因为不同时刻启动的事务会有不同的read-view，所以同一条记录在数据库中就会存在多个版本，这就是MVCC多版本并发控制。这些回滚日志，会在没有用的时候删除掉。所以尽量不要用长事务，占用的空间比较大。</p>
<p>可以在<code>infomation_schema</code>库中查询事务。</p>
<h3 id="原文链接-2"><a href="#原文链接-2" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://time.geekbang.org/column/article/68963" target="_blank" rel="noopener">03 | 事务隔离：为什么你改了我还看不见？</a></p>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><p><code>哈希</code>结构适用于等值查询，不使用于区间查询</p>
<p><code>有序数组</code>在等值和区间查询都很好，不过对于数据的插入比较消耗性能，所以适用于静态数据</p>
<h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><p>根据叶子节点的内容，索引类型分为主键索引和非主键索引。</p>
<p>主键索引的叶子节点是整行的数据，也叫做聚簇索引</p>
<p>非主键索引的叶子节点内容主键的内容，也叫做非聚簇索引。</p>
<p>基于非主键索引进行查询的话，找到主键后会回到主键索引树里面去查找，这个情况称为回表，所以要尽量使用<code>主键索引</code>。</p>
<h3 id="在业务场景下尽量使用自增主键"><a href="#在业务场景下尽量使用自增主键" class="headerlink" title="在业务场景下尽量使用自增主键"></a>在业务场景下尽量使用自增主键</h3><ol>
<li>自增主键每次插入都是追加的，不会出现数据的挪动</li>
<li>空间存储上，非主键索引如果使用业务字段的话，可能导致叶子节点的存储空间比较大。</li>
</ol>
<h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>覆盖索引是一个常见的性能优化手段。在查询时，只需要返回非主键的叶子节点，即主键信息。就可以大大减少回表操作。</p>
<h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><p>在使用索引进行查询的时候，我们可以通过<code>最左前缀原则</code>，例如有个以名字的索引，我们可以通过like ‘%徐%’,使用该索引。利用该原则，我们只要合理安排联合主键的顺序，就能够减少维护索引。</p>
<h3 id="索引下推原则"><a href="#索引下推原则" class="headerlink" title="索引下推原则"></a>索引下推原则</h3><p>在索引遍历的过程中，会对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表的次数。</p>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>索引是一个很好的数据库调优的工具，但是自己一直接触的数据不是很大，所以一直忽略这个问题，我发现自己的业务上其实有很多地方可以使用索引来进行调优。</p>
<p>几个原则要注意：要使用自增主键，尽可能使用主键查询。要利用覆盖索引，最左前缀索引，索引下推原则合理的设计索引的字段，减少数据库回表的次数。设计索引的时候要记得简单想一下回表的次数是不是比较大。</p>
<h3 id="原文链接-3"><a href="#原文链接-3" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://time.geekbang.org/column/article/69236" target="_blank" rel="noopener">深入浅出索引</a></p>
<h2 id="全局锁和表锁"><a href="#全局锁和表锁" class="headerlink" title="全局锁和表锁"></a>全局锁和表锁</h2><h3 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h3><p>全局锁就是对整个数据库进行加锁，一般的应用场景是做<code>全库逻辑备份</code>，以前的做法就是通过FTWRL<code>flush tables with read lock</code>这种做法，使得数据库只能读，这个是比较危险的。因为意味着业务停摆。但是在做逻辑备份的时候，这个数据库如果不保证只读的话可能会出现数据不一致的问题。</p>
<p>在InnoDB中可以使用<code>可重复读</code>这个事务隔离级别，来避免在备份过程中出现数据不一致，并且保证整个过程中，业务还是可以运行的。这就是MVCC多版本并发控制。mysql官方自带的<code>mysqldump</code>使用参数-single-transaction的时候就会启动一个事务，来确保拿到一致性视图。</p>
<p>但是在不支持事务的引擎中，FTWRL还是很有必要的。</p>
<h3 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h3><p>就是对表进行加锁，可以通过<code>lock table read/write</code>，要注意的是在锁表的时候，不仅对其他线程有限制作用，对自己的线程也有限制的作用。</p>
<p>另一类表锁是MDL，在访问一个表的时候会被自动加上，为了保证在读取数据的正确性。业务上可能出现给某个表加上一个字段，导致整个数据库的崩溃。</p>
<p>因为MDL不会在语句执行完后就释放，而是事务提交后才释放，每个读锁都需要申请到MDL读锁，如果此时MDL读锁被写锁阻塞，将导致后面所有请求都将阻塞。</p>
<p>安全的给小表添加字段是增加一个等待记住。nowait/wait n</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tabl_name <span class="keyword">nowait</span> <span class="keyword">add</span> <span class="keyword">column</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tabl_name <span class="keyword">wait</span> n <span class="keyword">add</span> <span class="keyword">column</span></span><br></pre></td></tr></table></figure>

<h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>在InnoDB中，使用全局备份的话，用上可重复读的隔离级别。</p>
<p>表锁的话，如果有比其更细的锁，则一般不会使用，所以表锁的应用场景不大。但是要小心在线上给表增加字段，一定要添加一个<code>等待机制</code></p>
<h3 id="原文链接-4"><a href="#原文链接-4" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://time.geekbang.org/column/article/69862" target="_blank" rel="noopener">全局锁和表锁 ：给表加个字段怎么有这么多阻碍？</a></p>
<h2 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h2><p><code>行锁</code>是InnoDB特有的。比如两个事务，事务A更新某一条记录，事务B也要更新某一条记录，只有在事务A更新完后，事务B才能更新。</p>
<h3 id="两阶段锁"><a href="#两阶段锁" class="headerlink" title="两阶段锁"></a>两阶段锁</h3><p>跟前面的redo log和bin log有点像，我们这个两阶段锁就是表示：在事务中，行锁只有在需要的时候才添加上去，但是并不是不需要就马上释放，而是在事务结束后才释放的。</p>
<p>以上的描述就导致了一个设计原则：要把最可能造成冲突的锁往后放。</p>
<h3 id="死锁和死锁检测"><a href="#死锁和死锁检测" class="headerlink" title="死锁和死锁检测"></a>死锁和死锁检测</h3><p>面对在数据库上发生死锁我们有两种方法，一种是等待超时。但是这个默认的时间是无法接受的。一种是死锁检测，会检测死锁是否发生，如果发生会回滚某个事务，让其它事务可以继续运行。但是死锁检测在热点数据的更新上，将会发生CPU跑满的现象，因为死锁检测比较消耗性能。</p>
<p>所以解决热点问题的话，可以在进入行锁线程上的数量做一个排队。</p>
<h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p>在执行线上数据操作的时候，要小心两阶段原则是否使得业务受到影响，就是一次性锁住的行不要太多。要尽量分批操作。</p>
<h3 id="原文链接-5"><a href="#原文链接-5" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://time.geekbang.org/column/article/70215" target="_blank" rel="noopener">行锁功过：怎么减少行锁对性能的影响？</a></p>
<h2 id="事务隔离-1"><a href="#事务隔离-1" class="headerlink" title="事务隔离"></a>事务隔离</h2><h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><p>一致性视图，在Mysql中有两种视图，一种就是创建的view，还有一种就是为了保证一致性而创建的视图。</p>
<p>一致性视图其实还是比较好理解的，为了保证事务隔离中的可重复读和读提交。</p>
<p>记住一个row trx_id这就是前面提到的MVCC，每一行的记录都会存在多个版本。所以当前事务可以看到的版本就是三个原则</p>
<ol>
<li>版本为提交，不可见</li>
<li>版本已提交，但是在视图创建后提交的，不可见</li>
<li>版本已提交，是在视图创建前提交的，可见</li>
</ol>
<p>除此之外，还有一个<code>当前读</code>的概念，就是在update的时候会读取当前数据的最新值，不会存在版本问题，只有在查看数据的时候才有上面的三种原则。</p>
<p>###原文链接</p>
<p><a href="https://time.geekbang.org/column/article/70562" target="_blank" rel="noopener">事务到底是隔离的还是不隔离的？</a></p>
<h2 id="普通索引和唯一索引"><a href="#普通索引和唯一索引" class="headerlink" title="普通索引和唯一索引"></a>普通索引和唯一索引</h2><p>普通索引与唯一索引的一个区别就是在插入时，唯一索引会检查是否满足唯一性，而这个检查就会到这一些性能上的问题。</p>
<h3 id="查询过程"><a href="#查询过程" class="headerlink" title="查询过程"></a>查询过程</h3><p>查询过程是这样的，如果是唯一索引找到后直接回表就行，而普通索引找到后回表，还会继续找到第一个不符合条件的数据。如果该字段在业务上是唯一的话，那么这两种类型的索引在查询上都没有较大的差别。</p>
<h3 id="更新过程"><a href="#更新过程" class="headerlink" title="更新过程"></a>更新过程</h3><p>这里要提到一个<code>change buffer</code>，在更新的过程中，如果该数据页在内存中则直接更新，如果不在的话，会先将数据更新到change buffer，在后面读取到内存中在进行merge，或者通过mysql自带的线程更新到硬盘中去，即大的提高了更新的效率。</p>
<p>现在来看这两种索引，会面临两种场景</p>
<p>如果都在内存中：那么唯一索引和普通索引都会直接更新</p>
<p>如果在硬盘中：唯一索引因为要做唯一性检验，所以需要从硬盘中取出来，然后更新，不会使用change buffer。普通索引会直接更新到change buffer。所以普通索引在更新的时候比唯一索引要好。</p>
<h3 id="change-buffer的应用场景"><a href="#change-buffer的应用场景" class="headerlink" title="change buffer的应用场景"></a>change buffer的应用场景</h3><p>如果一个数据在更新后马上就会读取到，那么就应该关掉change buffer，因为这个时候会多一个change buffer的写过程。</p>
<p>不过虽然这么说，但是change buffer在大表中性能还是比较可靠的。</p>
<h3 id="change-buffer和redo-log"><a href="#change-buffer和redo-log" class="headerlink" title="change buffer和redo log"></a>change buffer和redo log</h3><p>在前面我们提到，如果一条sql更新语句，会将数据先记录到redo log中，这个跟change buffer有什么关系？<br>实际上redo log记录的是物理日志，就是指做了什么变化，如果当前该更新语句，是写到change buffer，那么redo log就会记录更新change buffer.</p>
<h3 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3><p>如果业务上允许的话，尽量建议使用普通索引，因为change buffer会比较大的提高整体的性能。</p>
<h3 id="原文链接-6"><a href="#原文链接-6" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://time.geekbang.org/column/article/70848" target="_blank" rel="noopener">普通索引和唯一索引，应该怎么选择？</a></p>
<h2 id="索引的选择"><a href="#索引的选择" class="headerlink" title="索引的选择"></a>索引的选择</h2><h3 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h3><p>查询某条语句的性能:<code>explain</code></p>
<p>有时候mysql的优化器会选择错索引，这个时候就可以通过force index或者limit来引诱优化器选择正确的索引。</p>
<p>还有就是执行<code>analyze table tal_name</code>可以重新统计索引信息，可以通过<code>show index from tab_name</code>查看索引信息。</p>
<p>查看性能可以通过explain或者使用慢日志可以查看一些不符合预期的执行sql语句。</p>
<h3 id="原文链接-7"><a href="#原文链接-7" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://time.geekbang.org/column/article/71173" target="_blank" rel="noopener">MySQL为什么有时候会选错索引？</a></p>
<h2 id="给字符串添加索引"><a href="#给字符串添加索引" class="headerlink" title="给字符串添加索引"></a>给字符串添加索引</h2><h3 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h3><p>直接创建完整的字符串索引，占据的空间比较大，所以一般是不可取的。一般是通过截取一些，创建前缀索引。但是使用前缀索引也会出现一些问题，增加回表的次数，无法使用覆盖索引。</p>
<p>所以一般选择截取的长度是区分度比较大，可以通过`count(distance，)</p>
<p>###原文链接</p>
<p><a href="https://time.geekbang.org/column/article/71492" target="_blank" rel="noopener">怎么给字符串字段加索引？</a></p>
<h2 id="flush-脏页"><a href="#flush-脏页" class="headerlink" title="flush 脏页"></a>flush 脏页</h2><h3 id="SQL突然变慢"><a href="#SQL突然变慢" class="headerlink" title="SQL突然变慢"></a>SQL突然变慢</h3><p>有什么自己就会有这种感觉，一般请求的执行速度都很快。但是突然某一条数据的执行速度很慢。这是因为此时正在进行刷脏页的操作。因为平时都会把记录记在redo log，所以当把数据写到硬盘上的时候，就会有性能上的需要。</p>
<p>有四种场景会需要进行刷脏页的操作</p>
<ol>
<li>redo log写满的时候，这个时候需要清除redo log，把数据写到硬盘上，然后才能继续更新</li>
<li>内存满了，内存里面淘汰的数据页是脏页，即跟硬盘里面的数据不一样，需要更新成一致的。所以需要控制脏页比例，来避免这个问题</li>
<li>数据库空闲的时候，会自动刷脏页</li>
<li>数据库停机前，手动进行刷脏页</li>
</ol>
<h3 id="刷脏页机制"><a href="#刷脏页机制" class="headerlink" title="刷脏页机制"></a>刷脏页机制</h3><p>mysql的刷脏页的控制策略</p>
<ol>
<li>首先要告诉mysql的IO能力，建议设置成硬盘的IOPS。硬盘的IOPS可以通过fio工具测试</li>
</ol>
<p><img src="http://cdn.xuxiaojin.com/202004181735_315.png" alt=""></p>
<ol start="2">
<li>连坐机制，如果刷到的脏页周围正好也是脏页则也会一起刷掉。对于硬盘来说这是很好的机制，但是对于使用SSD的话，可以把这个参数设置为0，否则一次刷脏页等待的时间会比较长【在mysql8.0中，这个参数以及默认设置为0了】</li>
</ol>
<p><img src="http://cdn.xuxiaojin.com/202004181737_743.png" alt=""></p>
<h3 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h3><p>刷脏页机制和redo log配合起来的话，使得数据库将随机写转为顺序写，大大提高性能。但是也会导致突然sql执行的比较慢。还是要注意</p>
<h3 id="原文链接-8"><a href="#原文链接-8" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://time.geekbang.org/column/article/71806" target="_blank" rel="noopener">为什么我的MySQL会“抖”一下？</a></p>
<h2 id="正确删除数据"><a href="#正确删除数据" class="headerlink" title="正确删除数据"></a>正确删除数据</h2><h3 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h3><p>对数据进行增删改，都会导致空间空洞。是的空间没有充分利用。</p>
<h3 id="删除的过程"><a href="#删除的过程" class="headerlink" title="删除的过程"></a>删除的过程</h3><p>删除数据的过程，并不是真正的删除，而是标记该位置是可复用的，该部分的空间是不回收的。</p>
<h3 id="重建表"><a href="#重建表" class="headerlink" title="重建表"></a>重建表</h3><p>重建表的过程就可以把这些空洞的表数据清除掉。</p>
<p>有两种方法，一种是自己进行创建一个临时表，然后把数据移动到该表中。一种是执行<code>alter table t</code>该方法实际是执行online DDL，Mysql会自动帮我们创建一个临时表，并且会把之后的更新写到日志里，online的意思就是指重建的过程，也可以进行更新。</p>
<h3 id="总结-10"><a href="#总结-10" class="headerlink" title="总结"></a>总结</h3><p>正确的删除数据，无法正确，因为删除的数据就只能在该位置标志为<code>可复用</code>为了回收这部分空间，需要进行<strong>重建表</strong>.</p>
<h3 id="原文链接-9"><a href="#原文链接-9" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://time.geekbang.org/column/article/72388" target="_blank" rel="noopener">为什么表数据删掉一半，表文件大小不变？</a></p>
<h2 id="Count"><a href="#Count" class="headerlink" title="Count(*)"></a>Count(*)</h2><h3 id="总结-11"><a href="#总结-11" class="headerlink" title="总结"></a>总结</h3><p>count(*)的执行过程，需要扫描表。所以当数据量很大的时候，这个语句的执行时间会比较长。如果业务上需要count()的需求，可以把计数存到表中。</p>
<h3 id="原文链接-10"><a href="#原文链接-10" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://time.geekbang.org/column/article/72775" target="_blank" rel="noopener">count(*)这么慢，我该怎么办？</a></p>
<h2 id="Order-By的工作方式"><a href="#Order-By的工作方式" class="headerlink" title="Order By的工作方式"></a>Order By的工作方式</h2><h3 id="总结-12"><a href="#总结-12" class="headerlink" title="总结"></a>总结</h3><p>面对原先的数据是无序的话，有两种order by排序算法。</p>
<p>全字段排序，如果mysql 判断出当前的数据比较少，可以放到sort_buffer，则将数据全部放到里面，然后进行排序，后直接返回</p>
<p>rowid排序，是因为mysql判断出排序的单行字段太长，则只能把需要排序的字段放到sort_buffer。然后排序完后，在回到表中返回结果。</p>
<p>相对于全字段排序，rowid排序会多查询一次。</p>
<h3 id="原文链接-11"><a href="#原文链接-11" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://time.geekbang.org/column/article/73479" target="_blank" rel="noopener">“order by”是怎么工作的？</a></p>
<h2 id="自增主键"><a href="#自增主键" class="headerlink" title="自增主键"></a>自增主键</h2><h3 id="存在哪里"><a href="#存在哪里" class="headerlink" title="存在哪里"></a>存在哪里</h3><p>在MyISAM是存在数据文件中</p>
<p>在InnoDB中，保存在内存中。5.6以前是存在内存中，发生crash则会重新计算。8.0是存在redo log，如果发生crash会恢复。</p>
<h3 id="修改机制"><a href="#修改机制" class="headerlink" title="修改机制"></a>修改机制</h3><p>如果插入的数据是0，null或者空，则会自动增加，增加的值为<code>auto_increment_offset</code>。如果是自己输入的值，也会保存进去。并且如果此时输入的值比自增的值要小，则自增的值不变。如果大的话，会重新计算自增的值。</p>
<h3 id="总结-13"><a href="#总结-13" class="headerlink" title="总结"></a>总结</h3><p>自增主键还是很有用的，不过不能保证连续这个要求。并且自增主键是会用完的，用完会出现一些问题需要处理。</p>
<h3 id="原文链接-12"><a href="#原文链接-12" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://time.geekbang.org/column/article/80531" target="_blank" rel="noopener">自增主键为什么不是连续的？</a></p>
<h2 id="索引字段做函数操作"><a href="#索引字段做函数操作" class="headerlink" title="索引字段做函数操作"></a>索引字段做函数操作</h2><h3 id="总结-14"><a href="#总结-14" class="headerlink" title="总结"></a>总结</h3><p>如果对索引字段进行函数，可能会破坏有序性，所以有可能不走索引。</p>
<p>如果进行类型转换也有可能出现不走索引的现象，所以一定要小心。</p>
<p>如果是字符与数字比较，会把字符转换为数字，隐式转换不会应用在字段上，所以还是会走索引。</p>
<p>但是如果是数字转字符，则会出现不走索引的情况。</p>
<p><img src="http://cdn.xuxiaojin.com/202004182114_30.png" alt=""></p>
<h3 id="原文链接-13"><a href="#原文链接-13" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://time.geekbang.org/column/article/74059" target="_blank" rel="noopener">为什么这些SQL语句逻辑相同，性能却差异巨大？</a></p>
]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA异常篇</title>
    <url>/901468754.html</url>
    <content><![CDATA[<h2 id="Exceptrion和Error"><a href="#Exceptrion和Error" class="headerlink" title="Exceptrion和Error"></a>Exceptrion和Error</h2><p><code>exception和error</code>都是继承throwable。其中exception是在程序运行过程中，可以预料的意外情况，<strong>应该被捕获，并进行相应处理</strong>。error是程序运行过程中，不大可能出现的情况，绝大多数的error都会使得程序处于不正常的情况。所以不需要对其进行处理。</p>
<h3 id="NoClassDefFoundError和ClassNotFoundException"><a href="#NoClassDefFoundError和ClassNotFoundException" class="headerlink" title="NoClassDefFoundError和ClassNotFoundException"></a>NoClassDefFoundError和ClassNotFoundException</h3><p><a href="https://dzone.com/articles/java-classnotfoundexception-vs-noclassdeffounderro" target="_blank" rel="noopener">ClassNotFoundException vs. NoClassDefFoundError</a></p>
<p>两个都发生在某个类在运行的时候没有找到，但是发生的条件不同。</p>
<p>ClassNotFoundException是在使用forName和loadClass的时候，该类不存在会抛出异常。</p>
<p>NoClassDefFoundError是在编译阶段存在，但是在运行阶段不存在该类时，会报错。</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="处理不当1"><a href="#处理不当1" class="headerlink" title="处理不当1"></a>处理不当1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个处理不当的原因是，该Exception会捕获所有异常，有时候会捕获我们不希望捕获的异常。【这个写法其实是自己特别是喜欢写的，要注意这个问题】</p>
<h3 id="处理不当2"><a href="#处理不当2" class="headerlink" title="处理不当2"></a>处理不当2</h3><p><strong>生吞异常</strong>，就是不将异常记录下来。而是直接忽视异常，这样会导致出现bug的时候，比较难以排查</p>
<h3 id="处理不当3"><a href="#处理不当3" class="headerlink" title="处理不当3"></a>处理不当3</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    。。</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    e.printStackTrace()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个输出的方式不好，因为<code>printStackTrace()</code>标准出错不是一个合适的输出选项，在复杂的系统中，无法判断输出到哪个地方去。【这也是我很喜欢写的一种方式，这种方式还得改】</p>
<p>###处理不当4</p>
<p>尽量不用try…catch包含一个很大的代码段，只要捕获必要的代码段就好</p>
<h2 id="try…with…resourse"><a href="#try…with…resourse" class="headerlink" title="try…with…resourse"></a>try…with…resourse</h2><p>try…with..resourse可以解决异常被覆盖的问题</p>
<blockquote>
<p>当catch也抛出异常的话，finally捕获的是catch抛出的异常，那么就有异常被覆盖了。</p>
</blockquote>
<p>但是一般用来一些资源的关闭。在try关键词后实例化一些实现了AutoCloseable接口的类，JVM将自动添加上close方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Main main1 = <span class="keyword">new</span> Main(<span class="string">"main1"</span>); Main main2 = <span class="keyword">new</span> Main(<span class="string">"main2"</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Initial"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="一些容易犯的错"><a href="#一些容易犯的错" class="headerlink" title="一些容易犯的错"></a>一些容易犯的错</h2><h3 id="考虑异常处理的范围"><a href="#考虑异常处理的范围" class="headerlink" title="考虑异常处理的范围"></a>考虑异常处理的范围</h3><ul>
<li>对于自定义的业务异常，以Warn级别记录基本信息后，转换为API包装体返回给API调用方</li>
<li>对于无法处理的系统异常，以Error级别记录基本信息后，转换为异常信息，以API包装体返回给API调用方</li>
</ul>
<hr>
<p>以上都是针对如何使用异常，接下来从JVM角度谈谈<strong>异常</strong></p>
<h2 id="JVM是如何捕获异常的"><a href="#JVM是如何捕获异常的" class="headerlink" title="JVM是如何捕获异常的"></a>JVM是如何捕获异常的</h2><p>在编译成字节码的过程中，每个方法都会有一个异常表(Exception table)，每个异常表里面包括四个from to target type，from..to表示try所监控的异常范围，target表示处理异常的范围，type是异常类型。</p>
<p>在程序运行的过程中，如果触发异常，那么会从上到下遍历该方法的异常表，如果找到对应的条目【即范围与捕获的异常一样】，JVM就转到target所对应的字节码。如果没有？那么会跳出当前方法的Java栈，从调用者的异常表中查找。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202004202020_224.png" alt=""></p>
<p>##创建异常的实例代价比较大</p>
<p>创建异常的实例，需要生成异常的轨迹栈，该操作会访问该线程的所有的Java栈帧。记录下信息，包括在第几行触发异常。</p>
<h2 id="finally一定执行"><a href="#finally一定执行" class="headerlink" title="finally一定执行"></a>finally一定执行</h2><p>为什么finally一定执行？其实这句话不太准确。</p>
<p>JVM会将finally这部分的代码优化，放到每个正常处理和异常处理路径出口，即try和catch的位置。</p>
<p>包括每个if else的出口</p>
<p>关于异常处理路径，会多生几个条目，类型是any,target指向最后的finally的位置。防止在catch也抛出异常，没有执行finally。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tryblock;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> catchblock;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> finallyblock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            tryblock=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            catchblock=<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            finallyblock=<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202004202030_712.png" alt=""></p>
<p>可以发现总共有三个finallyblock，所以一定会保证finally执行。</p>
<h3 id="特例"><a href="#特例" class="headerlink" title="特例"></a>特例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">          System.exit(-<span class="number">1</span>);</span><br><span class="line">      &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">          System.out.print(<span class="string">"form finally"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202004202035_488.png" alt=""></p>
<p>虽然看到finally是复制到try块中，但是执行该代码发现没有输出，这是因为<strong>System.exit</strong>会通过中断JVM的运行来停止运行程序。所以finally就无法运行。</p>
]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA进阶</title>
    <url>/3987141084.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>主要是笔记，为了加深影响，自己动手去实现这里的问题。</p>
<h2 id="ThreadLocal引发的问题"><a href="#ThreadLocal引发的问题" class="headerlink" title="ThreadLocal引发的问题"></a>ThreadLocal引发的问题</h2><p>前面学到ThreadLocal是为每个线程保存的一个变量。所以可能就会有这么一个场景，就是用这个保存某个值，这个值只属于该线程。但是这只是理想情况，有时候可能会出现问题。</p>
<p>为什么会有这种需求？因为有可能查询某个信息的代价太高，但是该线程调用了很多个方法，都需要该信息，所以需要存储到该线程的共享变量中。</p>
<p>来看代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; currentUserId = ThreadLocal.withInitial(() -&gt; <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"wrong"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map <span class="title">Wrong</span><span class="params">(@RequestParam(<span class="string">"userid"</span>)</span> <span class="keyword">int</span> userid) </span>&#123;</span><br><span class="line">       String before = Thread.currentThread().getName() + <span class="string">":"</span> + currentUserId;</span><br><span class="line">       currentUserId.set(userid);</span><br><span class="line">       String after = Thread.currentThread().getName() + <span class="string">":"</span> + currentUserId;</span><br><span class="line"></span><br><span class="line">       Map result = <span class="keyword">new</span> HashMap();</span><br><span class="line">       result.put(<span class="string">"before"</span>, before);</span><br><span class="line">       result.put(<span class="string">"after"</span>, after);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>这段代码，案例说应该是before是Null，after是对应的值</p>
<p><img src="http://cdn.xuxiaojin.com/202003232317_168.png" alt=""></p>
<p><img src="http://cdn.xuxiaojin.com/202003232317_236.png" alt=""></p>
<p>按理说是没有问题的，但是Tomcat是使用<code>线程池</code>，用线程池就会出现重用问题，很有可能before是前面遗留的值</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.tomcat.max-threads</span>=<span class="string">1</span></span><br></pre></td></tr></table></figure>

<p>然后在运行该程序就会出现问题。</p>
<p><img src="http://cdn.xuxiaojin.com/202003232320_262.png" alt=""></p>
<blockquote>
<p>虽然我们写的代码没有显示的开启多线程，但是运行的服务器就是在多线程上的，否则无法应对并发。而且为了减少创建进程的资源消耗，会使用线程池来处理请求。</p>
</blockquote>
<blockquote>
<p>如果需要使用ThreadLocal存储数据，则在<code>代码运行完，清除数据</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            String after = Thread.currentThread().getName() + <span class="string">":"</span> + currentUserId.get();</span><br><span class="line"></span><br><span class="line">            Map result = <span class="keyword">new</span> HashMap();</span><br><span class="line">            result.put(<span class="string">"before"</span>, before);</span><br><span class="line">            result.put(<span class="string">"after"</span>, after);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            currentUserId.remove();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="List的坑"><a href="#List的坑" class="headerlink" title="List的坑"></a>List的坑</h2><p>先来看一个<strong>Arrays.asList</strong>带来的坑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">       List list= Arrays.asList(arr);</span><br><span class="line">       System.out.println(list);</span><br><span class="line">       System.out.println(list.size());</span><br><span class="line">       System.out.println(list.get(<span class="number">0</span>).getClass());</span><br></pre></td></tr></table></figure>

<p>这个例子如果没有打印的话，很容易以为是<del>包含3个数字的List</del>，但其实不是这样的，打印出来的结果是指包含一个元素，并且元素的类型是数组。</p>
<blockquote>
<p>原因是只能把int装箱成Integer，不能把int数组装箱成Integer数组</p>
<p>不能直接使用Arrays.asList来转换基本数据类型</p>
</blockquote>
<p>解决方法1.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>解决方法2.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        List list = Arrays.stream(arr).boxed().collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<p>来看一个<strong>Arrays.asList</strong>返回的坑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr=&#123;<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>&#125;;</span><br><span class="line">        List list= Arrays.asList(arr);</span><br><span class="line">        arr[<span class="number">1</span>]=<span class="string">"4"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            list.add(<span class="string">"5"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(Arrays.toString(arr));</span><br><span class="line">        System.out.print(list);</span><br></pre></td></tr></table></figure>

<p>上面这段代码会打印出报错信息，并且最终arr和list都是1,4,3。简单可以推出<strong>Arrays.asList</strong>返回的List不支持增删操作</p>
<p>解决返回的List与原始数组共享数据的问题，可以通过new一个ArrayList,这样进行<code>解耦</code></p>
<p>解决方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr=&#123;<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>&#125;;</span><br><span class="line">        List list=<span class="keyword">new</span> ArrayList(Arrays.asList(arr));</span><br><span class="line">        arr[<span class="number">1</span>]=<span class="string">"4"</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            list.add(<span class="string">"5"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        System.out.println(list);</span><br></pre></td></tr></table></figure>

<h3 id="迷信大O复杂度"><a href="#迷信大O复杂度" class="headerlink" title="迷信大O复杂度"></a>迷信大O复杂度</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == size)</span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过LinkedList源码发现，其插入的复杂度为O(1)是要有那个要插入节点的指针，【需要通过循环获取到那个节点的Node，然后在执行插入操作，前者是有开销的】</p>
<p><strong>最好自己测试一下性能，不能迷行教科书</strong></p>
<h2 id="空值处理"><a href="#空值处理" class="headerlink" title="空值处理"></a>空值处理</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://time.geekbang.org/column/article/209494" target="_blank" rel="noopener">使用了并发工具类库，线程安全就高枕无忧了吗？</a></li>
</ol>
]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA基础——线程篇</title>
    <url>/3273698426.html</url>
    <content><![CDATA[<hr>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程是执行的一个入口，在Java的main方法中，都是使用一个线程执行main方法，执行结束后，线程就结束了。</p>
<p>线程在执行的过程中，遇到方法调用，都会在当前的<code>线程栈</code>增加一层。</p>
<h3 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h3><p><strong>线程sleep</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopALittle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        printStory(<span class="string">"今天是星期1，学习线程..."</span>,<span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStory</span><span class="params">(String Text,<span class="keyword">long</span> interval)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> ch:Text.toCharArray())&#123;</span><br><span class="line">            Thread.sleep(interval);</span><br><span class="line">            System.out.print(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>线程栈</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopAndSeeThreed</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        m1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        m2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        m3();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        m4();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        m5();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查看线程栈"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>m5</code>的地方进行debug的话，可以看到</p>
<p><img src="http://cdn.xuxiaojin.com/202003160921_599.png" alt=""></p>
<h3 id="创建自己的线程"><a href="#创建自己的线程" class="headerlink" title="创建自己的线程"></a>创建自己的线程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadAppMain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String TEXT=<span class="string">"今天是星期一，任务学习线程..."</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"启动线程的名字叫做:"</span>+Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1</span>;i++)&#123;</span><br><span class="line">            Thread myThread=<span class="keyword">new</span> Thread(<span class="keyword">new</span> PrintStoryRunnalbe(TEXT,<span class="number">200</span>),<span class="string">"我的线程名字"</span>+i);</span><br><span class="line">            myThread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"启动线程"</span>+Thread.currentThread().getName()+<span class="string">"执行结束！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintStoryRunnalbe</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String text;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> interval;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PrintStoryRunnalbe</span><span class="params">(String text, <span class="keyword">long</span> interval)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.text = text;</span><br><span class="line">            <span class="keyword">this</span>.interval = interval;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"执行这段代码的名字"</span>+Thread.currentThread().getName());</span><br><span class="line">            printStory(text,interval);</span><br><span class="line">            System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"执行代码结束！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStory</span><span class="params">(String text,<span class="keyword">long</span> interval)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> ch:text.toCharArray())&#123;</span><br><span class="line">            System.out.print(ch);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(interval);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里面我们通过实现<code>Runable</code>这个接口，可以创建线程，然后<code>.start()</code>就可以执行run函数，当这个函数执行完毕的时候，这个线程就相当于执行完成。</p>
<p>一个进程的结束，当所有线程都执行结束【除了守护线程】，改进程结束，而不是<code>main</code>这个线程执行结束！</p>
<h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>守护线程是为了其他线程提供服务的，如果一个进程中只有守护线程，那么这个进程结束！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">myThread.setDaemon(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>多线程如果操作同一个资源，可能会引起数据混乱</p>
<blockquote>
<p>简单想一下，许多人都同时对一个资源进行操作，没有先后顺序，最后的结果会很混乱</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThreadChangeData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DataHolder dataHolder = <span class="keyword">new</span> DataHolder();</span><br><span class="line">        Thread increase = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ChangeData(<span class="number">2</span>, Integer.MAX_VALUE / <span class="number">50</span>, dataHolder), <span class="string">"增加线程"</span>);</span><br><span class="line">        Thread decrease = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ChangeData(-<span class="number">2</span>, Integer.MAX_VALUE / <span class="number">50</span>, dataHolder), <span class="string">"减少线程"</span>);</span><br><span class="line"></span><br><span class="line">        increase.start();</span><br><span class="line">        decrease.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202003162213_382.png" alt=""></p>
<p>这个执行的结果很混乱，如果是一个加一个减的话，最后的结果就是0</p>
<h3 id="Synchronized同步"><a href="#Synchronized同步" class="headerlink" title="Synchronized同步"></a>Synchronized同步</h3><p>用来修改成员方法，表示同一个对象，同一时间只允许一个线程来执行，如果有多个线程要执行的话，其他线程只能等待</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">       num += delta;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202003162214_233.png" alt=""></p>
<p>执行的结果与我们所预想的一样！</p>
<p><code>Synchronized</code>也可以用来锁住代码块，其中锁住的代码称作临界区，这一块区域的代码，针对的对象同一时刻只能由一个线程来执行！！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span>(xxx.Class)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="wait-notify"><a href="#wait-notify" class="headerlink" title="wait notify"></a>wait notify</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadWaitNotify</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> workingSec=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> threadNum=<span class="number">5</span>;</span><br><span class="line">        Object locker=<span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;threadNum;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"开始工作...."</span>);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (locker)&#123;</span><br><span class="line">                        sleepSec(<span class="number">2</span>);</span><br><span class="line">                        System.out.println(Thread.currentThread().getName()+<span class="string">"进入等待..."</span>);</span><br><span class="line">                        locker.wait();</span><br><span class="line">                        System.out.println(Thread.currentThread().getName()+<span class="string">"继续工作..."</span>);</span><br><span class="line">                        sleepSec(<span class="number">2</span>);</span><br><span class="line">                        System.out.println(Thread.currentThread().getName()+<span class="string">"结束.."</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="string">"线程"</span>+i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sleepSec(workingSec);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"唤醒线程开始工作..."</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (locker)&#123;</span><br><span class="line">            locker.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"唤醒线程结束..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleepSec</span><span class="params">(<span class="keyword">int</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(TimeUnit.SECONDS.toMillis(time));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>wait和notify是类里面对线程进行操作，当某个对象执行wait的时候，会使得该线程失去锁，等待notify,该线程才有机会继续去争夺某个对象的锁！</p>
<h4 id="lose-notifycation"><a href="#lose-notifycation" class="headerlink" title="lose notifycation"></a>lose notifycation</h4><p>失去唤醒问题，可以通过将主线程的休眠时间与线程的休眠时间一样。</p>
<p>该问题是：有三个线程A,B,C。A等待，B唤醒，C等待，这个时候只有A被成功唤醒！</p>
<h2 id="生产者与消费者"><a href="#生产者与消费者" class="headerlink" title="生产者与消费者"></a>生产者与消费者</h2><p>该问题讲的是有一个任务队列</p>
<p>有很多线程是生产者负责往这个任务队列增加任务</p>
<p>很多线程是消费者负责消费该任务队列上的任务</p>
<p>要求满足生产者生产的任务有且仅有被消费一次。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProduceAndConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Queue&lt;String&gt; urls = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; consumer = <span class="keyword">new</span> Consumer&lt;&gt;(urls);</span><br><span class="line">        Produce&lt;String&gt; produce = <span class="keyword">new</span> Produce&lt;&gt;(urls, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Thread consumerThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        String url = consumer.consume();</span><br><span class="line">                        processURL(url);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">"消费者-"</span> + i);</span><br><span class="line"></span><br><span class="line">            consumerThread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            Thread produceThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        String url = produceURL();</span><br><span class="line">                        produce.produce(url);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="string">"生产者-"</span>+i);</span><br><span class="line">            produceThread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">produceURL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"www"</span> + Math.random() + <span class="string">".com"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">processURL</span><span class="params">(String url)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始处理： "</span> + url);</span><br><span class="line">        Thread.sleep(TimeUnit.SECONDS.toMillis(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"处理结束： "</span> + url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;T&gt; tasks;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Queue&lt;T&gt; queue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks=queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">consume</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (tasks)&#123;</span><br><span class="line">            <span class="keyword">while</span> (tasks.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"消费者线程进入等待   "</span>+Thread.currentThread().getName());</span><br><span class="line">                tasks.wait();</span><br><span class="line">            &#125;</span><br><span class="line">            T ret=tasks.poll();</span><br><span class="line">            tasks.notifyAll();</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Produce</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;T&gt; tasks;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> maxamount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Produce</span><span class="params">(Queue&lt;T&gt; tasks, <span class="keyword">long</span> maxamount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks = tasks;</span><br><span class="line">        <span class="keyword">this</span>.maxamount = maxamount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">(T task)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (tasks) &#123;</span><br><span class="line">            <span class="keyword">while</span> (tasks.size() &gt; maxamount) &#123;</span><br><span class="line">                System.out.println(<span class="string">"生产者线程进入等待  "</span> + Thread.currentThread().getName());</span><br><span class="line">                tasks.wait();</span><br><span class="line">            &#125;</span><br><span class="line">            tasks.add(task);</span><br><span class="line">            tasks.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程同步Join"><a href="#线程同步Join" class="headerlink" title="线程同步Join"></a>线程同步Join</h2><p><code>Join</code>表示等待某个线程死亡</p>
<blockquote>
<p>有两个线程A,B。其中线程A执行<code>B.join()</code>,这个时候在线程A里面就会等待线程B执行结束后，继续执行！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadJoin</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        List&lt;Thread&gt; threads = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"开始执行"</span>);</span><br><span class="line">                    slppeDec(<span class="number">2</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"执行结束"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">"线程_"</span> + i);</span><br><span class="line">            threads.add(thread);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        threads.forEach(Thread::start);</span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"线程等待"</span> + thread.getName() + <span class="string">"开始"</span>);</span><br><span class="line">            thread.join();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"线程等待"</span> + thread.getName() + <span class="string">"结束"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">slppeDec</span><span class="params">(<span class="keyword">int</span> time)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(TimeUnit.SECONDS.toMillis(time));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><blockquote>
<p>两个线程A,B。A请求资源a,b.B请求资源b,a。死锁的情况就是A请求的资源被锁掉，但是又不释放自己的资源，B请求的资源被锁掉，但是不释放自己的资源。双方请求的资源都被对方锁掉！！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        AppResource appResource = <span class="keyword">new</span> AppResource(<span class="string">"INPUT"</span>, <span class="string">"OUTPUT"</span>);</span><br><span class="line">        Thread task1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Task1(appResource), <span class="string">"Task-1"</span>);</span><br><span class="line">        Thread task2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Task2(appResource), <span class="string">"Task-2"</span>);</span><br><span class="line"></span><br><span class="line">        task1.start();</span><br><span class="line">        task2.start();</span><br><span class="line"></span><br><span class="line">        task1.join();</span><br><span class="line">        task2.join();</span><br><span class="line">        System.out.println(<span class="string">"程序执行结束"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202003170836_794.png" alt=""></p>
<p>可以通过<code>jps</code>查看当前所有在运行的进程，然后分析进程锁掉的原因！！</p>
<p><img src="http://cdn.xuxiaojin.com/202003170839_276.png" alt=""></p>
<p><code>jstack -l 2364</code>分析死锁的原因！</p>
<p><img src="http://cdn.xuxiaojin.com/202003170840_865.png" alt=""></p>
<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>ThreadLocal是每个线程单独享有的变量！！具体的值还是存在这个Thread里面</p>
<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>Timer()这个类可以用来定时任务，要求必须继承<code>TimerTask</code>,并且实现run方法！！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindABC</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String content = getWebContent();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(content.contains(<span class="string">"ABC"</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">"Find ABC"</span>+content);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"Not Found ABC"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getWebContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4096</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> ran = ((<span class="keyword">int</span>) (Math.random() * <span class="number">1000</span>)) % <span class="number">26</span>;</span><br><span class="line">            <span class="keyword">char</span> ch = (<span class="keyword">char</span>) (ran + <span class="string">'A'</span>);</span><br><span class="line">            stringBuilder.append(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>这个修饰的变量在程序运行的过程中，只能通过内存来获取，而不能通过CPU缓存来获取。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VAppMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VDataHolder vDataHolder=<span class="keyword">new</span> VDataHolder();</span><br><span class="line">        Thread addThread=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                vDataHolder.add();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"增加线程"</span>);</span><br><span class="line">        addThread.start();</span><br><span class="line"></span><br><span class="line">        Thread checkThread=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                vDataHolder.check();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"检查线程"</span>);</span><br><span class="line">        checkThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VDataHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> a, b, c, d, e, f;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">long</span> g;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a += <span class="number">1</span>;</span><br><span class="line">        b += <span class="number">1</span>;</span><br><span class="line">        c += <span class="number">1</span>;</span><br><span class="line">        d += <span class="number">1</span>;</span><br><span class="line">        e += <span class="number">1</span>;</span><br><span class="line">        f += <span class="number">1</span>;</span><br><span class="line">        g += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (g &gt; e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"got it "</span> + count++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为JMM会对代码进行优化，而对代码进行重排，如果上面没有添加volatile关键词修饰的话，check会碰到g大于e的时候。</p>
<p>添加<code>volatile</code>关键词后可以准确的获取某个变量的值！！</p>
<h2 id="同步控制包concurrent"><a href="#同步控制包concurrent" class="headerlink" title="同步控制包concurrent"></a>同步控制包concurrent</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>使用CAS，该指令对一个数据进行写操作都需要执行三个数据，<code>内存里数据的地址</code>，<code>旧的值</code>，<code>新的值</code>，只有当内存里的值域旧的值相等的时候，内存里才会被设置为新的值，并且这个操作是<code>原子操作</code></p>
<h3 id="Atomic类族"><a href="#Atomic类族" class="headerlink" title="Atomic类族"></a>Atomic类族</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicNumberAppMain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicLong atomicLong = <span class="keyword">new</span> AtomicLong();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> varlong = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        AtomicNumberAppMain atomicNumberAppMain = <span class="keyword">new</span> AtomicNumberAppMain();</span><br><span class="line">        <span class="keyword">int</span> loop = Integer.MAX_VALUE / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> parallel = <span class="number">10</span>;</span><br><span class="line">        List&lt;Thread&gt; threads = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; parallel; p++) &#123;</span><br><span class="line">            <span class="keyword">int</span> loopcount = loop / parallel;</span><br><span class="line">            <span class="keyword">if</span> (p == parallel - <span class="number">1</span>) &#123;</span><br><span class="line">                loopcount = loop - (loop / parallel) * (parallel - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> finalLoopCount = loopcount;</span><br><span class="line"></span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; finalLoopCount; i++) &#123;</span><br><span class="line">                    atomicNumberAppMain.atomicLong.incrementAndGet();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"Atomic tasks "</span> + (System.currentTimeMillis() - start));</span><br><span class="line">            &#125;);</span><br><span class="line">            thread.start();</span><br><span class="line">            threads.add(thread);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Thread primary = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loop; i++) &#123;</span><br><span class="line">                atomicNumberAppMain.varlong++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"Primary var tasks"</span> + (System.currentTimeMillis() - start));</span><br><span class="line">        &#125;);</span><br><span class="line">        primary.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">            thread.join();</span><br><span class="line">        &#125;</span><br><span class="line">        primary.join();</span><br><span class="line">        System.out.println(atomicNumberAppMain.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"AtomicNumberAppMain&#123;"</span> +</span><br><span class="line">                <span class="string">"atomicLong="</span> + atomicLong +</span><br><span class="line">                <span class="string">", varlong="</span> + varlong +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Atomic</code>类族可以使用CAS指令！这样可以保证数据是线程安全的。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://time.geekbang.org/course/detail/100027801-118028" target="_blank" rel="noopener">零基础学Java</a></li>
</ol>
]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理</title>
    <url>/294358179.html</url>
    <content><![CDATA[<hr>
<h2 id="正则文法和有限自动机"><a href="#正则文法和有限自动机" class="headerlink" title="正则文法和有限自动机"></a>正则文法和有限自动机</h2><p><code>词法分析</code>的工作就是将一个长长的字符串识别出一个个单词，这个单词就是token。</p>
<p>先来解析一下简单的语法<strong>age&gt;=45</strong>,其中应用到的有限自动机如下所示(<a href="https://time.geekbang.org/column/article/118378" target="_blank" rel="noopener">图片来源</a>)</p>
<p><img src="http://cdn.xuxiaojin.com/202003162016_141.png" alt=""></p>
<ul>
<li>标识符：以字母开头，后面的字符可以使字母或数字</li>
<li>比较符：&gt; GT和&gt;= GE</li>
<li>数字：全部由数字构成</li>
</ul>
<p>然后我参照部分代码写出的很<del>垃圾</del>的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BianYi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String TEXT = <span class="string">"age &gt;= 45"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Token token = <span class="keyword">new</span> Token();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StringBuilder tokenTxet = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TEXT = TEXT.trim();</span><br><span class="line">        DfaState state = initToken(TEXT.charAt(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; TEXT.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = TEXT.charAt(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">                <span class="keyword">case</span> Initial:</span><br><span class="line">                    state = initToken(ch);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Identifier:</span><br><span class="line">                    <span class="keyword">if</span> (Character.isDigit(ch) || Character.isLetter(ch)) &#123;</span><br><span class="line">                        tokenTxet.append(ch);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        state = initToken(ch);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> GT:</span><br><span class="line">                    <span class="keyword">if</span> (ch == <span class="string">'='</span>) &#123;</span><br><span class="line">                        state = GE;</span><br><span class="line">                        tokenTxet.append(ch);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        state = initToken(ch);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> GE:</span><br><span class="line">                    state=initToken(ch);</span><br><span class="line">                <span class="keyword">case</span> IntLiteral:</span><br><span class="line">                    <span class="keyword">if</span>(Character.isDigit(ch))&#123;</span><br><span class="line">                        tokenTxet.append(ch);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        state=initToken(ch);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    state=initToken(ch);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tokenTxet.length()&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            initToken(<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DfaState <span class="title">initToken</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tokenTxet.length()&gt;<span class="number">0</span>&amp;&amp;token.type!=Initial)&#123;</span><br><span class="line">            System.out.println(token.type+<span class="string">"\t"</span>+tokenTxet.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tokenTxet = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</span><br><span class="line">        DfaState dfaState = DfaState.Initial;</span><br><span class="line">        <span class="keyword">if</span> (Character.isLetter(ch)) &#123;</span><br><span class="line">            dfaState = DfaState.Identifier;</span><br><span class="line">            token.type = DfaState.Identifier;</span><br><span class="line">            tokenTxet.append(ch);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(ch)) &#123;</span><br><span class="line">            dfaState = DfaState.IntLiteral;</span><br><span class="line">            token.type = DfaState.IntLiteral;</span><br><span class="line">            tokenTxet.append(ch);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'&gt;'</span>) &#123;</span><br><span class="line">            dfaState = DfaState.GT;</span><br><span class="line">            token.type = DfaState.GT;</span><br><span class="line">            tokenTxet.append(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dfaState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后参照老师的代码，对自己的代码进行优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BianYi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StringBuilder tokentext;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Token&gt; tokens;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Token token;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String text1 = <span class="string">"age &gt;= 45"</span>;</span><br><span class="line">        System.out.println(<span class="string">"parse :"</span> + text1);</span><br><span class="line">        SimpleTokenReader tokenReader = tokensize(text1);</span><br><span class="line">        dump(tokenReader);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dump</span><span class="params">(SimpleTokenReader tokenReader)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"type\ttext"</span>);</span><br><span class="line">        Token token = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((token = (tokenReader.read())) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(token.getType() + <span class="string">"\t"</span> + token.getText());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DfaState <span class="title">initToken</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tokentext.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            token.text = tokentext.toString();</span><br><span class="line">            tokens.add(token);</span><br><span class="line"></span><br><span class="line">            tokentext = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            token = <span class="keyword">new</span> Token();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DfaState newState = DfaState.Initial;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Character.isLetter(ch)) &#123;</span><br><span class="line">            newState = DfaState.Identifier;</span><br><span class="line">            tokentext.append(ch);</span><br><span class="line">            token.type = DfaState.Identifier;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(ch)) &#123;</span><br><span class="line">            newState = DfaState.IntLiteral;</span><br><span class="line">            tokentext.append(ch);</span><br><span class="line">            token.type = DfaState.IntLiteral;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'&gt;'</span>) &#123;</span><br><span class="line">            newState = DfaState.GT;</span><br><span class="line">            tokentext.append(ch);</span><br><span class="line">            token.type = DfaState.GT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SimpleTokenReader <span class="title">tokensize</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        DfaState state = DfaState.Initial;</span><br><span class="line">        tokentext = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        token = <span class="keyword">new</span> Token();</span><br><span class="line">        tokens = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : text.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">                <span class="keyword">case</span> Initial:</span><br><span class="line">                    state = initToken(ch);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Identifier:</span><br><span class="line">                    <span class="keyword">if</span> (Character.isLetter(ch) || Character.isDigit(ch)) &#123;</span><br><span class="line">                        tokentext.append(ch);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        state = initToken(ch);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> IntLiteral:</span><br><span class="line">                    <span class="keyword">if</span> (Character.isDigit(ch)) &#123;</span><br><span class="line">                        tokentext.append(ch);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        state = initToken(ch);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> GT:</span><br><span class="line">                    <span class="keyword">if</span> (ch == <span class="string">'='</span>) &#123;</span><br><span class="line">                        state = DfaState.GE;</span><br><span class="line">                        tokentext.append(ch);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        state = initToken(ch);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> GE:</span><br><span class="line">                    state = initToken(ch);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    state = initToken(ch);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tokentext.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            initToken(<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleTokenReader(tokens);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleTokenReader</span> </span>&#123;</span><br><span class="line">        List&lt;Token&gt; tokenList;</span><br><span class="line">        <span class="keyword">int</span> pos;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SimpleTokenReader</span><span class="params">(List&lt;Token&gt; tokens)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.tokenList = tokens;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Token <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (pos &lt; tokenList.size()) &#123;</span><br><span class="line">                <span class="keyword">return</span> tokenList.get(pos++);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要是进行封装之类使得代码更加整洁，并且有一个地方自己没有做好就是，一开始状态可以先假设为<code>Init</code>,不管有没有字符！</p>
<p>即tokenSize的第一行代码，但是我自己的想法就是第一个字符去得到状态，如果没有字符，那么这个代码就会崩掉，说明自己这个地方还是没有写好！！</p>
<p><img src="http://cdn.xuxiaojin.com/202003162048_837.png" alt=""></p>
<h3 id="正则表达式描述标识符"><a href="#正则表达式描述标识符" class="headerlink" title="正则表达式描述标识符"></a>正则表达式描述标识符</h3><p>前面我们是通过文字描述标识符的构成方法，现在我们要用比较正规的方法就是<code>正则表达式</code></p>
<h3 id="标识符与关键字规则冲突"><a href="#标识符与关键字规则冲突" class="headerlink" title="标识符与关键字规则冲突"></a>标识符与关键字规则冲突</h3><p>按照我们上面的代码如果解析<code>int age&gt;=45</code>的时候会出现</p>
<p><img src="http://cdn.xuxiaojin.com/202003162058_847.png" alt=""></p>
<p>我们看到这个解析将标识符与关键词冲突。</p>
<blockquote>
<p>关键词是作为语法要求的词汇</p>
</blockquote>
<p>那么要将这两者区分，需要将自动机里面进行修改</p>
<p><img src="http://cdn.xuxiaojin.com/202003162102_961.png" alt=""></p>
<p>然后在<code>initToken</code>里面进行修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Character.isLetter(ch)) &#123;</span><br><span class="line">    	<span class="keyword">if</span>(ch==<span class="string">'i'</span>)&#123;</span><br><span class="line">            newState = DfaState.Id_int1;</span><br><span class="line">            token.type = DfaState.Id_int1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            newState = DfaState.Identifier;</span><br><span class="line">            token.type = DfaState.Identifier; </span><br><span class="line">        &#125;</span><br><span class="line">     tokentext.append(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在<code>tokenSize</code>里面也要进行修改，通过上面的自动机图，可以很好的进行修改逻辑。</p>
<p>上面这种方法是引入中间状态，但是如果在最后输出的时候，判断是否是关键字，如果是关键字的话将其type修改一下，这种方法也是可以的！</p>
<p>##语法分析器</p>
<p>声明语句左边是一个非终结符，右边是它的产生式，在<code>语法解析</code>的过程中，左边会被右边替代，直到最后全部都是终结符</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://time.geekbang.org/column/article/118378" target="_blank" rel="noopener">正则文法和有限自动机：纯手工打造词法分析器</a></li>
</ol>
]]></content>
      <tags>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>关于测试</title>
    <url>/473471075.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次想当一个“点工”，主力放在测试上。学点测试的思维！</p>
<h2 id="测试思维"><a href="#测试思维" class="headerlink" title="测试思维"></a>测试思维</h2><ol>
<li>输入正确，输出正确</li>
<li>输入不正确，输出不正确</li>
</ol>
<p>这两种思维都要有，否则容易陷入客户思维，想着客户应该是正确的输入</p>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><blockquote>
<p>单元测试是指，对软件中的最小可测试单元在程序其他部分相隔离的情况下进行检查和验证的工作</p>
<p>最小可测试单元通常是指函数或者类</p>
</blockquote>
<p>设计程序</p>
<ol>
<li>正确的功能逻辑，会有哪几种正常的输入</li>
<li>是否有需要处理的各种边界</li>
<li>潜在的非法输入</li>
</ol>
<h3 id="单元测试用例"><a href="#单元测试用例" class="headerlink" title="单元测试用例"></a>单元测试用例</h3><p>是一个输入和输出的集合，必须通过逻辑预测输出，然后与输入得到的输出进行对比</p>
<h3 id="开展单元测试"><a href="#开展单元测试" class="headerlink" title="开展单元测试"></a>开展单元测试</h3><ol>
<li>底层模块和核心模块的测试中才会采用单元测试</li>
<li>单元测试框架和测试代码覆盖率(JaCoCo)</li>
</ol>
<h2 id="自动化集成测试"><a href="#自动化集成测试" class="headerlink" title="自动化集成测试"></a>自动化集成测试</h2>]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>初识ElasticSearch,与SpringBoot整合</title>
    <url>/3710596472.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>早早听说这个用来做搜索的，这次特地做个demo来学习下。</p>
<p><a href="https://github.com/jiayouxujin/Elasticdemo" target="_blank" rel="noopener">Github代码链接</a></p>
<h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>是可搜索数据的最小单位，每个文档都有一个UID</p>
<p><img src="http://cdn.xuxiaojin.com/202003312144_730.png" alt=""></p>
<blockquote>
<p>_index表示文档所属的索引名</p>
<p>_type表示文档所属的类型名</p>
<p>_id表示围挡的唯一id</p>
<p>_source文档的原始的JSON数据</p>
<p>_version文档的版本信息</p>
<p>_score相关性打分</p>
</blockquote>
<p>###Type</p>
<p>7.0之前一个Index可以设置多个type.</p>
<p>6.2开始Type只创建一个_doc</p>
<h2 id="学习CURL"><a href="#学习CURL" class="headerlink" title="学习CURL"></a>学习CURL</h2><p>curl简单来说就是一个用来请求的工具。但是自己一直没有学习这种请求，今天发现它还是挺好用的，所以需要学习点这个的知识。</p>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><blockquote>
<p>curl [options] [url]</p>
</blockquote>
<p><code>curl baidu.com</code>默认情况下会使用http协议用来请求</p>
<p><img src="http://cdn.xuxiaojin.com/202003120943_280.png" alt=""></p>
<p><strong>将输出保存成文件</strong></p>
<p><code>curl -o|-O</code></p>
<p><img src="http://cdn.xuxiaojin.com/202003120946_870.png" alt=""></p>
<p><img src="http://cdn.xuxiaojin.com/202003120945_554.png" alt=""></p>
<p>如果不指定输出文件的名称，则会使用原始文件名</p>
<p>使用<code>-C -</code>恢复下载，如果你在下载的中途断掉，可以使用-C -从断掉的地方下载，而不是从头开始。</p>
<p><strong>例如</strong>：你正在下载ubuntu</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -O http://releases.ubuntu.com/18.04/ubuntu-18.04-live-server-amd64.iso</span><br></pre></td></tr></table></figure>

<p>然后突然断掉连接，可以使用下面语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -C - -O http://releases.ubuntu.com/18.04/ubuntu-18.04-live-server-amd64.iso</span><br></pre></td></tr></table></figure>

<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><table>
<thead>
<tr>
<th>Elasticsearch</th>
<th>关系型数据库</th>
</tr>
</thead>
<tbody><tr>
<td>INDEX</td>
<td>表</td>
</tr>
<tr>
<td>Document</td>
<td>行</td>
</tr>
<tr>
<td>FIELD</td>
<td>列</td>
</tr>
<tr>
<td>MAPPING</td>
<td>表结构</td>
</tr>
</tbody></table>
<h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>Elastic会索引所有字段，经过处理会写入一个反向索引，查询数据，通过该索引。</p>
<p>通过`curl -X GET ‘<a href="http://localhost:9200/_cat?indices?v&#39;" target="_blank" rel="noopener">http://localhost:9200/_cat?indices?v&#39;</a></p>
<p><img src="http://cdn.xuxiaojin.com/202003121122_344.png" alt=""></p>
<h3 id="document"><a href="#document" class="headerlink" title="document"></a>document</h3><p>这个跟mongodb有点像，每个Index里面的数据就是一个docuemtn，其实就是一个Json。可以要求同一个index里面的document不一样，但最好一样</p>
<h2 id="新建和删除Index"><a href="#新建和删除Index" class="headerlink" title="新建和删除Index"></a>新建和删除Index</h2><p>新建index，直接put请求，新建一个<code>weather</code>的例子</p>
<p><img src="http://cdn.xuxiaojin.com/202003121127_22.png" alt=""></p>
<p>发起<strong>delete</strong>请求</p>
<p><img src="http://cdn.xuxiaojin.com/202003121128_64.png" alt=""></p>
<h2 id="安装中文分词插件"><a href="#安装中文分词插件" class="headerlink" title="安装中文分词插件"></a>安装中文分词插件</h2><p>以window为例，进入elastic/bin执行<code>elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.1/elasticsearch-analysis-ik-7.6.1.zip</code></p>
<p>【如果出现卡住的话，可以尝试关掉，在执行】</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="创建一个Index"><a href="#创建一个Index" class="headerlink" title="创建一个Index"></a>创建一个Index</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">url:localhost:9200/sku</span><br><span class="line">method:PUT</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">                <span class="attr">"properties"</span>: &#123;</span><br><span class="line">                        <span class="attr">"sku_id"</span>: &#123;</span><br><span class="line">                                <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">"title"</span>: &#123;</span><br><span class="line">                                <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">                                <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">                                <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中<code>analyzer</code>是字段文本的分词器，<code>search_analyzer</code>是搜索词的分词器，<code>ik_max_word</code>是ik提供，对文本进行最大数量的分词。其中，我们要在某个字段(title)上进行全文搜索，所以要把数据类型定义为<code>text</code>。</p>
<p><img src="http://cdn.xuxiaojin.com/202003121720_281.png" alt=""></p>
<h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">url:localhost:9200/sku/_doc</span><br><span class="line">method:POST</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">"sku_id"</span>: <span class="number">100000177788</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"苹果坐垫"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202003121725_201.png" alt=""></p>
<h3 id="检索查询"><a href="#检索查询" class="headerlink" title="检索查询"></a>检索查询</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">url:localhost:9200/sku/_search?pretty</span><br><span class="line">method:GET</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span> : &#123; <span class="attr">"match"</span> : &#123; <span class="attr">"title"</span> : <span class="string">"苹果手机"</span> &#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">1037</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: &#123;</span><br><span class="line">      <span class="attr">"value"</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"relation"</span>: <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0.9251295</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"sku"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"18vwzHABfDBJq0DeBMbt"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.9251295</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"sku_id"</span>: <span class="number">100000177760</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"苹果 Apple iPhone XS Max (A2104) 256GB 金色 移动联通电信4G手机 双卡双待"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"sku"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2MsPznABfDBJq0DeL8YC"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.20726037</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"sku_id"</span>: <span class="number">100000177788</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"苹果坐垫"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"sku"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1svvzHABfDBJq0Deqcbe"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.11599465</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"sku_id"</span>: <span class="number">100002860826</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"烟台红富士苹果 5kg 一级铂金大果 单果230g以上 新鲜水果"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>url中的sku表示要在这个index中进行查询，_search是一个关键字，表示要进行搜索，pretty表示要格式化成json</p>
<h2 id="与SpringBoot的结合"><a href="#与SpringBoot的结合" class="headerlink" title="与SpringBoot的结合"></a>与SpringBoot的结合</h2><p>本文实战主要参考—<a href="https://www.jianshu.com/p/bd2da1cde6f5" target="_blank" rel="noopener">原文链接</a></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><strong>pom.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.data.elasticsearch.cluster-name</span>=<span class="string">elasticsearch</span></span><br><span class="line"><span class="meta">spring.data.elasticsearch.cluster-nodes</span>=<span class="string">127.0.0.1:9300</span></span><br><span class="line"><span class="meta">spring.data.elasticsearch.repositories.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p>这里解释一下为什么这里是9300，因为9200是http连接，9300是tcp连接</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>entity</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"blog"</span>, type = <span class="string">"java"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogModel</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6320548148250372657L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Field(type = FieldType.Date, format = DateFormat.basic_date)</span></span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date time;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>repository</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">BlogModel</span>,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>controller</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/blog"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BlogRepository blogRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">add</span><span class="params">(@RequestBody BlogModel blogModel)</span></span>&#123;</span><br><span class="line">        blogRepository.save(blogModel);</span><br><span class="line">        <span class="keyword">return</span> success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/search"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">search</span><span class="params">(@RequestParam String title)</span></span>&#123;</span><br><span class="line">        MatchQueryBuilder queryBuilder= QueryBuilders.matchQuery(<span class="string">"title"</span>,title);</span><br><span class="line"></span><br><span class="line">        Iterable&lt;BlogModel&gt; list=blogRepository.search(queryBuilder);</span><br><span class="line">        List&lt;BlogModel&gt; list1= Lists.newArrayList(list);</span><br><span class="line">        <span class="keyword">return</span> success(list1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">url:http://localhost:8080/blog/add</span><br><span class="line">method:POST</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">"title"</span>:<span class="string">"Elastic测试"</span>,</span><br><span class="line">	<span class="attr">"time"</span>:<span class="string">"2020-03-12"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202003122006_824.png" alt=""></p>
<h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">url:http://localhost:8080/blog/search?title=Elastic</span><br><span class="line">method:GET</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"SUCCESS"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"2cuYznABfDBJq0DeKcah"</span>,</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"Elastic"</span>,</span><br><span class="line">            <span class="attr">"time"</span>: <span class="string">"2020-03-12"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"2subznABfDBJq0DeTcZL"</span>,</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"Elastic测试"</span>,</span><br><span class="line">            <span class="attr">"time"</span>: <span class="string">"2020-03-12"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>到这里基本上过了一下，看了一下是什么东西，然后写了个demo–<a href="https://github.com/jiayouxujin/Elasticdemo" target="_blank" rel="noopener">Github链接</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://curl.haxx.se/docs/manual.html" target="_blank" rel="noopener">curl document</a></li>
<li><a href="https://linuxize.com/post/curl-command-examples/" target="_blank" rel="noopener">curl command in linux with examples</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener">全文搜索引擎 Elasticsearch 入门教程</a></li>
<li><a href="https://time.geekbang.org/column/article/208675" target="_blank" rel="noopener">如何用Elasticsearch构建商品搜索系统？</a></li>
<li><a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.1.5.RELEASE/reference/html/" target="_blank" rel="noopener">spring data elasticsearch</a></li>
</ol>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/136787160.html</url>
    <content><![CDATA[<h2 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><ul>
<li><code>man</code>命令，man命令一共有9章，代表所查询的命令不同的格式，例如：<code>man ls</code>这个代表的是shell命令行，<code>man 5 passwd</code>代表的是passwd这个文件。</li>
</ul>
<p><img src="http://cdn.xuxiaojin.com/202003090952_541.png" alt=""></p>
<p><code>man passwd</code>默认是第一章，shell脚本命令.</p>
<p><img src="http://cdn.xuxiaojin.com/202003090953_587.png" alt=""></p>
<ul>
<li><code>help</code>命令也是常用的帮助命令，不过该命令有两种形式</li>
</ul>
<blockquote>
<p>help cd</p>
<p>ls –help</p>
</blockquote>
<p>这两种格式的原因是因为内外部命令之分，自己直观的感觉是<code>cd help</code>会跑到help的文件夹下，如果执行<code>cd --help</code>则会报错</p>
<p><img src="http://cdn.xuxiaojin.com/202003091006_365.png" alt=""></p>
<p>区分内外部的命令<code>type 命令</code></p>
<p><img src="http://cdn.xuxiaojin.com/202003091007_123.png" alt=""></p>
<ul>
<li><code>info</code>命令是比help更加详细的内容,其格式是:info ls</li>
</ul>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul>
<li><code>pwd</code>显示当前所在的文件目录下，并且pwd是内部命令。使用help的时候要注意。【这里还要区分两个路径 <code>/</code>和<code>/root</code>,前者是根目录，后者是root的家路径】</li>
</ul>
<p><img src="http://cdn.xuxiaojin.com/202003091156_329.png" alt=""></p>
<ul>
<li><code>ls</code>显示当前目录下的所有文件，并且有丰富的option.这里举几个简单的option.</li>
</ul>
<p><code>-l</code>表示查看详情,<code>-a</code>表示显示所有文件，包括隐藏文件，<code>-r</code>进行排序,<code>-t</code>通过时间进行排序,<code>-R</code>递归显示所有文件夹，包括里面的文件</p>
<ul>
<li><code>cd</code>操作符，可以用来跳转当前目录，常用的格式,参见截图</li>
</ul>
<p><img src="http://cdn.xuxiaojin.com/202003092146_789.png" alt=""></p>
<p><img src="http://cdn.xuxiaojin.com/202003092146_549.png" alt=""></p>
<ul>
<li><code>mkdir</code>创建新的文件，可以通过-P，创建多级目录</li>
<li><code>rm -r</code>递归删除文件，但是会提示时候进入文件夹，<code>-f</code>这个Option则不会提示，会强制删除，这个删除文件的操作一定要小心！！</li>
</ul>
<p><img src="http://cdn.xuxiaojin.com/202003092158_548.png" alt=""></p>
<ul>
<li><code>cp</code>就是copy的简写，对文件进行复制。</li>
<li><code>mv</code>对文件进行重命名，但是在linux中,重命名就相当于移动文件！</li>
<li><code>cat</code>进行文本查看，<code>head</code>只显示头部,<code>tail</code>显示尾部，<code>wc</code>统计文本信息,例如<code>wc -l filename</code>统计文本的行数</li>
<li><code>tar</code>首先需要懂得Linux中对文件有两步操作，1.打包成文件2.进行压缩，<code>tar cf</code>进行的是打包成文件，<code>tar czf</code>把文件进行打包并且使用gzip算法进行压缩，<code>tar cjf</code>把文件进行打包并且使用bzip2进行压缩。</li>
<li><code>tar xf</code>对打包的文件进行解包，并且通过-C 可以将其移到想要的地方。如果是gzip算法压缩的后缀是.gz那么可以通过<code>tar xzf</code>，如果是bzip2算法进行压缩的，可以通过<code>tar xjf</code></li>
</ul>
<h3 id="用户和权限管理"><a href="#用户和权限管理" class="headerlink" title="用户和权限管理"></a>用户和权限管理</h3><p><code>su - user1</code>临时切换用户，-会把文件夹定位到对应用户的家目录</p>
<p><code>visudo</code>可以给某个用户赋予权限，如果不知道某个命令在哪里，通过执行<code>:!which 命令</code></p>
<h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><ul>
<li>文件类型：<code>-</code>普通文件,<code>d</code>目录文件，<code>b</code>块特殊文件,<code>c</code>字符特殊文件</li>
<li>字符权限r4,w2,x1</li>
<li><code>ls -ld</code>查看文件夹的权限，<code>ls -ld</code>查看文件的权限</li>
<li><code>chmod</code>修改权限,<code>chmod 777 filename</code>,，<code>chown</code>修改文件所属</li>
</ul>
<h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><h3 id="网络状态查看"><a href="#网络状态查看" class="headerlink" title="网络状态查看"></a>网络状态查看</h3><ul>
<li><p>net-tools</p>
<ul>
<li><p>ifconfig</p>
<ul>
<li>eth0第一个网卡的名称</li>
</ul>
<p><img src="http://cdn.xuxiaojin.com/202003291508_946.png" alt=""></p>
<p><strong>inet是网卡的Ip地址，ehter网卡的mac地址</strong></p>
<ul>
<li>网络接口命名修改</li>
</ul>
</li>
<li><p>route</p>
<ul>
<li>查看网关<code>route -n</code></li>
</ul>
</li>
<li><p>netstat</p>
</li>
</ul>
</li>
</ul>
<h3 id="网络故障排除命令"><a href="#网络故障排除命令" class="headerlink" title="网络故障排除命令"></a>网络故障排除命令</h3><ul>
<li><code>ping</code>检测当前主机和目标主机是否畅通</li>
<li><code>traceroute</code>辅助ping,如果目标主机畅通，但是还是不能用，可以检测中间路由，traceroute -w 1 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></li>
<li><code>mtr</code>数据包是否丢失</li>
<li><code>nslookup</code>域名对应的ip</li>
<li><code>telnet</code>检查端口的连接状态 <code>telnet www.baidu.com 80</code></li>
<li><code>tcpdump</code>细致数据包</li>
<li><code>netstat -ntpl</code>可以查看当前主机上，对外开放的端口</li>
</ul>
<p><img src="http://cdn.xuxiaojin.com/202003291529_218.png" alt=""></p>
<h2 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h2><ul>
<li>CentOS、RedHat使用的<code>yum</code>包管理器，软件安装包格式为rpm</li>
<li>Debian、Ubuntu使用的<code>apt</code>包管理器，软件安装包格式为deb</li>
</ul>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p><a href="https://developer.aliyun.com/mirror/centos?spm=a2c6h.13651102.0.0.3e221b11kTrvIx" target="_blank" rel="noopener">更改yum源</a></p>
<ul>
<li>yum install</li>
<li>yum list</li>
<li>yum remove</li>
<li>yum update</li>
</ul>
<p><strong>源代码安装</strong></p>
<ul>
<li>wget</li>
<li>tar -zxf</li>
<li>cd direction</li>
<li>./configure 自动配置内核版本 –prefix安装的位置</li>
<li>make -j2 表示我要用两个逻辑cpu进行编译</li>
<li>make install</li>
</ul>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="进程概念"><a href="#进程概念" class="headerlink" title="进程概念"></a>进程概念</h3><p>管理程序开始到终止的整个生命周期</p>
<h3 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h3><ul>
<li>ps(进程状态)</li>
</ul>
<p><img src="http://cdn.xuxiaojin.com/202004031353_987.png" alt=""></p>
<p>当前shell运行的进程</p>
<p><code>ps -eLf|more</code>基础用法就是这几个</p>
<ul>
<li>pstree(进程树形结构)</li>
<li>top</li>
</ul>
<p><img src="http://cdn.xuxiaojin.com/202004031359_869.png" alt=""></p>
<blockquote>
<p>20days表示最近开机运行的天数</p>
<p>load average：分别表示1分钟5分钟10分钟</p>
</blockquote>
<h3 id="进程间的通信"><a href="#进程间的通信" class="headerlink" title="进程间的通信"></a>进程间的通信</h3><p>信号是进程间通信的方式之一，常用的方法是终端用户输入<code>中断命令</code>，通过信号机制停止一个程序的运行</p>
<ul>
<li>kill -l</li>
</ul>
<p><img src="http://cdn.xuxiaojin.com/202004031407_774.png" alt=""></p>
<ul>
<li>kill -9 PID 不受影响关掉进程</li>
</ul>
<h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><ul>
<li>使用nohup 与&amp;  后台挂起，忽略hanup挂起信号【这个不是守护进程】</li>
</ul>
<blockquote>
<p>ps -el |grep tail</p>
</blockquote>
<h2 id="服务管理工具systemctl"><a href="#服务管理工具systemctl" class="headerlink" title="服务管理工具systemctl"></a>服务管理工具systemctl</h2><ul>
<li>systemctl start|stop|restart|status 服务名字</li>
</ul>
<h2 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h2><p><code>shell</code>是命令解释器，用于解释用户对操作系统的操作。提供一个与用户对话的环境。</p>
<h3 id="简单入门"><a href="#简单入门" class="headerlink" title="简单入门"></a>简单入门</h3>]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>学习操作系统的一些问题，通过search并且尝试解答</title>
    <url>/3945240194.html</url>
    <content><![CDATA[<h2 id="Off-Line-I-O"><a href="#Off-Line-I-O" class="headerlink" title="Off-Line I/O"></a>Off-Line I/O</h2><p>疑问：讲到解决<code>人机矛盾</code>，通道技术和缓存技术都无法很好的解决，只有是有<code>脱机技术</code>才能够很好的解决？</p>
<p>尝试解答：原本操作系统进行IO操作是通过<code>人工操作</code>，但是这种操作会引发<code>人机矛盾</code>，即CPU的速度在提高，但是IO速度(可以把这个理解为人进行操作，就相当于IO输入)提高的很慢。我们可以看到这上面的问题就是因为计算机想要数据都得从人这里来，当CPU完成一个作业后，只能等待用户输入下一个作业的数据，才能进行。</p>
<p>如果提前将用户输入的地方进行<code>存储</code>，那么想要的时候就可以马上得到，这个就可以解决这种<code>人机矛盾</code>，那么这种方法是脱机技术，就是将用户的输入通过外围机将其存储在磁带上，然后CPU从磁带中取得数据。</p>
<p><code>缓存技术</code>是为了解决存储系统里面的速度差异问题，不是为了解决<code>人机矛盾</code>。</p>
<p>猜测：有没有一种可能是输入输出的数据没法放到cache里之类，只能先通过磁盘？</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>程序编译、链接和装载</title>
    <url>/1264663068.html</url>
    <content><![CDATA[<hr>
<h2 id="编译、链接和装载"><a href="#编译、链接和装载" class="headerlink" title="编译、链接和装载"></a>编译、链接和装载</h2><h3 id="先安装必要的包"><a href="#先安装必要的包" class="headerlink" title="先安装必要的包"></a>先安装必要的包</h3><p>实验环境：Centos</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y groupinstall 'Development Tools'</span><br></pre></td></tr></table></figure>

<p>解释上面的命令</p>
<blockquote>
<p>yum 是安装的命令</p>
<p>-y 对所有问题回答yes</p>
<p><a href="https://www.unixmen.com/yum-groupinstall-a-quick-introduction/" target="_blank" rel="noopener" title="Groupinstall">groupinstall</a>是一个强大的命令行，它将安装一个包下面的所有组，并不需要一个个安装</p>
<p><a href="https://tecadmin.net/install-development-tools-on-centos/" target="_blank" rel="noopener" title="Development Tools">Development Tools</a>如果你打算做一个software，这个包需要安装到你的系统上。里面包含很多很有用的工具,GCC,g++,make等</p>
</blockquote>
<p>例如需要安装一下的包，手动执行这么多命令比较麻烦，所以可以通过安装整个包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line">yum install glibc</span><br><span class="line">yum install make</span><br></pre></td></tr></table></figure>

<p>首先可以通过执行<code>yum grouplist</code>，查看对应下面有哪些包</p>
<p><img src="http://cdn.xuxiaojin.com/202003020926_538.png" alt=""></p>
<p>如果需要安装一些开发的库，只需要简单执行<code>yum groupinstall &quot;Development Tools&quot;</code></p>
<h3 id="两个简单的程序"><a href="#两个简单的程序" class="headerlink" title="两个简单的程序"></a>两个简单的程序</h3><p>add_lib.c</p>
<p><img src="http://cdn.xuxiaojin.com/202003020933_60.png" alt=""></p>
<p>link_example.c</p>
<p><img src="http://cdn.xuxiaojin.com/202003020934_732.png" alt=""></p>
<p>现在对这两个文件进行编译,执行<code>gcc -g -c add_lib.c link_example.c</code></p>
<blockquote>
<p><a href="https://www.rapidtables.com/code/linux/gcc/gcc-g.html" target="_blank" rel="noopener" title="GCC -g">gcc -g</a>被GDB debugger生成debug信息</p>
<p><a href="https://www.rapidtables.com/code/linux/gcc/gcc-g.html" target="_blank" rel="noopener" title="GCC -c">gcc -c</a>编译与汇编程序，但是没有链接</p>
</blockquote>
<p>通过上面语句，已经对程序进行编译了，可以通过<code>objdump</code>进行查看汇编代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">objdump -d -M intel -S add_lib.o</span><br></pre></td></tr></table></figure>

<blockquote>
<p>objdump -d -M 表示将汇编代码display</p>
<p>intel 表示以intel的语法展示(类似于格式)</p>
<p>-S 可以将源代码一起展示</p>
</blockquote>
<p><img src="http://cdn.xuxiaojin.com/202003021048_119.png" alt=""></p>
<p>可以看到这里的地址是0000…，如果查看<code>link_example.o</code>同样会得到是000..的地址，并且通过查看，发现这个并不是一个可以执行的文件</p>
<p><img src="http://cdn.xuxiaojin.com/202003021050_368.png" alt=""></p>
<h3 id="这里介绍个命令"><a href="#这里介绍个命令" class="headerlink" title="这里介绍个命令"></a>这里介绍个命令</h3><p><a href="https://www.computerhope.com/unix/uchmod.htm" target="_blank" rel="noopener" title="chmod"><code>chmod</code></a>表示change mode.在操作系统中，一系列flags与每个文件相连接，定义着这些文件如何访问。通常这些flags被叫做文件权限或者访问。<code>chmod</code>限制这文件被访问的方式。</p>
<p>录入要设置如下的权限：</p>
<ul>
<li>用户可以<code>read</code>、<code>write</code>、<code>execue</code></li>
<li>用户所在group可以<code>read</code>、<code>execute</code></li>
<li>其他人只能<code>read</code></li>
</ul>
<p>这个命令长这样</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod u=rwx,g=rx,o=r myfile</span><br></pre></td></tr></table></figure>

<p>这个命令也可以长这样</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 754 myfile</span><br></pre></td></tr></table></figure>

<blockquote>
<p>4 表示<code>read</code></p>
<p>2 表示<code>write</code></p>
<p>1 表示<code>execute</code></p>
<p>0 表示<code>没有权限</code></p>
</blockquote>
<p>那么如何查看一个文件的权限呢？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l file.txt</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202003021103_889.png" alt=""></p>
<blockquote>
<p><code>-</code>第一个字符表示这个文件的类型(在linux系统里一起皆文件)，<code>-</code>表示通常的文件，<code>d</code>表示是个文件夹，<code>l</code>表示一个符号链接</p>
<p><code>rw</code>表示这个文件的拥有者的权限</p>
</blockquote>
<p>在深入一下。如果是要求对一个文件夹下的所有文件进行赋权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod -R 755 myfile</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-R 表示<code>递归</code>,对myfile文件夹下所包含的所有文件进行赋权限</p>
</blockquote>
<p>既然<code>add_lib.o</code>和<code>link_example.o</code>两个都不是可执行文件，那么有没有办法给他们改成可执行的文件?</p>
<p><img src="http://cdn.xuxiaojin.com/202003021111_500.png" alt=""></p>
<p>现在执行<code>./link_example.o</code>发现无法执行</p>
<p><img src="http://cdn.xuxiaojin.com/202003021113_293.png" alt=""></p>
<p>这是因为<code>.o</code>文件并不是一个可执行文件，而是<strong>目标文件</strong>，只有通过链接器把多个目标文件以及调用的各种函数库链接起来，才可以得到一个可执行文件。</p>
<p>可以通过<code>gcc -o</code>生成对应的可执行文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o link_example add_lib.o link_example.o</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202003021119_8.png" alt=""></p>
<p>这样的话，才把一个简单的c程序编译运行。</p>
<p>上面的<strong>C语言代码-汇编代码-机器码</strong>由两部分组成</p>
<ul>
<li>第一部分 编译，汇编，链接生成一个可执行文件</li>
<li>第二部分 通过装载器，将可执行文件装载到内存中,CPU通过读取指令和内存</li>
</ul>
<h2 id="ELF"><a href="#ELF" class="headerlink" title="ELF"></a>ELF</h2><p>接下来我们研究下ELF，在Linux下，可执行文件和目标文件所使用的都是一种叫做<a href="https://www.thegeekstuff.com/2012/09/objdump-examples/" target="_blank" rel="noopener" title="ELF"><code>ELF</code></a>的文件格式，中文是<strong>可执行与可链接文件格式</strong></p>
<h3 id="File-Header文件头"><a href="#File-Header文件头" class="headerlink" title="File Header文件头"></a>File Header文件头</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">objdump -f link_example</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202003021134_606.png" alt=""></p>
<p>文件头保留了文件的属性，对应的CPU等硬件平台，对应的操作系统等等，这里还可以看到代码的起始地址</p>
<h3 id="text-Section-代码段"><a href="#text-Section-代码段" class="headerlink" title=".text Section 代码段"></a>.text Section 代码段</h3><p><img src="http://cdn.xuxiaojin.com/202003021142_171.png" alt=""></p>
<p>程序编译出来的指令，可以看到程序的起始地址与文件头一样。</p>
<h3 id="data-Section-数据段"><a href="#data-Section-数据段" class="headerlink" title=".data Section 数据段"></a>.data Section 数据段</h3><p><img src="http://cdn.xuxiaojin.com/202003021146_823.png" alt=""></p>
<p>保留程序的全部变量和局部静态变量，记住如果是局部变量的话，并不会存在data，我们知道，临时变量其实是在程序运行时，创建的。</p>
<h3 id="rel-text-Section重定位表"><a href="#rel-text-Section重定位表" class="headerlink" title=".rel.text Section重定位表"></a>.rel.text Section重定位表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">objdump -r link_example.o</span><br></pre></td></tr></table></figure>

<p>保留的是当前文件里面，哪些跳转地址其实是我们不知道的。比如<code>link_example.o</code>里面，调用了add和printf两个函数，在链接发生之前，我们并不知道该跳转到哪里。</p>
<h3 id="symtab-Section符号表"><a href="#symtab-Section符号表" class="headerlink" title=".symtab Section符号表"></a>.symtab Section符号表</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">readelf -s link_example.o</span><br></pre></td></tr></table></figure>

<p>保留了当前文件里面定义的函数名称和对应地址的地址。</p>
<h3 id="链接器执行过程"><a href="#链接器执行过程" class="headerlink" title="链接器执行过程"></a>链接器执行过程</h3><blockquote>
<p>链接器会扫描所有输入的目标文件，将其符号表整合成<code>全局符号表</code>，然后在查看重定位表，将里面未知的地址通过全局符号表替换掉，进行修正。然后把所有目标文件的对应字段进行了一次合并。编程最终的可执行代码</p>
</blockquote>
<p>为什么同一份程序不可以同时在linux和window下一起执行？</p>
<p>因为Linux的是ELF文件格式，Window是PE格式。Linux下的装载器只能解析ELF格式而不能解析PE格式</p>
<h2 id="程序装载"><a href="#程序装载" class="headerlink" title="程序装载"></a>程序装载</h2><p>程序装载需要满足的两个要求</p>
<ul>
<li>可执行程序加载后占用的内存空间应该是连续的，因为在程序指令执行时，执行的顺序是一条条指令执行下去，这就是指令需要连续村粗</li>
<li>需要同时加载多个程序，并且不能让程序自己规定在内存中加载的位置.</li>
</ul>
<p>那么要满足这两个做法，只要给地址做一个<strong>映射</strong>就可以。</p>
<p>程序指令代码里的地址称为<strong>虚拟地址</strong></p>
<p>实际在硬件中的地址称为<strong>物理内存地址</strong><br>有两种分割的方式</p>
<h3 id="内存分段"><a href="#内存分段" class="headerlink" title="内存分段"></a>内存分段</h3><p>段指的是系统分配出来的那个连续的内存空间</p>
<p><img src="http://cdn.xuxiaojin.com/202003021545_359.png" alt=""></p>
<p>但是会出现<strong>内存碎片</strong>问题，内存碎片指的是，就是内存被分割掉，要加载一个大的内存空间，但是这个时候任意一个段都无法满足这个内存空间，将这些段加起来就可以满足这个内存空间。</p>
<p>解决这个问题的方法是<strong>内存交换</strong>，通过将内存上的程序放到硬盘上，在将其取出来，这个时候不是放到原来的位置，而是将内存碎片清除掉，然后就有足够大的内存空间了。</p>
<p>但是这样也会面临一个问题，就是硬盘的读写速度太慢了，如果一次转移太多的内存的话，会使得整个机器显得卡顿。</p>
<h3 id="内存分页"><a href="#内存分页" class="headerlink" title="内存分页"></a>内存分页</h3><p>刚刚上面<strong>内存分段</strong>出现的是当内存交换的时候，机器会显得卡顿。当时如果一次交换的内存比较小的话，这种卡顿的现象就会明显减少。所以提出了将内存进行<strong>分页</strong>，默认Linux的页大小是4KB</p>
<p><img src="http://cdn.xuxiaojin.com/202003021659_204.png" alt=""></p>
<h2 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h2><p>前面我们讲到了链接，是将多个目标文件进行合并，但是如果某个模块被多个程序调用，都需要合并的话，浪费了很多空间。并且本来我们的<strong>内存空间不够用</strong>在这么整下去的话，都不用运行了。</p>
<p>生活中，我们会碰到共享单车的例子，那么实际上在计算机上，我们就是用一种新的链接方式，叫做<strong>动态链接</strong></p>
<blockquote>
<p>动态链接中链接的不是存储在硬盘上的目标文件代码，而是加载在内存中的共享库</p>
</blockquote>
<h3 id="地址无关"><a href="#地址无关" class="headerlink" title="地址无关"></a>地址无关</h3><p>动态链接最重要的就是要做到地址无关，就是无论加载在那个内存地址，都能够正常执行，使用<strong>相对地址</strong>就可以解决地址无关问题</p>
<h3 id="PLT和GOT"><a href="#PLT和GOT" class="headerlink" title="PLT和GOT"></a>PLT和GOT</h3><p><code>lib.h</code></p>
<p><img src="http://cdn.xuxiaojin.com/202003021722_183.png" alt=""></p>
<p><code>lib.c</code></p>
<p><img src="http://cdn.xuxiaojin.com/202003021724_856.png" alt=""></p>
<p><code>main.c</code></p>
<p><img src="http://cdn.xuxiaojin.com/202003021725_258.png" alt=""></p>
<p>然后将<code>lib.c</code>编译成一个动态的链接库即.so文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc lib.c -fPIC -shared -o lib.so</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-shared 表示创建一个共享库</p>
<p>-o 把输入放到后面紧跟的文件 lib.so</p>
<p>-fPIC 表示要将这个编译成一个地址无关代码</p>
</blockquote>
<p>然后通过gcc编译main动态链接了lib.so的可执行文件，接着通过objdump可以看到</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o main main.c ./lib.so</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.xuxiaojin.com/202003021933_912.png" alt=""></p>
<p><img src="http://cdn.xuxiaojin.com/202003021934_436.png" alt=""></p>
<p>可以看到在main函数中调用函数是，对应的代码有一个关键字@plt,表示我们从PLT也就是<strong>程序链接表</strong>里面找到调用的函数，就是地址4004f0</p>
<p><img src="http://cdn.xuxiaojin.com/202003021936_259.png" alt=""></p>
<p>在4004f0的位置，又进行了一次跳转，跳到<a href="http://bottomupcs.sourceforge.net/csbu/x3824.htm" target="_blank" rel="noopener" title="GOT"><strong>全局偏移表</strong></a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
      <tags>
        <tag>ELF</tag>
      </tags>
  </entry>
  <entry>
    <title>算法练习</title>
    <url>/3045170151.html</url>
    <content><![CDATA[<h2 id="2020-06-01"><a href="#2020-06-01" class="headerlink" title="2020-06-01"></a>2020-06-01</h2><h3 id="埃拉托斯特尼筛法"><a href="#埃拉托斯特尼筛法" class="headerlink" title="埃拉托斯特尼筛法"></a>埃拉托斯特尼筛法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) u[i]=<span class="literal">true</span>;  <span class="comment">//所有数都加到筛子里</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(u[i])&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j*i&lt;=n;j++)&#123;</span><br><span class="line">            u[j*i]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="欧拉筛法"><a href="#欧拉筛法" class="headerlink" title="欧拉筛法"></a>欧拉筛法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(u,<span class="literal">true</span>,<span class="keyword">sizeof</span>(u));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(u[i]) su[num++]=i;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;num;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i*su[j]&gt;n) <span class="keyword">break</span>;</span><br><span class="line">        u[i*su[j]]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(i%su[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POJ-2262"><a href="#POJ-2262" class="headerlink" title="POJ 2262"></a><a href="https://vjudge.net/problem/POJ-2262" target="_blank" rel="noopener">POJ 2262</a></h3><blockquote>
<p>这道题是一个数论题，主要是素数，首先离线找到搜索素数，然后对两个数进行判断，是否为素数</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> len=<span class="number">1000001</span>;</span><br><span class="line"><span class="keyword">int</span> su[len],sum;</span><br><span class="line"><span class="keyword">bool</span> u[len];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(u,<span class="literal">true</span>,<span class="keyword">sizeof</span>(u));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;len;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(u[i]) su[++sum]=i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=sum;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i*su[j]&gt;len) <span class="keyword">break</span>;</span><br><span class="line">			u[i*su[j]]=<span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">if</span>(i%su[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	init();</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n)&#123;</span><br><span class="line">		<span class="keyword">bool</span> ok=<span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">int</span> i;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=sum;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="number">2</span>*su[i]&gt;n) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span>(u[n-su[i]])&#123;</span><br><span class="line">				ok=<span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ok)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d = %d + %d\n"</span>,n,su[i],n-su[i]);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"Goldbach's conjecture is wrong.\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2020-05-31"><a href="#2020-05-31" class="headerlink" title="2020-05-31"></a>2020-05-31</h2><p><a href="https://vjudge.net/problem/POJ-2661" target="_blank" rel="noopener">POJ 2661</a></p>
<blockquote>
<p>这道题没有什么具体的算法，考的是思维。</p>
<p>主要是完成一个不等式n!&lt;2^k-1</p>
<p>如果直接暴力求不好，所以可以加一个对数</p>
<p>log(n!)=log(n)+log(n-1)…..&lt;log(2^k-1)</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;y)&amp;&amp;y)&#123;</span><br><span class="line">		<span class="keyword">int</span> temp=<span class="number">2</span>+(y<span class="number">-1960</span>)/<span class="number">10</span>;</span><br><span class="line">		<span class="keyword">double</span> k=<span class="built_in">pow</span>((<span class="keyword">double</span>)<span class="number">2</span>,temp);</span><br><span class="line">		k*=<span class="built_in">log</span>((<span class="keyword">double</span>)<span class="number">2</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">double</span> f=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(f&lt;k)&#123;</span><br><span class="line">			f+=<span class="built_in">log</span>((<span class="keyword">double</span>)++i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://vjudge.net/problem/POJ-1298" target="_blank" rel="noopener">POJ1298</a></p>
<blockquote>
<p>这题是模拟题，只要按照题意走就可以做出来。</p>
<p>但是自己好久没碰题了，竟然无从下手。</p>
<p>慢慢找感觉</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> start=<span class="string">"START"</span>;</span><br><span class="line"><span class="built_in">string</span> <span class="built_in">end</span>=<span class="string">"END"</span>;</span><br><span class="line"><span class="built_in">string</span> end_input=<span class="string">"ENDOFINPUT"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> code_str;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(getline(<span class="built_in">cin</span>,code_str))&#123;</span><br><span class="line">		<span class="keyword">if</span>(code_str==start||code_str==<span class="built_in">end</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(code_str==end_input) <span class="keyword">break</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(index!=code_str.length())&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">isalpha</span>(code_str[index]))&#123;</span><br><span class="line">				code_str[index]=<span class="string">'A'</span>+(code_str[index]-<span class="string">'A'</span>+<span class="number">21</span>)%<span class="number">26</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;code_str[index];</span><br><span class="line">			index++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		code_str.<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2020-05-13"><a href="#2020-05-13" class="headerlink" title="2020-05-13"></a>2020-05-13</h2><p>dp<a href="https://vjudge.net/problem/POJ-1088" target="_blank" rel="noopener">题目来源</a></p>
<blockquote>
<p>这道题目讲的是一个Map，然后只能上下左右的走，并且还要求走的位置值必须小于当前的位置值。</p>
<p>典型dp，存下每个值</p>
<p>但是一定要用记忆性，就是记录值</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 101</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[N][N],len[N][N];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> r,c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(len[x][y]!=<span class="number">0</span>) <span class="keyword">return</span> len[x][y];</span><br><span class="line">	<span class="keyword">int</span> maxx=<span class="number">0</span>,s;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> temx=x+dir[i][<span class="number">0</span>],temy=y+dir[i][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span>(temx&gt;=<span class="number">0</span>&amp;&amp;temy&gt;=<span class="number">0</span>&amp;&amp;temx&lt;r&amp;&amp;temy&lt;c&amp;&amp;<span class="built_in">map</span>[temx][temy]&lt;<span class="built_in">map</span>[x][y])&#123;</span><br><span class="line">			s=dp(temx,temy);</span><br><span class="line">			<span class="keyword">if</span>(s&gt;maxx) maxx=s;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	len[x][y]=maxx+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> maxx+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;r&gt;&gt;c;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;c;j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;<span class="built_in">map</span>[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(len,<span class="number">0</span>,<span class="keyword">sizeof</span>(len));</span><br><span class="line">	<span class="keyword">int</span> mx=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;c;j++)&#123;</span><br><span class="line">			len[i][j]=dp(i,j);</span><br><span class="line">			<span class="keyword">if</span>(len[i][j]&gt;mx) mx=len[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;mx&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2020-05-12"><a href="#2020-05-12" class="headerlink" title="2020-05-12"></a>2020-05-12</h2><p>最长递增子序列<a href="https://vjudge.net/problem/UVA-111" target="_blank" rel="noopener">题目来源</a></p>
<blockquote>
<p>这道题有点绕</p>
<p>将的是有个标准顺序，然后学生给一个顺序</p>
<p>如果对应位置一样的加一分，如果子序列一样的加一分</p>
<p>那么怎么转为最长子序列</p>
<p>例如 正确的为<code>1 2 3 4</code>一个答案为<code>1 3 2 4</code></p>
<p>正确的数组是 <code>1 2 3 4</code></p>
<p>答案的数组是<code>1 3 2 4</code></p>
<p>那么这个答案就是这两个数组的最长公共子序列</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> order[<span class="number">25</span>],arr[<span class="number">25</span>],d[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">		order[t<span class="number">-1</span>]=i+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t))&#123;</span><br><span class="line">		arr[t<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">			arr[t<span class="number">-1</span>]=i+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(order[i<span class="number">-1</span>]==arr[j<span class="number">-1</span>])</span><br><span class="line">				   d[i][j]=d[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				   d[i][j]=<span class="built_in">max</span>(d[i][j<span class="number">-1</span>],d[i<span class="number">-1</span>][j]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,d[n][n]);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2020-05-11"><a href="#2020-05-11" class="headerlink" title="2020-05-11"></a>2020-05-11</h2><p>最长公共子序列 <a href="https://vjudge.net/problem/HDU-1159" target="_blank" rel="noopener">题目来源</a></p>
<blockquote>
<ul>
<li>子序列不要求是连续的</li>
<li>dp</li>
<li>char s1[maxn]</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="keyword">char</span> s1[maxn],s2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,&amp;s1,&amp;s2)!=EOF)&#123;</span><br><span class="line">		<span class="keyword">int</span> n=<span class="built_in">strlen</span>(s1);</span><br><span class="line">		<span class="keyword">int</span> m=<span class="built_in">strlen</span>(s2);</span><br><span class="line">		<span class="keyword">char</span> *A=s1,*B=s2;</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(A[i<span class="number">-1</span>]==B[j<span class="number">-1</span>])</span><br><span class="line">				  dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				  dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]); </span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[n][m]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2020-04-02"><a href="#2020-04-02" class="headerlink" title="2020-04-02"></a>2020-04-02</h2><p>Counting Leaves <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805521431773184" target="_blank" rel="noopener">题目来源</a></p>
<blockquote>
<p>A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child.</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> father;</span><br><span class="line">	<span class="keyword">int</span> level;</span><br><span class="line">	<span class="keyword">bool</span> NoChild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node v[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> level[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> N,M,ID,c,child,MAXLevel=<span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">		v[i].father=<span class="number">0</span>;</span><br><span class="line">		v[i].level=<span class="number">0</span>;</span><br><span class="line">		v[i].NoChild=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;ID,&amp;c);</span><br><span class="line">		v[ID].NoChild=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;child);</span><br><span class="line">			v[child].father=ID;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	v[<span class="number">1</span>].level=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=N;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(v[j].father==i)&#123;</span><br><span class="line">				v[j].level=v[v[j].father].level+<span class="number">1</span>;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span>(v[j].level&gt;MAXLevel)</span><br><span class="line">				   MAXLevel=v[j].level;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">		<span class="keyword">if</span>(v[i].NoChild==<span class="number">1</span>)</span><br><span class="line">			level[v[i].level]++;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;MAXLevel;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,level[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,level[MAXLevel]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2020-03-28"><a href="#2020-03-28" class="headerlink" title="2020-03-28"></a>2020-03-28</h2><p>Emergency<a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805523835109376" target="_blank" rel="noopener">题目来源</a></p>
<blockquote>
<p>As an emergency rescue team leader of a city, you are given a special map of your country. The map shows several scattered cities connected by some roads. Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map. When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.</p>
</blockquote>
<p>这道题还是有点难得，因为用到了最短路径求法dijkstra算法，很久没有用了有点不熟悉，只记得要循环2333</p>
<ul>
<li>取最短</li>
<li>不断更新</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,c1,c2;</span><br><span class="line"><span class="keyword">int</span> e[<span class="number">510</span>][<span class="number">510</span>],weight[<span class="number">510</span>],dis[<span class="number">510</span>],num[<span class="number">510</span>],w[<span class="number">510</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">999999</span>;</span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">510</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;c1&gt;&gt;c2;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;weight[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(e,inf,<span class="keyword">sizeof</span>(e));</span><br><span class="line">	<span class="built_in">memset</span>(dis,inf,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">	<span class="built_in">memset</span>(visit,<span class="literal">false</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> a,b,c;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">		e[a][b]=e[b][a]=c;</span><br><span class="line">	&#125;</span><br><span class="line">	dis[c1]=<span class="number">0</span>;</span><br><span class="line">	num[c1]=<span class="number">1</span>;</span><br><span class="line">	w[c1]=weight[c1];</span><br><span class="line">	</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> u=<span class="number">-1</span>,minn=inf;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(visit[j]==<span class="literal">false</span>&amp;&amp;dis[j]&lt;minn)&#123;</span><br><span class="line">				u=j;</span><br><span class="line">				minn=dis[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(u==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">		visit[u]=<span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;n;v++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(visit[v]==<span class="literal">false</span>&amp;&amp;e[u][v]!=inf)&#123;</span><br><span class="line">				<span class="keyword">if</span>(dis[u]+e[u][v]&lt;dis[v])&#123;</span><br><span class="line">					dis[v]=dis[u]+e[u][v];</span><br><span class="line">					num[v]=num[u];</span><br><span class="line">					w[v]=w[u]+weight[v];</span><br><span class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dis[u]+e[u][v]==dis[v])&#123;</span><br><span class="line">					num[v]=num[v]+num[u];</span><br><span class="line">					<span class="keyword">if</span>(w[u]+weight[v]&gt;w[v])</span><br><span class="line">					   w[v]=w[u]+weight[v];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d"</span>,num[c2],w[c2]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2020-03-27"><a href="#2020-03-27" class="headerlink" title="2020-03-27"></a>2020-03-27</h2><p>A+B <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805528788582400" target="_blank" rel="noopener">题目来源</a></p>
<blockquote>
<p>Calculate <em>a</em>+<em>b</em> and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits).</p>
</blockquote>
<p>这题其实不难，但是一开始，自己尝试int转char出错，因为int是4个字节，char是1个字节，所以不能转，后面卡住了，发现了一个好的解答。</p>
<p>一开始有个评测点没过，发现是0这个问题</p>
<p> A+B for Polynomials <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805526272000000" target="_blank" rel="noopener">题目来源</a></p>
<p>这题是多项式(polynomials)相加，一开始自己想的太复杂了用了Map，后面看了答案，直接用一个数组就可以解决。</p>
<h2 id="2020-03-08"><a href="#2020-03-08" class="headerlink" title="2020-03-08"></a>2020-03-08</h2><p>递归-二叉树的镜像 <a href="https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/" target="_blank" rel="noopener">题目来源</a></p>
<blockquote>
<p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p>
</blockquote>
<p>这道题很容易想到的方法是递归，但是自己递归有点想错了，就是想成如何遍历，如果从更高层来看的就是每一个子树的求解问题的方法都是一样的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">mirrorTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> root;</span><br><span class="line">        swap(root-&gt;left,root-&gt;right);</span><br><span class="line">        mirrorTree(root-&gt;left);</span><br><span class="line">        mirrorTree(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>栈使用前序遍历的方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">mirrorTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">       <span class="built_in">stack</span>&lt;TreeNode*&gt; s;</span><br><span class="line">       s.push(root);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">           TreeNode* temp=s.top();</span><br><span class="line">           s.pop();</span><br><span class="line">           <span class="keyword">if</span>(temp==<span class="literal">NULL</span>) <span class="keyword">continue</span>;</span><br><span class="line">           swap(temp-&gt;left,temp-&gt;right);</span><br><span class="line">           s.push(temp-&gt;left);</span><br><span class="line">           s.push(temp-&gt;right);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>队列层次遍历</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">mirrorTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">       <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">       q.push(root);</span><br><span class="line">       <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">           TreeNode* temp=q.front();</span><br><span class="line">           q.pop();</span><br><span class="line">           <span class="keyword">if</span>(temp==<span class="literal">NULL</span>) <span class="keyword">continue</span>;</span><br><span class="line">           swap(temp-&gt;left,temp-&gt;right);</span><br><span class="line">           q.push(temp-&gt;left);</span><br><span class="line">           q.push(temp-&gt;right);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="2020-03-07"><a href="#2020-03-07" class="headerlink" title="2020-03-07"></a>2020-03-07</h2><p>每日一题-队列中的最大值 <a href="https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/" target="_blank" rel="noopener">题目来源</a></p>
<blockquote>
<p>请定义一个队列并实现函数 max_value 得到队列里的最大值，要求函数max_value、push_back 和 pop_front 的均摊时间复杂度都是O(1)。</p>
<p>若队列为空，pop_front 和 max_value 需要返回 -1</p>
</blockquote>
<p>这道题一开始没有看懂题目，看了题解之后才知道这个要让我操作什么。这里有个双端队列让我很惊喜，c++还有这个东西。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaxQueue</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">   <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; d;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MaxQueue() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max_value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(d.empty())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> d.front();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!d.empty()&amp;&amp;d.back()&lt;value)</span><br><span class="line">            d.pop_back();</span><br><span class="line">        d.push_back(value);</span><br><span class="line">        q.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop_front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(q.empty())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(q.front()==d.front())</span><br><span class="line">            d.pop_front();</span><br><span class="line">        <span class="keyword">int</span> ans=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>##2020-03-05</p>
<p>看似水题-打印从1到最大的n位数 <a href="https://leetcode-cn.com/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/" target="_blank" rel="noopener">题目来源</a></p>
<blockquote>
<p>输入数字 <code>n</code>，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p>
</blockquote>
<p>直接暴力遍历，这个就是看似水题。这种方法也能通过，但是看了题解，发现是有更大的数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">printNumbers</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,<span class="built_in">max</span>=<span class="built_in">pow</span>(<span class="number">10</span>,n);i&lt;<span class="built_in">max</span>;i++)&#123;</span><br><span class="line">            ans.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>当然结合之前的快速幂，可以不使用函数库pow</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">printNumbers</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,<span class="built_in">max</span>=mul(<span class="number">10</span>,n);i&lt;<span class="built_in">max</span>;i++)&#123;</span><br><span class="line">            ans.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k&amp;<span class="number">1</span>) ans=ans*x;</span><br><span class="line">            x=x*x;</span><br><span class="line">            k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>还有一些大数的方法，解法很巧妙。</p>
<p>##2020-03-04</p>
<p>超水题-奖券数目</p>
<blockquote>
<p>有些人很迷信数字，比如带“4”的数字，认为和“死”谐音，就觉得不吉利。<br>虽然这些说法纯属无稽之谈，但有时还要迎合大众的需求。<br>某抽奖活动奖券号码是5位数(10000-99999)，要求其中不要出现带“4”的号码。<br>主办单位请你计算一下，如果任何两张奖券不重号，最多可发出奖券多少张</p>
</blockquote>
<p>这是一道数学题，组合。</p>
<p>双指针-链表中倒数第K个节点<a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/" target="_blank" rel="noopener">题目来源</a></p>
<blockquote>
<p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点</p>
</blockquote>
<p>这题解法是双指针，自己很久之前学到过。这次重新复习，也能够写出来</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">getKthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">            ListNode *first;</span><br><span class="line">            first=head;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;k;i++)&#123;</span><br><span class="line">                first=first-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(first-&gt;next)&#123;</span><br><span class="line">                first=first-&gt;next;</span><br><span class="line">                head=head-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>递归、层次遍历-二叉树的深度<a href="https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/" target="_blank" rel="noopener">题目来源</a></p>
<blockquote>
<p>输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。</p>
<p>例如：</p>
<p>给定二叉树 [3,9,20,null,null,15,7]</p>
</blockquote>
<p>这道题，自己的第一个解法想到的解释递归。因为子问题的解法都一样，所以可以很快的写出来，但是发现讨论区里面说，如果是面试的话，可能不会让写递归。</p>
<p>递归</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">max</span>(maxDepth(root-&gt;left),maxDepth(root-&gt;right));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>层次遍历</p>
<p>写这个的时候其实错了挺多的，第一是*号问题，我对指针只是概念上比较熟悉，实战不行。第二就是q.size()这个地方一直错，忘记了pop之后size会发生改变！！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> level=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> qsize=q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">if</span>(qsize&gt;<span class="number">0</span>) level++;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;qsize;i++)&#123;</span><br><span class="line">               TreeNode* head=q.front();</span><br><span class="line">               q.pop();</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span>(head-&gt;left!=<span class="literal">NULL</span>) q.push(head-&gt;left);</span><br><span class="line">               <span class="keyword">if</span>(head-&gt;right!=<span class="literal">NULL</span>) q.push(head-&gt;right);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>##2020-03-03</p>
<p>难题-垒骰子</p>
<blockquote>
<p>赌圣atm晚年迷恋上了垒骰子，就是把骰子一个垒在另一个上边，不能歪歪扭扭，要垒成方柱体。<br>经过长期观察，atm 发现了稳定骰子的奥秘：有些数字的面贴着会互相排斥！<br>我们先来规范一下骰子：1 的对面是 4，2 的对面是 5，3 的对面是 6。<br>假设有 m 组互斥现象，每组中的那两个数字的面紧贴在一起，骰子就不能稳定的垒起来。<br>atm想计算一下有多少种不同的可能的垒骰子方式。<br>两种垒骰子方式相同，当且仅当这两种方式中对应高度的骰子的对应数字的朝向都相同。<br>由于方案数可能过多，请输出模 10^9 + 7 的结果。</p>
</blockquote>
<p>这道题比较难，自己没有想出来。并且看了代码，还有AC。不过也学了矩阵快速幂</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 100000007</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span>&#123;</span></span><br><span class="line">	LL v[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line">	Matrix()&#123;</span><br><span class="line">		<span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span>(v));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">mul</span><span class="params">(Matrix x,Matrix y)</span></span>&#123;</span><br><span class="line">	Matrix ans;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">	 <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)</span><br><span class="line">	  <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">6</span>;k++)</span><br><span class="line">	   ans.v[i][j]=ans.v[i][j]+x.v[i][k]*y.v[k][j];</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">q_pow</span><span class="params">(Matrix x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	Matrix ans;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++) ans.v[i][i]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(k)&#123;</span><br><span class="line">		<span class="keyword">if</span>(k&amp;<span class="number">1</span>) ans=mul(ans,x);</span><br><span class="line">		x=mul(x,x);</span><br><span class="line">		k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a,b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)&#123;</span><br><span class="line">		Matrix T,ans;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)&#123;</span><br><span class="line">			T.v[i][j]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">		T.v[a<span class="number">-1</span>][b<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">		T.v[b<span class="number">-1</span>][a<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	ans=q_pow(T,n<span class="number">-1</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">	  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)</span><br><span class="line">	   sum=(sum+ans.v[i][j])%MOD;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(sum*<span class="keyword">int</span>(<span class="built_in">pow</span>(<span class="number">4</span>,n))%MOD)%MOD);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##2020-03-02</p>
<p>水题-奇妙的数字</p>
<blockquote>
<p>小明发现了一个奇妙的数字。它的平方和立方正好把0~9的10个数字每个用且只用了一次。你能猜出这个数字是多少吗？</p>
</blockquote>
<p>这是一题水题，因为对时间什么要求不没有。但是自己做题的时候，突然用上了<code>抽象</code>的思维，这个很舒服。当然也踩了个坑：没有对数组进行初始化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> c[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">while</span>(a)&#123;</span><br><span class="line">		c[a%<span class="number">10</span>]++;</span><br><span class="line">		a/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		c[b%<span class="number">10</span>]++;</span><br><span class="line">		b/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(c[i]!=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(check(i*i,i*i*i))&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>水题-牌型的种类</p>
<blockquote>
<p>小明被劫持到X赌城，被迫与其他3人玩牌。<br>一副扑克牌（去掉大小王牌，共52张），均匀发给4个人，每个人13张。<br>这时，小明脑子里突然冒出一个问题：<br>如果不考虑花色，只考虑点数，也不考虑自己得到的牌的先后顺序<br>自己手里能拿到的初始牌型组合一共有多少种呢？</p>
</blockquote>
<p>虽然是水题，但是自己一开始没有想出来，查了一下。可以用DFS</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&gt;<span class="number">13</span>||sum&gt;<span class="number">13</span>) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">13</span>&amp;&amp;sum==<span class="number">13</span>)&#123;</span><br><span class="line">		ans++;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">		sum+=i;</span><br><span class="line">		dfs(n+<span class="number">1</span>);</span><br><span class="line">		sum-=i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	dfs(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>水题-饮料换购</p>
<blockquote>
<p>乐羊羊饮料厂正在举办一次促销优惠活动。<br>乐羊羊C型饮料，凭3个瓶盖可以再换一瓶C型饮料，并且可以一直循环下去(但不允许暂借或赊账)。<br>请你计算一下，如果小明不浪费瓶盖，尽量地参加活动。<br>那么，对于他初始买入的n瓶饮料，最后他一共能喝到多少瓶饮料。 </p>
</blockquote>
<p>这道题，只要不断计算就可以没有什么多余的技巧</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">		sum=n;</span><br><span class="line">		<span class="keyword">while</span>(n&gt;<span class="number">2</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> temp1=n/<span class="number">3</span>;</span><br><span class="line">			<span class="keyword">int</span> temp2=n%<span class="number">3</span>;</span><br><span class="line">			sum+=temp1;</span><br><span class="line">			n=temp1+temp2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的基本原理与多人协作常见场景</title>
    <url>/64817271.html</url>
    <content><![CDATA[<h2 id="Git的基本原理"><a href="#Git的基本原理" class="headerlink" title="Git的基本原理"></a>Git的基本原理</h2><p>Git分为<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897271968352576" target="_blank" rel="noopener" title="Git的工作区和暂存区的基本概念">工作区和暂存区</a>的概念，学习Git首先要懂得这两个基本概念.我们<strong>本机</strong>的目录就是<strong>工作区</strong>，但是.git目录不算工作区，而是Git的版本库。</p>
<p>Git的版本库里面有一个stage或者是index叫做<strong>暂存区</strong>，当我们执行<code>git add</code>就会将工作区的内容添加到暂存区里，然后我们执行<code>git commit</code>的时候就会将暂存区的内容全部提交到当前分支。</p>
<p>并且<a href="https://blog.csdn.net/stpeace/article/details/84351160" target="_blank" rel="noopener" title="Git工作区和暂存区与分支的关系"><strong>工作区</strong>和<strong>暂存区</strong>是所有分支所共有</a>的，如果没有<code>git commit</code>就不会将其提交到某个分支。</p>
<p>想到某个<strong>场景</strong>，如果开发的时候，没有执行<code>git checkout branch</code>切换到自己的feature的分支上也没有关系，因为还没有提交到具体的某个分支。</p>
<h3 id="关于工作区的实践"><a href="#关于工作区的实践" class="headerlink" title="关于工作区的实践"></a>关于工作区的实践</h3><p>首先执行<code>git branch -av</code>查看所有分支【刚刚处理七牛云的bug费了好长时间】</p>
<p><img src="http://cdn.xuxiaojin.com/202002220958_219.png" alt=""></p>
<p>本地有一个默认的master分支，远程三个分支。现在我们来体验一下工作区和暂存区</p>
<p><img src="http://cdn.xuxiaojin.com/202002221000_559.png" alt=""></p>
<p>首先我们建立一个<code>feature/xj</code>的本地分支。</p>
<p><code>git branch feature/xj origin/feature/xj</code>是指在<code>origin/feature/xj</code>以这个分支为基础建立一个名为<code>feature/xj</code>的分支</p>
<p>现在建立好分支了，但是我们不执行<code>git checout feature/xj</code>我们所在的地方还是<code>master</code>的分支，进行简单修改。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221005_652.png" alt=""></p>
<p>我简单的修改了readme.en.md这个文件，然后现在我要把这个修改的提交到<code>feature/xj</code>这个分支上。但是现在我还是在<code>master</code>的分支上。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221009_573.png" alt=""></p>
<p><img src="http://cdn.xuxiaojin.com/202002221011_989.png" alt=""></p>
<p>如果<strong>工作区</strong>是共享的，所以我直接切换到<code>feature/xj</code>,并提交。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221040_888.png" alt=""></p>
<p>然后继续切换到<code>master</code>分支，查看status</p>
<p><img src="http://cdn.xuxiaojin.com/202002221042_385.png" alt=""></p>
<p>发现原本在master分支下修改的，已经在master里面看不到了。这可以验证<strong>工作区</strong>是共享的。【所以有时候，在某个分支下修改了，如果执行<code>git checkout -b branch basebranch</code>会提示是否需要将本地修改的先保存<code>git stash</code>一下，否则会出现丢失的情况】</p>
<p>现在验证<strong>暂存区是共享的</strong>。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221405_48.png" alt=""></p>
<p>通过这上面这张图，我们可以看到，通过<code>git add .</code>会将工作区里的文件提交到暂存区里。所以如果是共享的话，那么我在<code>master</code>分支下，执行<code>git add .</code>会将我的修改提交到暂存区里，然后我切换分支，会看到暂存区里的修改。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221407_455.png" alt=""></p>
<p>我在<code>master</code>做了修改，现在来验证一下，这个结论是否正确？</p>
<p><img src="http://cdn.xuxiaojin.com/202002221408_842.png" alt=""></p>
<p><code>master</code>分支下可以看到我提交到<strong>暂存区</strong>里的文件了，现在切换分支Git</p>
<p><img src="http://cdn.xuxiaojin.com/202002221411_84.png" alt=""></p>
<p>但是发现无法切换报错。但是通过<strong>报错</strong>信息我们可以知道这个结论是正确的，以为信息提示我们如果切换会被覆盖。也就是说共用一个<strong>暂存区</strong>，如果不是共用一个暂存区，那么就不会出现被覆盖的现象。</p>
<p>只不过，跟我想象的不一样的是，虽然共用一个<strong>暂存区</strong>，所以我可以随意切换分支，然后执行<code>git commit</code>将它提交，Git没有这么做可能是为了安全着想吧。【我猜的】</p>
<p>##Git应用场景</p>
<p>学习Git无非就是命令行啥的，但是如果只看命令行，是很难去应用的。最好的学习方式就是在场景下去应用。</p>
<p>###场景1</p>
<p>如果当前你正在某个分支上开发，然后突然接到任务，需要到某个分支里面去解决临时的任务，但是当前开发还没做完，所以不能提交。这个时候需要<a href="https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning" target="_blank" rel="noopener" title="Git stash"><code>git stash</code></a></p>
<p>先来看当前git仓库的分支情况</p>
<p><img src="http://cdn.xuxiaojin.com/202002221428_945.png" alt=""></p>
<p>然后我们在<code>dev</code>下面进行修改。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221429_764.png" alt=""></p>
<p>这个时候，突然接到任务需要到另外一个分支下面<code>feature/xj</code>下面进行修改某个任务</p>
<p><img src="http://cdn.xuxiaojin.com/202002221431_162.png" alt=""></p>
<p>如果，我们直接切换的话，会报错。所以你需要将工作区和暂存区清理一下。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221435_74.png" alt=""></p>
<p>这个意思相当于，暂时将做的修改保存起来。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221436_635.png" alt=""></p>
<p>然后我们就可以切换分支了，并且在这个分支下做修改，然后提交到远程。</p>
<p>做完这个工作后，我们需要切回<code>dev</code>分支并且将刚才临时保存的东西拿出来，继续开发。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221438_661.png" alt=""></p>
<p>对于<strong>恢复</strong>有两种方法</p>
<ol>
<li>用<code>git stash apply</code>命令来恢复，但是这种恢复，<code>stash</code>内容并不会被删除，需要执行<code>git stash drop</code>来删除。【如果有多个stash，需要恢复指定的stash,可以在命令尾部加上id <code>git stash apply stash@{0}</code>】</li>
<li>用<code>git stash pop</code>命令，恢复的同时会将stash的内容也删除了。</li>
</ol>
<p><img src="http://cdn.xuxiaojin.com/202002221445_710.png" alt=""></p>
<p>我原本stash只有一条记录，然后我在添加一下，为了测试如果不写id，恢复的是的第几个的记录。通过验证，发现stash是一个<strong>栈</strong>的结构，先进后出。恢复顶部的记录。然后也正是了git stash apply确实不会删除掉记录。然后如果执行<code>git statsh pop</code>确实会将其删除掉。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221452_315.png" alt=""></p>
<h3 id="工作流简述"><a href="#工作流简述" class="headerlink" title="工作流简述"></a>工作流简述</h3><p>现在进入分支管理,对于git来说，分支是它很强大的一种功能，如果只知道在<code>master</code>分支上工作，那是无法用好这种源代码管理工作进行多人协作的，所以我们需要进行<code>分支管理</code>，并且很多人摸索出一些<a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener" title="Git工作流">工作流</a></p>
<p><img src="http://cdn.xuxiaojin.com/202002221503_237.png" alt=""></p>
<p>这里对于小团队来说，可以用一些简单的工作流方式。</p>
<p><code>master</code>分支和<code>develop</code>分支共存，然后没开发一个功能就是从<code>develop</code>分支上开辟一个分支出来，然后写完之后合并到<code>develop</code>分支上，然后删除掉这个<code>feture</code>分支当<code>develop</code>分支上的版本比较稳定的时候，就可以将其合并到<code>master</code>分支上。</p>
<p><strong>分支的一些常用用法</strong></p>
<p>查看本地所有分支：<code>git branch</code></p>
<p><img src="http://cdn.xuxiaojin.com/202002221513_587.png" alt=""></p>
<p>查看所有分支包括远程分支:<code>git branch -av</code></p>
<p><img src="http://cdn.xuxiaojin.com/202002221513_99.png" alt=""></p>
<p>创建分支:<code>git branch &lt;name&gt;</code></p>
<p><img src="http://cdn.xuxiaojin.com/202002221542_746.png" alt=""></p>
<p>如果没有指定基于那个分支的话，默认基于当前<code>HEAD</code>分支。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221543_100.png" alt=""></p>
<p>切换分支:<code>git checkout &lt;name&gt;</code></p>
<p><img src="http://cdn.xuxiaojin.com/202002221545_194.png" alt=""></p>
<p><strong>合并某分支到当前分支</strong>：<code>git merge &lt;name&gt;</code></p>
<p>这个操作很常用的，需要注意</p>
<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
<p>这个操作也挺经常用的，如果不删除分支的话，那么一个项目开发下来，分支也太多了。</p>
<p><a href="https://www.atlassian.com/git/tutorials/syncing/git-fetch" target="_blank" rel="noopener" title="Git 远程操作"><strong>与远程相关的的一些操作</strong></a></p>
<p><code>git remote</code>列出你的git仓库远程连接的仓库</p>
<p><img src="http://cdn.xuxiaojin.com/202002221551_764.png" alt=""></p>
<p><code>git fetch</code>命令会从远程仓库下载commit的文件，但是并不会合并这些改变在你本地的环境</p>
<p><code>git push</code>命令将你本地的改变推送到远程仓库</p>
<p><code>git pull</code>命令是远程协作经常使用的命令，这个相当于<code>git fetch</code>和<code>git merge</code>这两条命令，会进行合并，但是合并也会带来冲突，这个在下面的场景中进行讲解。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221648_672.png" alt=""></p>
<h4 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h4><p>不同人修改不同的地方</p>
<p>记住每个人开发前都需要执行<code>git pull</code>以获取最新的代码</p>
<blockquote>
<p>git pull</p>
<p>先查看本地是否有develop分支，如果没有的话需要建立一个</p>
<p>git checkout -b develop origin/develop</p>
<p>git checkout -b feature develop</p>
<p>开发</p>
<p>git add .</p>
<p>git commit -m</p>
<p>git checkout develop</p>
<p>git merge feature</p>
<p>git pull</p>
<p>git push</p>
</blockquote>
<p><strong>开发者A</strong></p>
<p><img src="http://cdn.xuxiaojin.com/202002221655_688.png" alt=""></p>
<p>这个是在featuer分支上完成了开发，然后需要去develop分支上，然后git merge一下，在提交到远程的develop分支上。</p>
<p><strong>开发者B</strong></p>
<p>如果开发者B，在开发者A提交之后才进行<code>git pull</code>这个时候不会出现什么问题，但是我们假设两个开发者同时进行<code>git pull</code>，只不过提交的顺序是开发者A的提交顺序比较靠前。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221659_422.png" alt=""></p>
<p>git 还是比较聪明的，修改不同的地方会自己进行合并。这里需要区分<strong>合并</strong>和<strong>覆盖</strong></p>
<p>合并的意思就是将不同的地方就是整合起来，也就是如果有三个文件</p>
<p>A改了1,2</p>
<p>B改了2,3</p>
<p>那么当B执行了<code>git pull</code>的时候A修改的1中的部分会自动合并到，只不过文件2会发生冲突，需要手动合并。</p>
<p>覆盖的意思就是将A的所有文件覆盖到B上面。</p>
<h4 id="场景3"><a href="#场景3" class="headerlink" title="场景3"></a>场景3</h4><p>不同人修改了同文件的不同区域。</p>
<blockquote>
<p>git pull</p>
<p>git checkout -b feature develop</p>
<p>修改</p>
<p>git add .</p>
<p>git commit -m”修改的地方”</p>
<p>git checkout develop</p>
<p>git merge feature</p>
<p>git pull</p>
<p>git push</p>
</blockquote>
<p><strong>开发者A</strong></p>
<p><img src="http://cdn.xuxiaojin.com/202002221733_45.png" alt=""></p>
<p>对于开发者A来说，就是简单的操作。</p>
<p><strong>开发者B</strong></p>
<p><img src="http://cdn.xuxiaojin.com/202002221734_10.png" alt=""></p>
<p>开发者B在要push之前，执行<code>git pull</code>Git会自动将开发者A在readme里面修改的合并。Git还是比较智能的。</p>
<h4 id="场景4"><a href="#场景4" class="headerlink" title="场景4"></a>场景4</h4><p>不同人修改同一文件的同一地方</p>
<blockquote>
</blockquote>
<p><strong>开发者A</strong></p>
<p>开发者A还是正常开发，因为比开发者B先提交，所以不需要解决冲突</p>
<p><img src="http://cdn.xuxiaojin.com/202002221745_422.png" alt=""></p>
<p><strong>开发者B</strong></p>
<p>开发者B，在开发完自己的功能之后，然后需要git merge这个一切都是正常的。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221747_338.png" alt=""></p>
<p>然后要<code>git push</code>之前先执行<code>git pull</code>获取最新的代码时候就会出现冲突，可以通过<code>git status</code>来查看冲突的文件。</p>
<p><img src="http://cdn.xuxiaojin.com/202002221749_358.png" alt=""></p>
<p>从错误提示可以看到是都修改了README.md，所以需要进入到这个文件里，自己取舍哪些需要保留。然后执行<code>git add .</code>和<code>git commit -m</code>在提交上去</p>
<p><img src="http://cdn.xuxiaojin.com/202002221751_958.png" alt=""></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在学习GIT的时候发现其实很多东西不是很懂，这次也是为了理清自己在GIT上面的思路。当然这上面的工作流其实自己很纠结，因为我看到一些文章有一个git merge，如果在本地上没有develop的分支，好像没有mrege这个操作，不知道有没有想错。</p>
<p>可能需要后面继续深入学习的时候才会懂得如果去用。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>D3.js力导向图</title>
    <url>/403680216.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>需要图形化neo4j的项目需求</p>
<p>###力导向图</p>
<p>就是讲有节点和线组成，当鼠标拖拽一个节点时，其他节点都会受到影响。用来可视化neo4j图数据库。</p>
<p><a href="https://medium.com/@sxywu/understanding-the-force-ef1237017d5" target="_blank" rel="noopener">相关链接</a></p>
<blockquote>
<ul>
<li>The sum of the forces acting on each node by all other nodes</li>
<li>The force pushing and pulling between two linked nodes</li>
<li>The force pulling each node to a focal point, usually the center of the user-defined space</li>
</ul>
</blockquote>
<h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><blockquote>
<p>d3.forceSimulations([nodes])&lt;&gt;</p>
<p>新建一个力导向图。如果没有提供nodes，默认是空数组。</p>
<p>当simulatio运行的时候simulations.on来监听点击事件</p>
</blockquote>
<blockquote>
<p>d3.forceSimulation().force() 添加或者移除一个力</p>
<p>If <em>force</em> is specified, assigns the <a href="https://github.com/d3/d3-force#forces" target="_blank" rel="noopener">force</a> for the specified <em>name</em> and returns this simulation. If <em>force</em> is not specified, returns the force with the specified name, or undefined if there is no such force. (By default, new simulations have no forces.) For example, to create a new simulation to layout a graph, you might say:</p>
</blockquote>
<p>d3.forceSimulation().force(name)当force只有一个参数，这个参数就是某个力的名称，那么这段代码返回的是某个具体的力。例如 d3.forceSimulation().force(“link”) 则返回的是d3.forceLink()</p>
<blockquote>
<p>d3.forceSimulation().nodes() 输入的是一个数组，然后将这个输入的数组进行一定的数据转换，例如添加坐标什么的。</p>
<p>d3.forceSimulation().links()这里输入的是一个数组(边集),然后对输入的边集进行转换</p>
<p>tick函数，需要不断更新节点和连线的位置</p>
<p>d3.drag()是力导向图可以被拖动</p>
</blockquote>
<h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> marge = &#123;<span class="attr">top</span>:<span class="number">60</span>,<span class="attr">bottom</span>:<span class="number">60</span>,<span class="attr">left</span>:<span class="number">60</span>,<span class="attr">right</span>:<span class="number">60</span>&#125;</span><br><span class="line">    	<span class="keyword">var</span> svg = d3.select(<span class="string">"svg"</span>)</span><br><span class="line">    	<span class="keyword">var</span> width = svg.attr(<span class="string">"width"</span>)</span><br><span class="line">    	<span class="keyword">var</span> height = svg.attr(<span class="string">"height"</span>)</span><br><span class="line">    	<span class="keyword">var</span> g = svg.append(<span class="string">"g"</span>)</span><br><span class="line">    		.attr(<span class="string">"transform"</span>,<span class="string">"translate("</span>+marge.top+<span class="string">","</span>+marge.left+<span class="string">")"</span>);</span><br><span class="line">    		</span><br><span class="line">    	<span class="comment">//准备数据</span></span><br><span class="line">    	<span class="keyword">var</span> nodes = [<span class="comment">//节点集</span></span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"湖南邵阳"</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"山东莱州"</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"广东阳江"</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"山东枣庄"</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"泽"</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"恒"</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"鑫"</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"明山"</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">name</span>:<span class="string">"班长"</span>&#125;</span><br><span class="line">    	];</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">var</span> edges = [<span class="comment">//边集</span></span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">0</span>,<span class="attr">target</span>:<span class="number">4</span>,<span class="attr">relation</span>:<span class="string">"籍贯"</span>,<span class="attr">value</span>:<span class="number">1.3</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">4</span>,<span class="attr">target</span>:<span class="number">5</span>,<span class="attr">relation</span>:<span class="string">"舍友"</span>,<span class="attr">value</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">4</span>,<span class="attr">target</span>:<span class="number">6</span>,<span class="attr">relation</span>:<span class="string">"舍友"</span>,<span class="attr">value</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">4</span>,<span class="attr">target</span>:<span class="number">7</span>,<span class="attr">relation</span>:<span class="string">"舍友"</span>,<span class="attr">value</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">1</span>,<span class="attr">target</span>:<span class="number">6</span>,<span class="attr">relation</span>:<span class="string">"籍贯"</span>,<span class="attr">value</span>:<span class="number">2</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">2</span>,<span class="attr">target</span>:<span class="number">5</span>,<span class="attr">relation</span>:<span class="string">"籍贯"</span>,<span class="attr">value</span>:<span class="number">0.9</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">3</span>,<span class="attr">target</span>:<span class="number">7</span>,<span class="attr">relation</span>:<span class="string">"籍贯"</span>,<span class="attr">value</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">5</span>,<span class="attr">target</span>:<span class="number">6</span>,<span class="attr">relation</span>:<span class="string">"同学"</span>,<span class="attr">value</span>:<span class="number">1.6</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">6</span>,<span class="attr">target</span>:<span class="number">7</span>,<span class="attr">relation</span>:<span class="string">"朋友"</span>,<span class="attr">value</span>:<span class="number">0.7</span>&#125;,</span><br><span class="line">    		&#123;<span class="attr">source</span>:<span class="number">6</span>,<span class="attr">target</span>:<span class="number">8</span>,<span class="attr">relation</span>:<span class="string">"职责"</span>,<span class="attr">value</span>:<span class="number">2</span>&#125;</span><br><span class="line">    	];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>svg标签用来可以用来构建图像</p>
<p>g是svg的容器元素。<strong>添加到g元素上的变换都会应用其所有的子元素上</strong></p>
<p>点必须要有特殊的ids</p>
<p>边的数据必须有source和target</p>
</blockquote>
<p>上面数据渲染后</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">g</span> <span class="attr">transform</span>=<span class="string">"translate(146.3477113893629,263.7985425399116)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">"10"</span> <span class="attr">fill</span>=<span class="string">"#7f7f7f"</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"-10"</span> <span class="attr">y</span>=<span class="string">"-20"</span> <span class="attr">dy</span>=<span class="string">"10"</span>&gt;</span>明山<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置颜色比例尺"><a href="#设置颜色比例尺" class="headerlink" title="设置颜色比例尺"></a>设置颜色比例尺</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colorScale = d3.scaleOrdinal()</span><br><span class="line">    		.domain(d3.range(nodes.length))</span><br><span class="line">    		.range(d3.schemeCategory10);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Even better, you don’t have to know in advance which things the scale will encounter, as that correspondance can be built incrementally with incoming data.</p>
</blockquote>
<p>相当于给一个颜色尺子，对于来的数据，进行涂色</p>
<h3 id="新建一个力导向图"><a href="#新建一个力导向图" class="headerlink" title="新建一个力导向图"></a>新建一个力导向图</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> forceSimulation = d3.forceSimulation()</span><br><span class="line">    		.force(<span class="string">"link"</span>,d3.forceLink())</span><br><span class="line">    		.force(<span class="string">"charge"</span>,d3.forceManyBody())</span><br><span class="line">    		.force(<span class="string">"center"</span>,d3.forceCenter());</span><br></pre></td></tr></table></figure>

<p>这个是官网提供的，建立一个空的力导向图</p>
<p><strong>center</strong>把所有节点都放到center</p>
<p><strong>charge</strong>防止节点之间相互重叠</p>
<p><strong>link</strong>表名id是link变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> simulation = d3.forceSimulation()</span><br><span class="line">              .force(<span class="string">"center"</span>, d3.forceCenter(width/<span class="number">2</span>, height/<span class="number">2</span>))                  </span><br><span class="line">              .force(<span class="string">"charge"</span>, d3.forceManyBody())</span><br><span class="line">              .force(<span class="string">"link"</span>, d3.forceLink().id(<span class="function"><span class="keyword">function</span>(<span class="params">d =&gt;   d.id</span>)</span></span><br><span class="line"><span class="function">			<span class="title">simulation</span>.<span class="title">stop</span>(<span class="params"></span>)</span></span><br></pre></td></tr></table></figure>

<h3 id="生成节点数据"><a href="#生成节点数据" class="headerlink" title="生成节点数据"></a>生成节点数据</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">forceSimulation.nodes(nodes)</span><br><span class="line">    		.on(<span class="string">"tick"</span>,ticked);</span><br></pre></td></tr></table></figure>

<h3 id="生成边的数据"><a href="#生成边的数据" class="headerlink" title="生成边的数据"></a>生成边的数据</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">forceSimulation.force(<span class="string">"link"</span>)</span><br><span class="line">    		.links(edges)</span><br><span class="line">    		.distance(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    			<span class="keyword">return</span> d.value*<span class="number">100</span>;   <span class="comment">//对应边的长度</span></span><br><span class="line">    		&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="设置图形中心的位置"><a href="#设置图形中心的位置" class="headerlink" title="设置图形中心的位置"></a>设置图形中心的位置</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">forceSimulation.force(<span class="string">"center"</span>)</span><br><span class="line">    		.x(width/<span class="number">2</span>)</span><br><span class="line">    		.y(height/<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h3 id="绘制边"><a href="#绘制边" class="headerlink" title="绘制边"></a>绘制边</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> links = g.append(<span class="string">"g"</span>)</span><br><span class="line">	.selectAll(<span class="string">"line"</span>)</span><br><span class="line">	.data(edges)</span><br><span class="line">	.enter()</span><br><span class="line">	.append(<span class="string">"line"</span>)</span><br><span class="line">	.attr(<span class="string">"stroke"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> colorScale(i);   <span class="comment">//颜色</span></span><br><span class="line">	&#125;)</span><br><span class="line">	.attr(<span class="string">"stroke-width"</span>,<span class="number">1</span>);  <span class="comment">//宽度</span></span><br></pre></td></tr></table></figure>

<h3 id="边上的文字"><a href="#边上的文字" class="headerlink" title="边上的文字"></a>边上的文字</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> linksText = g.append(<span class="string">"g"</span>)</span><br><span class="line">    		.selectAll(<span class="string">"text"</span>)</span><br><span class="line">    		.data(edges)</span><br><span class="line">    		.enter()</span><br><span class="line">    		.append(<span class="string">"text"</span>)</span><br><span class="line">    		.text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    			<span class="keyword">return</span> d.relation;</span><br><span class="line">    		&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="建立用来放每个节点和文字的分组g"><a href="#建立用来放每个节点和文字的分组g" class="headerlink" title="建立用来放每个节点和文字的分组g"></a>建立用来放每个节点和文字的分组g</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gs = g.selectAll(<span class="string">".circleText"</span>)</span><br><span class="line">    		.data(nodes)</span><br><span class="line">    		.enter()</span><br><span class="line">    		.append(<span class="string">"g"</span>)</span><br><span class="line">    		.attr(<span class="string">"transform"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</span><br><span class="line">    			<span class="keyword">var</span> cirX = d.x;</span><br><span class="line">    			<span class="keyword">var</span> cirY = d.y;</span><br><span class="line">    			<span class="keyword">return</span> <span class="string">"translate("</span>+cirX+<span class="string">","</span>+cirY+<span class="string">")"</span>;</span><br><span class="line">    		&#125;)</span><br><span class="line">    		.call(d3.drag()</span><br><span class="line">    			.on(<span class="string">"start"</span>,started)</span><br><span class="line">    			.on(<span class="string">"drag"</span>,dragged)</span><br><span class="line">    			.on(<span class="string">"end"</span>,ended)</span><br><span class="line">    		);</span><br></pre></td></tr></table></figure>

<h3 id="节点和文字"><a href="#节点和文字" class="headerlink" title="节点和文字"></a>节点和文字</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gs.append(<span class="string">"circle"</span>)</span><br><span class="line">    		.attr(<span class="string">"r"</span>,<span class="number">15</span>)</span><br><span class="line">    		.attr(<span class="string">"fill"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</span><br><span class="line">    			<span class="keyword">return</span> colorScale(i);</span><br><span class="line">    		&#125;)</span><br><span class="line">    	<span class="comment">//文字</span></span><br><span class="line">    		gs.append(<span class="string">"text"</span>)</span><br><span class="line">    			.attr(<span class="string">"x"</span>,<span class="number">-10</span>)</span><br><span class="line">    			.attr(<span class="string">"y"</span>,<span class="number">-20</span>)</span><br><span class="line">    			.attr(<span class="string">"dy"</span>,<span class="number">10</span>)</span><br><span class="line">    			.text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    				<span class="keyword">return</span> d.name;</span><br><span class="line">				&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ticked</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    		links</span><br><span class="line">    			.attr(<span class="string">"x1"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> d.source.x;&#125;)</span><br><span class="line">    			.attr(<span class="string">"y1"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> d.source.y;&#125;)</span><br><span class="line">    			.attr(<span class="string">"x2"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> d.target.x;&#125;)</span><br><span class="line">    			.attr(<span class="string">"y2"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> d.target.y;&#125;);</span><br><span class="line">    			</span><br><span class="line">    		linksText</span><br><span class="line">    			.attr(<span class="string">"x"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    			<span class="keyword">return</span> (d.source.x+d.target.x)/<span class="number">2</span>;</span><br><span class="line">    		&#125;)</span><br><span class="line">    		.attr(<span class="string">"y"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    			<span class="keyword">return</span> (d.source.y+d.target.y)/<span class="number">2</span>;</span><br><span class="line">    		&#125;);</span><br><span class="line">    			</span><br><span class="line">    		gs</span><br><span class="line">    			.attr(<span class="string">"transform"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> <span class="string">"translate("</span> + d.x + <span class="string">","</span> + d.y + <span class="string">")"</span>; &#125;);</span><br><span class="line"></span><br><span class="line">    		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">started</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    		<span class="keyword">if</span>(!d3.event.active)&#123;</span><br><span class="line">    			forceSimulation.alphaTarget(<span class="number">0.8</span>).restart();</span><br><span class="line">    		&#125;</span><br><span class="line">    		d.fx = d.x;</span><br><span class="line">    		d.fy = d.y;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="function"><span class="keyword">function</span> <span class="title">dragged</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    		d.fx = d3.event.x;</span><br><span class="line">    		d.fy = d3.event.y;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="function"><span class="keyword">function</span> <span class="title">ended</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    		<span class="keyword">if</span>(!d3.event.active)&#123;</span><br><span class="line">    			forceSimulation.alphaTarget(<span class="number">0</span>);</span><br><span class="line">    		&#125;</span><br><span class="line">    		d.fx = <span class="literal">null</span>;</span><br><span class="line">    		d.fy = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>D3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://d3js.org/d3.v5.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">		</span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> marge = &#123;top:<span class="number">60</span>,bottom:<span class="number">60</span>,left:<span class="number">60</span>,right:<span class="number">60</span>&#125;</span></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> svg = d3.select(<span class="string">"svg"</span>)</span></span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"width"</span>,<span class="number">400</span>)</span></span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"height"</span>,<span class="number">600</span>)</span></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> width = svg.attr(<span class="string">"width"</span>)</span></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> height = svg.attr(<span class="string">"height"</span>)</span></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> g = svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">    		.attr(<span class="string">"transform"</span>,<span class="string">"translate("</span>+marge.top+<span class="string">","</span>+marge.left+<span class="string">")"</span>);</span></span><br><span class="line">    		</span><br><span class="line"><span class="actionscript">    	<span class="comment">//准备数据</span></span></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> nodes = [<span class="comment">//节点集</span></span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"湖南邵阳"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"山东莱州"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"广东阳江"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"山东枣庄"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"泽"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"恒"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"鑫"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"明山"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;name:<span class="string">"班长"</span>&#125;</span></span><br><span class="line">    	];</span><br><span class="line">    	</span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> edges = [<span class="comment">//边集</span></span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">0</span>,target:<span class="number">4</span>,relation:<span class="string">"籍贯"</span>,value:<span class="number">1.3</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">4</span>,target:<span class="number">5</span>,relation:<span class="string">"舍友"</span>,value:<span class="number">1</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">4</span>,target:<span class="number">6</span>,relation:<span class="string">"舍友"</span>,value:<span class="number">1</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">4</span>,target:<span class="number">7</span>,relation:<span class="string">"舍友"</span>,value:<span class="number">1</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">1</span>,target:<span class="number">6</span>,relation:<span class="string">"籍贯"</span>,value:<span class="number">2</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">2</span>,target:<span class="number">5</span>,relation:<span class="string">"籍贯"</span>,value:<span class="number">0.9</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">3</span>,target:<span class="number">7</span>,relation:<span class="string">"籍贯"</span>,value:<span class="number">1</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">5</span>,target:<span class="number">6</span>,relation:<span class="string">"同学"</span>,value:<span class="number">1.6</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">6</span>,target:<span class="number">7</span>,relation:<span class="string">"朋友"</span>,value:<span class="number">0.7</span>&#125;,</span></span><br><span class="line"><span class="actionscript">    		&#123;source:<span class="number">6</span>,target:<span class="number">8</span>,relation:<span class="string">"职责"</span>,value:<span class="number">2</span>&#125;</span></span><br><span class="line">    	];</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    	<span class="comment">//设置一个color的颜色比例尺，为了让不同的扇形呈现不同的颜色</span></span></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> colorScale = d3.scaleOrdinal()</span></span><br><span class="line">    		.domain(d3.range(nodes.length))</span><br><span class="line">    		.range(d3.schemeCategory10);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> forceSimulation = d3.forceSimulation()</span></span><br><span class="line"><span class="actionscript">    		.force(<span class="string">"link"</span>,d3.forceLink())</span></span><br><span class="line"><span class="actionscript">    		.force(<span class="string">"charge"</span>,d3.forceManyBody())</span></span><br><span class="line"><span class="actionscript">    		.force(<span class="string">"center"</span>,d3.forceCenter());</span></span><br><span class="line"></span><br><span class="line">    	forceSimulation.nodes(nodes)</span><br><span class="line"><span class="actionscript">    		.on(<span class="string">"tick"</span>,ticked);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    	forceSimulation.force(<span class="string">"link"</span>)</span></span><br><span class="line">    		.links(edges)</span><br><span class="line"><span class="actionscript">    		.distance(<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">return</span> d.value*<span class="number">100</span>;</span></span><br><span class="line">    		&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    	forceSimulation.force(<span class="string">"center"</span>)</span></span><br><span class="line">    		.x(width/2)</span><br><span class="line">    		.y(height/2);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    	<span class="built_in">console</span>.log(nodes)</span></span><br><span class="line"><span class="javascript">    	<span class="built_in">console</span>.log(edges)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> links = g.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">    		.selectAll(<span class="string">"line"</span>)</span></span><br><span class="line">    		.data(edges)</span><br><span class="line">    		.enter()</span><br><span class="line"><span class="actionscript">    		.append(<span class="string">"line"</span>)</span></span><br><span class="line"><span class="actionscript">    		.attr(<span class="string">"stroke"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d,i)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">return</span> colorScale(i);</span></span><br><span class="line">    		&#125;)</span><br><span class="line"><span class="actionscript">    		.attr(<span class="string">"stroke-width"</span>,<span class="number">1</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    	<span class="keyword">var</span> linksText = g.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">    		.selectAll(<span class="string">"text"</span>)</span></span><br><span class="line">    		.data(edges)</span><br><span class="line">    		.enter()</span><br><span class="line"><span class="actionscript">    		.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">    		.text(<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">return</span> <span class="string">'COVER'</span>;</span></span><br><span class="line">    		&#125;)</span><br><span class="line">   </span><br><span class="line">		</span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> gs = g.selectAll(<span class="string">".circleText"</span>)</span></span><br><span class="line">    		.data(nodes)</span><br><span class="line">    		.enter()</span><br><span class="line"><span class="actionscript">    		.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">    		.attr(<span class="string">"transform"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d,i)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">var</span> cirX = d.x;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">var</span> cirY = d.y;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">return</span> <span class="string">"translate("</span>+cirX+<span class="string">","</span>+cirY+<span class="string">")"</span>;</span></span><br><span class="line">    		&#125;)</span><br><span class="line">    		.call(d3.drag()</span><br><span class="line"><span class="actionscript">    			.on(<span class="string">"start"</span>,started)</span></span><br><span class="line"><span class="actionscript">    			.on(<span class="string">"drag"</span>,dragged)</span></span><br><span class="line"><span class="actionscript">    			.on(<span class="string">"end"</span>,ended)</span></span><br><span class="line">    		);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    		gs.append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">    		.attr(<span class="string">"r"</span>,<span class="number">15</span>)</span></span><br><span class="line"><span class="actionscript">    		.attr(<span class="string">"fill"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d,i)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">return</span> colorScale(i);</span></span><br><span class="line">    		&#125;)</span><br><span class="line"><span class="actionscript">    	<span class="comment">//文字</span></span></span><br><span class="line"><span class="actionscript">    		gs.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"x"</span>,<span class="number">-10</span>)</span></span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"y"</span>,<span class="number">-20</span>)</span></span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"dy"</span>,<span class="number">10</span>)</span></span><br><span class="line"><span class="actionscript">    			.text(<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    				<span class="keyword">return</span> d.name;</span></span><br><span class="line">				&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">ticked</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">    		links</span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"x1"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d.source.x;&#125;)</span></span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"y1"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d.source.y;&#125;)</span></span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"x2"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d.target.x;&#125;)</span></span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"y2"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d.target.y;&#125;);</span></span><br><span class="line">    			</span><br><span class="line">    		linksText</span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"x"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">return</span> (d.source.x+d.target.x)/<span class="number">2</span>;</span></span><br><span class="line">    		&#125;)</span><br><span class="line"><span class="actionscript">    		.attr(<span class="string">"y"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    			<span class="keyword">return</span> (d.source.y+d.target.y)/<span class="number">2</span>;</span></span><br><span class="line">    		&#125;);</span><br><span class="line">    			</span><br><span class="line">    		gs</span><br><span class="line"><span class="actionscript">    			.attr(<span class="string">"transform"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> <span class="string">"translate("</span> + d.x + <span class="string">","</span> + d.y + <span class="string">")"</span>; &#125;);</span></span><br><span class="line"></span><br><span class="line">    		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">started</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line">    		if(!d3.event.active)&#123;</span><br><span class="line">    			forceSimulation.alphaTarget(0.8).restart();</span><br><span class="line">    		&#125;</span><br><span class="line">    		d.fx = d.x;</span><br><span class="line">    		d.fy = d.y;</span><br><span class="line">    	&#125;</span><br><span class="line"><span class="actionscript">    	<span class="function"><span class="keyword">function</span> <span class="title">dragged</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line">    		d.fx = d3.event.x;</span><br><span class="line">    		d.fy = d3.event.y;</span><br><span class="line">    	&#125;</span><br><span class="line"><span class="actionscript">    	<span class="function"><span class="keyword">function</span> <span class="title">ended</span><span class="params">(d)</span></span>&#123;</span></span><br><span class="line">    		if(!d3.event.active)&#123;</span><br><span class="line">    			forceSimulation.alphaTarget(0);</span><br><span class="line">    		&#125;</span><br><span class="line"><span class="actionscript">    		d.fx = <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">    		d.fy = <span class="literal">null</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>D3.js</tag>
      </tags>
  </entry>
  <entry>
    <title>恢复mysql数据库</title>
    <url>/934426894.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天数据库一直被偷，然后必应如何恢复。发现自己的安全意识太弱。</p>
<p>然后重装服务器系统，权限限制，密码增强。</p>
<p>并且学一下备份数据，还有就是binlog恢复数据</p>
<h3 id="MYSQL安全"><a href="#MYSQL安全" class="headerlink" title="MYSQL安全"></a>MYSQL安全</h3><h4 id="相关信息"><a href="#相关信息" class="headerlink" title="相关信息"></a>相关信息</h4><p>MYSQL将用户的相关信息(认证信息，权限信息)都存储在了mysql.user的这个系统表中，在这个系统表中可以通过增删改查操作，来定义和管理用户的认证信息，权限列表等。</p>
<h4 id="授权机制"><a href="#授权机制" class="headerlink" title="授权机制"></a>授权机制</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> db.table <span class="keyword">to</span> <span class="keyword">user</span>@<span class="string">"127.0.0.1"</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">"password"</span></span><br></pre></td></tr></table></figure>

<p>主体是通过用户名,ip和密码这三个部分信息组合起来进行标记的</p>
<p>客体是数据库和表</p>
<h3 id="通过binlog恢复数据库数据"><a href="#通过binlog恢复数据库数据" class="headerlink" title="通过binlog恢复数据库数据"></a>通过binlog恢复数据库数据</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%log_bin%'</span>;  //查看binlog是否打开</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">logs</span>; //查看所有binlog日志文件列表</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">status</span>; //查看最后一个操作事件pos结束点的值</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">logs</span>; //刷新日志，此刻开始产生一个新编号的binlog文件</span><br></pre></td></tr></table></figure>

<h4 id="查看binlog文件内容"><a href="#查看binlog文件内容" class="headerlink" title="查看binlog文件内容"></a>查看binlog文件内容</h4><h5 id="mysqlbinlog"><a href="#mysqlbinlog" class="headerlink" title="mysqlbinlog"></a>mysqlbinlog</h5><p>首先进入mysql，设置binlog的格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">set global binlog_format&#x3D;&#39;ROW&#39;</span><br></pre></td></tr></table></figure>

<p>然后进入<code>var/lib/mysql</code></p>
<p>通过mysqlbinlog查看数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqlbinlog --base64-output&#x3D;&quot;decode-row&quot; binlog.000016 --stop-datetime&#x3D;&#39;时间&#39;</span><br></pre></td></tr></table></figure>

<p>这个时间跟北京时间大概差6个小时</p>
<p>恢复的时候</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p -f &lt;....sql</span><br></pre></td></tr></table></figure>

<p>-f表示碰到错误跳过继续执行</p>
<h3 id="Mysqldump数据备份"><a href="#Mysqldump数据备份" class="headerlink" title="Mysqldump数据备份"></a>Mysqldump数据备份</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -p  [databasename] &gt;[dump file]</span><br></pre></td></tr></table></figure>

<p>上述命令将制定的数据库备份到dump文件中，包含生成数据库结构哦，和插入数据的insert语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -p test -F  &gt; test.sql</span><br><span class="line"></span><br><span class="line">-F刷新日志</span><br></pre></td></tr></table></figure>

<h4 id="只备份表结构"><a href="#只备份表结构" class="headerlink" title="只备份表结构"></a>只备份表结构</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump --no-data --databases mydatabase1 mydatabase2 &gt;test.dump</span><br></pre></td></tr></table></figure>

<h4 id="从备份文件恢复数据库"><a href="#从备份文件恢复数据库" class="headerlink" title="从备份文件恢复数据库"></a>从备份文件恢复数据库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql [databasename]&lt;[backup file name]</span><br><span class="line">mysql -uroot -p databasename -f &lt;test.sql</span><br><span class="line"></span><br><span class="line">-f指中间发生错误，可以skip过去，继续执行下面语句</span><br></pre></td></tr></table></figure>

<h3 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h3><p>因为全量备份，占用的磁盘空间非常大，每次备份的时候都需要拷贝大量数据，在备份的过程中需要占用服务器大量的CPU、磁盘IO。</p>
<p><strong>增量备份</strong>其实也不是全新的词，其实就是将binlog里面的SQL语句进行备份.</p>
<h4 id="删库逃跑实战"><a href="#删库逃跑实战" class="headerlink" title="删库逃跑实战"></a>删库逃跑实战</h4><p>首先进行备份</p>
<p><img src="http://cdn.xuxiaojin.com/202003130851_378.png" alt=""></p>
<p>然后对数据进行修改</p>
<p><img src="http://cdn.xuxiaojin.com/202003130852_553.png" alt=""></p>
<p>删库</p>
<p><img src="http://cdn.xuxiaojin.com/202003130853_970.png" alt=""></p>
<p>首先恢复全量备份</p>
<p>【这一步做的不规范，其实要进行一次flush logs;刷新Log，这样的后面改的就不会影响log】</p>
<p><img src="http://cdn.xuxiaojin.com/202003130855_979.png" alt=""></p>
<p><img src="http://cdn.xuxiaojin.com/202003130855_338.png" alt=""></p>
<p>现在通过binlog进行恢复</p>
<ol>
<li>首先查看binlog所在的位置</li>
</ol>
<p><img src="http://cdn.xuxiaojin.com/202003130858_965.png" alt=""></p>
<ol start="2">
<li>增量恢复(增量备份其实是binlog做的)</li>
</ol>
<p><img src="http://cdn.xuxiaojin.com/202003130901_874.png" alt=""></p>
<p><img src="http://cdn.xuxiaojin.com/202003130910_807.png" alt=""></p>
<p>查看binlog的话，大概看到在8:52:29的位置，后面出现了<code>删库</code>。</p>
<p><img src="http://cdn.xuxiaojin.com/202003130940_602.png" alt=""></p>
<p><strong>注意</strong>：时间用””</p>
<p><img src="http://cdn.xuxiaojin.com/202003130941_2.png" alt=""></p>
<p>恢复成功！！</p>
]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>String真的懂了吗？</title>
    <url>/645459617.html</url>
    <content><![CDATA[<hr>
<h2 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h2><p>先前记得是看过相关知识点，但是缺少联系，所以有点忘。这次重新激活相关节点。</p>
<h3 id="JVM内存"><a href="#JVM内存" class="headerlink" title="JVM内存"></a>JVM内存</h3><p>要理解string,首先得理解JVM内存是怎么一回事。</p>
<p><img src="http://cdn.xuxiaojin.com/jvm%E5%86%85%E5%AD%98%E5%88%9D%E7%89%88.jpg" alt="Alt text"></p>
<p>蓝色区域是每个线程独有的，而堆和方法区是java进程共享的。</p>
<p>一般在启动java类的时候，会将方法加载到方法区里。</p>
<p>然后main创建一个线程，并且将该方法放到java栈里，会划分一个栈帧，里面保存的是该方法里面的变量等，所以在不同方法里，用的是同一个变量并不会混淆，因为都有自己的一个栈帧。并且栈是一个<strong>先进后出</strong>的结构，所以在最上面的就是当前执行的方法。</p>
<p>堆里面存储的运行过程中创建的<strong>对象实例</strong></p>
<p>【以上的理解还比较简陋】</p>
<h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><p>栈对应数据结构里的栈，保护现场用栈【计组或者微机】，程序计数器cs:ip寄存器，可以表示下一条指令，堆用来存储运行时实例。</p>
<p>因为线程之间的隔离，可能会出现一些并发的问题，例如数据不一致等问题。这个是并发要解决的问题。</p>
<h3 id="String的不可变性"><a href="#String的不可变性" class="headerlink" title="String的不可变性"></a>String的不可变性</h3><p>首先String是<strong>不可变性</strong>，这会带来一些好处，例如hashmap缓存的时候不用改变，不容易被修改，以及可以使用<strong>常量池</strong>。</p>
<p>当然，这里举一个比较常见的误区，就是String str=”hello”,str=”World”</p>
<p><strong>这里不就变了？</strong></p>
<p>不是的，这个是str引用的对象遍历，而不是hello变了。</p>
<p>因为string的不可变性，在运行的过程中会出现一些中间的匿名String对象，<strong>但是jvm是会对其进行优化的</strong></p>
<p>不过在进行字符串拼接的过程中，如果<strong>不考虑线程安全的</strong>使用StringBuilder，考虑的话使用StringBuffer，还是一个比较好的习惯</p>
<h3 id="String的创建方式"><a href="#String的创建方式" class="headerlink" title="String的创建方式"></a>String的创建方式</h3><p>先看下面这个代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       String str1=<span class="string">"abc"</span>;</span><br><span class="line">       String str2=<span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">       String str3=str2.intern();</span><br><span class="line">       </span><br><span class="line">       System.out.println(str1==str2);</span><br><span class="line">       System.out.println(str2==str3);</span><br><span class="line">       System.out.println(str1==str3);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>可以猜一下运行的结果。</p>
<p>先来看一下分析</p>
<blockquote>
<p>Str1是通过常量进行创建的，所以abc会存储在常量池中【如果创建的时候，常量池没有abc】，如果有的话直接返回。</p>
<p>Str2是通过New这个变量来创建的。</p>
<p>有一道题目是指该语句创建了几个对象，答案是两个。</p>
<p>首先在类加载的时候，abc会被放到常量池里，new调用构造函数的时候,abc会放到堆里。并且返回<strong>堆的引用</strong></p>
<p>str3是通过intern()创建的，这个intern()首先会先到常量池里查看是否有abc，如果有直接返回常量池里的引用，如果没有的话，会创建并且把值放到常量池里。</p>
</blockquote>
<p>==不同于equals是==不仅对比值，还对比地址。只有当两者完全一样才会返回true。</p>
<p>所以上面运行的结果应该是false,false，true</p>
<p><img src="http://cdn.xuxiaojin.com/javaString.jpg" alt="Alt text"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.journaldev.com/7929/java-string-intern" target="_blank" rel="noopener">java string intern</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存是把双刃剑</title>
    <url>/3009568822.html</url>
    <content><![CDATA[<hr>
<h2 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h2><p>昨天重构项目的时候，发现自己用的缓存太过于暴力【直接暴力缓存】，所以补点缓存的知识。</p>
<h3 id="缓存的本质"><a href="#缓存的本质" class="headerlink" title="缓存的本质"></a>缓存的本质</h3><p>缓存实际上就是为了减少某种资源的重复获取而带来的开销，通过<strong>数据副本</strong>来实现。</p>
<p>一般来说，我们应用到缓存的出发点从<strong>延迟</strong>【即减少访问时间】和<strong>吞吐量</strong>出发。</p>
<blockquote>
<p>事务的出现是为了解决复杂写操作的原子性问题</p>
<p>缓存的出现是为了解决多次读操作的开销问题</p>
</blockquote>
<p>缓存的本质有</p>
<ol>
<li>对资源的获取，从HTTP的方法里，我们可以知道对数据的获取有幂等性和安全性，这样的操作【对资源的访问具有幂等性和安全性】才可以被抽象成缓存</li>
<li>必须是重复获取的，因为缓存实际上是以<strong>空间换时间</strong>，所以如果某个资源不经常获取或者只获取一次，那就没有必要缓存。</li>
<li>减少资源的开销，这里不但是是数据库的访问，还有网络IO等</li>
<li>快，当然这里的快是相对的。</li>
</ol>
<h4 id="用缓存解释访问www-xuxiaojin-com"><a href="#用缓存解释访问www-xuxiaojin-com" class="headerlink" title="用缓存解释访问www.xuxiaojin.com"></a>用缓存解释访问<a href="http://www.xuxiaojin.com" target="_blank" rel="noopener">www.xuxiaojin.com</a></h4><p>这个很经典，等学到网络里面，这个又是一个另外一种角度的解释。</p>
<p>客户端</p>
<ol>
<li>首先会在浏览器里的<strong>“域名-IP”缓存</strong>查看该网址的IP【如果你原先在浏览器中输入过该网址，可能会被缓存起来】</li>
<li>如果没有，那将在本地的操作系统中，查看<strong>域名映射缓存</strong>，查看是否有该域名的信息【有时候可以自己手动做一个域名映射】</li>
<li>在没有的话，将在DNS服务器，查询对应的域名和<strong>可缓存的时间</strong></li>
</ol>
<p>然后就到了服务端，这里以MVC的架构</p>
<ol start="4">
<li>在Controller层，有可能会有<strong>拦截过滤缓存</strong>，如果直接匹配某个过滤条件，将直接返回结果【这个高级我还没有学到】</li>
<li>Model层一般都会有对应的<strong>缓存</strong></li>
<li>View视图层并不需要从头渲染，会有对应的<strong>缓存</strong></li>
</ol>
<h3 id="应用模式"><a href="#应用模式" class="headerlink" title="应用模式"></a>应用模式</h3><p>讨论几种在应用中缓存使用的模式</p>
<h4 id="Cache-Aside"><a href="#Cache-Aside" class="headerlink" title="Cache-Aside"></a>Cache-Aside</h4><ul>
<li>读数据策略：先访问Cache，如果有直接返回。如果没有数据，将从原始操作中读取返回并将结果写入到缓存中。</li>
<li>更新数据策略：<ul>
<li>原则：先更新数据库，在让缓存<strong>失效</strong></li>
<li>两个异常：<ul>
<li>先让缓存失效，在更新数据库：如果同时有两个请求。A用来更新，B用来获取。如果A让缓存失效，这个时候B访问，缓存失效，将从数据库中读取数据【这个数据是旧数据】写回到缓存中去，A请求在更新数据库。这个时候将出现数据不一致的情况</li>
<li>先更新数据库，在更新缓存：如果同时有两个请求。A、B都用来更新。如果A先更新，B后更新。保证数据库的结果是B，但是更新缓存的顺序有可能B先更新，所以导致缓存里的数据是A。出现数据不一致的现象</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Read-through"><a href="#Read-through" class="headerlink" title="Read-through"></a>Read-through</h4><p>这个是完全将数据库对应用屏蔽起来，应用只能访问缓存</p>
<ul>
<li>读策略：访问Cache，如果有直接访问。如果没有数据，缓存向数据库请求并将结果写入到Cache，Cache返回给应用</li>
</ul>
<h4 id="Write-Through"><a href="#Write-Through" class="headerlink" title="Write-Through"></a>Write-Through</h4><p>这个是用来更新 策略，同上一样是将数据库隐藏起来</p>
<ul>
<li>更新策略：如果cache有，将先更新cache，并且cache更新数据库。cache返回给应用更新成功</li>
<li>异常：<ul>
<li>如果cache更新失败，直接返回失败</li>
<li>如果cache更新成功，数据库更新失败。那只能通过数据回滚，或者是删掉该缓存</li>
</ul>
</li>
</ul>
<h4 id="write-back"><a href="#write-back" class="headerlink" title="write-back"></a>write-back</h4><p>不同于上面的更新，write-back是更新cache后就返回，而更新数据库是留给<strong>异步</strong>来处理【听说是使用消息队列】</p>
<p>【这个跟计算机的底层关于Cache的更新操作很像，底层的更新有两种策略，写直达和写回操作，而这个就是写回操作，虽然说减少了跟数据库IO的次数，因为可以整合更新，但是在设计上更难了，得标记脏数据】</p>
<h3 id="缓存带来的问题"><a href="#缓存带来的问题" class="headerlink" title="缓存带来的问题"></a>缓存带来的问题</h3><h4 id="缓存穿刺"><a href="#缓存穿刺" class="headerlink" title="缓存穿刺"></a>缓存穿刺</h4><p>如果有大量请求，请求一个KEY，但是数据库跟缓存里都没有这个值，这个时候就会出现缓存穿刺的现象。因为缓存并没有起到屏蔽的作用，所有请求压力都到了数据库这里。</p>
<p>解决的办法：通过key缓存一个空值，或者通过过滤器提前过滤掉没有值的请求</p>
<h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>如果突然<strong>缓存命中率</strong>降低【因为断电等现象】，大量请求到了后端，会使得后端突然来了大量的请求压力而崩掉。</p>
<p>还有一种可能就是突然大量请求，但是cache没有，这时候第一个请求还未将结果写到cache中，其他请求就已经到了后端。</p>
<p>解决的办法：<strong>限流</strong>，后端限制请求的数量。<strong>预热</strong>，提前将热点信息放到缓存中，但是得判断哪些信息是热点</p>
<p>【预热其实底层有一种类似的实现，就是cache没有命中的时候，会将其周围的<strong>块</strong>一起拿到cache中，体现了程序的相关性】</p>
<h4 id="缓存容量失控"><a href="#缓存容量失控" class="headerlink" title="缓存容量失控"></a>缓存容量失控</h4><p>缓存容量过大，例如通过write-back机制，但是在异步写回期间，缓存容量突然变大</p>
<h4 id="LRU替换算法"><a href="#LRU替换算法" class="headerlink" title="LRU替换算法"></a>LRU替换算法</h4><p>虽然这个算法看起来比较靠谱，但是实际中，这个算法并不会考虑数据的有效性，例如爬虫爬到的都是老的数据，那么缓存中都是老的数据</p>
<p>解决方法：更换替换算法例如LFU</p>
<p>【这个都是计算机底层的替换算法】</p>
<h3 id="概念图"><a href="#概念图" class="headerlink" title="概念图"></a>概念图</h3><p><img src="http://cdn.xuxiaojin.com/cache.jpg" alt="缓存概念图"></p>
]]></content>
      <tags>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>Externalized Configuration文档翻译</title>
    <url>/2734029370.html</url>
    <content><![CDATA[<hr>
<h1 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a>SpringApplication</h1><p>SpringApplication提供了一种遍历的方式来引导从main方法里启动的spring 应用。在许多情况下，你可以将其委派给SpringApplication.run方法，就像下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	SpringApplication.run(MySpringConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="启动失败"><a href="#启动失败" class="headerlink" title="启动失败"></a>启动失败</h2><p>如果你的应用启动失败，registered FailureAnalyzers会有一个机会提供专用的错误信息和一个具体的方案来解决该问题。</p>
<blockquote>
<p>SpringBoot 提供了许多FailureAnalyzer实现</p>
</blockquote>
<p>如果没有failure analyzer能够处理该异常，你仍然可以显示所有情况来更好的理解什么问题出错了。你可以通过内嵌debug属性或者给<code>org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</code>内嵌DEBUG logging。</p>
<p>例如，如果你通过java -jar 启动你的应用，你可以通过以下方式来内嵌debug属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ java -jar myproject-<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT.jar --debug</span><br></pre></td></tr></table></figure>

<h2 id="customizing-the-Banner"><a href="#customizing-the-Banner" class="headerlink" title="customizing the Banner"></a>customizing the Banner</h2><p>就是制定启动标志。。(花里胡哨)</p>
<h2 id="Customizing-SpringApplication"><a href="#Customizing-SpringApplication" class="headerlink" title="Customizing SpringApplication"></a>Customizing SpringApplication</h2><p>如果springapplication默认情况不符合你的胃口，你可以建立一个local instance并且自定义它来替代。例如，你可以这么写来关掉banner:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	SpringApplication app = <span class="keyword">new</span> SpringApplication(MySpringConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	app.setBannerMode(Banner.Mode.OFF);</span><br><span class="line">	app.run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Fluent-Builder-API"><a href="#Fluent-Builder-API" class="headerlink" title="Fluent Builder API"></a>Fluent Builder API</h2><p>如果你想要构建的一个Application有多个等级，或者你更喜欢使用一个流利的builder API,你可以使用SpringApplicationBuilder.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> SpringApplicationBuilder()</span><br><span class="line">		.sources(Parent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">		.<span class="title">child</span>(<span class="title">Application</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">		.<span class="title">bannerMode</span>(<span class="title">Banner</span>.<span class="title">Mode</span>.<span class="title">OFF</span>)</span></span><br><span class="line"><span class="class">		.<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Application-Events-and-Listeners"><a href="#Application-Events-and-Listeners" class="headerlink" title="Application Events and Listeners"></a>Application Events and Listeners</h2><p>除了通常使用的spring framework events。例如ContextRefreshedEvent。SpringApplication添加了许多额外的应用事件。</p>
<h2 id="Web环境"><a href="#Web环境" class="headerlink" title="Web环境"></a>Web环境</h2><p>SpringApplication尝试代表你创建ApplicationContext.用来确定WebApplicationType的算法相当简单。</p>
<ul>
<li>如果Spring MVC存在，<code>AnnotationConfigServletWebServerApplicationContext</code> 被使用。</li>
<li>如果Spring MVC不存在，spring webflux存在。<code>AnnotationConfigReactiveWebServerApplicationContext</code> 被使用</li>
<li>其他情况下，<code>AnnotationConfigApplicationContext</code> 被使用</li>
</ul>
<p>这意味着，如果你在一个项目里使用了Spring mvc和来自Spring WebFlux新的WebClient。Spring MVC会被默认使用，你可以通过调用setWebApplicationType(WebApplicationType)来重构它。</p>
<p>通过调用setApplicationContextClass(…)是可以对ApplicationContext完全掌控的。</p>
<blockquote>
<p>在使用JUnit进行测试的时候，经常希望调用setWebApplicationType(WebApplicationType.NONE)</p>
</blockquote>
<h2 id="访问应用程序参数"><a href="#访问应用程序参数" class="headerlink" title="访问应用程序参数"></a>访问应用程序参数</h2><p>如果你需要访问通过SpringApplication.run(…)传入的应用参数，你可以通过注入org.springframework.boot.ApplicationArguments bean。AppliationArguments接口不仅提供可以访问通过原生的String[]参数也可以通过解析option和non-option参数。如下面例子所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBean</span><span class="params">(ApplicationArguments args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> debug=args.containsOption(<span class="string">"debug"</span>);</span><br><span class="line">        List&lt;String&gt; files = args.getNonOptionArgs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SpringBoot还向Spring Environment注册了CommandLinePropertySource.你可以通过使用@Value注解来注入单个应用参数.</p>
</blockquote>
<h2 id="使用ApplicationRunner-或者-CommandLineRunner"><a href="#使用ApplicationRunner-或者-CommandLineRunner" class="headerlink" title="使用ApplicationRunner 或者 CommandLineRunner"></a>使用ApplicationRunner 或者 CommandLineRunner</h2><p>如果你想要在SpringApplication一旦启动就运行一些特殊的代码，你可以通过实现ApplicationRunner或者CommandLineRunner接口。这两个接口都以相同的方式工作，并且都提供一个单独的run方法，该方法会在SpringApplication.run(…)完成前调用.</p>
<p>CommandLineRunner接口以简单字符串的形式提供对应用程序的参数访问。下面的例子展示了CommadnLineRunner的run方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do something...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果一些CommandLineRunner或者ApplicationRunner beans必须通过一些特定的顺序被调用。你可以额外的实现org.springframework.core.Ordered接口或者使用org.springframework.core.annotation.Order注解</p>
<h2 id="应用退出"><a href="#应用退出" class="headerlink" title="应用退出"></a>应用退出</h2><p>每一个SpringApplication向JVM注册了一个关闭hook来确保关闭应用是可以正确的退出。可以使用所有标准的生命周期回调(例如DispsableBean接口或@PreDestroy注解)</p>
<p>另外，如果希望当SpringApplication.exit()调用的时候返回一个特殊的代码时，beans可以实现org.springframework.boot.ExitCodeenerator接口。这个退出的代码可以通过System.exit()传递。下面是例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExitCodeApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExitCodeGenerator <span class="title">exitCodeGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> () -&gt; <span class="number">42</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.exit(SpringApplication.exit(SpringApplication.run(ExitCodeApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="管理特性"><a href="#管理特性" class="headerlink" title="管理特性"></a>管理特性</h2><p>通过指定spring.appliacation.admin.enabled属性可以为应用嵌入admin-related特性。</p>
<h2 id="外部化配置"><a href="#外部化配置" class="headerlink" title="外部化配置"></a>外部化配置</h2><p>SpringBoot可以让你外部化配置以至于可以将你代码运行在不同的环境中。你可以使用properties 文件，YAML文件，环境变量和命令行参数来外部化配置。属性值可以通过@Value注解直接注入你的beans，该注解可以通Spring的Environment抽象来访问，或者通过@ConfigurationProperties结构化绑定。</p>
<p>SpringBoot使用一个非常特殊的PropertySource顺序来允许覆盖值，Properties可以按下面顺序来考虑：</p>
<h2 id="配置随机值"><a href="#配置随机值" class="headerlink" title="配置随机值"></a>配置随机值</h2><p>RandomValuePropertySource可以被用来注入随机值(例如密码或者测试样例),它可以生成整数，longs，uuids或者字符串。下面展示代码例子：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">my.secret</span>=<span class="string">$&#123;random.value&#125;</span></span><br><span class="line"><span class="meta">my.number</span>=<span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="meta">my.bignumber</span>=<span class="string">$&#123;random.long&#125;</span></span><br><span class="line"><span class="meta">my.uuid</span>=<span class="string">$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="meta">my.number.less.than.ten</span>=<span class="string">$&#123;random.int(10)&#125;</span></span><br><span class="line"><span class="meta">my.number.in.range</span>=<span class="string">$&#123;random.int[1024,65536]&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="访问命令行属性"><a href="#访问命令行属性" class="headerlink" title="访问命令行属性"></a>访问命令行属性</h2><p>默认的，SpringApplication转换命令行选项参数(例如，以–开始的参数，–server.port=9000)成属性并且将他们添加到spring Environment。前面提到，命令行参数总是优先于其他属性元。</p>
<p>如果你不想要将命令行参数添加到环境里，可以通过使用SpringApplication.setAddCommandLineProperties(false)来丢弃掉它们。</p>
<h2 id="应用属性文件"><a href="#应用属性文件" class="headerlink" title="应用属性文件"></a>应用属性文件</h2><p>SpringApplication在下面位置，从appliation.properties文件来下载properties。并且将他们添加到spring Environment:</p>
<ol>
<li>当前目录的/config子目录</li>
<li>当前目录</li>
<li>classpath的/config包</li>
<li>classpath路径</li>
</ol>
<p>该列表按照优先级(precedence)进行排列</p>
<blockquote>
<p>你可以使用YAML(.yml)文件来替代.properties</p>
</blockquote>
<p>如果你不想要用application.properties作为配置的文件名，你可以通过指定(specifying)spring.config.name的环境属性，将其转换为其他名字。你也可以通过spring.config.location环境属性来显式的指出地址。下面例子显示如何定义不同的文件名字：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar myproject.jar --spring.config.name=myproject</span><br></pre></td></tr></table></figure>

<p>下面例子展示了如何指定两个地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -jar myproject.jar --spring.config.location=classpath:/default.properties,classpath:/override.properties</span></span><br></pre></td></tr></table></figure>

<h2 id="特殊的属性文件"><a href="#特殊的属性文件" class="headerlink" title="特殊的属性文件"></a>特殊的属性文件</h2><p>除了application.properties文件，还可以使用下面的命名格式来定义特殊的属性：application-{profile}.properties。</p>
<p>如果没有设置应用的配置文件，Environment会有一组默认的profile(默认的,[default])。换句话说，如果没有显示的激活profile，properties会从application-default.properties中加载。</p>
<p>特定的属性与标准的application.properties一样的位置被加载的，基于特定的配置总是会覆盖非特性的属性，无论是在打包jar的内部还是外部。</p>
<p>如果制定了多个profile，那么最后last-wins策略会被应用。例如，SpringApplication API配置后，通过spring.profiles.active苏醒指定的profiles会被添加，因此具有优先权。</p>
<h2 id="属性中的占位"><a href="#属性中的占位" class="headerlink" title="属性中的占位"></a>属性中的占位</h2><p>使用时，application.properties里的值被现有的Environment过滤。所以你能够指回先前定义的值(例如，来自系统属性):</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">app.name</span>=<span class="string">MyApp</span></span><br><span class="line"><span class="meta">app.description</span>=<span class="string">$&#123;app.name&#125; is a Spring Boot application</span></span><br></pre></td></tr></table></figure>

<h2 id="加密属性"><a href="#加密属性" class="headerlink" title="加密属性"></a>加密属性</h2><p>SpringBoot不提供任何对加密属性的内置支持….</p>
<h2 id="使用YAML替代Properties"><a href="#使用YAML替代Properties" class="headerlink" title="使用YAML替代Properties"></a>使用YAML替代Properties</h2><p>YAML是JSON的超集并且可以用一种很便利的格式来指定等级制的属性数据。不管你是否有SnakeYAML库在你的classpath,SpringApplication类都自动支持YAML替代properties。</p>
<blockquote>
<p>如果你使用”Starters”SnakeYAML会自动的被spring-boot-starter提供</p>
</blockquote>
<h3 id="加载YAML"><a href="#加载YAML" class="headerlink" title="加载YAML"></a>加载YAML</h3><p>Spring框架提供两个方便的类来用来加载YAML文档，YamlPropertiesFactoryBean把YAML加载成Properties，YamlMapFactoryBean把YAML加载成MAP。</p>
<p>例如，考虑下面的YAML文档：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environments:</span></span><br><span class="line">    <span class="attr">dev:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">https://dev.example.com</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Developer</span> <span class="string">Setup</span></span><br><span class="line">    <span class="attr">prod:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">https://another.example.com</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">My</span> <span class="string">Cool</span> <span class="string">App</span></span><br></pre></td></tr></table></figure>

<p>这个例子会被转换为下面的properties:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">environments.dev.url</span>=<span class="string">https://dev.example.com</span></span><br><span class="line"><span class="meta">environments.dev.name</span>=<span class="string">Developer Setup</span></span><br><span class="line"><span class="meta">environments.prod.url</span>=<span class="string">https://another.example.com</span></span><br><span class="line"><span class="meta">environments.prod.name</span>=<span class="string">My Cool App</span></span><br></pre></td></tr></table></figure>

<p>YAML列表用[index] dereferencers表示为property。例如，考虑下面的YAML：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">my:</span></span><br><span class="line">   <span class="attr">servers:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">dev.example.com</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">another.example.com</span></span><br></pre></td></tr></table></figure>

<p>这个例子会被转换为：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">my.servers[0]</span>=<span class="string">dev.example.com</span></span><br><span class="line"><span class="meta">my.servers[1]</span>=<span class="string">another.example.com</span></span><br></pre></td></tr></table></figure>

<p>要使用SpringBoot’s的Binder(@ConfigurationProperties)来绑定properties，你徐亚提供一个list或者(set)或者提供一个setter或使用可变值来对其进行初始化。例如，下面这个例子绑定上面例子展示的属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"my"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; servers = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getServers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.servers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在spring-Environment将YAML暴露为公开属性"><a href="#在spring-Environment将YAML暴露为公开属性" class="headerlink" title="在spring Environment将YAML暴露为公开属性"></a>在spring Environment将YAML暴露为公开属性</h3><p>YamlPropertySourceLoader类可以被用来在Spring Environment将YAML暴露为PropertySource。这样做，你可以使用@Value注解来访问YAML属性</p>
<h1 id="学"><a href="#学" class="headerlink" title="学"></a>学</h1><p>一点吧，这个没有去应用没有感觉.</p>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Installing Spring Boot文档翻译</title>
    <url>/2531096468.html</url>
    <content><![CDATA[<hr>
<p>#开始<br>如果你开始使用SpringBoot或者通常讲的Spring，通过阅读这一个部分。该部分回答了“是什么？”，“怎么做？”和“为什么？”的基础问题，在安装说明中包含了关于SpringBoot的介绍，我们会陪你构建你的第一个SpringBoot应用，并且讨论里面的核心原则。<br>##介绍SpringBoot<br>SpringBoot让构建一个可以运行的单机，生产级的spring应用。我们对spring平台和第三方库持opinionated(固执)的观点，所以你能够不用太麻烦的开始。大多数的spring boot应用需要非常少的spring配置。</p>
<p>你可以使用springboot来创建java的应用程序，该程序可以通过java -jar来启动，或者是传统的war部署方式。我们也提供命令行工具来运行“spring scripts”.</p>
<p>我们主要目标是：</p>
<ul>
<li>为spring的开发提供根本的快速和广泛访问的入门经验(参考google translate)</li>
<li>Be opinionated out of the box(开箱即用)，在开始时就有许多默认的配置，并且随着开发过程中需求的变化，也可以进行自定义配置</li>
<li>为大型项目的类提供一系列通用的非功能特性，例如 嵌入式服务器，安全，指标，检查</li>
<li>可以完全不需要xml配置，即可以通过java就可以完成所有配置。(完全没有代码生成？？)</li>
</ul>
<h2 id="安装springboot"><a href="#安装springboot" class="headerlink" title="安装springboot"></a>安装springboot</h2><p>SprinbBoot能够在可以使用classic的java开发工具或者是命令行工具里使用，不管哪种方式，你需要<a href="https://www.java.com/zh_CN/" target="_blank" rel="noopener">java sdk v1.8</a>或者更高。在你开始的时候，你需要通过以下命令来检查当前环境所使用的java版本:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ java -version</span><br></pre></td></tr></table></figure>

<p>如果你是刚开始接触java开发或者你想要体验一下SpringBoot,你可能想要先尝试<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html#getting-started-installing-the-cli" target="_blank" rel="noopener">Spring Boot CLI</a>。除此之外，阅读classic的安装说明</p>
<h3 id="给java开发者的安装说明"><a href="#给java开发者的安装说明" class="headerlink" title="给java开发者的安装说明"></a>给java开发者的安装说明</h3><p>你可以像许多标准的java库一样使用SpringBoot。为了做到这样，你需要你的类路径包含相应的spring-boot-*.jar。SpringBoot不需要任何特殊的工具来整合，你可以使用任何idea或者text编辑器。并且关于Spring Boot的应用没有任何特殊，所以你可以像平常运行或者debug其他java程序来操作Spring Boot应用，</p>
<p>尽管你可以复制Spring Boot jar。但是我们真诚的建议你使用一个能够支持依赖管理的构建工具(例如 Maven或者Gradle)。</p>
<h4 id="Maven-安装"><a href="#Maven-安装" class="headerlink" title="Maven 安装"></a>Maven 安装</h4><p>SpringBoot与Apache Maven3.3或者更高相兼容，如果你还没有安装Maven，你可以参考<a href="https://maven.apache.org/" target="_blank" rel="noopener">安装说明</a></p>
<blockquote>
<p>在许多操作系统中，Maven可以通过包管理来安装，如果你使用OSX Homebrew，使用brew install maven,Ubuntu用户可以通过运行 sudo apt-get install maven.Window用户可以通过<a href="https://chocolatey.org/" target="_blank" rel="noopener">包管理工具</a>运行choco install maven</p>
</blockquote>
<p>SpringBoot依赖项使用 org.springframework.boot groupId。典型的，你的maven pom文件继承了spring-boot-starter-parent文件和许多声明了starters的依赖。SpringBoot也提供了可选的Maven plugin来构建可执行jars文件。</p>
<p>下面显示了一个典型的pom.xml文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Package as an executable jar --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于SpringBoot ，Spring-boot-starter-parent是一种很好的使用方式，但是很多时候并不是一直很适合。所以有的时候，你可能需要继承来自不同的父pom或者你可能不想要我们的默认设置，在这些情况下，可以参考后面的文章，有多种解决方法通过import的域</p>
</blockquote>
<h3 id="安装Gradle"><a href="#安装Gradle" class="headerlink" title="安装Gradle"></a>安装Gradle</h3><p>SpringBoot与Gradle4.4或者更高版本相适配，如果你还没有安装Gradle，你可以参考下面这种<a href="https://gradle.org/" target="_blank" rel="noopener">安装说明</a></p>
<p>SpringBoot的依赖项可以通过使用org.springframework.boot goup来声明。通常的，你的文件会声明许多Starters的以来，SpringBoot提供一个有用的Gradle plugin能够用来对于简单的以来的声明和创建可执行文件jar。</p>
<blockquote>
<p>Gradle Wrapper</p>
<p>当你需要构建一个项目的时候，Gradle Wrapper提供一种很好的获得Gradle的方式。这是一个很小的脚本或者库，你可以与你的代码一并提交，引导程序的构建</p>
</blockquote>
<h3 id="安装Spring-Boot-CLI"><a href="#安装Spring-Boot-CLI" class="headerlink" title="安装Spring Boot CLI"></a>安装Spring Boot CLI</h3><p>Spring Boot CLI是一个命令行工具，你可以通过它来快速构建spring的原型。它会让你运行Groovy脚本，说明你并需要许多样本代码，而只是一些java-like的语法。</p>
<p>你并不需要Spring Boot CLI来使用SpringBoot，但是这是一种最快的方式来得到一个Spring应用。</p>
<h4 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h4><p>你可以下载从Spring的软件库里下载Spring CLI。</p>
<p>一旦下载，跟随着解压缩文件里的安装说明就可以安装了。总的来说，下载的.zip文件里有一个spring脚本(对于Windows是spring.bat)在bin/文件夹下。或者你可以使用java -jar运行.jar文件(这个脚本会确保你的classpath在正确的集合里)</p>
<h4 id="通过SDKMAN安装"><a href="#通过SDKMAN安装" class="headerlink" title="通过SDKMAN安装"></a>通过SDKMAN安装</h4><p>SDKMAN被用来管理各种各样的SDKs的库，包括Groovy和SpringBoot CLI。从<a href="https://sdkman.io/" target="_blank" rel="noopener">sdkman.io</a>获取sdkman。然后通过以下命令来安装springboot:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ sdk install springboot</span><br><span class="line">$ spring --version</span><br><span class="line">Spring Boot v2<span class="number">.1</span><span class="number">.9</span>.RELEASE</span><br></pre></td></tr></table></figure>

<h4 id="命令行补全"><a href="#命令行补全" class="headerlink" title="命令行补全"></a>命令行补全</h4><p>SpringBoot CLI包含了许多脚本，其中包括为BASH和zah shell提供命令行补全功能…</p>
<h4 id="Windows-Scoop安装"><a href="#Windows-Scoop安装" class="headerlink" title="Windows Scoop安装"></a>Windows Scoop安装</h4><p>如果你是window用户并且使用Scoop(一个Window的命令行安装工具)，你可以通过以下命令行来安装:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;scoop bucket add extras</span><br><span class="line">&gt;scoop install springboot</span><br></pre></td></tr></table></figure>

<p>该文件会被安装到~/scoop/apps/springboot/current/bin</p>
<blockquote>
<p>如果你没有看到安装的文件，那么有可能你安装的Scoop版本比较老，在这种情况下，运行scoop  update然后再试一次</p>
</blockquote>
<h4 id="Spring-CLI快速开始的例子"><a href="#Spring-CLI快速开始的例子" class="headerlink" title="Spring CLI快速开始的例子"></a>Spring CLI快速开始的例子</h4><p>你可以使用下面的web应用来测试你的安装。为了开始，创建一个名为app.groovy，像下面这样:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThisWillActuallyRun</span>&#123;</span></span><br><span class="line">    <span class="meta">@RequestMappint</span>(<span class="string">"/"</span>)</span><br><span class="line">    String home()&#123;</span><br><span class="line">        <span class="string">"Hello World"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在shell运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> spring run app.groovy</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>第一次因为需要下载依赖，所以运行会比较慢，后续的运行将会快很多</p>
</blockquote>
<p>在你最喜欢的web浏览器输入 localhost:8080 ,你会看到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure>

<h3 id="更新旧版本的SpringBoot"><a href="#更新旧版本的SpringBoot" class="headerlink" title="更新旧版本的SpringBoot"></a>更新旧版本的SpringBoot</h3><p>如果你从1.x版本的springboot更新。</p>
<p>当更新到新版本时，一些特性会被更新，一些属性可能会被重新命名或者被移除，SpringBoot提供一种方式来分析你的应用环境，并且在启动时打印出诊断，而且还可以在你运行的时候临时迁移属性。你可以在你的项目中通过添加下面的依赖来获得该特性:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-properties-migrator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>一旦你完成了整合，别忘记把该组件移除掉</p>
</blockquote>
<p>以上翻译自：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html" target="_blank" rel="noopener">Installing Spring Boot</a></p>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Auto-configuration文档翻译</title>
    <url>/1608351778.html</url>
    <content><![CDATA[<hr>
<h1 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h1><p>SpringBoot自动配置尝试着通过你添加的Jar依赖来配置你的Spring应用。例如HSQLDB在你的classpath,你不要手动配置任何数据库连接的bean，SpringBoot会自动配置。</p>
<p>你需要将@EnableAutoConfiguration或者@SpringBootApplication注解添加到你的配置类</p>
<blockquote>
<p>你只需要添加到@EnableAutoConfiguration或者@SpringBootApplication到主要配置类，写着Main方法的类</p>
</blockquote>
<h2 id="逐渐取代自动配置"><a href="#逐渐取代自动配置" class="headerlink" title="逐渐取代自动配置"></a>逐渐取代自动配置</h2><p>自动配置是非侵入式的，任何时候你能够自动配置来取代自动配置。例如，如果你添加自己的DataSource的bean，默认的嵌入式数据库支持将不再支持。</p>
<p>如果你想要知道当前自动配置的东西，你只需要通过–debug启动你的应用。在控制台就可以看到配置。</p>
<h2 id="丢弃特殊的自动配置类"><a href="#丢弃特殊的自动配置类" class="headerlink" title="丢弃特殊的自动配置类"></a>丢弃特殊的自动配置类</h2><p>如果你发现一些特殊的自动配置类是你不想要应用的，你可以使用@EnalbeAutoConfiguration的exclude属性来丢弃掉他们，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span>(exclude=&#123;DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上翻译自<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-auto-configuration.html" target="_blank" rel="noopener">Auto-configuration</a></p>
<h1 id="学"><a href="#学" class="headerlink" title="学"></a>学</h1><p>知道了自动配置</p>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Build Systems文档翻译</title>
    <url>/4044010014.html</url>
    <content><![CDATA[<hr>
<h1 id="使用springboot"><a href="#使用springboot" class="headerlink" title="使用springboot"></a>使用springboot</h1><p>这一部分我们继续深入关于你应该怎样使用SpringBoot。会包含一些话题例如 构建系统，自动配置和如何运行你的应用。我们也会包含一些SpringBoot最好的练习。尽管关于springboot没有什么特殊的地方(你可以把它想象成一个另外一个库)，但是这里仍有一些建议，随着你的学习，会让你的部署步骤变得更简单</p>
<h2 id="构建系统"><a href="#构建系统" class="headerlink" title="构建系统"></a>构建系统</h2><p>强烈建议你通过支持依赖管理的关键工具来构建系统，并且我们建议使用Maven或者Gradle.</p>
<h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>每一个版本的springboot都会提供一个关于它支持哪些依赖的“精选清单”，在实践中，你不需要在你的构建配置中为每一个依赖提供版本号(version)，因为springboot为你管理好这个。当你升级springboot的时候，这些依赖也会以相同的方式进行升级。</p>
<blockquote>
<p>当然，如果也可以选择一个特殊的版本，而不是springboot默认提供给你的</p>
<p>但是我们强烈建议你不要写上version</p>
</blockquote>
<h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>Maven用户可以通过继承spring-boot-starter-parent获得一些必要的配置，该parent文件提供以下特性：</p>
<ul>
<li>Java 1.8 作为默认的编译级别</li>
<li>源代码通过UTF-8编码</li>
<li>一个Dependency Management，从spring-boot-dependencies pom继承过来的，它会管理通常依赖的version,该依赖管理让你当使用一些依赖是忽略version的标志</li>
<li>一个执行的repackage goal</li>
<li>必要的资源筛选</li>
<li>必要的插件配置</li>
<li>为了application.properties和application,yml包括特殊的文件(例如 application-dev.properties和application-dev.yml)进行必要的资源筛选</li>
</ul>
<h4 id="继承starter-parent"><a href="#继承starter-parent" class="headerlink" title="继承starter parent"></a>继承starter parent</h4><p>为了继承自spring-boot-starter-parent来配置你的文件，通过如下来设置parent：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>你仅仅需要特别标注该配置的version,其他都可以放心的忽略掉version</p>
</blockquote>
<h4 id="不通过parent-pom使用spring-boot"><a href="#不通过parent-pom使用spring-boot" class="headerlink" title="不通过parent pom使用spring boot"></a>不通过parent pom使用spring boot</h4><p>不是每个人都喜欢继承spring-boot-starter-parent。你可能需要使用更合适的父类，或者想要为每一个Maven配置明确的声明。</p>
<p>如果你不想要使用spring-boot-starter-parent,你仍然可以通过scope=import来使用依赖管理的好处(但是没有插件管理)，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- Import dependency management from Spring Boot --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用springboot-maben-plugin"><a href="#使用springboot-maben-plugin" class="headerlink" title="使用springboot maben plugin"></a>使用springboot maben plugin</h4><p>SpringBoot包含Maven Plugin，可以为把项目打包成可执行jar.如果你想要使用它，将其添加到你的plugins部分，如下面所示:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你使用springboot starter parent pom,你仅需要添加该plugin.除非你想要更改该parent定义的设置，否则没有必要自己配置它</p>
</blockquote>
<h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><p>这部分我们后面可以见到(为了不打扰翻译的顺序，我们按照文本来)</p>
<h3 id="Starters"><a href="#Starters" class="headerlink" title="Starters"></a>Starters</h3><p>Starters是一系列你可以添加到你的应用的便利的依赖描述符。你可以一站式( a one-stop shop)得到你想要的spring和相关技术，而不是遍历(hunt through)相同的代码和张贴复制依赖描述符。例如，如果你想要通过spring and jpa来访问数据库，只需要包含spring-boot-starter-data-jpa依赖到你的文件里。</p>
<blockquote>
<p>命名里奥妙</p>
<p>所有官方的starter都遵循着相似的命名样式：spring-boot-starter-,后面是一个程序的特别类型。当你需要找到一个starter，该命名结果能够提供帮助。</p>
<p>第三方的starter不能够以spring-boot开头，通常是以项目的名字开头的。</p>
</blockquote>
<p>以上翻译自<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-build-systems.html" target="_blank" rel="noopener">Build Systems</a></p>
<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><ol>
<li>以后依赖不写版本，通过springboot的依赖管理</li>
<li>观察自己引入的依赖是以什么开头</li>
</ol>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Developer Tools文档翻译</title>
    <url>/462033071.html</url>
    <content><![CDATA[<hr>
<h1 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h1><p>SpringBoot包含一些额外的工具让应用开发的过程更加愉快，Spring-boot-devtools组件可以被加到任何项目里用来提供额外的开发时的特性。为了得到devtools的支持，需要添加一下到你的pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当运行一个完全的打包过的文件时，开发者工具会被自动丢弃。如果你的应用是通过java -jar 或者是在一个特殊的classloader，它会被认为是生产的应用。如果这不合适，当你在一个容器里运行，考虑排除devtools或者设置-Dspring.devtools.restart.enabled=false系统属性</p>
</blockquote>
<h2 id="属性默认值"><a href="#属性默认值" class="headerlink" title="属性默认值"></a>属性默认值</h2><p>SpringBoot支持的一些库使用缓存(cache)来提高性能。例如，template engines(模板引擎)缓存编译过的模板来防止不断的分析模板文件。而且，当Spring MVC在服务静态资源的时候，也能通过在响应头添加HTTP缓存。</p>
<p>尽管缓存在生产过程中非常有益，但是它会让你在开发过程中适得其反。因为这样你会看不到刚刚在应用程序中修改的部分。由于这个原因，spring-boot-devtools会默认的丢弃掉缓存选项。</p>
<p>缓存选项通常在你的application.properties文件里被配置。例如，Thymeleaf提供spring.thymeleaf.cache属性。无需手动设置这些属性，spring-boot-devtools组件能够自动的应用这些必要的开发时的属性。</p>
<p>因为你在开发Spring MVC和Spring WebFlux应用时，需要一些信息，开发工具将为web的logging组启动DEBUG日志。这会给你关于请求，处理请求，和响应信息等。如果你希望打印出请求的详细信息(包括潜在的必要信息)，你可以转向spring.http.log-request-detail配置属性。</p>
<blockquote>
<p>如果你不想要这些默认的属性，你可以在你的application.properties里将spring.devtools.add-properties设置为false</p>
</blockquote>
<h2 id="自动重启"><a href="#自动重启" class="headerlink" title="自动重启"></a>自动重启</h2><p>每当在classpath里的文件发生变化时，使用spring-boot-devtools的应用会自动重启。这是一个非常好的特性，当你的代码发生变化时会给一个及时反馈。默认的，在classpath上的任何一个入口都会被监控是否发生改变。</p>
<blockquote>
<p>触发重启</p>
<p>更新classpath是唯一的方法触发重启。更新classpath的方式依赖于你使用的IDE。</p>
<p>在Eclipse，保存一个更改的文件就是触发重启。</p>
<p>在IntelliJ IDEA,构建项目(Build-&gt;Build Project)有着相同的作用</p>
</blockquote>
<blockquote>
<p>DevTools自动忽略文件名为spring-boot,spring-boot-devtools,spring-boot-autoconfigure,spring-boot-actuator和spring-boot-starter发生变化，不会决定时候要重启</p>
</blockquote>
<blockquote>
<p>Restart的原理</p>
<p>SpringBoot的Restart的工作原理是，有两个类加载。一种不会发生变化的类(例如第三方的jar库)被加载到base classloader。哪些你经常开发的类会被加载到restart classloader。当应用被重新启动时，在restart classloader中的类会被丢弃掉，并且一个新的会被创建。这种方法意味着应用的restart明显的比cold starts快。</p>
</blockquote>
<h3 id="记录条件评估中的更改-Logging-changes-in-condition-evalution"><a href="#记录条件评估中的更改-Logging-changes-in-condition-evalution" class="headerlink" title="记录条件评估中的更改(Logging changes in condition evalution)"></a>记录条件评估中的更改(Logging changes in condition evalution)</h3><p>默认的，当你的应用被重新启动时，关于条件的改变都会被记录。当你对你的代码进行更改的时候，例如增加或者删除beans或者在配置文件里新设置什么配置，report会把这些改变交给你的应用自动配置.</p>
<p>如果想要丢弃这个report的日志功能，设置以下属性:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.devtools.restart.log-condition-evaluation-delta</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>

<h3 id="排除一些资源"><a href="#排除一些资源" class="headerlink" title="排除一些资源"></a>排除一些资源</h3><p>如果很明确一些资源发生改变的时候不需要触发重启。例如Thymeleaf引擎可以被到位的编辑。默认的，当在/META-INF/maven,/META-INF/resources,/resources,/static,/pulic或者/template不会触发重启，但是会触发live reload。如果你想要自定义排除的资源，你可以使用spring.devtools.restart.exclude属性，例如仅仅排除/static和/pulic,你需要通过以下属性来设置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.devtools.restart.exclude</span>=<span class="string">static/**,public/**</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你想要保持这些默认的资源，并且还想要添加一些额外的资源。使用spring.devtools.restart.additional-exclude</p>
</blockquote>
<h3 id="监控额外的路径"><a href="#监控额外的路径" class="headerlink" title="监控额外的路径"></a>监控额外的路径</h3><p>你可以使用spring.devtools.restart.additional-paths添加额外的路径</p>
<h3 id="丢弃重启特性"><a href="#丢弃重启特性" class="headerlink" title="丢弃重启特性"></a>丢弃重启特性</h3><p>如果你不想要使用restart的特性，你可以视同spring.devtools.restart.enabled属性。在大多数情况下，你可以在你的application.properties文件里设置该属性(该属性仍然会加载到restart classloader,但会并不会监控文件的变化)</p>
<p>如果你想要完全的丢弃该支持(例如，它对一些特殊的库不支持)，你在main方法里，在系统启动前添加该属性为false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	System.setProperty(<span class="string">"spring.devtools.restart.enabled"</span>, <span class="string">"false"</span>);</span><br><span class="line">	SpringApplication.run(MyApp<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用一个触发的文件"><a href="#使用一个触发的文件" class="headerlink" title="使用一个触发的文件"></a>使用一个触发的文件</h3><p>如果你使用的IDE不断的进行编译，你可能更想要在一些特殊时候进行restart。为了达到如此，你可以添加trigger file。当你想要自动的触发restart，该trigger file必须被更改。</p>
<p>可以使用spring.devtools.restart.trigger-file属性来设置trigger file。该文件必须出现在你的classpath。</p>
<p>例如，你有一个项目是下面这种结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">+- main</span><br><span class="line">   +- resources</span><br><span class="line">      +- .reloadtrigger</span><br></pre></td></tr></table></figure>

<p>你的trigger-file可能长这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.devtools.restart.trigger-file=.reloadtrigger</span><br></pre></td></tr></table></figure>

<p>只有当该文件被更新时，你的应用程序才会被restart</p>
<h3 id="自定义重启类加载器"><a href="#自定义重启类加载器" class="headerlink" title="自定义重启类加载器"></a>自定义重启类加载器</h3><p>在前面讲到的restart的原理，我们可以知道其实通过实现两个加载类来实现的。在大多数应用中，该方法和适应。但是一些时候它也会导致类加载的错误。</p>
<p>默认的。任何在你IDE打开的项目都会被加载到restart classloader.以及一些通常的.jar文件会被加载到base classloader。如果你在一个多模块下工作，并且并不是每个模块都会在IDE打开，你小自定义一些事。你可以新建META-INF/spring-devtools.properities文件。</p>
<p>该文件里面包含的属性前缀为restart.exclude和restart.include。include属性下的文件是希望被加载到restart classloader。exclude元素下的文件希望被加载到base classloader.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">restart.exclude.companycommonlibs=/mycorp-common-[\\w\\d-\.]+\.jar</span><br><span class="line">restart.include.projectcommon=/mycorp-myproj-[\\w\\d-\.]+\.jar</span><br></pre></td></tr></table></figure>

<h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>SpringBoot的重启属性不适用于哪些ObjectInputStream的反序列化</p>
<h3 id="LiveReload"><a href="#LiveReload" class="headerlink" title="LiveReload"></a>LiveReload</h3><p>spring-boot-devtools组件包含了一个内嵌的LiveReload服务，当资源发生变化的时候，它会触发浏览器刷新。如今支持Chrome,Firefox,Safari。</p>
<p>如果你不想要在应用启动时运行LiveReload服务，你可以设置spring.devtools.livereload.enabled属性为false</p>
<blockquote>
<p>一次只能运行一个LiveReload服务，如果你启动多个应用的话，只有第一个应用支持LiveReload</p>
</blockquote>
<h1 id="学"><a href="#学" class="headerlink" title="学"></a>学</h1><p>已在项目中使用devtools</p>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Configuration Classes文档翻译</title>
    <url>/316142548.html</url>
    <content><![CDATA[<hr>
<h1 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h1><p>SpringBoot支持以Java编写的配置，尽管他可能可以将springbootapplication和xml一起使用，我们通常建议(前面这里翻译成 真诚建议hhh),你的主要源是一个单独的有@Configuration注解的类。通常定义Main方法的类是首选的配置。</p>
<blockquote>
<p>许多网上流传的spring配置都是通过xml,如果可能可以尝试使用java编写该配置</p>
</blockquote>
<h2 id="导入额外的配置类"><a href="#导入额外的配置类" class="headerlink" title="导入额外的配置类"></a>导入额外的配置类</h2><p>你需要在这个单独类上添加@Configuration,@Import注解可以被用来导入额外的配置类，通常，你可以使用@ComponentScan来自动识别所有spring组件，包括@Configuration类</p>
<h2 id="导入XMLpeizhi"><a href="#导入XMLpeizhi" class="headerlink" title="导入XMLpeizhi"></a>导入XMLpeizhi</h2><p>如果你确信你要使用xml编写的配置，我们建议你仍然以@Configuration类，你可以使用@ImportResource注解来加载xml配置文件</p>
<p>以上翻译自<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-configuration-classes.html" target="_blank" rel="noopener">Configuration Classes</a></p>
<h1 id="学"><a href="#学" class="headerlink" title="学"></a>学</h1><p>如标题所说，尝试着类完成配置。</p>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Developing Your First SpringBoot Application文档翻译</title>
    <url>/1113545103.html</url>
    <content><![CDATA[<hr>
<h1 id="部署你的第一个SpringBoot应用"><a href="#部署你的第一个SpringBoot应用" class="headerlink" title="部署你的第一个SpringBoot应用"></a>部署你的第一个SpringBoot应用</h1><p>该部分会介绍如何部署一个简单的“hello world”的web应用程序，并且重点介绍SpringBoot的关键特性。因为大多数的IDE支持Maven,所以我们通过maven来构建项目。</p>
<p>在我们开始之前，需要运行一下以下命令行，来确保你已经安装好了java和maven</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -version</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mvn -v</span></span><br></pre></td></tr></table></figure>

<h2 id="创建pom"><a href="#创建pom" class="headerlink" title="创建pom"></a>创建pom</h2><p>我们需要开始构建Maven的pom.xml文件，该pom.xml文件你是构建项目的配方，打开你最喜欢的文本编辑器，然后添加一下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Additional lines to be added here... --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上清单可以给你一个构建方式，你可以通过运行mvn package来测试它(忽略jar will be empty的警告)</p>
<h3 id="添加Classpath依赖"><a href="#添加Classpath依赖" class="headerlink" title="添加Classpath依赖"></a>添加Classpath依赖</h3><p>SpringBoot提供许多Starters让你添加jar到你的classpath,我们简单的应用程序已经使用了spring-boot-starter-parent在pom的parent的部分。spring-boot-starter-parent是一个特殊的starter，可以提供有用的maven默认设置。它也提供一个dependecy-management部分，你可以忽略依赖的version的标记。</p>
<p>当你部署一个特别类型的应用，你可能需要用到其他Starters提供的依赖。因为我们部署一个web应用，我们添加了一个spring-boot-starter-web的依赖，在此之前，我们可以通过以下命令来查看我们目前已有的东西:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mvn dependency:tree</span></span><br></pre></td></tr></table></figure>

<p>该命令可以打印出你项目的依赖，你可以看到spring-boot-starter-parent自己本身没有提供依赖。为了添加必要的依赖，编辑你的pom.xml文件，然后添加spring-boot-starter-web依赖在parent部分下面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时，你在运行一下上面的命令，你可以看到许多添加的依赖，包括Tomcat web server和Spring Boot</p>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>为了完成我们的应用，我们需要创建一个单独的java文件。默认情况下，maven会编译来自src/main/java的源文件，所以你需要创建一个文件夹结构，然后增加一个名为src/main/java/Example.java，该java包含以下代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">	<span class="function">String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(Example<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然上面的代码不是特别多，但是暂停一下，我们一步一步来看一下这个重要的部分。</p>
<h4 id="RestController和-RequestMapping注解"><a href="#RestController和-RequestMapping注解" class="headerlink" title="@RestController和@RequestMapping注解"></a>@RestController和@RequestMapping注解</h4><p>我们的Example的第一个注解是@RestConstroller。这个被称为构造型注解。它为人们阅读代码和spring提供提示，提示该类起到一个特殊的作用。在这个例子中，我们的类是一个web的@Controller，所以当spring处理来自web的请求会考虑它。</p>
<p>@RequestMapping注解提供路由信息，它告诉spring任何/路径的Http请求都会匹配到Home这个方法。@RestController注解告诉spring直接返回String给客户端。</p>
<h4 id="EnableAutoConfiguration注解"><a href="#EnableAutoConfiguration注解" class="headerlink" title="@EnableAutoConfiguration注解"></a>@EnableAutoConfiguration注解</h4><p>第二个类级的注解是@EnableAutoConfiguration，该注解告诉SpringBoot通过你添加的jar依赖去“猜”你要怎么配置你的Spring。因为spring-boot-starter-web添加Tomcat和Spring MVC，该自动配置就会假设你将要部署一个web应用并且相应的启动spring。</p>
<h4 id="Main方法"><a href="#Main方法" class="headerlink" title="Main方法"></a>Main方法</h4><p>我们应用的最后一个部分就是Main方法，这只是一个遵循java约定的应用程序入口点。我们的主要方法通过调用run委托给springboot的springApplication。SpringApplication指引着我们的程序一次开始自动配置Tomcat web 服务器。我们需要将Example.class作为一个参数传入run方法，告诉SpringApplication哪一个是主要的Spring组件。args也传入，来暴露其他一些命令行参数。</p>
<h3 id="运行Example"><a href="#运行Example" class="headerlink" title="运行Example"></a>运行Example</h3><p>这一点，你的应用程序应该可以运行。因为你使用了spring-boot-starter-parent，你有一个有用的run目标来启动该应用程序。在项目文件的根目录下输入mvn spring-boot:run </p>
<p>然后在web浏览器里输入localhost:8080 可以看到输出结果。</p>
<p>可以通过ctrl-c退出该应用。</p>
<h3 id="构建一个可执行文件jar"><a href="#构建一个可执行文件jar" class="headerlink" title="构建一个可执行文件jar"></a>构建一个可执行文件jar</h3><p>我们通过构建一个完成的可执行文件，让其可以运行在生产环境上，来结束该例子。可执行jar(某些时候又被称为fat jars)包含了你的编译过的class还有你运行代码需要的jar依赖。</p>
<p>为了构建jar，我们需要在我们的pom.xml添加spring-boot-maven-plugin。为此，在dependencies部分的下面添加以下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>保存pom.xml然后运行 mvn package.</p>
<p>然后在你的target文件夹下，你应该可以看到myproject-0.0.1-SNAPSHOT.jar,该文件大小应该在10m左右，如果你想要看看里面，可以使用jar tvf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jar tvf target/myproject-0.0.1-.jar</span><br></pre></td></tr></table></figure>

<p>你应该也能够看到一些相似的文件命名myproject-0.0.1-SNAPSHOT.jar.original。这个original jar文件是maven通过springboot构建的在它repackaged之前。</p>
<p>通过使用 java -jar 来运行该应用程序，可以看到一样的结果。</p>
<p>以上翻译自<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-first-application.html" target="_blank" rel="noopener">developing your first springboot application</a></p>
<h1 id="学到什么"><a href="#学到什么" class="headerlink" title="学到什么"></a>学到什么</h1><ol>
<li>starter-parent不提供依赖</li>
<li>restcontroller直接返回字符串</li>
<li>getmapping提供路由信息，将路由跟方法绑定</li>
<li>main方法是通过run转移到springbootapplication</li>
<li>打成jar包需要在pom下添加plugins</li>
</ol>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Beans and Dependency Injection文档翻译</title>
    <url>/3052345267.html</url>
    <content><![CDATA[<hr>
<h1 id="SpringBeans和依赖注入"><a href="#SpringBeans和依赖注入" class="headerlink" title="SpringBeans和依赖注入"></a>SpringBeans和依赖注入</h1><p>你可以使用任何标准spring框架的技术来定义你的bean和他们的注入依赖。为简单期间，我们通常使用@ComponentScan(来找到你的beans)使用@Autowired(来管理注入)。</p>
<p>如果你是以先前所有的那种code layout来组织你的代码，将你的主要配置(main方法)放到root package.你可以添加@ComponentScan不需要任何参数，你的所有应用程序组件（@Component,@Service,@Repository,@Controller等等）都会被自动注册为spring Beans。</p>
<p>以下例子展示了@Service Beans的两种方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseAccountService</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> RiskAssessor riskAssessor;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DatabaseAccountService</span><span class="params">(RiskAssessor riskAssessor)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.riskAssessor = riskAssessor;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseAccountService</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> RiskAssessor riskAssessor;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DatabaseAccountService</span><span class="params">(RiskAssessor riskAssessor)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.riskAssessor = riskAssessor;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上翻译自<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-spring-beans-and-dependency-injection.html" target="_blank" rel="noopener">Spring Beans and Dependency Injection</a></p>
<h1 id="学"><a href="#学" class="headerlink" title="学"></a>学</h1><p>依赖注入，在main方法上的类里添加@ComponentScan就会自动将所有应用的组件内注册为spring bean</p>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBootApplication文档翻译</title>
    <url>/1324367350.html</url>
    <content><![CDATA[<hr>
<h1 id="使用-SpringBootApplication注解"><a href="#使用-SpringBootApplication注解" class="headerlink" title="使用@SpringBootApplication注解"></a>使用@SpringBootApplication注解</h1><p>许多SpringBoot开发者喜欢他们的应用能够使用自动配置，组件扫描还能够支持自定义另外的配置在他们的“应用类”上，一个单独的@SpringBootApplication注解就能够用来完成以上三个特性</p>
<ul>
<li>@EnableAutoConfiguration</li>
<li>@ComponentScan</li>
<li>@Configuration</li>
</ul>
<p>如下面这个例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">// same as @Configuration @EnableAutoConfiguration @ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="运行你的应用程序"><a href="#运行你的应用程序" class="headerlink" title="运行你的应用程序"></a>运行你的应用程序</h1><p>将你的应用程序打包成jar并且使用嵌入式的HTTP服务器使得你可以向其他应用程序以一样来运行是一个巨大的优点。调试SpringBoot应用也很简单，不需要任何特别的IDEA的插件</p>
<h2 id="从一个IDE中运行"><a href="#从一个IDE中运行" class="headerlink" title="从一个IDE中运行"></a>从一个IDE中运行</h2><p>你可以向一个简单地java应用一样，在你的IDE里运行。但是首先你需要导入你的项目，导入项目的方式依赖于你的IDE和你的构建系统的方式(maven等)。大多数IDE可以直接导入maven文件。</p>
<h2 id="作为打包程序被运行"><a href="#作为打包程序被运行" class="headerlink" title="作为打包程序被运行"></a>作为打包程序被运行</h2><p>如果你将应用程序打包成可执行的jar文件，你可以通过java -jar 来运行程序。</p>
<p>也可以讲远程的debugger绑定到你的应用程序。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=8000,<span class="built_in">suspend</span>=n \</span></span><br><span class="line">       -jar target/myapplication-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<h2 id="通过Maven-Plugin"><a href="#通过Maven-Plugin" class="headerlink" title="通过Maven Plugin"></a>通过Maven Plugin</h2><p>可以通过使用mvn spring-boot:run来运行</p>
<h2 id="通过Gradle-Plugin"><a href="#通过Gradle-Plugin" class="headerlink" title="通过Gradle Plugin"></a>通过Gradle Plugin</h2><p>使用gradle bootRun</p>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Structuring Your Code文档翻译</title>
    <url>/2026129430.html</url>
    <content><![CDATA[<hr>
<h1 id="结构化你的代码-组织你的代码"><a href="#结构化你的代码-组织你的代码" class="headerlink" title="结构化你的代码(组织你的代码)"></a>结构化你的代码(组织你的代码)</h1><p>springboot并不需要特别的代码样式才能工作，但是这里有一些很好的练习能够帮助。</p>
<h2 id="使用默认的包"><a href="#使用默认的包" class="headerlink" title="使用默认的包"></a>使用默认的包</h2><p>当一个类不包含任何包的声明，它会被认为是默认的包。使用默认的包通常是不被鼓励的并且需要防范的。当springboot应用使用@ComponentScan @EntityScan 或者@SpringBootApplication注解时，会导致特别的问题，因为每一个jar里的类都会被读取。</p>
<blockquote>
<p>我们建议你遵循java中建议的包命名约定 例如 com.example.project</p>
</blockquote>
<h2 id="找到主要的应用程序类"><a href="#找到主要的应用程序类" class="headerlink" title="找到主要的应用程序类"></a>找到主要的应用程序类</h2><p>我们真诚的建议你在有一个root package找到自己主要的应用程序类，@SpringBootApplication注解通常会被放到你的主类，并且隐式的定义了某些项的搜索类。例如，如果你正在编写一个jpa应用，通过@SpringBootApplication注解的类会被找到被@Entity注解的类。使用根包也会允许组件扫描只应用在你的文件。</p>
<blockquote>
<p>如果你不想使用@SpringBootApplication注解，@EnableAutoConfiguration和@ComponentScan注解可以用来替代，完成相同的行为</p>
</blockquote>
<p>下面显示一种通常的样式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com</span><br><span class="line"> +- example</span><br><span class="line">     +- myapplication</span><br><span class="line">         +- Application.java</span><br><span class="line">         |</span><br><span class="line">         +- customer</span><br><span class="line">         |   +- Customer.java</span><br><span class="line">         |   +- CustomerController.java</span><br><span class="line">         |   +- CustomerService.java</span><br><span class="line">         |   +- CustomerRepository.java</span><br><span class="line">         |</span><br><span class="line">         +- order</span><br><span class="line">             +- Order.java</span><br><span class="line">             +- OrderController.java</span><br><span class="line">             +- OrderService.java</span><br><span class="line">             +- OrderRepository.java</span><br></pre></td></tr></table></figure>

<p>Application.java会实现main方法，还有@SpringBootApplication.如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上翻译自<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-structuring-your-code.html" target="_blank" rel="noopener">Structuring Your Code</a></p>
<h1 id="学"><a href="#学" class="headerlink" title="学"></a>学</h1><ol>
<li>springbootapplication会自动扫描相关组件</li>
<li>最好是要有包的区分，强烈建议</li>
<li>官方给的那种形式其实用的比较少吧！还是现在用的形式好，不过官方这种突然想想也挺好的，改起来特别容易，不用来回找，像小程序那样。</li>
</ol>
]]></content>
      <tags>
        <tag>SpringBoot文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot与Redis</title>
    <url>/3822139594.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好吧，这事是这样的。今天早上打开redis，想想是不是可以给项目加个缓存呢？好吧说走就走。</p>
<h3 id="理论先行"><a href="#理论先行" class="headerlink" title="理论先行"></a>理论先行</h3><blockquote>
<p>Redis属于键值数据库，使用哈希表存放键值和数据，而且key和value可以是任何内容，不仅是简单对象还是复杂对象都可以存储。并且查询效率高，易于扩展。</p>
</blockquote>
<h4 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h4><p>Redis根据官方提供的数据，每秒请求可以达到10万次。</p>
<ul>
<li>底层是用C实现，运行时没有其他太多的依赖</li>
<li>基于内存的数据库，避免硬盘IO提高速度</li>
<li>使用Hash，数据访问的复杂度为O(1)</li>
<li>单进程单线程模型</li>
</ul>
<h3 id="废话不过说上代码"><a href="#废话不过说上代码" class="headerlink" title="废话不过说上代码"></a>废话不过说上代码</h3><p>首先呢，这个是参考网上的一个<a href="https://programmerfriend.com/ultimate-guide-to-redis-cache-with-spring-boot-2-and-spring-data-redis/" target="_blank" rel="noopener">博客</a></p>
<h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cache.type</span>=<span class="string">redis</span></span><br><span class="line"><span class="meta">spring.cache.redis.time-to-live</span>=<span class="string">86400s</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">xxxxx</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8000</span></span><br></pre></td></tr></table></figure>

<p>说说踩到的坑,spring.cache.redis.time-to-live是duration time所以要带上单位，当时怎么测试怎么不行。</p>
<h4 id="CacheService"><a href="#CacheService" class="headerlink" title="CacheService"></a>CacheService</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Cacheable</span>(cacheName=<span class="string">"myCache"</span>,key=<span class="string">"'prefix_'.concat(#relevant)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFromCache</span><span class="params">(String relevant)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@CacheEvict</span>(cacheNames=<span class="string">"myCache"</span>,key=<span class="string">"'prefix_'.concat(#relevant)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeFromCache</span><span class="params">(String relevant)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@CachePut</span>(cacheNames=<span class="string">"myCache"</span>,key=<span class="string">"'prefix_'.concat(#relevant)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">populateCache</span><span class="params">(String relevant,String un)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"this is it again"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	CacheService cacheService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">"Starting controlled cache: -----------"</span>);</span><br><span class="line">        String controlledFirst = getFromControlledCache(<span class="string">"first"</span>);</span><br><span class="line">        log.info(<span class="string">"Controlled First: &#123;&#125;"</span>, controlledFirst);</span><br><span class="line">        String controlledSecond = getFromControlledCache(<span class="string">"second"</span>);</span><br><span class="line">        log.info(<span class="string">"Controlled Second: &#123;&#125;"</span>, controlledSecond);</span><br><span class="line"></span><br><span class="line">        getFromControlledCache(<span class="string">"first"</span>);</span><br><span class="line">        getFromControlledCache(<span class="string">"second"</span>);</span><br><span class="line">        getFromControlledCache(<span class="string">"third"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getFromControlledCache</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        String fromCache = controlledCacheService.getFromCache(param);</span><br><span class="line">        <span class="keyword">if</span> (fromCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">"Oups - Cache was empty. Going to populate it"</span>);</span><br><span class="line">            String newValue = controlledCacheService.populateCache(param, UUID.randomUUID().toString());</span><br><span class="line">            log.info(<span class="string">"Populated Cache with: &#123;&#125;"</span>, newValue);</span><br><span class="line">            <span class="keyword">return</span> newValue;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"Returning from Cache: &#123;&#125;"</span>, fromCache);</span><br><span class="line">        <span class="keyword">return</span> fromCache;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意 这里的controlledCacheService就是cacheService。因为我写了两个demo，现在把它合在一起，所以出现这个问题。</p>
<p>稍微解释一下</p>
<ol>
<li>只要通过@EnableCaching注解支持缓存，SpringBoot的自动配置就会为其加载缓存的基础配置，并且也只有通过该注解才会启动Caching。所以如果不想要Cache可以通过删掉该注释。</li>
<li>Cacheable</li>
</ol>
<p>用来表示一个方法可以被Cacheable。这个方法的结果会被存放到cache.当多次通过相同的参数调用该方法的时候，这个结果会直接从cache中取出来，而并不会真正再一次执行该方法。</p>
<p>必须有一个cache的名字跟这个方法联系起来。</p>
<p>现在深入学习</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(&#123;<span class="string">"books"</span>,<span class="string">"isbns"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(ISBN isbn)</span></span></span><br></pre></td></tr></table></figure>

<p>上面这个是两个cache的名字，只要其中一个命中就会直接返回结果，而不会去执行方法。并且另外一个cache(如果没有命中)中的值也会更新。</p>
<p>自定义的Key 通过SpEL实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(cacheNames=<span class="string">"books"</span>, key=<span class="string">"#isbn"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(ISBN isbn, <span class="keyword">boolean</span> checkWarehouse, <span class="keyword">boolean</span> includeUsed)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">@<span class="title">Cacheable</span><span class="params">(cacheNames=<span class="string">"books"</span>, key=<span class="string">"#isbn.rawNumber"</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(ISBN isbn, <span class="keyword">boolean</span> checkWarehouse, <span class="keyword">boolean</span> includeUsed)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">@<span class="title">Cacheable</span><span class="params">(cacheNames=<span class="string">"books"</span>, key=<span class="string">"T(someType).hash(#isbn)"</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(ISBN isbn, <span class="keyword">boolean</span> checkWarehouse, <span class="keyword">boolean</span> includeUsed)</span></span></span><br></pre></td></tr></table></figure>

<p>还有通过条件caching</p>
<ol start="3">
<li>CachePut</li>
</ol>
<p>通过@CachePut注解的方法，总是会被执行，并且结果会被存放到cache里，这个与Cacheable不同，所以一般的应用场景是从数据库里去，而不是用来查询。</p>
<ol start="4">
<li>CacheEvict</li>
</ol>
<p>就是删掉缓存的注解</p>
<ol start="5">
<li>Redis</li>
</ol>
<p>RedisCacheManager会被自动配置，如果Redis可以使用并且配置。并且可以通过spring.cache.redis.*properties来配置，当然也可以通过添加RedisCacheConfiguration Bean来实现自己的配置</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>不能在同一类中调用有@Cacheable注解的方法或其他方法，这样的Cache会失效。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>关于Redis这么强的数据库，我还需要在学习一下。不说了七牛云认证通过，我要去完成下一个需求了。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>在一次学习Mybatis</title>
    <url>/969194460.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天继续死磕Mybatis，学会用。任务如下</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 通过教程过一遍Mybatis 大约有个印象</li>
<li><input checked="" disabled="" type="checkbox"> 阅读Mybatis文档</li>
<li><input checked="" disabled="" type="checkbox"> 来到Mybatis Plus之旅</li>
</ul>
<h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><p>首先来谈谈对mybatis的认识，一开始我写SP都是用的JAVA JPA。但是最近想要继续深入学习SP，而不是每个框架都只会hello world的感觉，所以我就想要学习一个新的持久层框架mybatis。正好趁着国庆，就学习了。</p>
<p>读了一些文档，也看了许多代码，所以有个大致的了解。前期mybatis的配置是很复杂的，不过因为强调动态sql，所以相比于jpa的不用写一行sql在面对复杂的业务逻辑是有很强的适应力。但是其实很多时候这种业务还是比较少的，所以mybatis在springboot中就加入了java注解，这玩意写起来跟jpa用原生sql的写的感觉一样舒服(这里让我想起来，技术人一定要低调，不能只有锤子就认为所有都是钉子)。</p>
<h4 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h4><h5 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="在启动类添加mapperscan"><a href="#在启动类添加mapperscan" class="headerlink" title="在启动类添加mapperscan"></a>在启动类添加mapperscan</h5><p>注意：也可以在mapper文件夹的类下，添加@Mapper，但是这么做的话就需要每一层都要添加，还比较麻烦，所以可以在启动类添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.example.hellomybatis.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HellomybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(HellomybatisApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>不同于jpa，mybatis并不会自动建表，所以需要自己手动建表，然后写model层的代码。这里我还遇到了点坑，例如没有空的构造函数使得自己一直报错，确实前面写jpa的时候都会加上空的构造函数。但是因为用了lombok我想应该就不用了吧。</p>
<p>这里注意一下，我原先用的是@Data。但是好像并没有@NoArgsConstructor的作用，通过查阅文档，发现只包含了@ToString @EqualsAndHashCode @Getter @Setter @RequiredArgsConstructor</p>
<p>注意只有@RequiredArgsConstructor这个注解表示构造器里的每个参数不为null，也就是说不为Null都作为这个构造器的参数。</p>
<p>(好吧，真的让我调试好一会，没有好好阅读文档的后果)</p>
<h5 id="mapper层，所有生产力都在这里"><a href="#mapper层，所有生产力都在这里" class="headerlink" title="mapper层，所有生产力都在这里"></a>mapper层，所有生产力都在这里</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM users"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"userSex"</span>,column = <span class="string">"user_sex"</span>,javaType = UserSexEnum<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">            @<span class="title">Result</span>(<span class="title">property</span> </span>= <span class="string">"nickName"</span>,column = <span class="string">"nick_name"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM users WHERE id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"userSex"</span>,column = <span class="string">"user_sex"</span>,javaType = UserSexEnum<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">            @<span class="title">Result</span>(<span class="title">property</span> </span>= <span class="string">"nickName"</span>,column = <span class="string">"nick_name"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">User <span class="title">getOne</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO users(userName,passWord,user_sex) VALUES(#&#123;userName&#125;, #&#123;passWord&#125;, #&#123;userSex&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"UPDATE users SET userName=#&#123;userName&#125;,nick_name=#&#123;nickName&#125; WHERE id =#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"DELETE FROM users WHERE id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delte</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<p>select表示查询类的注解，用来作为查询的方法</p>
<p>result修饰返回的结果集，关联实体的属性与数据库字段一一对应，如果两者是一样的则不需要用这个属性来修饰</p>
<p>insert插入数据库使用，直接出入实体对象会自动解析到对应的值</p>
<p>update更新数据</p>
<p>delete负责删除数据</p>
<h4 id="XML版"><a href="#XML版" class="headerlink" title="XML版"></a>XML版</h4><p>先说自己的感受，这玩意这麻烦，但是刚才想了想，好像也挺有用的。不过麻烦确实是麻烦</p>
<h5 id="properties配置"><a href="#properties配置" class="headerlink" title="properties配置"></a>properties配置</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">mybatis.config-location</span>=<span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<p>指定了基础文件配置和实体类映射文件的地址，都在resourse文件下下</p>
<h5 id="mybatis-config-xml配置"><a href="#mybatis-config-xml配置" class="headerlink" title="mybatis-config.xml配置"></a>mybatis-config.xml配置</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Integer"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Long"</span> <span class="attr">type</span>=<span class="string">"java.lang.Long"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"HashMap"</span> <span class="attr">type</span>=<span class="string">"java.util.HashMap"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"LinkedHashMap"</span> <span class="attr">type</span>=<span class="string">"java.util.LinkedHashMap"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"ArrayList"</span> <span class="attr">type</span>=<span class="string">"java.util.ArrayList"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"LinkedList"</span> <span class="attr">type</span>=<span class="string">"java.util.LinkedList"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="User的映射文件"><a href="#User的映射文件" class="headerlink" title="User的映射文件"></a>User的映射文件</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.example.hellomybatis.mapper.UserMapper"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.example.hellomybatis.model.User"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userName"</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"passWord"</span> <span class="attr">property</span>=<span class="string">"passWord"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_sex"</span> <span class="attr">property</span>=<span class="string">"userSex"</span> <span class="attr">javaType</span>=<span class="string">"com.example.hellomybatis.enums.UserSexEnum"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"nick_name"</span> <span class="attr">property</span>=<span class="string">"nickName"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Base_Column_List"</span>&gt;</span></span><br><span class="line">        id,userName,passWord,user_sex,nick_name</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAll"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span>/&gt;</span></span><br><span class="line">        FROM users</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getOne"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> &gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">        FROM users</span><br><span class="line">        WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.example.hellomybatis.model.User"</span> &gt;</span></span><br><span class="line">       INSERT INTO</span><br><span class="line">       		users</span><br><span class="line">       		(userName,passWord,user_sex)</span><br><span class="line">       	VALUES</span><br><span class="line">       		(#&#123;userName&#125;, #&#123;passWord&#125;, #&#123;userSex&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.example.hellomybatis.model.User"</span> &gt;</span></span><br><span class="line">        UPDATE</span><br><span class="line">        users</span><br><span class="line">        SET</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null"</span>&gt;</span>userName = #&#123;userName&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"passWord != null"</span>&gt;</span>passWord = #&#123;passWord&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        nick_name = #&#123;nickName&#125;</span><br><span class="line">        WHERE</span><br><span class="line">        id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> &gt;</span></span><br><span class="line">       DELETE FROM</span><br><span class="line">       		 users</span><br><span class="line">       WHERE</span><br><span class="line">       		 id =#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="Mapper层代码"><a href="#Mapper层代码" class="headerlink" title="Mapper层代码"></a>Mapper层代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">getOne</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好吧，以上其实我比较喜欢注解的形式，但是真正掌握的话，应该是两者都需要掌握，这样话，能够做到在两者之间进行切换。所以需要阅读以下文档。</p>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>看了一遍，似懂非懂的感觉</p>
<h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><blockquote>
<p>MyBatis 的真正强大在于它的映射语句，这是它的魔力所在。</p>
</blockquote>
<h5 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPerson"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"hashmap"</span>&gt;</span></span><br><span class="line">	SELECT * FROM PERSON WHERE ID=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个语句叫做selectPerson就是它的id，接受一个int或者Integer类型的参数，并且返回一个hashmap对象，键是列名，值就是结果行中对应的值</p>
<p>注意这个# 会告诉Mybatis创建一个预处理的语句参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"selectPerson"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parameterType</span>=<span class="string">"int"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parameterMap</span>=<span class="string">"deprecated"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">resultType</span>=<span class="string">"hashmap"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">resultMap</span>=<span class="string">"personResultMap"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushCache</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">useCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">fetchSize</span>=<span class="string">"256"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">resultSetType</span>=<span class="string">"FORWARD_ONLY"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>id是命名空间里的唯一标识，可以被用来引用这条语句</p>
<p>parameterType这个属性是可选的，因为会自动通过类型处理器推断出具体传入语句的参数，默认值是不设置的</p>
<p>resultType与resultMap 结果集的映射，两者只能使用一个</p>
<p>flushCache设置为true只要语句被调用，都会导致本地缓存和二级缓存被清空</p>
<h5 id="insert-update-delete"><a href="#insert-update-delete" class="headerlink" title="insert update delete"></a>insert update delete</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertAuthor"</span>&gt;</span></span><br><span class="line">	insert into Author(id,username,password,email,bio)</span><br><span class="line">    values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;bio&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateAuthor"</span>&gt;</span></span><br><span class="line">  update Author set</span><br><span class="line">    username = #&#123;username&#125;,</span><br><span class="line">    password = #&#123;password&#125;,</span><br><span class="line">    email = #&#123;email&#125;,</span><br><span class="line">    bio = #&#123;bio&#125;</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteAuthor"</span>&gt;</span></span><br><span class="line">  delete from Author where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果数据库支持自动生成主键，可以设置useGeneratedKeys=true，keyProperty=’id’</p>
<h5 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h5><p>这个元素被用来定义可重用的sql语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"userColumns"</span>&gt;</span> $&#123;alias&#125;.id,$&#123;alias&#125;.username,$&#123;alias&#125;.password <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t1"</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>,</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t2"</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">  from some_table t1</span><br><span class="line">    cross join some_table t2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>一般情况下，传递一个简单的参数就可以解决大部分场景，但是特殊的时候我们会传入对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">  insert into users (id, username, password)</span><br><span class="line">  values (#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>传入一个user,id username password都会通过user去找</p>
<p>也可以指定一个特殊的数据类型 ，对于传入是hashMap的对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#&#123;property,javaType=int,jdbcType=NUMERIC&#125;</span><br></pre></td></tr></table></figure>

<h5 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user where $&#123;column&#125;=#&#123;value&#125;"</span>)</span><br><span class="line"><span class="function">User <span class="title">findByColumn</span><span class="params">(@Param(<span class="string">"column"</span>)</span>String column,@<span class="title">Param</span><span class="params">(<span class="string">"value"</span>)</span>String value)</span></span><br></pre></td></tr></table></figure>

<p>注意到$这个会被直接替换，而#会被预处理为?</p>
<h5 id="结果映射"><a href="#结果映射" class="headerlink" title="结果映射"></a>结果映射</h5><p>文档说这是Mybatis最强大的元素。</p>
<p>ResultMap的设计思想是，对于简单的语句根本不需要配置显式的结果映射，对于复杂一点的语句只需要描述它们之间的关系就行了。</p>
<p>简单的映射关系,这个关系只是简单地将所有列映射到HashMap的裂伤</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">	select id,username,hashedPassword</span><br><span class="line">    from some_table</span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于POJO对象，可以被映射到ResultSet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"com.xxx.model.User"</span>&gt;</span></span><br><span class="line">	select id,username,hashedPassword</span><br><span class="line">    from some_table</span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>类型别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.xxx.model.User"</span> <span class="attr">alias</span>=<span class="string">"User"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>解决数据库里的字段名与属性名不统一的问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userResultMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"user_name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"hashed_password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultMap</span>=<span class="string">"userResultMap"</span>&gt;</span></span><br><span class="line">	select user_id,user_name,hashed_password</span><br><span class="line">    from some_table</span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（这个时候文档出现了“如果世界总是这么简单就好了”)hhh</p>
<h5 id="复杂的映射"><a href="#复杂的映射" class="headerlink" title="复杂的映射"></a>复杂的映射</h5><p>先来一步一步的拆解</p>
<p>id&amp;result</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"post_id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"subject"</span> <span class="attr">column</span>=<span class="string">"post_subject"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>id和result元素都将一个列的值映射到一个简单的数据类型的属性或字段</p>
<p>id元素表示的结果将是对象的标识属性</p>
<p>构造方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">idArg</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">javaType</span>=<span class="string">"int"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">javaType</span>=<span class="string">"String"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">javaType</span>=<span class="string">"_int"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关联 用来处理有一个类型的关系，例如一个博客有一个用户</p>
<p>有两种方式来加载 </p>
<p>嵌套Select查询</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogResult"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">column</span>=<span class="string">"author_id"</span> <span class="attr">javaType</span>=<span class="string">"Author"</span> <span class="attr">select</span>=<span class="string">"selectAuthor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">resultMap</span>=<span class="string">"blogResult"</span>&gt;</span></span><br><span class="line">	SELECT * FROM BLOG WHERE ID=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAuthor"</span> <span class="attr">resultType</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line">	SELECT * FROM AUTHOR WHERE ID=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到association里面有个select字段，它指向的嵌套的select的id，property表示输入的字段或属性，column表示select的属性</p>
<p>如果是传入多个参数的需要column=”{prop1=col1,prop2=col2}”</p>
<p>但是以上对于N+1问题却不是很好</p>
<blockquote>
<p>执行了一条单独的SQL语句来获取一个列表+1</p>
<p>对于列表每条记录，执行一个select来获取详细的信息就是N</p>
</blockquote>
<p>所以需要使用嵌套结果映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogResult"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"post_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"title"</span> <span class="attr">column</span>=<span class="string">"blog_title"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">column</span>=<span class="string">"blog_author_id"</span> <span class="attr">javaType</span>=<span class="string">"Author"</span> <span class="attr">resultMap</span>=<span class="string">"authorResult"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"authorResult"</span> <span class="attr">type</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"author_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"author_username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"author_password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"email"</span> <span class="attr">column</span>=<span class="string">"author_email"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"bio"</span> <span class="attr">column</span>=<span class="string">"author_bio"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到通过resultMap将其关联起来</p>
<p>id元素在嵌套结果映射中扮演着非常重要的角色，应该指定一个或多个用来唯一标识结果的属性</p>
<p>关联多结果集 这玩意利用了返回的是多个结果集</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">resultSets</span>=<span class="string">"blogs,authors"</span> <span class="attr">resultMap</span>=<span class="string">"blogResult"</span> <span class="attr">statementType</span>=<span class="string">"CALLABLE"</span>&gt;</span></span><br><span class="line">  &#123;call getBlogsAndAuthors(#&#123;id,jdbcType=INTEGER,mode=IN&#125;)&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogReuslt"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"title"</span> <span class="attr">column</span>=<span class="string">"title"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">javaType</span>=<span class="string">"Author"</span> <span class="attr">resultSet</span>=<span class="string">"authors"</span> <span class="attr">column</span>=<span class="string">"author_id"</span> <span class="attr">foreignColumn</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"email"</span> <span class="attr">column</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"bio"</span> <span class="attr">column</span>=<span class="string">"bio"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>….</p>
<p>还有集合，不过感觉其实差不多</p>
<h4 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h4><p>看了一下if这玩意确实挺强的</p>
<h5 id="if"><a href="#if" class="headerlink" title="if"></a>if</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogWithTitleLike"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">	SELECT * FROM BLOG</span><br><span class="line">    WHERE state='ACTIVE'</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title!=null"</span>&gt;</span></span><br><span class="line">    	AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span> <span class="attr">resutlType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">	SELECT * FROM BLOG WHERE state='ACTIVE'</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title!=null"</span>&gt;</span></span><br><span class="line">    	AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author!=null and autor.name!=null"</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose when otherwise"></a>choose when otherwise</h5><p>可以把它想象成switch</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">      AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">      AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">      AND featured = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim where set"></a>trim where set</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"state != null"</span>&gt;</span></span><br><span class="line">         state = #&#123;state&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上算是过了一遍文档，也知道这么个事，下面进入到mybatis plus</p>
<p>现在的话，我有点理解Mybatis Plus存在的意义，对于一般查询的话，其实使用jpa那样就可以了，完全不需要通过注解或者xml来写。但是如果单纯的时候mybatis这些都是需要做的。</p>
<p>所以mybatis plus就封装好了crud接口，可以直接使用。然后对于复杂的业务，表啥的嵌套很多，确实使用xml比较舒服，这个时候又可以使用xml了。</p>
<p>所以mybatis plus只在mybatis增强而不修改是这个意思。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>接下来就是多数据源的实操。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>初始AOP面向切面编程</title>
    <url>/1756647627.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>无意间碰到AOP面向切面编程，想来先前碰到过，但是并没有细细来看，所以想着不如看一下。知道是个啥</p>
<h3 id="先来个demo"><a href="#先来个demo" class="headerlink" title="先来个demo"></a>先来个demo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BookService.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.MessageFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lendOut</span><span class="params">(String bookId,String userId,Date date)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lendOut</span><span class="params">(String bookId, String userId, Date date)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(MessageFormat.format(<span class="string">"&#123;0&#125; :The book &#123;1&#125; is lent to &#123;2&#125;"</span>,date,bookId,userId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServiceInvocationHandler.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceInvocationHandler</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target=target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">       System.out.println(<span class="string">"Before...."</span>);</span><br><span class="line">       Object result=method.invoke(<span class="keyword">this</span>.target, args);</span><br><span class="line">       System.out.println(<span class="string">"After...."</span>);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">client.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        BookService bookService=(BookService)Proxy.newProxyInstance(BookService.class.getClassLoader(), new Class[]&#123;BookService.class&#125;, new ServiceInvocationHandler(new BookServiceImpl()));</span><br><span class="line">        </span><br><span class="line">        bookService.lendOut(<span class="string">"123"</span>,<span class="string">"456"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印结果是</p>
<p>Before….<br>19-10-5 下午8:38 :The book 123 is lent to 456<br>After….</p>
<p>神奇啊！这玩意咋插入的？</p>
<h3 id="理论先行"><a href="#理论先行" class="headerlink" title="理论先行"></a>理论先行</h3><blockquote>
<p>面向切面编程是一种通过横切关注点分离来增强代码模块性的方法，它能够在不修改业务主体代码的情况下，对它添加额外的行为。</p>
</blockquote>
<p>举个例子，对于图书馆来说，借书跟还书的业务流程最为繁琐，对于鉴权、事务这样的公共功能，彻底拿出去，就是利用了面向切面编程的思想。</p>
<p>是怎么实现的呢？</p>
<p>还记得先前学java的时候，有提到动态绑定与静态绑定。这种实现方式就是通过动态代理.即运行时的增强。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>先学到这里吧。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis Plus</title>
    <url>/2780498761.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点。</p>
<h3 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h3><p>前面有跑过两个mybatis的demo，那个时候大致的一个影响就是，要自己写xml繁琐，然后如果通过注解来实现的话，就相当于之前的Jpa里面的sql全部自己写。(当然它有自己的语法)，今天想着配多数据源这个问题，顺带着继续学习下mybaits，然后无意间碰到了<a href="[https://mp.baomidou.com/guide/crud-interface.html#mapper-crud-%E6%8E%A5%E5%8F%A3](https://mp.baomidou.com/guide/crud-interface.html#mapper-crud-接口)">mybatis-plus</a>这个玩意，瞬间再一次解放生产力。下面是读一遍它的文档，大致有个印象以后，碰到什么问题好search</p>
<h4 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h4><p>我看了演示，真的强。当初写接口的时候，就想着会不会有自动生成的工具。整了半天，碰到几个问题</p>
<ol>
<li>为什么只有文件夹，没有代码</li>
</ol>
<p>生成的代码，前提是表已经建立好了。其实这个拿头想一下，不然字段哪里来的？</p>
<ol start="2">
<li>咋老是报错</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;templates&#x2F;mapper.xml.ftl</span><br><span class="line">这个是l不是1</span><br></pre></td></tr></table></figure>

<p>先贴上代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baomidou.mybatisplus.samples.generator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.FileOutConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.TemplateConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * mysql 代码生成器演示例子</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jobob</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-09-12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 读取控制台内容</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">scanner</span><span class="params">(String tip)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        StringBuilder help = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        help.append(<span class="string">"请输入"</span> + tip + <span class="string">"："</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            String ipt = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(ipt)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MybatisPlusException(<span class="string">"请输入正确的"</span> + tip + <span class="string">"！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RUN THIS</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">"\\src\\main\\java"</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">"jobob"</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;serverTimezone=GMT&amp;useSSL=false&amp;characterEncoding=utf8"</span>);</span><br><span class="line">        <span class="comment">// dsc.setSchemaName("public");</span></span><br><span class="line">        dsc.setDriverName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setModuleName(scanner(<span class="string">"模块名"</span>));</span><br><span class="line">        pc.setParent(<span class="string">"com.baomidou.mybatisplus.samples.generator"</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(<span class="string">"/templates/mapper.xml.ftl"</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输入文件名称</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">"/src/main/resources/mapper/"</span> + pc.getModuleName()</span><br><span class="line">                        + <span class="string">"/"</span> + tableInfo.getEntityName() + <span class="string">"Mapper"</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line">        mpg.setTemplate(<span class="keyword">new</span> TemplateConfig().setXml(<span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setInclude(scanner(<span class="string">"表名"</span>));</span><br><span class="line">        strategy.setSuperEntityColumns(<span class="string">"id"</span>);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">"_"</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        <span class="comment">// 选择 freemarker 引擎需要指定如下加，注意 pom 依赖必须有！</span></span><br><span class="line">        mpg.setTemplateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就这样，下次项目写的时候就要用上这个。</p>
<h4 id="CRUD接口"><a href="#CRUD接口" class="headerlink" title="CRUD接口"></a>CRUD接口</h4><p>这玩意跟jpa未免也太像了。</p>
<p>Mapper封装了BaseMapper接口，Mybatis-Plus启动时自动解析实体表关系映射转换为MyBatis内部对象注入容器</p>
<p>Service封装了IService接口，get查询单行 remove删除 list查询集合 page分页</p>
<p>先补充一个wrapper的知识点,条件构造器。</p>
<hr>
<p>以上是我阅读文档，接下来是一个实战</p>
<p>该实战参考<a href="https://tomoya92.github.io/2019/04/15/spring-boot-mybatis-plus-tutorial/" target="_blank" rel="noopener">博客</a></p>
<h3 id="简单入门"><a href="#简单入门" class="headerlink" title="简单入门"></a>简单入门</h3><p>通过start.spring.io创建依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatisplussecond<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>mybatisplussecond<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>建表</p>
<p>这里要注意，使用mybatis不像使用jpa里的hebinate可以自动建表，mybatis必须手动建表</p>
<h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Topic</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(type = IdType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> String tag;</span><br><span class="line">    <span class="keyword">private</span> Date inTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建Mapper"><a href="#创建Mapper" class="headerlink" title="创建Mapper"></a>创建Mapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TopicMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Topic</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###创建servive</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> TopicMapper topicMapper;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Topic&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> topicMapper.selectList(<span class="keyword">new</span> QueryWrapper&lt;&gt;());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建controller"><a href="#创建controller" class="headerlink" title="创建controller"></a>创建controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> TopicService topicService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> topicService.list();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意一点，还需要在启动类添加上mapperScan或者在mapper’类添加注解@Mapper</p>
<p>以上是简单场景，到这里跟之前写的或者是碰到的场景很像，可以接受。后面就有点不懂了，为什么自定义的sql要写到xml。可能别有用处吧，自己还体会不到。所以接下来就是学习xml</p>
<p>因为对xml理解不是很深，感觉是挺神奇的。</p>
<h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><p>xml配置，因为参考的博客是写到main/java下，这里如果打包的话，不会将这个打到jar包，所以需要在pom.xml文件添加点东西 <a href="https://blog.csdn.net/lmy86263/article/details/53428417" target="_blank" rel="noopener">参考链接</a></p>
<p>其他话，只能说我还需要继续学习，不然有点没感觉。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>计算机这玩意，真的得一直学习。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>初始Docker</title>
    <url>/1285007893.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新东西。</p>
<h4 id="Docker-Hello-world"><a href="#Docker-Hello-world" class="headerlink" title="Docker Hello world"></a>Docker Hello world</h4><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> ubunbtu:16.04 /bin/<span class="built_in">echo</span> <span class="string">"hello world</span></span></span><br></pre></td></tr></table></figure>

<p>docker run 组合起来运行一个容器</p>
<p>ubuntu:16.04 指定要运行的镜像，如果没有的话，会下载这个镜像</p>
<h3 id="进行交互式的容器"><a href="#进行交互式的容器" class="headerlink" title="进行交互式的容器"></a>进行交互式的容器</h3><p>进入bash模式</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -it unbunt:16.04 /bin/bash</span></span><br></pre></td></tr></table></figure>

<p>-it  i表示在新容器内指定一个伪终端或终端  t允许你对容器的标准输入STDIN进行交互</p>
<p>退出容器使用 exit</p>
<h3 id="运行一个容器"><a href="#运行一个容器" class="headerlink" title="运行一个容器"></a>运行一个容器</h3><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -d -P training/webapp python app.py</span></span><br></pre></td></tr></table></figure>

<p>-d 让容器在后台运行</p>
<p>-P 将容器内部使用的网络端口映射到我们使用的主机上</p>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure>

<p>以上会下载最新的mysql 8.0以上</p>
<p>使用mysql镜像</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span></span><br></pre></td></tr></table></figure>

<p>进入容器</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br></pre></td></tr></table></figure>

<p>docke exec 表示 运行一条指令到正在运行的容器</p>
<p>登录mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>添加远程登录用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create USER &#39;xuxiaojin&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;</span><br><span class="line"></span><br><span class="line">ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;</span><br></pre></td></tr></table></figure>

<p>‘root’@’%‘ root表示用户名 %表示随便Ip都可以访问 如果是Localhost的话 只允许本机访问 </p>
<h3 id="安装mongo"><a href="#安装mongo" class="headerlink" title="安装mongo"></a>安装mongo</h3><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker pull mongo</span><br></pre></td></tr></table></figure>

<p>使用mongo镜像</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 27017:27017 -v <span class="variable">$PWD</span>/db:/data/db -d mongo</span></span><br></pre></td></tr></table></figure>

<p>进入容器</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">首先通过docker ps找到name</span><br><span class="line">或者在启动是 添加--name</span><br><span class="line"></span><br><span class="line">docker exec -it mongo mongo</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>如果使用阿里云，记得把端口打开。</p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>《精通Spring MVC4》读书笔记</title>
    <url>/2716121434.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开启我的阅读《精通Spring MVC4》之旅，将之前零零碎碎的知识点用一个项目串起来。</p>
<h3 id="快速搭建Spring-Web项目"><a href="#快速搭建Spring-Web项目" class="headerlink" title="快速搭建Spring Web项目"></a>快速搭建Spring Web项目</h3><ol>
<li>主要依赖是spring-boot-starter-web</li>
</ol>
<p>其中starter会对很多方面进行自动化的配置。例如上面这个依赖将会包含tomcat-embedded和Spring MVC的依赖，会自动运行Spring MVC最为常用的配置，并提供一个分发器(dispatcher)，使其监听”/“根路径，还会提供错误界面，还有一个视图解析器(view resolver)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterSpringMvcApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(MasterSpringMvcApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>解释一下SpringBootApplication注解 这个注解其实包含了三个注解。</li>
</ol>
<p>@Configuration表明这个类会处理Spring的常规配置，如bean的声明</p>
<p>@ComponentScan是一个比较经典的注解，告诉spring去哪里找spring组件(服务、控制器等)。默认时会扫描当前包以及该包下的所有子包</p>
<p>@EnableAutoConfiguration注解会指导Spring Boot进行自动配置</p>
<ol start="3">
<li>看看springboot做了些什么<ol>
<li>初始化spring mvc的dispatcherServlet</li>
<li>搭建转码过滤器，保证客户端进行正确的转码</li>
<li>搭载视图解析器</li>
<li>配置静态资源的位置(css,js)</li>
<li>配置所支持的地域以及资源bundle</li>
<li>配置multipart解析器，保证文件上传能够正常工作</li>
<li>进Tomcat或Jetty包含进来，从而能够在Web服务器上运行我们的应用</li>
<li>建立错误页面</li>
</ol>
</li>
<li>静态资源需要放到”/META-INF/resources/“ “/resources/“ “/static/“ “/public/“</li>
<li>HTTP端口 在application.properties文件中定义server.port属性 设为-1表示禁用http,设置为0表示在随机端口上启动应用</li>
<li>SSL配置 https配置 </li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">server.ssl.key-store=classpath:keystore.jks</span><br><span class="line">server.ssl.key-store-password=secret</span><br><span class="line">server.ssl.key-password=another-secret</span><br></pre></td></tr></table></figure>

<p>一本书《Learning Spring Boot》</p>
<h3 id="精通MVC架构"><a href="#精通MVC架构" class="headerlink" title="精通MVC架构"></a>精通MVC架构</h3><ol>
<li>spring-thymeleaf.cache=false</li>
</ol>
<p>这会禁止启动视图缓存，每次访问时都会重新加载模板。但是在生产环境下需要改为true</p>
<ol start="2">
<li>spring mvc架构</li>
</ol>
<p>DispatcherServlet是一个典型的HttpServlet类，它会将HTTP请求分发给HandlerMapping,HandlerMapping会将资源(URL)与控制器关联起来。</p>
<p>控制器上对应的方法（带有@RequestMapping注解的方法）将会被调用。控制器会控制模型数据，并将视图名称返回给分发器</p>
<p>DispatcherServlet将会查询ViewResolver接口，从而得到对应视图的实现</p>
<p>使用Thymeleaf视图，其中ThymeleafAutoConfiguration将会为我们搭建视图解析器</p>
<p>默认前缀是“classpath:/templates/“,后缀是”.html”</p>
<p>举个例子：假设视图名为resultPage 那么视图解析器将会在类路径的templates目录下查找名为resultPage.html的文件</p>
<ol start="3">
<li>redirect:/redirecturl</li>
</ol>
<p>不是转发到一个视图，而是转发到url控制器</p>
<ol start="4">
<li>数据传输对象(Data Transfer Object,DTO)</li>
</ol>
<p>首先创建一个bean例如Test</p>
<p>然后绑定到前端form表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/url&#125;"</span> <span class="attr">th:object</span>=<span class="string">"$&#123;test&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:field</span>=<span class="string">"$&#123;test.xx&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ul>
<li><p>th:object表示类型将一个对象绑定到控制器上</p>
</li>
<li><p>th:field表示将实际的输入域绑定到表单bean的属性上</p>
<p>5.springboot中的日志</p>
</li>
</ul>
<p>在application.properties中添加代码</p>
<p>​    logging.level.org.springframework.web=DEBUG</p>
<p>这样就能看到Spring Web所产生的调试信息</p>
<h3 id="文件上传与错误处理"><a href="#文件上传与错误处理" class="headerlink" title="文件上传与错误处理"></a>文件上传与错误处理</h3><ol>
<li>上传文件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/upload&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/upload"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">onUpload</span><span class="params">(MultipartFile file)</span><span class="keyword">throws</span> IOExcepiton</span>&#123;</span><br><span class="line">    String filename=file.getOriginalFilename();</span><br><span class="line">    File tempFile=File.createTempFile(<span class="string">"pic"</span>,getFileExtension(filename),PICTURES_DIR.getFile())&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            InputStream in=file.getInputStream();</span><br><span class="line">            OutputStream out=<span class="keyword">new</span> FileOutputStream(tempFile)</span><br><span class="line">                ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>通过矩阵变量进行URL映射</li>
</ol>
<p>看一下这两种url</p>
<p>someUrl/param?var1=value1&amp;var2=value2</p>
<p>可以使用如下的矩阵变量</p>
<p>someUrl/param;var1=value1;var2=value2</p>
<p>还支持</p>
<p>someUrl/param;var1=value1,value2;var2=value3,value4</p>
<p>需要添加一下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">        urlPathHelper.setRemoveSemicolonContent(<span class="keyword">false</span>);</span><br><span class="line">        configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">        configurer.setUseRegisteredSuffixPatternMatch(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="单元测试与验收测试"><a href="#单元测试与验收测试" class="headerlink" title="单元测试与验收测试"></a>单元测试与验收测试</h3><p>通过@DataJpaTest注入测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//model</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Size</span>(min=<span class="number">3</span>,max=<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(@Size(min = <span class="number">3</span>, max = <span class="number">20</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>model 层很简单就是一个人的信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//repository</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Employee</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>repository(持久化层)使用Spring Data JPA</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">DataJpaTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">EmployeeRepositoryIntegrationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestEntityManager entityManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeRepository employeeRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenFindByName_thenReturnEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//given</span></span><br><span class="line">        Employee alex=<span class="keyword">new</span> Employee(<span class="string">"alex"</span>);</span><br><span class="line">        entityManager.persist(alex);</span><br><span class="line">        entityManager.flush();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//when</span></span><br><span class="line">        Employee found=employeeRepository.findByName(alex.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//then</span></span><br><span class="line">        assertThat(found.getName())</span><br><span class="line">                .isEqualTo(alex.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@RunWith(SpringRunner.class)通常用来提供一个在SpringBoot Test特性和JUnit之间的桥梁。当我们使用 SpringBoot testing特性在JUnit tests,这个注解都是必须的。</p>
<p>@DataJpaTest为持久层的test提供一些标准化步骤</p>
<ul>
<li>配置H2,一个数据库</li>
<li>设置Hibernate,Spring Data,和DataSource</li>
<li>表现一个@EntityScan</li>
<li>转为SQL logging</li>
</ul>
<p>为了执行一些DB操作，我们需要写记录已经存储到我们的数据库里，通过TestEntityManager可以很好的执行这些操作</p>
<hr>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>满打满算，现在只能算一个代码搬运工，还是需要多写，多理解。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>分页查询等</title>
    <url>/3005596272.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>复盘一下最近写的一些点。</p>
<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> xxx <span class="title">returnxxxx</span><span class="params">(@RequestParam String code,@RequestParam(value=<span class="string">"start"</span>,defaultValue=<span class="string">"0"</span>)</span>String start,@<span class="title">RequestParam</span><span class="params">(value=<span class="string">"size"</span>,defaultValue=<span class="string">"9"</span>)</span>String size)</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> starts=Integer.parseInt(start);</span><br><span class="line">    <span class="keyword">int</span> sizes=Integer.parseInt(size);</span><br><span class="line">    </span><br><span class="line">    starts=starts&lt;<span class="number">0</span>?<span class="number">0</span>:starts;</span><br><span class="line">    Sort sort=<span class="keyword">new</span> Sort(Sort.Direction.ASC,<span class="string">"id"</span>);</span><br><span class="line">    Pageable pageable=<span class="keyword">new</span> PageRequest(starts,size,sort);</span><br><span class="line">    Page&lt;XXX&gt; pages=xxxx.findByCode(code,pageable);</span><br><span class="line">    <span class="keyword">return</span> xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要在Repository里写上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;xxxx&gt; <span class="title">findByCode</span><span class="params">(String code,Pageable pageable)</span></span></span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ol>
<li>start是第几页 默认从第0页开始</li>
<li>size是一页的大小 默认是9</li>
<li>Sort是进行排序</li>
</ol>
<p>以上是有条件执行</p>
<h3 id="ajax操作DOM"><a href="#ajax操作DOM" class="headerlink" title="ajax操作DOM"></a>ajax操作DOM</h3><p>这次算是操作一把</p>
<p>首先要把所想的描述成一个DOM树，然后进行操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cell=<span class="built_in">document</span>.createElement(<span class="string">"div"</span>)</span><br><span class="line">cell.setAttribute(<span class="string">"class"</span>,<span class="string">"..."</span>)</span><br><span class="line">cell.appendChild(cell)</span><br></pre></td></tr></table></figure>

<p>补充点另外用到的</p>
<ol>
<li>$(“#id”)</li>
<li>document.getElementById(“id”)</li>
</ol>
<h3 id="后退不刷新页面"><a href="#后退不刷新页面" class="headerlink" title="后退不刷新页面"></a>后退不刷新页面</h3><p>因为我的页面是通过ajax实现局部刷新，即url没有发生变化，所以如果是通过浏览器进行后退的话，一定是第一次进入页面的状态(因为url)</p>
<p>所以问题就出现在url上，所以就做一个假的url。把信息存储到url</p>
<p>然后后退时读取url</p>
<p>当然这种实现方式是比较暴力的，会有部分bug，但是我search了很多资料，都没有好的方法。所以就用了这种方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.pushState(<span class="string">'forward'</span>, <span class="literal">null</span>, <span class="string">"#"</span> + id+<span class="string">"&amp;"</span>+start)</span><br></pre></td></tr></table></figure>

<h3 id="Thymeleaf-Layout"><a href="#Thymeleaf-Layout" class="headerlink" title="Thymeleaf Layout"></a>Thymeleaf Layout</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">定义模板</span><br><span class="line">default.html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"foot"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">引用模板</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"default::foot"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不知道是自己打开的方式有误还是怎么了，这种实现需要将foot的css加到引用模板的页面</p>
<p>补充一写另外的</p>
<ol>
<li>th:href=”@{/}”</li>
</ol>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>不知道为什么最近特别“忙”。难以想象，需要好好想一想</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>谈一谈服务端的推送技术</title>
    <url>/2434758480.html</url>
    <content><![CDATA[<hr>
<p>##正文</p>
<p>先前接触推送，是从“wjaf”项目里碰到的。</p>
<p>项目场景是：当一台移动端设备添加新的数据时，另一台移动端的设备也要实时更新页面。</p>
<p>不过当时自己技术很菜(虽然现在也很菜)，只能听懂一点：轮询。</p>
<p>后面慢慢接触了有点懂了是个什么样的一回事。</p>
<p>首先要知道传统的HTTP是有弊端的，即满足“请求-响应”的工作模式，但是发送请求的只能是客户端，如果我们要让服务端向客户端<strong>主动</strong>发送数据，这个是在传统模式下是做不到的。</p>
<p>然后就有了一下解决方法</p>
<p>轮询(poll)：客户端通过周期性请求，每次请求检查服务端是否有更新数据。可以明显看出来这种方法会造成overhead(为了传输实际而造成的的开销)。</p>
<p>接着就有着许多方法</p>
<p>Comet:一次请求后，不马上断开连接，当服务端有数据更新的时候，可以通过分块传输，发给客户端。这种被称为长轮询</p>
<p>WebSocket：这个就彻底解决push(推送)的问题，是一个完全的、双向的协议。前几天，因为需要做即时聊天的需求，大致了解一下.onopen，onmessage等等。</p>
<p>其实 ajax的局部更新页面+轮询=websocket</p>
<p>虽然即时聊天的需求已经解决了(用了百度的轮子)，但是还是需要记录一下这种服务端push的场景。日后当我需要在一次用到的时候也可以去search。</p>
]]></content>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot与WebSocket</title>
    <url>/2945851745.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点，更新自己的技术库</p>
<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>简单说一下WebSocket，因为HTTP协议是“请求-应答”模式，所以要做到即时通信，不好弄。因为服务端不能主动向客户端发送信息。所以可以通过客户端向服务端不断去请求(轮询)，查看是否有新消息。但是如果请求的多了就容易造成堵塞。</p>
<p>WebSocket就是为了解决这样的问题。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="消息类"><a href="#消息类" class="headerlink" title="消息类"></a>消息类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENTER = <span class="string">"ENTER"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPEAK = <span class="string">"SPEAK"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUIT = <span class="string">"QUIT"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;<span class="comment">//消息类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username; <span class="comment">//发送人</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//发送消息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> onlineCount; <span class="comment">//在线用户数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">jsonStr</span><span class="params">(String type, String username, String msg, <span class="keyword">int</span> onlineTotal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(<span class="keyword">new</span> Message(type, username, msg, onlineTotal));</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="聊天服务端"><a href="#聊天服务端" class="headerlink" title="聊天服务端"></a>聊天服务端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/chat"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketChatServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全部在线会话  PS: 基于场景考虑 这里使用线程安全的Map存储会话对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Session&gt; onlineSessions = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当客户端打开连接：1.添加会话对象 2.更新在线人数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        onlineSessions.put(session.getId(), session);</span><br><span class="line">        sendMessageToAll(Message.jsonStr(Message.ENTER, <span class="string">""</span>, <span class="string">""</span>, onlineSessions.size()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当客户端发送消息：1.获取它的用户名和消息 2.发送消息给所有人</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * PS: 这里约定传递的消息为JSON字符串 方便传递更多参数！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Session session, String jsonStr)</span> </span>&#123;</span><br><span class="line">        Message message = JSON.parseObject(jsonStr, Message<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        sendMessageToOne(session,Message.jsonStr(Message.SPEAK, message.getUsername(), message.getMsg(), onlineSessions.size()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当关闭连接：1.移除会话对象 2.更新在线人数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        onlineSessions.remove(session.getId());</span><br><span class="line">        <span class="comment">//sendMessageToAll(Message.jsonStr(Message.QUIT, "", "", onlineSessions.size()));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当通信发生异常：打印错误日志</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable error)</span> </span>&#123;</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公共方法：发送信息给所有人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessageToAll</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        onlineSessions.forEach((id, session) -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                session.getBasicRemote().sendText(msg);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送给某人的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessageToOne</span><span class="params">(Session session,String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            session.getBasicRemote().sendText(msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ul>
<li>WebSocket服务端 需指定端点的访问路径</li>
</ul>
<p>(其实上面的代码都还比较好理解的)</p>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于扫描和注册所有携带ServerEndPoint注解的实例。</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * PS:若部署到外部容器 则无需提供此类。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getWebSocket</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> webSocket=<span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:8080/chat"</span>)</span><br><span class="line">    </span><br><span class="line">    webSocket.onopen=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"打开连接"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//服务端发来消息</span></span><br><span class="line">    webSocket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'WebSocket收到消息：%c'</span> + event.data, <span class="string">'color:green'</span>);</span><br><span class="line">            <span class="comment">//获取服务端消息</span></span><br><span class="line">            <span class="keyword">var</span> message = <span class="built_in">JSON</span>.parse(event.data) || &#123;&#125;;</span><br><span class="line">            <span class="keyword">var</span> $messageContainer = $(<span class="string">'.message-container'</span>);</span><br><span class="line">            <span class="comment">//喉咙发炎</span></span><br><span class="line">            <span class="keyword">if</span> (message.type === <span class="string">'SPEAK'</span>) &#123;</span><br><span class="line">                $messageContainer.append(</span><br><span class="line">                    <span class="string">'&lt;div class="mdui-card" style="margin: 10px 0;"&gt;'</span> +</span><br><span class="line">                    <span class="string">'&lt;div class="mdui-card-primary"&gt;'</span> +</span><br><span class="line">                    <span class="string">'&lt;div class="mdui-card-content message-content"&gt;'</span> + message.username + <span class="string">"："</span> + message.msg + <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">                    <span class="string">'&lt;/div&gt;&lt;/div&gt;'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $(<span class="string">'.chat-num'</span>).text(message.onlineCount);</span><br><span class="line">            <span class="comment">//防止刷屏</span></span><br><span class="line">            <span class="keyword">var</span> $cards = $messageContainer.children(<span class="string">'.mdui-card:visible'</span>).toArray();</span><br><span class="line">            <span class="keyword">if</span> ($cards.length &gt; <span class="number">5</span>) &#123;</span><br><span class="line">                $cards.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">                    index &lt; $cards.length - <span class="number">5</span> &amp;&amp; $(item).slideUp(<span class="string">'fast'</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭连接</span></span><br><span class="line">     webSocket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'WebSocket关闭连接'</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 通信失败</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        webSocket.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'WebSocket发生异常'</span>);</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> webSocket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> webSocket = getWebSocket();</span><br></pre></td></tr></table></figure>

<h3 id="踩到的坑"><a href="#踩到的坑" class="headerlink" title="踩到的坑"></a>踩到的坑</h3><ol>
<li>因为用Https所以应该改用wss</li>
</ol>
<p>刚开始想用这个做一个在线咨询的玩意，搞了一下。认真思考了一下，决定先弃用。改用简单的提交联系方式来弄这一块</p>
<p>一来，这个也符合大部分网页，例如腾讯云的提交工单，一些网站的在线咨询</p>
<p>二来，能做但是感觉不到自己的预期。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/964370d9374e" target="_blank" rel="noopener">WebSocket</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>事一件一件的解决，别急。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot thumbnailator对图片进行压缩</title>
    <url>/495753683.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新技术，更新自己的技术库</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;net.coobird&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;thumbnailator&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;0.4.8&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thumbnails.of(samllwebimagpath+<span class="string">"\\"</span>+filename).scale(scale).outputQuality(quality).toFile(<span class="keyword">this</span>.webimgLocation+<span class="string">"\\"</span>+smallfile);</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ul>
<li>其实还有许多特性，例如裁剪，加水印等等。(只要知道有这个库，然后后面需要的时候在深入学习即可)</li>
<li>of是需要压缩的图片路径</li>
<li>scale是大小，是必填项</li>
<li>outputQuality是质量，进行压缩</li>
<li>toFile是输出到某个路径下的文件</li>
</ul>
<h3 id="其他收获"><a href="#其他收获" class="headerlink" title="其他收获"></a>其他收获</h3><p>因为编码问题，url里面自动会进行汉字转为%加ASCII码。所以需要解码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URLDecoder.decode(url)</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>昨天是第一次想着自动化，虽然如果手动只要30分钟，但是这个过程学不到任何东西。如果编代码要2个小时，但是完成工作只要1s，这个过程学的东西更多，成就感更强。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot和MongoDB的真正实践</title>
    <url>/1336508396.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要学一点新技术，更新自己的技术库</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">			&lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">			&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">	&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<h4 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.data.mongodb.uri=mongodb:<span class="comment">//xuxiaojin:xuxiaojin@localhost:27017/test</span></span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ul>
<li>前面一个xuxiaojin是username 后面一个是pwd</li>
</ul>
<p>补充点知识：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">test</span> <span class="comment">#创建数据库</span></span><br><span class="line">db.createUser(</span><br><span class="line">	&#123;</span><br><span class="line">    <span class="keyword">user</span>:<span class="string">"xuxiaojin"</span>,</span><br><span class="line">    pwd:<span class="string">"xuxiaojin"</span>,</span><br><span class="line">    <span class="keyword">roles</span>:[</span><br><span class="line">        &#123;<span class="keyword">role</span>:<span class="string">"readWrite"</span>,db:<span class="string">"test"</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>上面两行代码表示在创建一个user，对数据库test有读写的权限</p>
<h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Document</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> ObjectId id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id.toHexString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下:</p>
<ul>
<li>ObjectId是java对于mongodb的一个api</li>
</ul>
<h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Student</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findByUsername</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ul>
<li>MongoRepository类似先前的JPA</li>
</ul>
<h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/create"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">createStudent</span><span class="params">(@RequestBody Student student)</span></span>&#123;</span><br><span class="line">        student.setId(ObjectId.get());</span><br><span class="line">        <span class="keyword">return</span> studentRepository.save(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findbyname"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findbyUsername</span><span class="params">(@RequestParam String username)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findall"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他收获"><a href="#其他收获" class="headerlink" title="其他收获"></a>其他收获</h3><ul>
<li>在通过start.spring.io创建项目的时候<ul>
<li>Group：包名 com.xxx.xxx</li>
<li>Artifact：文件名 demo</li>
</ul>
</li>
<li>对于MongoDB的安装</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这一次只是简单的将mongodb与springboot结合了一下，但是这还不是我的目的。我的目的是一个项目使用两个数据源mongodb与Mysql</p>
<p>我们下一次见。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot和MongoDB的爱恨情仇</title>
    <url>/4184438344.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习路径，先通过阅读官方文档，抄点代码。有个大致了解。然后结合SpringBoot</p>
<h3 id="Pure-MongoDB"><a href="#Pure-MongoDB" class="headerlink" title="Pure MongoDB"></a>Pure MongoDB</h3><h4 id="Insert-Documents"><a href="#Insert-Documents" class="headerlink" title="Insert Documents"></a>Insert Documents</h4><ul>
<li>db.collection.insertMany()可以插入很多文档数据，传递一个文档数据给该方法</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.inventory.insertMany([</span><br><span class="line">    &#123;item:"journal",qty:25,status:"A",size:&#123;h:14,w:21,uom:"cm"&#125;,tags:["blank","red"]&#125;,</span><br><span class="line">    &#123; item: "notebook", qty: 50, status: "A",</span><br><span class="line">       size: &#123; h: 8.5, w: 11, uom: "in" &#125;, tags: [ "red", "blank" ] &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ul>
<li>insertMany()返回一个包含最近插入文档id的文档</li>
<li>如果文档没有特别标明一个_id的字段，mongod会添加该字段并且分配一个特殊的ObjectId</li>
<li>insertOne()插入一个单条数据</li>
</ul>
<h4 id="Query-Documents"><a href="#Query-Documents" class="headerlink" title="Query Documents"></a>Query Documents</h4><h5 id="Select-all-documents"><a href="#Select-all-documents" class="headerlink" title="Select all documents"></a>Select all documents</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>如果需要匹配到特殊情况的</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;status:"D"&#125;)   #从inventroy集合中符合status="D"的所有文档</span><br></pre></td></tr></table></figure>

<h5 id="匹配复杂的文档-即一个文档又嵌入另外一个文档"><a href="#匹配复杂的文档-即一个文档又嵌入另外一个文档" class="headerlink" title="匹配复杂的文档(即一个文档又嵌入另外一个文档)"></a>匹配复杂的文档(即一个文档又嵌入另外一个文档)</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;size:&#123;h:14,w:21,uom:"cm"&#125;&#125;)  #会找到size与给文档相等的所有文档</span><br></pre></td></tr></table></figure>

<h5 id="匹配嵌入文档中的某个字段"><a href="#匹配嵌入文档中的某个字段" class="headerlink" title="匹配嵌入文档中的某个字段"></a>匹配嵌入文档中的某个字段</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;"size.uom":"in"&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="匹配数组中的某个元素"><a href="#匹配数组中的某个元素" class="headerlink" title="匹配数组中的某个元素"></a>匹配数组中的某个元素</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;tags:"red"&#125;)  #tag是一个数据，red是其中一个元素</span><br></pre></td></tr></table></figure>

<h5 id="匹配一整个数组"><a href="#匹配一整个数组" class="headerlink" title="匹配一整个数组"></a>匹配一整个数组</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;tags:["red","blank"]&#125;)</span><br></pre></td></tr></table></figure>

<p>####Update Documents</p>
<p>#####更新一条数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.inventory.updateOne(</span><br><span class="line">	&#123;item:"paper"&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">     $<span class="keyword">set</span>:&#123;<span class="string">"size.uom"</span>:<span class="string">"cm"</span>,<span class="keyword">status</span>:<span class="string">"p"</span>&#125;,</span><br><span class="line">     $currentDate:&#123;lastModified:<span class="literal">true</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>解释一下</p>
<ul>
<li>{item:”paper”} 表示匹配到第一条item是paper的数据</li>
<li>$set:表示更新的数据</li>
<li>$currentDate表示更新修改的时间，如果没有该字段，就会自动添加</li>
</ul>
<h5 id="替换一条数据"><a href="#替换一条数据" class="headerlink" title="替换一条数据"></a>替换一条数据</h5><p>替换整个文档，除了_id字段。</p>
<p>传一个新的文档给db.collection.replaceOne()作为第二个参数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.inventory.replaceOne(</span><br><span class="line">	&#123;item:"paper"&#125;,</span><br><span class="line">    &#123; item: "paper", instock: [ &#123; warehouse: "A", qty: 60 &#125;, &#123; warehouse: "B", qty: 40 &#125; ] &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>解释一下：该mongo shell会替换到第一个符合item=paper的文档</p>
<h4 id="Delete-Documents"><a href="#Delete-Documents" class="headerlink" title="Delete Documents"></a>Delete Documents</h4><h5 id="删除多条数据-其实是全部删掉"><a href="#删除多条数据-其实是全部删掉" class="headerlink" title="删除多条数据(其实是全部删掉)"></a>删除多条数据(其实是全部删掉)</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.deleteMany(&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="删掉全部匹配数据"><a href="#删掉全部匹配数据" class="headerlink" title="删掉全部匹配数据"></a>删掉全部匹配数据</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.deleteMany(&#123;status:"A"&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="删掉一条匹配数据"><a href="#删掉一条匹配数据" class="headerlink" title="删掉一条匹配数据"></a>删掉一条匹配数据</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.inventory.deleteOne(&#123;status:"D"&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="SpringBoot-with-mongodb"><a href="#SpringBoot-with-mongodb" class="headerlink" title="SpringBoot with mongodb"></a>SpringBoot with mongodb</h3><p>引入配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;Spring-boot-starter-data-mongodb&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>定义一个实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line">    <span class="keyword">public</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(</span><br><span class="line">                <span class="string">"Customer[id=%s, firstName='%s', lastName='%s']"</span>,</span><br><span class="line">                id, firstName, lastName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ul>
<li>mongoDB会默认将类名customer作为collection的名字，如果需要自定义名字需要添加注解@Document</li>
</ul>
<p>定义一个操作的类JPA</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Customer</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">findByFirstName</span><span class="params">(String firstName)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findByLastName</span><span class="params">(String lastName)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 使用https</title>
    <url>/605738871.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新技术，更新自己的技术库。</p>
<h3 id="springboot使用https"><a href="#springboot使用https" class="headerlink" title="springboot使用https"></a>springboot使用https</h3><ul>
<li>因为springboot是内置tomcat,所以使用下载下来的ssl里面的tomcat证书</li>
<li>将xxx.jks放到resource的文件夹下面</li>
<li>配置application.properties</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.port=<span class="number">443</span>  <span class="comment">//记住这个port跟先前的有所区别</span></span><br><span class="line">server.ssl.key-store=classpath:xxx.jks <span class="comment">//这xxx放自己放到resource下面的文件名字</span></span><br><span class="line">server.ssl.key-store-password=密码</span><br><span class="line">server.ssl.key-store-type=JKS</span><br></pre></td></tr></table></figure>

<p>到这里是配置完成了，然后访问的话需要通过https://域名:8443/path.</p>
<h3 id="http自动转为https"><a href="#http自动转为https" class="headerlink" title="http自动转为https"></a>http自动转为https</h3><p>先上代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connector <span class="title">connector</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connector connector=<span class="keyword">new</span> Connector(<span class="string">"org.apache.coyote.http11.Http11NioProtocal"</span>);  <span class="comment">//http1.1的协议</span></span><br><span class="line"> connector.setScheme(<span class="string">"http"</span>);</span><br><span class="line"> connector.setPort(<span class="number">8080</span>);</span><br><span class="line"> connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line"> connector.setRedrectPort(<span class="number">443</span>);</span><br><span class="line">    <span class="keyword">return</span> connector;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TomcatServletWebServerFactory <span class="title">tomcatServletWebServerFactory</span><span class="params">(Connector connector)</span></span>&#123;</span><br><span class="line">		TomcatServletWebServerFactory tomcat=<span class="keyword">new</span> TomcatServletWebServerFactory()&#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">				SecurityConstraint securityConstraint=<span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">				securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">				SecurityCollection collection=<span class="keyword">new</span> SecurityCollection();</span><br><span class="line">				collection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">				securityConstraint.addCollection(collection);</span><br><span class="line">				context.addConstraint(securityConstraint);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		tomcat.addAdditionalTomcatConnectors(connector);</span><br><span class="line">		<span class="keyword">return</span> tomcat;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>下面这段代码是进行url转化</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>今天是8月的最后一天，新的一学期开始了，接下来就是发挥的时候了。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>java中ArrayList、LinkedList、Vector的区别</title>
    <url>/1160018501.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天都学一点。</p>
<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>List，是一些有序的元素集合，而Set就没有顺序。</p>
<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList实现可以调整大小的数组，但元素不断被加入时，其大小也会自动调整。ArrayList里的元素可以直接通过get和set的方法来得到，所以比Array(数组)好用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; a=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">a.add(<span class="number">2</span>)</span><br><span class="line"> ...</span><br><span class="line">    </span><br><span class="line">Iterator&lt;Integer&gt; iter=a.iterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext())&#123;</span><br><span class="line">    System.out.println(iter.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>LinkedList实现一个双队列的接口，相比于ArrayList在add和remove表现的更好，但是在get和set表现的比较差</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList&lt;Integer&gt; l=<span class="keyword">new</span> LinedList&lt;Integer&gt;();</span><br><span class="line">l.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;Integer&gt; it=l.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    it.next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>vector与ArrayList相似，但是其是同步的。</p>
<p>当你线程安全的时候，ArrayList是更好的选择，vector和ArrayList需要更多的空间来存储元素。vector每次都会两倍两倍的扩展其大小，但是arraylist不会。</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><table>
<thead>
<tr>
<th>method</th>
<th>ArrayList</th>
<th>LinkedList</th>
</tr>
</thead>
<tbody><tr>
<td>get()</td>
<td>O(1)</td>
<td>O(n)</td>
</tr>
<tr>
<td>add()</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
<tr>
<td>remove()</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
</tbody></table>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>今天换回原来地方，老味道，新刺激。加油。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java中Integer与int的区别</title>
    <url>/2399757600.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新技术</p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在java里面，int是原始数据类型(primitive data) Integer是包装类。</p>
<ul>
<li>因为Int是原始数据类型，失去很多灵活性，我们只能存储一个整数值</li>
<li>因为Integer是一个包装类，就拥有很多灵活性，我们可以存储，传递和计算</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//valid</span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">20</span>;</span><br><span class="line"><span class="comment">//not valid</span></span><br><span class="line">Integer n=<span class="number">45</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//valid</span></span><br><span class="line">Integer.parseInt(<span class="string">"10"</span>);</span><br><span class="line"><span class="comment">//not valid</span></span><br><span class="line"><span class="keyword">int</span>.parseInt(<span class="string">"10"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="重要的不同点"><a href="#重要的不同点" class="headerlink" title="重要的不同点"></a>重要的不同点</h3><ol>
<li>将String转为Int 我们不能直接将一个只含有int的String转为int通过类型转换，但是我们可以通过分配String对象给Integer，通过使用parseInt(String)将String转为int</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    Integer a=<span class="keyword">new</span> Integer(<span class="string">"123"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> b=Integer.parseInt(<span class="string">"123"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>进制转化，我们可以直接使用toBinaryString(),toOctalString()或者toHexString()对整数进行进制转化</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    String bin=Integer.toBinaryString(<span class="number">123</span>);</span><br><span class="line">    String oct=Integer.toOctalString(<span class="number">123</span>);</span><br><span class="line">    String hex=Integer.toHexString(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="number">1111011</span></span><br><span class="line">    <span class="number">173</span></span><br><span class="line">    <span class="number">7</span>b</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在数据上进行操作，左移右移等</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> rL=Integer.rotateLeft(<span class="number">12</span>,<span class="number">2</span>);           <span class="comment">//48</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> rR=Integer.rotateRight(<span class="number">12</span>,<span class="number">2</span>);        <span class="comment">//3</span></span><br><span class="line">    <span class="comment">//32bits</span></span><br><span class="line">    <span class="keyword">int</span> rev=Integer.reverse(<span class="number">12</span>);        <span class="comment">//805306368</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>灵活性，java提供自动装箱机制，可以使得Integer更具有灵活性。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    Integer a=<span class="keyword">new</span> Integer(<span class="string">"12"</span>);</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c=a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>昨天发现项目bug还是很多，还是得一个个解决咯。不慌</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot MVC自定义错误页面</title>
    <url>/3844469490.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天都学一点新技术</p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>今天发现项目需要一个自定义的Error的页面，说来就来。</p>
<p>###配置</p>
<p>在application.properties</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.error.whitelabel.enabled=<span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<p>与上述配置相同的结果</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration</span><br><span class="line"></span><br><span class="line">#for Spring Boot 2.0</span><br><span class="line">#spring.autoconfigure.exvlude=org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguratiion</span><br></pre></td></tr></table></figure>

<p>或者在主函数添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span>(exclude=&#123;ErrorMvcAutoConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br></pre></td></tr></table></figure>

<p>上面这些配置都会使得原生的错误页面不能使用，所以我们需要自定义</p>
<h3 id="自定义的ErrorController"><a href="#自定义的ErrorController" class="headerlink" title="自定义的ErrorController"></a>自定义的ErrorController</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorController</span> <span class="keyword">implements</span> <span class="title">ErrorController</span></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/error"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleError</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        Object status=request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);</span><br><span class="line">        <span class="keyword">if</span>(status!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            Integer statusCode=Integer.valueOf(status.toString());</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(statusCode==HttpStatus.NOT_FOUND.value())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"error-404"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(statusCode==HttpStatus.INTERNAL_SERVER_ERROR.value())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"error-500"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorPath</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/error"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ol>
<li>自定义的controller必须实现接口 ErrorController里面的getErrorPath()方法，但错误发生时，会返回一个路径</li>
<li>通过status_code判断是什么错误，返回不同的错误的页面</li>
<li>@Controller因为要返回的是页面</li>
</ol>
<h3 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h3><p>使用SpringBoot的视图框架 Thymeleaf</p>
<p>在template下新建 error-404 error-500 error的页面</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>其实这篇文章是20190814写的，因为昨天写网页，写的心态崩了。加油。每天都要进步。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot的视图框架thymeleaf</title>
    <url>/4239156299.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学习一点。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Web</span></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/case/&#123;id&#125;"</span>,method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String id,ModelMap map)</span>&#123;</span><br><span class="line">        <span class="comment">//路径中的Id的值</span></span><br><span class="line">        <span class="comment">//将结果存储到map里</span></span><br><span class="line">        map.addAttribute(<span class="string">"collect"</span>,..)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"casedetail"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><table>
<thead>
<tr>
<th>关键字</th>
<th>功能介绍</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>th:id</td>
<td>替换Id</td>
<td><input th:id="'xxx'+${collect.id}"/></td>
</tr>
<tr>
<td>th:text</td>
<td>文本替换</td>
<td><p th:text="${collect.description}">description</p></td>
</tr>
<tr>
<td>th:utext</td>
<td>支持html的文本替换</td>
<td><p th:utext="${htmlcontent}">content</p></td>
</tr>
<tr>
<td>th:object</td>
<td>替换对象</td>
<td><div th:object="${session.user}"></td>
</tr>
<tr>
<td>th:value</td>
<td>属性赋值</td>
<td><input th:value="${user.name}"/></td>
</tr>
<tr>
<td>th:with</td>
<td>变量赋值运算</td>
<td><div th:with="isEvens=${prodStat.count}%2==0"></div></td>
</tr>
<tr>
<td>th:style</td>
<td>设置样式</td>
<td><div th:style="'display:'+@{(${istrue}?'none':'inline-block')}"></div></td>
</tr>
<tr>
<td>th:onclick</td>
<td>点击事件</td>
<td><td th:onclick="'getCollect()'"></td></td>
</tr>
<tr>
<td>th:each</td>
<td>循环？属性赋值</td>
<td><tr th:each="user:${users}"></td>
</tr>
<tr>
<td>th:if</td>
<td>判断条件</td>
<td><a th:if="${userId==collect.userId}"></td>
</tr>
<tr>
<td>th:unless</td>
<td>和th:if判断相反</td>
<td></td>
</tr>
<tr>
<td>th:href</td>
<td>链接地址</td>
<td><a th:href=@{/login}></td>
</tr>
<tr>
<td>th:switch</td>
<td>多路选择配合th:case使用</td>
<td></td>
</tr>
<tr>
<td>th:src</td>
<td>图片类地址引入</td>
<td><img th:src="${collect.url}"></td>
</tr>
</tbody></table>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本来以为用不到这个视图框架，但是今天项目还是用到了，还好学习的时间没有话很长。说明最近确实进步了，加油</p>
<p>并且我已经对自己有了新的要求。加油</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot通过注解使用MyBatis</title>
    <url>/260235536.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新的东西。</p>
<h3 id="通过注解使用MyBatis"><a href="#通过注解使用MyBatis" class="headerlink" title="通过注解使用MyBatis"></a>通过注解使用MyBatis</h3><p>先前一篇的文章，我们通过注解来使用MyBatis，但是跟先前的风格有点不一样，所以这一次我们直接使用注解，能够有一个较直观的对比。引入依赖什么的这里就不说了。</p>
<h3 id="配置连接数据库"><a href="#配置连接数据库" class="headerlink" title="配置连接数据库"></a>配置连接数据库</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/test?serverTimezone=UTC</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=<span class="number">995495</span></span><br></pre></td></tr></table></figure>

<p>题外话：问题是成长的催化剂。刚开始一直连不上数据库，后面一查是时区问题serverTimezone=UTC</p>
<h3 id="Model层"><a href="#Model层" class="headerlink" title="Model层"></a>Model层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Mapper层"><a href="#Mapper层" class="headerlink" title="Mapper层"></a>Mapper层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where name=#&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findByName</span><span class="params">(@Param(<span class="string">"name"</span>)</span>String name)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(name,age) values(#&#123;name&#125;,#&#123;age&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(@Param(<span class="string">"name"</span>)</span>String name,@<span class="title">Param</span><span class="params">(<span class="string">"age"</span>)</span>Integer age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此可以发现跟我们先前用的jpa其实是很像的，迁移是很快的，接下来我们就继续探讨其注解</p>
<h3 id="传参方式"><a href="#传参方式" class="headerlink" title="传参方式"></a>传参方式</h3><h4 id="使用-Param"><a href="#使用-Param" class="headerlink" title="使用@Param"></a>使用@Param</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into user(name,age)values(#&#123;name&#125;,#&#123;age&#125;)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(@Param(<span class="string">"name"</span>)</span>String name,@<span class="title">Param</span><span class="params">(<span class="string">"age"</span>)</span>Integer age)</span>;</span><br></pre></td></tr></table></figure>

<p>解释 @Param中定义中的name对应的sql中的#{name},age同理</p>
<h4 id="使用Map"><a href="#使用Map" class="headerlink" title="使用Map"></a>使用Map</h4><p>通过Map&lt;String,Object&gt;对象来作为传递参数的容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into user(name,age) values(#&#123;name,jdbcType=VARCHAR&#125;,#&#123;age,jdbcType=INTEGER&#125;)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertByMap</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"name"</span>,<span class="string">"CCC"</span>);</span><br><span class="line">map.put(<span class="string">"age"</span>,<span class="number">40</span>);</span><br><span class="line">userMapper.insertByMap(map);</span><br></pre></td></tr></table></figure>

<h4 id="使用对象"><a href="#使用对象" class="headerlink" title="使用对象"></a>使用对象</h4><p>可以直接使用java对象来作为查询条件的传参</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into user(name,age) values(#&#123;name&#125;,#&#123;age&#125;)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertByUser</span><span class="params">(User user)</span></span></span><br></pre></td></tr></table></figure>

<p>这样#{name}和#{age}就分别对应了User对象中的name和age属性</p>
<h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where name=#&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findByname</span><span class="params">(@Param(<span class="string">"name"</span>)</span>String name)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(name,age) values(#&#123;name,jdbcType=VACHAR&#125;,#&#123;age,jdbcType=INTEGER&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set age=#&#123;age&#125; where name=#&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于上面的这些内容都比较好理解</p>
<h3 id="返回结果的绑定"><a href="#返回结果的绑定" class="headerlink" title="返回结果的绑定"></a>返回结果的绑定</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">    <span class="meta">@Result</span>(property=<span class="string">"name"</span>,column=<span class="string">"name"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(property=<span class="string">"age"</span>,column=<span class="string">"age"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select name,age from user"</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<p>@Result中的property属性对应着User对象中的成员名，column对应select出来的字段</p>
<h3 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h3><p>总的来说，增删改查一般的业务都是够用的，但是有时候需要生成动态sql,mybatis也有这种的注解。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>加油！现在有思路，并且慢慢懂得完善自己的技能库。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot与MyBatis</title>
    <url>/2204185805.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新的东西，完善自己的技术库。</p>
<h3 id="认识MyBatis"><a href="#认识MyBatis" class="headerlink" title="认识MyBatis"></a>认识MyBatis</h3><ul>
<li>一款优秀的持久层框架<ul>
<li>持久层可以理解成数据保存到数据库或者硬盘一类可以保存很长时间的设备里面 Hibernate也是这种框架</li>
</ul>
</li>
<li>支持定制化SQL，存储过程和高级映射</li>
</ul>
<h3 id="在SpringBoot中使用MyBatis"><a href="#在SpringBoot中使用MyBatis" class="headerlink" title="在SpringBoot中使用MyBatis"></a>在SpringBoot中使用MyBatis</h3><h4 id="配置pom"><a href="#配置pom" class="headerlink" title="配置pom"></a>配置pom</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mybatis.type-handlers-<span class="keyword">package</span>=com.example.mybatis.handler</span><br><span class="line">mybatis.configuration.map-underscore-to-camel-<span class="keyword">case</span>=<span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ol>
<li>获取handler所在的包</li>
<li>格式化sql</li>
</ol>
<h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Money price;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到这里的price类型为Money类型</p>
<h5 id="配置pom-1"><a href="#配置pom-1" class="headerlink" title="配置pom"></a>配置pom</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.joda&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;joda-money&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;LATEST&lt;/version&gt;</span><br><span class="line">&lt;dependency&gt;</span><br></pre></td></tr></table></figure>

<h5 id="handler-MoneyTypeHandler"><a href="#handler-MoneyTypeHandler" class="headerlink" title="handler MoneyTypeHandler"></a>handler MoneyTypeHandler</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> calss MoneyTypeHandler extands BaseTypeHandler&lt;Money&gt;&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i, Money money, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        preparedStatement.setLong(i,money.getAmountMinorLong());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Money <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parseMoney(resultSet.getLong(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Money <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parseMoney(resultSet.getLong(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Money <span class="title">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parseMoney(callableStatement.getLong(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Money <span class="title">parseMoney</span><span class="params">(Long value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Money.of(CurrencyUnit.of(<span class="string">"CNY"</span>),value/<span class="number">100.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Mapper的定义和扫描"><a href="#Mapper的定义和扫描" class="headerlink" title="Mapper的定义和扫描"></a>Mapper的定义和扫描</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoffeeMapper</span></span>&#123;</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into t_coffee(name,price,create_time,update_time) value(#&#123;name&#125;,#&#123;price&#125;,now(),now())"</span>)</span><br><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys=<span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(Coffee coffee)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from t_coffee where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">        <span class="meta">@Result</span>(id=<span class="keyword">true</span>,column=<span class="string">"id"</span>,property=<span class="string">"id"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column=<span class="string">"create_time"</span>,property=<span class="string">"createTime"</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">Coffee <span class="title">findById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.example.mybatis.mapper"</span>) <span class="comment">//mapper层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisApplication</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CoffeeMapper coffeeMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Coffee c=Coffee.builder().name(<span class="string">"espresso"</span>)</span><br><span class="line">            .price(Money.of(CurrencyUnit.of(<span class="string">"CNY"</span>),<span class="number">20.0</span>)).build();</span><br><span class="line">        <span class="keyword">int</span> count=coffeeMapper.save(c);</span><br><span class="line">        log.info(<span class="string">"Save &#123;&#125; Coffee:&#123;&#125;"</span>,count,c);</span><br><span class="line">        </span><br><span class="line">        c=Coffee.builder().name(<span class="string">"latte"</span>)</span><br><span class="line">            .price(Money.of(CurrencyUnit.of(<span class="string">"CNY"</span>),<span class="number">25.0</span>)).build();</span><br><span class="line">        count=coffeeMapper.save(c);</span><br><span class="line">        log.info(<span class="string">"Save &#123;&#125; Coffee:&#123;&#125;"</span>,count,c);</span><br><span class="line">        </span><br><span class="line">        c=coffeeMapper.findById(c.getId());</span><br><span class="line">        log.info(<span class="string">"Find Coffee:&#123;&#125;"</span>,c)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_coffee(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    price <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    create_time <span class="built_in">timestamp</span>,</span><br><span class="line">    update_time <span class="built_in">timestamp</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<p>对比于先前学习的JPA，我们可以很清楚的理解到这里面的逻辑</p>
<p>model层是数据库字段层</p>
<p>mapper层是repository层</p>
<p>然后就是controller层</p>
<h3 id="让MyBatis更好用的哪些工具"><a href="#让MyBatis更好用的哪些工具" class="headerlink" title="让MyBatis更好用的哪些工具"></a>让MyBatis更好用的哪些工具</h3><h5 id="认识MyBatis-Generator"><a href="#认识MyBatis-Generator" class="headerlink" title="认识MyBatis Generator"></a>认识MyBatis Generator</h5><ul>
<li>MyBatis代码生成器</li>
<li>根据数据库表生成相关代码<ul>
<li>POJO</li>
<li>Mapper接口</li>
<li>SQL Map XML</li>
</ul>
</li>
</ul>
<h4 id="运行MyBatis-Generator"><a href="#运行MyBatis-Generator" class="headerlink" title="运行MyBatis Generator"></a>运行MyBatis Generator</h4><ul>
<li>命令行<ul>
<li>java -jar mybatis-generator-core-x.x.x.jar -configfile generatorConfig.xml</li>
</ul>
</li>
<li>Maven Plugin(mabatis-generator-maven-plugin)<ul>
<li>mvn mybatis-generator:generate</li>
<li>${basedir}/src/main/resources/generatorConfig.xml</li>
</ul>
</li>
</ul>
<h4 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateArtifacts</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    List&lt;String&gt; warnings=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ConfigurationParser cp=<span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">    Configuration config=cp.parseConfiguration(</span><br><span class="line">    	<span class="keyword">this</span>.getClass().getResourceAsStream(<span class="string">"/generatorConfig.xml"</span>));</span><br><span class="line">    DefaultShellCallback callback=<span class="keyword">new</span> DefaultShellCallback(<span class="keyword">true</span>);</span><br><span class="line">    MyBatisGenerator myBatisGenerator=<span class="keyword">new</span> MyBatisGenerator(config,callback);</span><br><span class="line">    myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"H2Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.FluentBuilderMethodsPlugin"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.ToStringPlugin"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.SerializablePlugin"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.RowBoundsPlugin"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"org.h2.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:h2:mem:testdb"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"sa"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.example.mybatis.model"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.example.mybatis.mapper"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">"./src/main/resources/mapper"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"MIXEDMAPPER"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">"com.example.mybatis.mapper"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"t_coffee"</span> <span class="attr">domainObjectName</span>=<span class="string">"Coffee"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">sqlStatement</span>=<span class="string">"CALL IDENTITY()"</span> <span class="attr">identity</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">javaType</span>=<span class="string">"org.joda.money.Money"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">typeHandler</span>=<span class="string">"com.example.mybatis.handler.MoneyTypeHandler"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.FluentBuilderMethodsPlugin"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.ToStringPlugin"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.SerializablePlugin"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.RowBoundsPlugin"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">//配置 注意有个顺序</span><br><span class="line">1.builder方法</span><br><span class="line">2.tostring</span><br><span class="line">3.serializable</span><br><span class="line">4.rowbounds分页</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.example.mybatis.model"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//model层的包名</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.example.mybatis.mapper"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">"./src/main/resources/mapper"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">//mapper层配置 生成sql</span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"MIXEDMAPPER"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">"com.example.mybatis.mapper"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">//mapper层</span><br></pre></td></tr></table></figure>

<p>通过这些配置，MyBatis通过数据库的字段自动生成</p>
<h4 id="使用MyBatis"><a href="#使用MyBatis" class="headerlink" title="使用MyBatis"></a>使用MyBatis</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">playWithArtifacts</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Coffee espresso=<span class="keyword">new</span> Coffee()</span><br><span class="line">        .withName(<span class="string">"espresso"</span>)</span><br><span class="line">        .withPrice(Money.of(CurrencyUnit.of(<span class="string">"CNY"</span>),<span class="number">20.0</span>))</span><br><span class="line">        .withCreateTime(<span class="keyword">new</span> Date())</span><br><span class="line">        .withUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    coffeeMapper.insert(espresso);</span><br><span class="line">    </span><br><span class="line">    CoffeeExample example=<span class="keyword">new</span> CoffeeExample();</span><br><span class="line">    example.createCriteria().andNameEqualTo(<span class="string">"latte"</span>);</span><br><span class="line">    List&lt;Coffee&gt; list=coffeeMapper.selectByExample(example);</span><br><span class="line">    list.forEach(c-&gt;log.info(<span class="string">"selectbyExample:&#123;&#125;"</span>,c));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>就是现在，技术有点感觉，但是感觉还不全，精力有。就是现在不断去学习，不断去更新前一天的自己。</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot JPA通过方法名来定义数据库查询</title>
    <url>/497525653.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学一点新的技术，更新自己的技术库。</p>
<h3 id="使用原因"><a href="#使用原因" class="headerlink" title="使用原因"></a>使用原因</h3><p>主要介绍通过方法名来创建简单的查询，彻底解放部分生产力</p>
<h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><ol>
<li>@EnableJpaRepository</li>
<li>Repository&lt;T,ID&gt;接口<ol>
<li>CrudRepository&lt;T,ID&gt;</li>
<li>PagingAndSortingRepository&lt;T,ID&gt;</li>
<li>JpaRepsotory&lt;T,ID&gt;</li>
</ol>
</li>
</ol>
<h3 id="定义查询"><a href="#定义查询" class="headerlink" title="定义查询"></a>定义查询</h3><p>一些原则</p>
<ol>
<li>find…By…/read…By…/query…By…/get…By…  定义的查询方法必须以这些为前缀</li>
<li>count…By…</li>
<li>…OrderBy…[Asc/Desc]</li>
<li>And/Or/IgnoreCase</li>
<li>Top/First/Distinct  如果需要定义返回的数据的个数只需要将top和first关键字加到方法名的第一个by关键字前面 例如 findTopBy findTop1By findFirstBy findFirst1By 这些方法名都返回第一个查询的实体</li>
<li>Distinct 如果想要查询不同的结果 需要将distinct关键字加到方法名的第一个by关键字前面 例如 findTitleDistinctBy 或者 findDistinctTtitleBy 表示我们想要查询所有不同的的titles</li>
<li>查询方法的参数必须与查询情况相等</li>
</ol>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Test&gt; <span class="title">findAllByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Test&gt; <span class="title">findAllByOrderByIdAsc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Test&gt; <span class="title">findByType</span><span class="params">(String type)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Test&gt; <span class="title">findByCustomerid</span><span class="params">(String customer_id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Test&gt; <span class="title">findTop2ByCustomerid</span><span class="params">(String customer_id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Test&gt; <span class="title">findFirst1ByNameOrderByIdAsc</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h3><p>总算搞清楚了为什么先前一直不能用，因为先前是这么命名的a_b，然后写方法名的时候就是这么写的A_b，所以会一直提示没有a这个属性。</p>
<p>所以应该ab命名，使用的时候用Ab这种格式。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/" target="_blank" rel="noopener">query method</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>要继续努力，要坚持。你难以想象比你优秀的人比你更努力</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>认识Spring Data JPA</title>
    <url>/1884068929.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天多学点新技术</p>
<h3 id="认识Spring-Data-JPA"><a href="#认识Spring-Data-JPA" class="headerlink" title="认识Spring Data JPA"></a>认识Spring Data JPA</h3><p>主要是简化了sql的书写，部分简单的sql语法通过框架自动帮助生成</p>
<h3 id="定义JPA实体对象"><a href="#定义JPA实体对象" class="headerlink" title="定义JPA实体对象"></a>定义JPA实体对象</h3><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><h5 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h5><ul>
<li>@Entity @MappedSuperclass(有多个类，然后在父类标注)</li>
<li>@Table(name) 将实体和数据库里的表关联起来</li>
</ul>
<p>注没有特别表注，类名就是表名</p>
<h5 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h5><ul>
<li>@Id<ul>
<li>@GeneratedValue(strategy,generator)</li>
<li>@SequenceGenerator(name,sequenceName) //指明用什么样的序列</li>
</ul>
</li>
</ul>
<h5 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h5><ul>
<li>@Column(name,nullable,length,issertable,updateable) 注意issertable是否可以插入 updateable是否可以更新</li>
<li>@JoinTable(name) @JoinColumn(name)  表关联的时候需要用到</li>
</ul>
<h5 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h5><ul>
<li>@OneToOne @OneToMany @ManyToOne @ManyToMany</li>
<li>@OrderBy</li>
</ul>
<h3 id="定义实体"><a href="#定义实体" class="headerlink" title="定义实体"></a>定义实体</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"T_ORDER"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeOrder</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String customer;</span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="meta">@JoinTable</span>(name = <span class="string">"T_ORDER_COFFEE"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Coffee&gt; items;</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">    <span class="meta">@Column</span>(updatable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@CreationTimestamp</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@UpdateTimestamp</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下：看高手的代码真的恍然大悟</p>
<ol>
<li>首先注解除了@Builder这个没有用过，builder设计模式应该是比较火的</li>
<li>@CreationTimestamp @UpdateTimestamp 两个时间戳 这个注解还真的得试试 </li>
<li>updatable放在不能更新的映射上面</li>
<li>@ManyToMany @JoinTable 这个关系到表之间的关系 这个也没有试过 说明coffe和order的关系是通过T_ORDER_COFFEE这张表来实现的</li>
</ol>
<h3 id="升级版定义实体"><a href="#升级版定义实体" class="headerlink" title="升级版定义实体"></a>升级版定义实体</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Column</span>(updatable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@CreationTimestamp</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@UpdateTimestamp</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"T_ORDER"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@ToString</span>(callSuper=<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeOrder</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="meta">@JoinTable</span>(name = <span class="string">"T_ORDER_COFFEE"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Coffee&gt; items;</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">    <span class="meta">@Column</span>(updatable = <span class="keyword">false</span>)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ol>
<li>把相同的抽象出来，成为一个父类</li>
<li>通过继承，不过需要在@ToString(callSuper=true)加入属性，不然ToString只能打印当前类下的属性</li>
</ol>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//application.properties</span></span><br><span class="line">spring.jpa.hibernate.ddl-auto=create-drop</span><br><span class="line">spring.jpa.properties.hibernate.show_sql=<span class="keyword">true</span></span><br><span class="line">spring.jpa.properties.hibernate.format_sql=<span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pom</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<p>hibernate就是JPA的实现</p>
<ol>
<li>create-drop 是每次执行的时候都会查询数据库里是否有这些表，有的话删掉新建，没有的话也新建,停止执行的时候又会删掉建立表</li>
<li>下面两个是打印出sql 以及对sql进行格式化</li>
<li>hibernate不管是内嵌的数据库还是oracle数据库都会自动生成表</li>
</ol>
<h3 id="其他收获"><a href="#其他收获" class="headerlink" title="其他收获"></a>其他收获</h3><h4 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h4><ul>
<li>@Getter/@Setter //为对象设置getter setter的方法</li>
<li>@ToString //写tostring方法打印出来</li>
<li>构造方法<ul>
<li>@NoArgsConstructor</li>
<li>@RequiredArgsConstructor</li>
<li>@AllArgsConstructor</li>
</ul>
</li>
<li>@Data 包括@Getter @Setter @ToString  一般直接在类上标注该注解</li>
<li>@Builder 为对象生成一个builder方法，生成这个对象</li>
<li>@Slf4j @CommonsLog @Log4j2 日志相关的注解 通常使用Slf4j使用的时候 log.info()</li>
</ul>
<h4 id="Money有关的东西"><a href="#Money有关的东西" class="headerlink" title="Money有关的东西"></a>Money有关的东西</h4><p>金融建议：尽量不要使用浮点数来进行表示金额</p>
<ul>
<li>joda-money Money对象</li>
<li>usertype.core 对money进行映射</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Column</span></span><br><span class="line">   <span class="meta">@Type</span>(type = <span class="string">"org.jadira.usertype.moneyandcurrency.joda.PersistentMoneyAmount"</span>,</span><br><span class="line">           parameters = &#123;<span class="meta">@org</span>.hibernate.annotations.Parameter(name = <span class="string">"currencyCode"</span>, value = <span class="string">"CNY"</span>)&#125;)</span><br><span class="line">   <span class="keyword">private</span> Money price;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">.pom</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.joda&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;joda-money&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.jadira.usertype&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;usertype.core&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;6.0.1.GA&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>今晚发现突然先前写的sp有点笨重，jpa的性能没有用起来，但是想想也是，你不能是全部学完在写，应该是一个不断优化，完善自己技术的过程(不断发现自己前一天是个傻逼的过程)</p>
<p>hhh，这种状态很爽</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot使用Swagger2构建强大的RESTful API文档</title>
    <url>/3795878956.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天都学点新东西</p>
<h3 id="使用理由"><a href="#使用理由" class="headerlink" title="使用理由"></a>使用理由</h3><ol>
<li>springboot构建的是RESTful API,虽然写起来简单，但是交流沟通麻烦</li>
<li>接口文档很好的解决生产力</li>
<li>并且postman的合作共享有上限，swagger可以很好的解决生产力</li>
<li>反正很好用，你使用了就会发现以前的效率太低了</li>
</ol>
<p>###添加依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;io.springfox&lt;/goupId&gt;</span><br><span class="line">	&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class="line">&lt;dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="创建swagger2配置类"><a href="#创建swagger2配置类" class="headerlink" title="创建swagger2配置类"></a>创建swagger2配置类</h3><p>在application.java同级创建Swagger2的配置类Swagger</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Swagger.java</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.basePacage(<span class="string">"controller"</span>))<span class="comment">//这是要生产的controller层所在的包</span></span><br><span class="line">            .paths(PathSelector2.any())</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//生成的api文档信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">            .title(<span class="string">"名字"</span>)</span><br><span class="line">            .description(<span class="string">"描述"</span>)</span><br><span class="line">            .termsOfServiceUrl(<span class="string">"团队联系链接"</span>)</span><br><span class="line">            .contact(<span class="string">"联系人"</span>)</span><br><span class="line">            .version(<span class="string">"1.0"</span>)</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释</p>
<ol>
<li>通过@Configuration 注解，让spring加载该配置</li>
<li>@EnableSwagger2注解启动Swagger2</li>
<li>通过createRestApi函数创建Docket的Bean之后，apiInfo()用来创建Api的基本信息</li>
<li>select()函数返回一个ApiSelectorBuilder实例用来控制接口暴露给Swagger来展示(除了@ApiIgnore指定的请求)</li>
</ol>
<p>至此，可以生产文档了，不过是以函数名等来产生的文档信息，接下来就是让文档更加美观</p>
<p>可以访问<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a> </p>
<p>但是，<strong>我不知道是否先前的原因，无法访问</strong>。</p>
<p>解决方法</p>
<h4 id="配置WebMvcConfiguration"><a href="#配置WebMvcConfiguration" class="headerlink" title="配置WebMvcConfiguration"></a>配置WebMvcConfiguration</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="优化文档"><a href="#优化文档" class="headerlink" title="优化文档"></a>优化文档</h3><ul>
<li>ApiOperation注解给API增加说明</li>
<li>ApiImplicitParams、@ApiImplicitParam注解给参数增加说明</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOpreation</span>(value=<span class="string">"api说明"</span>,notes=<span class="string">""</span>)</span><br><span class="line"><span class="meta">@ApiImplicitParam</span>(name=<span class="string">"id"</span>,value=<span class="string">"用户ID"</span>,required=<span class="keyword">true</span>,dataType=<span class="string">"Long"</span>)</span><br><span class="line"><span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name=<span class="string">"id"</span>,value=<span class="string">"用户ID"</span>,required=<span class="keyword">true</span>,dataType=<span class="string">"Long"</span>),</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name=<span class="string">"user"</span>,value=<span class="string">"用户详细实体user"</span>,required=<span class="keyword">true</span>,dataType=<span class="string">"user"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://blog.didispace.com/springbootswagger2/" target="_blank" rel="noopener">swagger2</a></p>
<p><a href="https://blog.csdn.net/u013128651/article/details/78864876" target="_blank" rel="noopener">找不到swagger2</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>早上起来，不仅总结了昨天的学习，还把这个Swagger2加到项目上，有进一步的解决了生产了</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot上传文件到服务器上并且通过url访问静态资源</title>
    <url>/1697153394.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天都学一点新的东西，这样的一天才有价值。</p>
<h3 id="配置属性"><a href="#配置属性" class="headerlink" title="配置属性"></a>配置属性</h3><p>在application.properties文件下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#max file size</span><br><span class="line">spring.servlet.multipart.max-file-size=<span class="number">10</span>MB</span><br><span class="line">#max request size</span><br><span class="line">spring.servlet.multipart.max-request-size=<span class="number">10</span>MB</span><br><span class="line">#files storage location</span><br><span class="line">#the linux storage.location=/root/test</span><br><span class="line">storage.location=D:<span class="comment">//test/</span></span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>因为springboot自动允许multipart/form-data 请求</p>
<p>storage.location表示存储的rootLocation</p>
<h3 id="使配置可以使用"><a href="#使配置可以使用" class="headerlink" title="使配置可以使用"></a>使配置可以使用</h3><p>因为我们在application.properties里面定义了storage location，所以我们需要定义一下POJO类并且通过@ConfigurationProperties注解来自动绑定这个配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//StorageProperties.java</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"storage"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> location;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocation</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.location = location;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到prefix=”storage”，当application启动的时候，绑定以storage前缀的属性。</p>
<p>并且需要在Application.java中添加注解@EnableConfigurationProperties(StorageProperties.class)</p>
<h3 id="Storage-Service"><a href="#Storage-Service" class="headerlink" title="Storage Service"></a>Storage Service</h3><h4 id="StorageService"><a href="#StorageService" class="headerlink" title="StorageService"></a>StorageService</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">store</span><span class="params">(MultipartFile file,String type)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Stream&lt;Path&gt; <span class="title">loadAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Path <span class="title">load</span><span class="params">(String filename)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Resource <span class="title">loadAsResource</span><span class="params">(String filename)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个是可以用得到的方法，所以接下来就是实现这些方法</p>
<h4 id="FileSystemStorageService"><a href="#FileSystemStorageService" class="headerlink" title="FileSystemStorageService"></a>FileSystemStorageService</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemStorageService</span> <span class="keyword">implements</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Path rootLocation;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystemStorageService</span><span class="params">(StorageProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rootLocation = Paths.get(properties.getLocation());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Files.createDirectories(rootLocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(<span class="string">"Could not initialize storage location"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">store</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        String filename = StringUtils.cleanPath(file.getOriginalFilename());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(<span class="string">"Failed to store empty file "</span> + filename);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (filename.contains(<span class="string">".."</span>)) &#123;</span><br><span class="line">                <span class="comment">// This is a security check</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(</span><br><span class="line">                        <span class="string">"Cannot store file with relative path outside current directory "</span></span><br><span class="line">                                + filename);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> (InputStream inputStream = file.getInputStream()) &#123;</span><br><span class="line">                Files.copy(inputStream, <span class="keyword">this</span>.rootLocation.resolve(filename),</span><br><span class="line">                        StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(<span class="string">"Failed to store file "</span> + filename, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Stream&lt;Path&gt; <span class="title">loadAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Files.walk(<span class="keyword">this</span>.rootLocation, <span class="number">1</span>)</span><br><span class="line">                    .filter(path -&gt; !path.equals(<span class="keyword">this</span>.rootLocation))</span><br><span class="line">                    .map(<span class="keyword">this</span>.rootLocation::relativize);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(<span class="string">"Failed to read stored files"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Path <span class="title">load</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rootLocation.resolve(filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resource <span class="title">loadAsResource</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Path file = load(filename);</span><br><span class="line">            Resource resource = <span class="keyword">new</span> UrlResource(file.toUri());</span><br><span class="line">            <span class="keyword">if</span> (resource.exists() || resource.isReadable()) &#123;</span><br><span class="line">                <span class="keyword">return</span> resource;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(</span><br><span class="line">                        <span class="string">"Could not read file: "</span> + filename);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"Could not read file: "</span> + filename, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileSystemUtils.deleteRecursively(rootLocation.toFile());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ol>
<li>@PostConstuct注解，保证init()方法被调用当该bean被完全初始化</li>
</ol>
<h4 id="StorageException"><a href="#StorageException" class="headerlink" title="StorageException"></a>StorageException</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StorageException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StorageException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="FileNotFoundException"><a href="#FileNotFoundException" class="headerlink" title="FileNotFoundException"></a>FileNotFoundException</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileNotFoundException</span> <span class="keyword">extends</span> <span class="title">StorageException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileNotFoundException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileNotFoundException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ol>
<li>@ResponseStatus(HttpStatus.NOT_FOUND)该注解确保springboot返回的一个404的Http状态码</li>
</ol>
<p>以上可以实现上传文件，但是今天的项目需求是需要将图片等文件上传到服务器里面，就是上传到外部文件夹，并且通过url访问</p>
<h4 id="SpringBoot访问绝对路径下的静态资源"><a href="#SpringBoot访问绝对路径下的静态资源" class="headerlink" title="SpringBoot访问绝对路径下的静态资源"></a>SpringBoot访问绝对路径下的静态资源</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/image/**"</span>).addResourceLocations(<span class="string">"file:D://test/images/"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/download/**"</span>).addResourceLocations(<span class="string">"file:D://test/files/"</span>);</span><br><span class="line">        <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ol>
<li>可以通过<a href="http://127.0.0.1/image/**.jpg访问D://test/images/下的图片文件" target="_blank" rel="noopener">http://127.0.0.1/image/**.jpg访问D://test/images/下的图片文件</a></li>
</ol>
<h4 id="其他收获"><a href="#其他收获" class="headerlink" title="其他收获"></a>其他收获</h4><ol>
<li>通过postman发送表单 选择body里面的form-data然后添加key-value</li>
<li>处理@RequestBody 该注解无法通过url和form来传递参数，只能通过json串 选择body里面的raw 然后选择JSON格式 提交的格式为</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"key"</span>:<span class="string">"value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://attacomsian.com/blog/uploading-files-spring-boot" target="_blank" rel="noopener">file upload</a></p>
<p><a href="https://blog.csdn.net/jy02268879/article/details/82830789" target="_blank" rel="noopener">postman</a></p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot上传文件到服务器上并且通过url访问静态资源</title>
    <url>/1697153393.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都要比前一天都学一点新的东西，这样的一天才有价值。</p>
<h3 id="配置属性"><a href="#配置属性" class="headerlink" title="配置属性"></a>配置属性</h3><p>在application.properties文件下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#max file size</span><br><span class="line">spring.servlet.multipart.max-file-size=<span class="number">10</span>MB</span><br><span class="line">#max request size</span><br><span class="line">spring.servlet.multipart.max-request-size=<span class="number">10</span>MB</span><br><span class="line">#files storage location</span><br><span class="line">#the linux storage.location=/root/test</span><br><span class="line">storage.location=D:<span class="comment">//test/</span></span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>因为springboot自动允许multipart/form-data 请求</p>
<p>storage.location表示存储的rootLocation</p>
<h3 id="使配置可以使用"><a href="#使配置可以使用" class="headerlink" title="使配置可以使用"></a>使配置可以使用</h3><p>因为我们在application.properties里面定义了storage location，所以我们需要定义一下POJO类并且通过@ConfigurationProperties注解来自动绑定这个配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//StorageProperties.java</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"storage"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> location;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocation</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.location = location;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到prefix=”storage”，当application启动的时候，绑定以storage前缀的属性。</p>
<p>并且需要在Application.java中添加注解@EnableConfigurationProperties(StorageProperties.class)</p>
<h3 id="Storage-Service"><a href="#Storage-Service" class="headerlink" title="Storage Service"></a>Storage Service</h3><h4 id="StorageService"><a href="#StorageService" class="headerlink" title="StorageService"></a>StorageService</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">store</span><span class="params">(MultipartFile file,String type)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Stream&lt;Path&gt; <span class="title">loadAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Path <span class="title">load</span><span class="params">(String filename)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Resource <span class="title">loadAsResource</span><span class="params">(String filename)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个是可以用得到的方法，所以接下来就是实现这些方法</p>
<h4 id="FileSystemStorageService"><a href="#FileSystemStorageService" class="headerlink" title="FileSystemStorageService"></a>FileSystemStorageService</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemStorageService</span> <span class="keyword">implements</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Path rootLocation;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystemStorageService</span><span class="params">(StorageProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rootLocation = Paths.get(properties.getLocation());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Files.createDirectories(rootLocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(<span class="string">"Could not initialize storage location"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">store</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        String filename = StringUtils.cleanPath(file.getOriginalFilename());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(<span class="string">"Failed to store empty file "</span> + filename);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (filename.contains(<span class="string">".."</span>)) &#123;</span><br><span class="line">                <span class="comment">// This is a security check</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(</span><br><span class="line">                        <span class="string">"Cannot store file with relative path outside current directory "</span></span><br><span class="line">                                + filename);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> (InputStream inputStream = file.getInputStream()) &#123;</span><br><span class="line">                Files.copy(inputStream, <span class="keyword">this</span>.rootLocation.resolve(filename),</span><br><span class="line">                        StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(<span class="string">"Failed to store file "</span> + filename, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Stream&lt;Path&gt; <span class="title">loadAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Files.walk(<span class="keyword">this</span>.rootLocation, <span class="number">1</span>)</span><br><span class="line">                    .filter(path -&gt; !path.equals(<span class="keyword">this</span>.rootLocation))</span><br><span class="line">                    .map(<span class="keyword">this</span>.rootLocation::relativize);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StorageException(<span class="string">"Failed to read stored files"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Path <span class="title">load</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rootLocation.resolve(filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resource <span class="title">loadAsResource</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Path file = load(filename);</span><br><span class="line">            Resource resource = <span class="keyword">new</span> UrlResource(file.toUri());</span><br><span class="line">            <span class="keyword">if</span> (resource.exists() || resource.isReadable()) &#123;</span><br><span class="line">                <span class="keyword">return</span> resource;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(</span><br><span class="line">                        <span class="string">"Could not read file: "</span> + filename);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"Could not read file: "</span> + filename, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileSystemUtils.deleteRecursively(rootLocation.toFile());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ol>
<li>@PostConstuct注解，保证init()方法被调用当该bean被完全初始化</li>
</ol>
<h4 id="StorageException"><a href="#StorageException" class="headerlink" title="StorageException"></a>StorageException</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StorageException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StorageException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="FileNotFoundException"><a href="#FileNotFoundException" class="headerlink" title="FileNotFoundException"></a>FileNotFoundException</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileNotFoundException</span> <span class="keyword">extends</span> <span class="title">StorageException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileNotFoundException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileNotFoundException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ol>
<li>@ResponseStatus(HttpStatus.NOT_FOUND)该注解确保springboot返回的一个404的Http状态码</li>
</ol>
<p>以上可以实现上传文件，但是今天的项目需求是需要将图片等文件上传到服务器里面，就是上传到外部文件夹，并且通过url访问</p>
<h4 id="SpringBoot访问绝对路径下的静态资源"><a href="#SpringBoot访问绝对路径下的静态资源" class="headerlink" title="SpringBoot访问绝对路径下的静态资源"></a>SpringBoot访问绝对路径下的静态资源</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/image/**"</span>).addResourceLocations(<span class="string">"file:D://test/images/"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/download/**"</span>).addResourceLocations(<span class="string">"file:D://test/files/"</span>);</span><br><span class="line">        <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ol>
<li>可以通过<a href="http://127.0.0.1/image/**.jpg访问D://test/images/下的图片文件" target="_blank" rel="noopener">http://127.0.0.1/image/**.jpg访问D://test/images/下的图片文件</a></li>
</ol>
<h4 id="其他收获"><a href="#其他收获" class="headerlink" title="其他收获"></a>其他收获</h4><ol>
<li>通过postman发送表单 选择body里面的form-data然后添加key-value</li>
<li>处理@RequestBody 该注解无法通过url和form来传递参数，只能通过json串 选择body里面的raw 然后选择JSON格式 提交的格式为</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"key"</span>:<span class="string">"value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://attacomsian.com/blog/uploading-files-spring-boot" target="_blank" rel="noopener">file upload</a></p>
<p><a href="https://blog.csdn.net/jy02268879/article/details/82830789" target="_blank" rel="noopener">postman</a></p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot的配置文件解析</title>
    <url>/3020356367.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对SpringBoot的配置进行解析</p>
<p>位置 src/main/java/resources/application.properties</p>
<h3 id="添加自定义属性"><a href="#添加自定义属性" class="headerlink" title="添加自定义属性"></a>添加自定义属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.xujin.name=xujin</span><br><span class="line">com.xujin.say=I am xuxiaojin</span><br></pre></td></tr></table></figure>

<h3 id="使用自定义属性"><a href="#使用自定义属性" class="headerlink" title="使用自定义属性"></a>使用自定义属性</h3><p>通过使用@Value(“${}”)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;com.xujin.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;com.xujin.say&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String say;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/xu"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name+<span class="string">" "</span>+say;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用Jar来运行SpringBoot"><a href="#使用Jar来运行SpringBoot" class="headerlink" title="使用Jar来运行SpringBoot"></a>使用Jar来运行SpringBoot</h3><p>可以通过maven打包</p>
<p>在IDEA的右侧 Maven Projects-&gt;Lifecycle-&gt;package</p>
<p>打包后在target的文件夹下</p>
<p>或者使用 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar xx.jar</span><br></pre></td></tr></table></figure>

<p>运行jar包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar xx.jar</span><br></pre></td></tr></table></figure>

<h3 id="使用两种环境来生产"><a href="#使用两种环境来生产" class="headerlink" title="使用两种环境来生产"></a>使用两种环境来生产</h3><p>在springboot的多种环境中文件名需要满足application-{profile}.properties。例如</p>
<ul>
<li>application-dev.properties:开发环境</li>
<li>application-test.properties:测试环境</li>
<li>application-prod.properties:生产环境</li>
</ul>
<p>具体使用哪种环境需要在application.properties文件中通过spring.profiles.active=test等等</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot的JDBC操作数据库</title>
    <url>/81179857.html</url>
    <content><![CDATA[<h3 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h3><p>需要在pom文件下引入依赖，jdbc支持</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="连接Mysql数据库"><a href="#连接Mysql数据库" class="headerlink" title="连接Mysql数据库"></a>连接Mysql数据库</h3><p>在pom文件下引入Mysql数据库依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;5.1.21&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在application.properties中配置数据源信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/test</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=****</span><br><span class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>

<h3 id="使用JdbcTemplate操作数据库"><a href="#使用JdbcTemplate操作数据库" class="headerlink" title="使用JdbcTemplate操作数据库"></a>使用JdbcTemplate操作数据库</h3><p>建立新的类UserServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"insert into USER(NAME,AGE) values(?,?)"</span>,name,age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"delete from user where name=?"</span>,name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(<span class="string">"select count(1) from user"</span>,Integer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"delete from user"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot开发Web应用</title>
    <url>/764686384.html</url>
    <content><![CDATA[<h3 id="SpringBoot的静态资源访问"><a href="#SpringBoot的静态资源访问" class="headerlink" title="SpringBoot的静态资源访问"></a>SpringBoot的静态资源访问</h3><p>位置src/main/resources下的static(没有的需要自己建立一个static文件夹)</p>
<p>在application.properties下添加</p>
<p>spring.mvc.static-path-pattern=/static/**</p>
<p>就可以访问到static文件夹的静态资源 例如访问localhost:8080/static/**.jpg</p>
<h3 id="使用Thymeleaf来渲染Web页面"><a href="#使用Thymeleaf来渲染Web页面" class="headerlink" title="使用Thymeleaf来渲染Web页面"></a>使用Thymeleaf来渲染Web页面</h3><p>在pom文件下引入依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>html文件建立在src/main/resources下的templates文件夹下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"$&#123;host&#125;"</span>&gt;</span>徐小晋博客<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(ModelMap map)</span></span>&#123;</span><br><span class="line">        map.addAttribute(<span class="string">"host"</span>,<span class="string">"https://jiayouxujin.github.io/"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释</p>
<ol>
<li>Controller返回的是视图 index.html</li>
<li>ModelMap</li>
</ol>
<blockquote>
<p>Modal can supply attributes used for rendering views</p>
<p>the advantage of ModalMap is it gives us the ability to pass a collection of values.</p>
</blockquote>
<p>打开浏览器localhost:8080即可访问到</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot的Jpa操作数据库</title>
    <url>/3937530493.html</url>
    <content><![CDATA[<h3 id="配置jpa"><a href="#配置jpa" class="headerlink" title="配置jpa"></a>配置jpa</h3><p>在pom文件下引入依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-stater-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在application.properties添加配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.jpa.hibernate.ddl-auto=create-drop</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li>create:每次加载的时候都会删除上一次创建生成的表，然后根据model类在重新生成新的表</li>
<li>create-drop 每次加载根据model类生成表，但sessionFactory关闭，表自动删除</li>
<li>update:第一次加载的时候根据model来生成表，以后加载的时候都自动更新，但不会删除以前的行</li>
<li>validate:会和数据库中的表结构进行比较，不会创建新表，但是会插入新的值</li>
</ul>
<p>注：如果发现数据库表丢失记得查看该参数</p>
<h3 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a>创建实体</h3><p>在src/main/java下新建一个文件夹model里新建一个类User</p>
<p>model层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略构造函数</span></span><br><span class="line">    <span class="comment">//省略getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li>@Id表示id @GeneratedValue表示数据库自动生成的字段</li>
</ul>
<h3 id="创建数据访问接口"><a href="#创建数据访问接口" class="headerlink" title="创建数据访问接口"></a>创建数据访问接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findByNameAndAge</span><span class="params">(String name,Integer age)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from User u where u.name=:name"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findUser</span><span class="params">(@Param(<span class="string">"name"</span>)</span>String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释</p>
<p>该接口UserRepository继承自JpaRepository其中User表示Model层实体类，Long表示数据库里主键，一般为Long或者Integer，该接口本身已经实现了创建(save)、更改(save)、删除(delete)、查询(findAll,findOne)等基本操作的函数</p>
<p>在上述代码中我们可以看到</p>
<ul>
<li>findByName和findByNameAndAge这个就是spring-boot-jpa的特性通过解析方法名创建查询</li>
<li>也可以通过@Query来创建查询</li>
</ul>
<h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ApplicationTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"AAA"</span>,<span class="number">0</span>));</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>构建第一个SpringBoot应用程序</title>
    <url>/2958751061.html</url>
    <content><![CDATA[<h3 id="SpringBoot是什么"><a href="#SpringBoot是什么" class="headerlink" title="SpringBoot是什么"></a>SpringBoot是什么</h3><p>简化各种配置，让你专注与你的业务逻辑。</p>
<h3 id="使用start-spring-io构建项目"><a href="#使用start-spring-io构建项目" class="headerlink" title="使用start.spring,io构建项目"></a>使用start.spring,io构建项目</h3><p><a href="https://start.spring.io/" target="_blank" rel="noopener">构建项目</a></p>
<p>下载后-&gt;解压-&gt;通过idea打开pom文件-&gt;以project的形式打开</p>
<h3 id="解析结构"><a href="#解析结构" class="headerlink" title="解析结构"></a>解析结构</h3><ul>
<li>pom文件为基本的依赖管理文件(通过maven管理jar包)</li>
<li>resouces资源文件(web)<ul>
<li>static静态资源</li>
<li>templates模板资源</li>
<li>application.properties配置文件</li>
</ul>
</li>
<li>src/main/java下的程序入口</li>
</ul>
<h3 id="引入Web模块"><a href="#引入Web模块" class="headerlink" title="引入Web模块"></a>引入Web模块</h3><p>注：其实是可以在构建项目的网站里添加的</p>
<p>当前已有的模块</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">			&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">	&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>spring-boot-starter:核心模块，包括自动配置支持、日志和YAML（其实不是很懂）</li>
<li>spring-boot-starter-test:测试模块</li>
</ul>
<p>起步依赖spring-boot-starter-xx 提供了许多“开箱即用”的依赖模块，例如要实现web功能，引入spring-boot-starter-web这个依赖即可</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="编写hello-world服务"><a href="#编写hello-world服务" class="headerlink" title="编写hello world服务"></a>编写hello world服务</h3><p>src/main/java/com.example.Chapter1下新建一个package hello然后新建controller类helloController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释一下这里面的注解</p>
<ul>
<li>RestController注解等价与@Controller+@ResponseBody结合,使用这个注解的类里面的方法都以json格式输出（returning data rather than a view）</li>
</ul>
<p>启动应用，然后在浏览器中输入localhost:8080可以看到hello world。</p>
<p>是不是有点神奇，都没有进行任何配置就可以跑起来</p>
<ul>
<li>没有做任务的web.xml的配置(如果你有过java web的基础)</li>
<li>没有做过spring mvc的配置</li>
<li>没有配置tomcat(spring boot内嵌tomcat)</li>
</ul>
<h3 id="添加单元测试"><a href="#添加单元测试" class="headerlink" title="添加单元测试"></a>添加单元测试</h3><p>注：一直以来都没有好好写过单元测试的代码</p>
<p>在pom文件下添加依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">	&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在src/test/java/com.example.Chapter1中新建package hello然后新建类HelloControllerTest</p>
<p>解释:MockMvc允许你通过一些便利的类，去发送http请求到DispatcherServlet，然后跟结果做一个判断。(模拟http)</p>
<p>使用MockServletContext来构建一个空的WebApplicationContext，使得HelloController可以在Before函数中创建并传递到MockMvcBuilders.standaloneSetup()函数中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureMockMvc</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        mvc= MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> HelloController()).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(equalTo(<span class="string">"hello world"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://spring.io/guides/gs/spring-boot/" target="_blank" rel="noopener">官方文档</a></p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>python异常与模块化</title>
    <url>/2483463584.html</url>
    <content><![CDATA[<p>###异常处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s=input(<span class="string">'Please enter two numbers separated by comma:'</span>)</span><br><span class="line">    num1=int(s.split(<span class="string">','</span>)[<span class="number">0</span>].strip())</span><br><span class="line">    num2=int(s.split(<span class="string">','</span>)[<span class="number">1</span>].strip())</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">'Value Error:&#123;&#125;'</span>.format(err))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">'Other error:&#123;&#125;'</span>.format(err))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'continue'</span>)</span><br></pre></td></tr></table></figure>

<p>还有一种常见形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s=input(<span class="string">'Please enter two numbers separated by comma:'</span>)</span><br><span class="line">    num1=int(s.split(<span class="string">','</span>)[<span class="number">0</span>].strip())</span><br><span class="line">    num2=int(s.split(<span class="string">','</span>)[<span class="number">1</span>].strip())</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">'Value Error:&#123;&#125;'</span>.format(err))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">'Other error:&#123;&#125;'</span>.format(err))</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'continue'</span>)</span><br><span class="line"><span class="comment">#无论发生什么，finally块中的语句都会被执行</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInputException</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,value)</span>:</span></span><br><span class="line">        self.value=value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"&#123;&#125; is invalid input"</span>.format(repr(self.value)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> MyInputException(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> MyInputException <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">"error:&#123;&#125;"</span>.format(err))</span><br></pre></td></tr></table></figure>

<h3 id="py模块化"><a href="#py模块化" class="headerlink" title="py模块化"></a>py模块化</h3><p>from your_file import function_name,class_name</p>
<p>巧用 if <strong>name</strong>==’<strong>main</strong>‘来避开import使得执行</p>
]]></content>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux一些常见的命令行</title>
    <url>/2560767953.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直以来对于命令行很恐惧，但是Linux是一个很常见的服务端系统，所以必须了解一点命令行，才能在上面部署好环境，本篇主要介绍一些简单的命令行，让自己上手，并且清楚一些东西。而后对于部署配置，参看一些教程也不会不知道自己在操作什么，让自己心里有个底。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">init 3 #切换到命令行界面</span><br><span class="line">exit #退出</span><br><span class="line"><span class="meta">#</span><span class="bash">切换到超级管理员</span></span><br><span class="line">su - root </span><br><span class="line"><span class="meta">clear#</span><span class="bash">清空shell</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">常见目录</span><br><span class="line">/ 根目录</span><br><span class="line">/root root用户的家目录</span><br><span class="line">/home/username 普通用户的家目录</span><br><span class="line">/etc 配置文件目录</span><br><span class="line">/bin 命令目录</span><br><span class="line">/sbin 管理命令目录</span><br><span class="line">/usr/bin /usr/sbin系统预装的其他命令</span><br><span class="line">ls /查看根目录下的文件</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">man帮助 manual的缩写</span><br><span class="line">man 命令的名称</span><br><span class="line">man里面分为很多章，主要是为了解决命令重名的问题，不同章节查询的命令是对应不同的功能</span><br><span class="line">如果不知道属于什么章 可以通过</span><br><span class="line">man -a 命令</span><br><span class="line"></span><br><span class="line">help帮助</span><br><span class="line">内部命令</span><br><span class="line">help cd</span><br><span class="line">外部命令</span><br><span class="line">ls --help</span><br><span class="line">区分外部还是内部的命令 type 命令</span><br><span class="line"></span><br><span class="line">info 帮助比help更加详细</span><br><span class="line">info ls</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">文件管理 Linux一切皆文件</span></span><br><span class="line">文件查看</span><br><span class="line">pwd 显示当前的操作目录</span><br><span class="line">cd 更改当前的操作目录</span><br><span class="line">cd /path/to/... 绝对路径</span><br><span class="line">cd ./path/to/,, 相对路径</span><br><span class="line">cd ../path/to/..相对路径</span><br><span class="line">ls 显示当前目录下的文件</span><br><span class="line"></span><br><span class="line">目录文件的创建与删除</span><br><span class="line"><span class="meta">#</span><span class="bash">创建文件</span></span><br><span class="line">mkdir /a #表示在根目录下建立一个文件名 a</span><br><span class="line">mkdir a #表示当前目录下建立一个文件名 a</span><br><span class="line">mkdir -p /a/b/c/d</span><br><span class="line"></span><br><span class="line">rm -r -f /a #不进行提示的删除非空文件</span><br><span class="line">通配符</span><br><span class="line">*</span><br><span class="line">?</span><br><span class="line">文件操作</span><br><span class="line">文本内容的查看</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l #显示详细信息</span><br><span class="line">ls -a #显示隐藏文件夹</span><br><span class="line">ls -r #逆向显示</span><br><span class="line">ls -l -r -t #按时间的方式逆向显示 </span><br><span class="line">ls -lrt</span><br><span class="line">ls -R #递归显示 显示文件下的子文件夹</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd - #回到上次的目录</span><br><span class="line">cd . #当前目录</span><br><span class="line">cd .. #回到上级目录</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -r /root/a /tmp #复制目录</span><br><span class="line">cp /filea /tmp #复制文件</span><br><span class="line">cp -p/-a #不改变时间/不改变权限</span><br><span class="line"></span><br><span class="line">mv /tmp/fileb /filec #将tmp下的fileb移到根目录下的并且改名我filec</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat #文本内容显示到终端</span><br><span class="line">head #查看文件开头</span><br><span class="line">tail #查看文件结尾</span><br><span class="line">wc -l 文件 #统计文件内容信息</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打包</span></span><br><span class="line">tar cf /tmp/etc-backup.tar /etc</span><br><span class="line"><span class="meta">#</span><span class="bash">打包并压缩</span></span><br><span class="line">tar czf /tmp/etc-backup.tar.gz /etc  #gz</span><br><span class="line">tar cjf /tmp/etc-backup.tar.bz2 /etc #</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解压缩</span></span><br><span class="line">tar xf /tmp/etc-backup.tar -C /root #解压并且放到root下</span><br><span class="line">tar zxf/jxf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi</span><br><span class="line">多模式</span><br><span class="line">i #进入Insert模式 在光标当前位置插入</span><br><span class="line">I #进入插入模式 进入当前行的开头</span><br><span class="line">a #来到光标后的一个</span><br><span class="line">A #进入当前行的最后一个</span><br><span class="line"><span class="meta">o#</span><span class="bash"> 进入下一行</span></span><br><span class="line">O #进入上一行</span><br><span class="line"></span><br><span class="line">hjkl #左下上右移动</span><br><span class="line">yy #复制</span><br><span class="line">p #粘贴</span><br><span class="line">3 yy #复制了3行</span><br><span class="line"><span class="meta">y$</span><span class="bash"> <span class="comment">#复制到结尾</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">dd#</span><span class="bash">剪切</span></span><br><span class="line"><span class="meta">d$</span><span class="bash"> <span class="comment">#剪切</span></span></span><br><span class="line"></span><br><span class="line">u #撤销</span><br><span class="line">ctrl+r #撤销撤销</span><br><span class="line"></span><br><span class="line"><span class="meta">x#</span><span class="bash">删除当前光标</span></span><br><span class="line"><span class="meta">r#</span><span class="bash">替换</span></span><br><span class="line"></span><br><span class="line">:set nu</span><br><span class="line"></span><br><span class="line">可视模式</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">: w /root/a.txt 保存到</span><br><span class="line">: wq 保存并退出</span><br><span class="line">: q!不保存退出</span><br><span class="line">: q 退出</span><br><span class="line">: !ip</span><br><span class="line">/x查找 n查找下一个</span><br><span class="line">:s/old/new 替换 针对光标所在的行进行替换</span><br><span class="line"></span><br><span class="line">：set nu 显示行号</span><br></pre></td></tr></table></figure>

<hr>
<p>以上命令行小结一下：</p>
<p>因为需要知道Linux的一个核心观点就是“一切皆文件”所以在Linux中对于文件的操作尤为重要</p>
<ol>
<li>cd 转换操作目录 /..是绝对路径</li>
<li>ls 列出文件</li>
<li>pwd 查看当前操作目录的路径</li>
<li>mkdir创建文件</li>
<li>rm 删除 切记一定要检查好路径</li>
<li>cp 复制</li>
<li>tar cf 目的路径 源文件</li>
<li>tar xf 源文件 -C 目标文件</li>
</ol>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>命令行 只有一直用才会熟悉，在平时的部署上面多用用命令行，然后思考一下加深印象，当然这些命令行并需要去背诵，只要学会索引就可以，脑中有这个印象就好。相信后面我会慢慢上手Linux。</p>
<p>后面对于Linux的期望就是通过它学会部署环境，开发等等。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>python自定义函数与面向对象</title>
    <url>/2041354615.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>python的最大特点就是dynamically typed就是动态类型，不像java需要定义数据类型</p>
<h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>先从一段代码引入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog=Dog(<span class="string">'name'</span>,<span class="number">16</span>)</span><br><span class="line">print(dog.getName())</span><br></pre></td></tr></table></figure>

<p>别急，我们先学习下py的函数，这个形式跟C以及java等语言有点不一样。跨度有点大，对于刚接触来说，我们需要对比一下。</p>
<h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>先来看一个例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">(message)</span>:</span></span><br><span class="line">    print(<span class="string">'Got a messag: &#123;&#125;'</span>.format(message))</span><br><span class="line"></span><br><span class="line">my_func(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="comment">#这里其实我有个地方不是很懂，不过大约能够知道什么意思，就是&#123;&#125;用来占位，记得在java中log常常这么用</span></span><br></pre></td></tr></table></figure>

<p>大致形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数)</span>:</span></span><br><span class="line">    处理</span><br><span class="line">    <span class="keyword">return</span>/yeild</span><br></pre></td></tr></table></figure>

<blockquote>
<p>与其他语言不一样的是，def是可执行语句，即函数被调用前，都是不存在的，直到被调用的时候才会创建一个新的函数对象，并赋予其名字</p>
</blockquote>
<p>对于以上这段话不理解的我们需要对比以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="comment">#报错，在主程序里，函数要先于调用前的定义</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">()</span>:</span></span><br><span class="line">    hello()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">my_func()</span><br><span class="line"><span class="comment">#正常运行，因为def是可执行语句，在调用的时候都不存在，但是我们必须保证调用前都已经声明定义了</span></span><br></pre></td></tr></table></figure>

<p>注：我们先有个全局的概念，然后我们在看一下细节</p>
<p>我们深入来看一个代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">(l)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(l,list):</span><br><span class="line">        print(<span class="string">'what you input is not a list'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> len(l)==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'waht you input is empty'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    largest=l[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">        <span class="keyword">if</span> item&gt;largest:</span><br><span class="line">            largest=item</span><br><span class="line">    print(<span class="string">'the largest item in l is &#123;&#125;'</span>.format(largest))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">my_func([<span class="number">8</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>看到这个我真的哭了，这里的多态完全跟java不同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    print(a+b)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">my_sum(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">my_sum([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">my_sum(<span class="string">'hello'</span>,<span class="string">'world'</span>)</span><br><span class="line"><span class="comment">#对于这种来什么就接受什么的函数，必要时需要在前面进行类型检查</span></span><br></pre></td></tr></table></figure>

<h4 id="函数变量的作用域"><a href="#函数变量的作用域" class="headerlink" title="函数变量的作用域"></a>函数变量的作用域</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MAX_VALUE=<span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> MAX_VALUE</span><br><span class="line">    MAX_VALUE=value</span><br><span class="line">    print(MAX_VALUE)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(value)</span>:</span></span><br><span class="line">    MAX_VALUE=value</span><br><span class="line">    print(MAX_VALUE)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test3</span><span class="params">()</span>:</span></span><br><span class="line">    print(MAX_VALUE)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">test3()</span><br><span class="line">test2(<span class="number">1</span>)</span><br><span class="line">test3()</span><br><span class="line">test1(<span class="number">1</span>)</span><br><span class="line">test3()</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>分析一下：</p>
<ol>
<li>函数内部默认为局部变量，即当函数调用结束后(return)，该变量会被收回，并且不能够被访问</li>
<li>Python的全局变量定义在主程序中</li>
<li>函数可以调用全局变量，如果用更改全局变量的时候需要 global关键字，这里并不是重新创建一个新的变量，而是告诉Python 解释器，这里的变量就是之前定义的全局变量</li>
<li>如果函数内部的变量名与主程序的变量名重名，那么局部变量将覆盖全局变量</li>
</ol>
<p>现在我们基本上了解了python的函数基本规则，我们回到类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog=Dog(<span class="string">'name'</span>,<span class="number">16</span>)</span><br><span class="line">print(dog.getName())</span><br></pre></td></tr></table></figure>

<p>在这里我们对比java的dog类如何去定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    Dog(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String...ags)</span></span>&#123;</span><br><span class="line">        Dog dog=<span class="keyword">new</span> Dog(<span class="string">"name"</span>,<span class="number">16</span>);</span><br><span class="line">        System.out.println(dog.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这两段代码执行的效果是一样的。</p>
<p>区别：</p>
<ol>
<li><p>python不需要提前声明的类的属性，因为不要指明属性的数据类型</p>
</li>
<li><p>Python的构造函数不是以类名，虽然调用的时候是以类名，说明在声明定义该类的对象的时候，会自动调用Init函数</p>
</li>
<li><p>注意到python的每个函数里面都有一个变量self，但是在调用的时候又不需要传入该参数，你可以看到这个self的作用跟this的作用差不多，只不过在python中必须使用这个self,在每一个类的方法中，self总是指向当前的实例，在init函数中self指向的最新被创建的对象，在其他函数中，指向调用该方法的对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.__name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.__sex=<span class="string">'boy'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog=Dog(<span class="string">'name'</span>,<span class="number">16</span>)</span><br><span class="line">dog.__name=<span class="string">'Name'</span></span><br><span class="line">print(dog.__name)</span><br><span class="line">print(dog.getName())</span><br><span class="line">print(dog.__sex)</span><br></pre></td></tr></table></figure>

<p>注：在一次被python的数据定义给坑了</p>
<p>首先我们注意到java里面数据是由private属性的，那么在python中默认以两个下划线表示该属性为私有属性，不可被对象之间调用</p>
<p>但是如果dog.__name记住这里的name属性不是该类的属性，而是你给dog这个变量重新定义的一个，与类里定义的不同</p>
<p>接着我们深入了解面向对象里面的细节，先来看一下下面这段代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    MAX_AGE=<span class="number">16</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newName</span><span class="params">(cls,name)</span>:</span></span><br><span class="line">        cls.name=name</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_MAX_AGE</span><span class="params">(age)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> age&lt;Dog.MAX_AGE:</span><br><span class="line">            print(<span class="string">"the dog age is &#123;&#125;"</span>.format(age))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'the maxage is &#123;&#125;'</span>.format(Dog.MAX_AGE))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">dog=Dog(<span class="string">'NAME'</span>,<span class="number">14</span>)</span><br><span class="line">print(dog.getName())</span><br><span class="line">dog.newName(<span class="string">'name'</span>)</span><br><span class="line">print(dog.getName())</span><br><span class="line">dog.get_MAX_AGE(<span class="number">16</span>)</span><br></pre></td></tr></table></figure>

<ol>
<li>第一个MAX_AGE是类中定义的常量，可以通过self.MAX_AGE或者Entity.MAX_AGE调用</li>
<li>注意到 @classmethod和@staticmethod 我们已经将类中的函数区别开来了，首先是classmethod类函数，能够动态访问或者修改对象的属性，其第一个参数一般为cls，最常用的功能是实现不用的init构造函数(好吧，上述代码不具有参考意义) ，@staticmehod是静态函数，可以用来做一些简单独立的任务，像什么测试等等，最后就是成员函数，是最正常的函数，不需要任何声明，第一个self代表当前对象的引用</li>
</ol>
<h4 id="写到最后"><a href="#写到最后" class="headerlink" title="写到最后"></a>写到最后</h4><p>这样，已经大致的会写python的类了，但是面向对象里面还有个重要的思想就是继承。不过这个留到后面来深入。当前我的目标就是对python基础有个全貌的了解。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>python的字符串</title>
    <url>/4045311999.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要对python的字符串操作进行探讨与分析</p>
<h4 id="字符串基础"><a href="#字符串基础" class="headerlink" title="字符串基础"></a>字符串基础</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">'jason'</span></span><br><span class="line">city=<span class="string">'''shanghai'''</span></span><br><span class="line">text=<span class="string">"welcome to shanghai"</span></span><br><span class="line">print(name)</span><br><span class="line">print(city)</span><br><span class="line">print(text)</span><br></pre></td></tr></table></figure>

<p>python的字符串通常包含在单引号，双引号以及三引号中</p>
<h4 id="字符串的常用操作"><a href="#字符串的常用操作" class="headerlink" title="字符串的常用操作"></a>字符串的常用操作</h4><p>可以将字符串想象成由单个字符组成的数组，即python的字符串支持索引，切片和遍历等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">"XuXiaoJin"</span></span><br><span class="line">print(name[<span class="number">0</span>])</span><br><span class="line">print(name[<span class="number">1</span>:<span class="number">2</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p>其中特别要注意的就是python的字符串是不可变的(immutable)这一点跟元组有点类似</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">"XuXiaoJin"</span></span><br><span class="line">name[<span class="number">0</span>]=<span class="string">'j'</span></span><br><span class="line"><span class="comment">#报错，'str' object does not support item assignment</span></span><br></pre></td></tr></table></figure>

<p>所以跟元组类似，如果要改变python的字符串，只能通过创建新的字符串来完成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">"XuXiaoJin"</span></span><br><span class="line">a=<span class="string">'j'</span>+name[<span class="number">1</span>:]</span><br><span class="line">print(a)</span><br><span class="line">b=name.replace(<span class="string">'X'</span>,<span class="string">'j'</span>)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<p>接着我们来看+=操作符的字符串拼接方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">firstname=<span class="string">'Xu'</span></span><br><span class="line">secondename=<span class="string">'Xiao'</span></span><br><span class="line">thirdname=<span class="string">'Jin'</span></span><br><span class="line">firstname+=<span class="string">' '</span>+secondename+<span class="string">" "</span>+thirdname</span><br><span class="line">print(firstname)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在拼接的时候，python解释器首先会检测是否还有其他引用，如果没有的话会在原地扩充字符串buffer的大小(后面要跟stringBuild联系起来)</span></span><br></pre></td></tr></table></figure>

<p>我们再看一下字符串的分割函数split(separator),表示把字符串分割成子字符串，并且返回一个分割后的字符串组合的里列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=firstname.split(<span class="string">" "</span>) <span class="comment">#以空格分隔</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> a:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure>

<p>还需要看一下字符串处理的操作</p>
<ul>
<li>string.strip(str),去掉<strong>首尾</strong>的str字符串</li>
<li>string.lstrip(str),去掉<strong>开头</strong>的str字符串</li>
<li>string.rstrip(str)去掉<strong>尾部</strong>的str字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">firstname=<span class="string">' Xu'</span></span><br><span class="line">secondename=<span class="string">'Xiao'</span></span><br><span class="line">thirdname=<span class="string">'Jin '</span></span><br><span class="line">firstname+=<span class="string">' '</span>+secondename+<span class="string">" "</span>+thirdname</span><br><span class="line">a=firstname.strip(<span class="string">' '</span>)</span><br><span class="line">b=firstname.lstrip(<span class="string">' '</span>)</span><br><span class="line">c=firstname.rstrip(<span class="string">' '</span>)</span><br><span class="line">print(firstname)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br><span class="line"><span class="comment">#用来去掉空格很有效果，验证密码什么的</span></span><br></pre></td></tr></table></figure>

<h4 id="字符串的格式化"><a href="#字符串的格式化" class="headerlink" title="字符串的格式化"></a>字符串的格式化</h4><p>先来看一个例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=[(<span class="number">1</span>,<span class="string">'xujin'</span>)]</span><br><span class="line"><span class="keyword">for</span> id,name <span class="keyword">in</span> l:</span><br><span class="line">    print(<span class="string">'the id:&#123;&#125;,name:&#123;&#125;'</span>.format(id,name))</span><br></pre></td></tr></table></figure>

<p>这里的string.format()就是**格式化函数，而{}就是格式符，用来为后面的真实值预留位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=[(<span class="number">1</span>,<span class="string">'xujin'</span>)]</span><br><span class="line"><span class="keyword">for</span> id,name <span class="keyword">in</span> l:</span><br><span class="line">    print(<span class="string">'the id: %s,name: %s'</span>%(id,name))</span><br></pre></td></tr></table></figure>

<p>这个是之前python版本处理相通功能的做法，当然我更喜欢用{}因为这样看起来比较规范</p>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>这篇文章主要讨论了python的字符串，总结一下</p>
<ol>
<li>python的字符串三种表现形式</li>
<li>python字符串的操作，索引，切片，遍历，拼接，分割，处理</li>
<li>python的字符的格式化，用来处理一些日志</li>
<li>python的字符串是不可变的与元组相同</li>
</ol>
<p>好了~可以滚去复习了，考试周来了！</p>
]]></content>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>python的列表、元组、字典、集合</title>
    <url>/2329127915.html</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文对python的四种基本类型 列表、元组、字典、集合有个全貌的了解，并且分析其性能，不同的应用场景。</p>
<h3 id="Overview-of-Python-Lists-and-Tuples"><a href="#Overview-of-Python-Lists-and-Tuples" class="headerlink" title="Overview of Python Lists and Tuples"></a>Overview of Python Lists and Tuples</h3><p>在python中经常被创建的数据类型就是列表(list)和元组(tuple)</p>
<p>相同点：都是存放有一定的顺序存放对象和值，这些值或对象可以是任何类型，包括None空类型</p>
<p>不同点：列表是可变的，即长度可以发生改变。元组不可发生改变，意味着一旦元组被创建的时候，其对象不能够被天剑或者删除，顺序也不会发生改变。</p>
<h4 id="Show-me-the-code"><a href="#Show-me-the-code" class="headerlink" title="Show me the code"></a>Show me the code</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#creating a python list or tuple</span></span><br><span class="line">lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="string">'three'</span>]</span><br><span class="line">tup=(<span class="number">1</span>,<span class="number">2</span>,<span class="string">'three'</span>)</span><br><span class="line"></span><br><span class="line">print(lst)</span><br><span class="line">print(tup)</span><br><span class="line"></span><br><span class="line"><span class="comment">#to create a tuple with only one value,add a trailing comma to the value</span></span><br><span class="line">tup2=<span class="number">0</span>,</span><br><span class="line">print(tup2)</span><br><span class="line"><span class="comment">#the below code will not do the work with a tuple only one value</span></span><br><span class="line">tup3=(<span class="number">0</span>)</span><br><span class="line">print(tup3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Get python list or tuple values</span></span><br><span class="line">print(lst[<span class="number">0</span>])</span><br><span class="line">print(lst[<span class="number">-1</span>])</span><br><span class="line">print(tup[<span class="number">0</span>])</span><br><span class="line">print(tup[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Slicing python lists and tuples</span></span><br><span class="line">print(lst[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">print(tup[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#assiging a python list value by index</span></span><br><span class="line">lst[<span class="number">0</span>]=<span class="string">'ONE'</span></span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># error 'tuple' object does not support item assignment</span></span><br><span class="line"><span class="comment"># tup[0]='ONE'</span></span><br><span class="line"><span class="comment"># print(tup)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#adding to a python list</span></span><br><span class="line">lst+=[<span class="literal">None</span>]</span><br><span class="line">print(lst)</span><br><span class="line">lst.append(<span class="number">5</span>)</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment">#the python del keyword for Lists</span></span><br><span class="line"><span class="keyword">del</span> lst[<span class="number">3</span>]</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> lst[<span class="number">2</span>:]</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment">#the concatenation works in tuple</span></span><br><span class="line">tup+=(<span class="number">4</span>,)</span><br><span class="line">print(tup)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">结果</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="string">'three'</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'three'</span>)</span><br><span class="line">(<span class="number">0</span>,)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">three</span><br><span class="line"><span class="number">1</span></span><br><span class="line">three</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">(<span class="number">2</span>, <span class="string">'three'</span>)</span><br><span class="line">[<span class="string">'ONE'</span>, <span class="number">2</span>, <span class="string">'three'</span>]</span><br><span class="line">[<span class="string">'ONE'</span>, <span class="number">2</span>, <span class="string">'three'</span>, <span class="literal">None</span>]</span><br><span class="line">[<span class="string">'ONE'</span>, <span class="number">2</span>, <span class="string">'three'</span>, <span class="literal">None</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="string">'ONE'</span>, <span class="number">2</span>, <span class="string">'three'</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="string">'ONE'</span>, <span class="number">2</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'three'</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>我们来一个一个分析</p>
<ol>
<li>创建list和tuple通过 []又或者可以通过调用list()函数 lst=list([1,2,’three’])，同样tuple可以通过()又或者可以通过tup=tuple((1,2,’three’))</li>
<li>通过索引访问list和tuple的值，并且还支持负索引</li>
<li>list和tuple支持切片操作</li>
<li>通过索引分配值给list以及、通过del函数可以对list删除、通过+添加list</li>
<li>tuple只支持+，但是这里特别注意，这里是<strong>重新开辟一块内存</strong>，创建新的元祖</li>
</ol>
<p>补充点别的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">tup=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(list(tup))</span><br><span class="line">print(tuple(lst))</span><br><span class="line">---</span><br><span class="line">结果</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">#lst和tup可以通过函数相互转换</span></span><br><span class="line"></span><br><span class="line">lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">tup=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(lst.count(<span class="number">3</span>))</span><br><span class="line">print(tup.count(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">print(lst.index(<span class="number">3</span>))</span><br><span class="line">print(tup.index(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">lst.reverse()</span><br><span class="line">print(lst)</span><br><span class="line">lst.sort()</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment">#error tuple object has no attribute reverse</span></span><br><span class="line"><span class="comment"># print(tup.reverse())</span></span><br><span class="line"><span class="comment"># print(tup.sort())</span></span><br><span class="line"></span><br><span class="line">print(list(reversed(tup)))</span><br><span class="line">print(sorted(tup))</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">结果</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p>分析一下</p>
<ol>
<li>count(item)统计列表/元组中Item出现的次数</li>
<li>index(item)统计列表/元组中item第一次出现的索引</li>
<li>list.reverse()和list.sort()分别表示原地倒转列表和排序(注意1.返回值是None,如果使用print(list.reverse()) 2.元组没有内置这两个函数，会报错)</li>
<li>reversed()和sorted()同样表示对列表/元组进行倒叙和排序，但是会返回一个结果</li>
</ol>
<h4 id="深入性能"><a href="#深入性能" class="headerlink" title="深入性能"></a>深入性能</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">tup=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(lst.__sizeof__())</span><br><span class="line"><span class="number">64</span></span><br><span class="line">print(tup.__sizeof__())</span><br><span class="line"><span class="number">48</span></span><br></pre></td></tr></table></figure>

<p>分析一下：</p>
<p>列表虽然跟元组存储一样多的元素个数，但是却比元组多16字节，这是因为列表是动态的，它需要存储一个指针，用来指向对应的元素(int型 8字节),而且因为其长度时可变的，需要额外的存储已经分配的长度(8字节)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=[]</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">40</span></span><br><span class="line">l.append(<span class="number">1</span>)</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">72</span></span><br><span class="line">l.append(<span class="number">2</span>)</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">72</span></span><br><span class="line">l.append(<span class="number">3</span>)</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">72</span></span><br><span class="line">l.append(<span class="number">4</span>)</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">72</span></span><br><span class="line">l.append(<span class="number">5</span>)</span><br><span class="line">print(l.__sizeof__())</span><br><span class="line"><span class="number">104</span></span><br></pre></td></tr></table></figure>

<p>通过运行结果，我们可以看到，list为了减少每次增加/删减的性能开销，每次都会额外分配一些空间(这个跟java的hashmap有点像)</p>
<p>这里还有一点注意的是</p>
<p>前面lst=[1,2,3]是直接初始化，所以只会分配3个元素的空间</p>
<p>而不断通过append实际上分配了4个元素空间 l=[]…</p>
<h4 id="两者的使用场景"><a href="#两者的使用场景" class="headerlink" title="两者的使用场景"></a>两者的使用场景</h4><ol>
<li>如果存储的数据和数量不变，比如地点的经纬度，选择元组更合适</li>
<li>如果数据或者数量是可变的，比如社交平台的日志功能，那么选择列表更合适</li>
</ol>
<h3 id="Overview-of-Python-Dictionaries-and-sets"><a href="#Overview-of-Python-Dictionaries-and-sets" class="headerlink" title="Overview of Python Dictionaries and sets"></a>Overview of Python Dictionaries and sets</h3><p>字典其实就是一组通过键值对存储的数据(其中在python3.7后，这些顺序是有序的，否则是没有顺序的)，并且可以随意删除数据，增加数据，访问数据(时间复杂度都可以在常数时间内)。其长度大小可变。</p>
<p>注意：the map key,which can be any immutable type,to values,which can be any type,just like the values of a list or tuple.键不能是可变的数据类型，值可以是任意类型</p>
<p>集合相对于字典来讲，就是存储的数据不是以键值对，而是只有值。其他性能基本相同</p>
<h4 id="show-me-the-code"><a href="#show-me-the-code" class="headerlink" title="show me the code"></a>show me the code</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d1=&#123;<span class="string">'name'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">20</span>,<span class="string">'gender'</span>:<span class="string">'male'</span>&#125;</span><br><span class="line">d2=dict(&#123;<span class="string">'name'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">20</span>,<span class="string">'gender'</span>:<span class="string">'male'</span>&#125;)</span><br><span class="line">d3=dict([(<span class="string">'name'</span>,<span class="string">'jason'</span>),(<span class="string">'age'</span>,<span class="number">20</span>),(<span class="string">'gender'</span>,<span class="string">'male'</span>)])</span><br><span class="line">d4=dict(name=<span class="string">'jason'</span>,age=<span class="number">20</span>,gender=<span class="string">'male'</span>)</span><br><span class="line">print(d1==d2==d3==d4)</span><br><span class="line"></span><br><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(s1==s2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#字典操作</span></span><br><span class="line">print(d1)</span><br><span class="line">print(d1[<span class="string">'name'</span>])</span><br><span class="line">print(d1.get(<span class="string">'location'</span>,<span class="string">'null'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#集合访问</span></span><br><span class="line">print(<span class="number">1</span> <span class="keyword">in</span> s1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#增删改</span></span><br><span class="line">d1[<span class="string">'location'</span>]=<span class="string">'shanghai'</span></span><br><span class="line">d1[<span class="string">'name'</span>]=<span class="string">'xu'</span></span><br><span class="line">d1.pop(<span class="string">'age'</span>)</span><br><span class="line"></span><br><span class="line">print(d1)</span><br><span class="line"></span><br><span class="line">s1.add(<span class="number">4</span>)</span><br><span class="line">s1.remove(<span class="number">1</span>)</span><br><span class="line">print(s1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#copy</span></span><br><span class="line">d4=d1</span><br><span class="line">d5=d1.copy()</span><br><span class="line"></span><br><span class="line">d5[<span class="string">'name'</span>]=<span class="string">'Jin'</span></span><br><span class="line">print(d5)</span><br><span class="line">print(d1)</span><br><span class="line"></span><br><span class="line">d4[<span class="string">'name'</span>]=<span class="string">'Jin'</span></span><br><span class="line">print(d4)</span><br><span class="line">print(d1)</span><br></pre></td></tr></table></figure>

<p>分析一下：</p>
<ol>
<li><p>创建字典，总共有四种方法，第一种就是直接使用{‘key’:value}其中用,隔开。后面三种调用dict()函数，dict(mapping)相当于传入一个mapping，dict(iterable)它的初始化过程是 for k,v in iterable: d[k]=v,所以传入的格式[(‘key’,value)],最后一种就是通过key=’value’ 创建集合的方法有两种{value}以及set([value])</p>
</li>
<li><p>字典的增删改查分别通过 d[‘key’]=value,d.pop(‘key’),d[‘key’]=newvalue,d[‘key’]或者d.get(‘key’,default)或者 value in dict</p>
</li>
<li><p>集合的增删改查 s.add(value),s.remove(value),没有该操作,value in s</p>
</li>
<li><p>字典的copy，如果直接用“=”实际上这两个引用都会直接指向同一个地址，当其中任意一个发生改变，就会引起其中另外一个发生改变。如果使用copy()函数，这两个指向不同的地址，不会发生冲突</p>
<h4 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h4><p>字典其实是一个hash表，所以其性能非常高，如果在不发生冲突的情况下。 </p>
</li>
</ol>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>本文对python的四种数据类型进行讨论分别是列表list,元组tuple,字典dict，集合set</p>
<p>总结一下:</p>
<p>列表list,通过[]表示，可以存储各种各样的数据类型，然后有顺序，其长度可以发生改变，并且任意删除，增加，访问。</p>
<p>元组tuple，通过()表示，可以存储各种各样的数据类型，有顺序，其长度不可发生改变，可以任意访问，增加通过+会创建一个新的元组</p>
<p>字典dict，通过{}表示，存储键值对，长度可以改变，可以通过hash的访问，任意删除，增加，修改</p>
<p>集合set，通过{},相对于字典存储值，长度可变，访问不可通过索引，只能通过in，可以添加add(),可以删除remove()</p>
]]></content>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>图系列二</title>
    <url>/1458634763.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里主要是一些关于图(2)的算法，其的核心代码以及全部代码。</p>
<p>使用语言C++</p>
<h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><p>####Prim核心代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minKey</span><span class="params">(<span class="keyword">int</span> key[V],<span class="keyword">bool</span> MSTset[V])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=INT_MAX,min_index;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(MSTset[i]==<span class="literal">false</span>&amp;&amp;key[i]&lt;<span class="built_in">min</span>)&#123;</span><br><span class="line">            <span class="built_in">min</span>=key[i],min_index=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min_index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">primMST</span><span class="params">(<span class="keyword">int</span> gaph[V][V])</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> count=<span class="number">0</span>;count&lt;V<span class="number">-1</span>;count++)&#123;</span><br><span class="line">            <span class="keyword">int</span> u=minKey(key,MSTset);</span><br><span class="line">            MSTset[u]=<span class="literal">true</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(graph[u][i]&amp;&amp;MSTset[i]==<span class="literal">false</span>&amp;&amp;graph[u][i]&lt;key[i])&#123;</span><br><span class="line">                    key[i]=graph[u][i];</span><br><span class="line">                    parent[i]=u;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="prim全部代码"><a href="#prim全部代码" class="headerlink" title="prim全部代码"></a>prim全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printMST</span><span class="params">(<span class="keyword">int</span> parent[], <span class="keyword">int</span> graph[V][V])</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Edge \tWeight\n"</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; V; i++)  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;parent[i]&lt;&lt;<span class="string">" - "</span>&lt;&lt;i&lt;&lt;<span class="string">" \t"</span>&lt;&lt;graph[i][parent[i]]&lt;&lt;<span class="string">" \n"</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minKey</span><span class="params">(<span class="keyword">int</span> key[V],<span class="keyword">bool</span> MSTset[V])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=INT_MAX,min_index;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(MSTset[i]==<span class="literal">false</span>&amp;&amp;key[i]&lt;<span class="built_in">min</span>)&#123;</span><br><span class="line">            <span class="built_in">min</span>=key[i];</span><br><span class="line">            min_index=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min_index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">primMST</span><span class="params">(<span class="keyword">int</span> graph[V][V])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> parent[V];</span><br><span class="line">    <span class="keyword">int</span> key[V];</span><br><span class="line">    <span class="keyword">bool</span> MSTset[V];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        key[i]=INT_MAX;</span><br><span class="line">        MSTset[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    key[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    parent[<span class="number">0</span>]=<span class="number">-1</span>; <span class="comment">//取根节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> count=<span class="number">0</span>;count&lt;V<span class="number">-1</span>;count++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=minKey(key,MSTset);</span><br><span class="line"></span><br><span class="line">        MSTset[u]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(graph[u][i]&amp;&amp;MSTset[i]==<span class="literal">false</span>&amp;&amp;graph[u][i]&lt;key[i])&#123;</span><br><span class="line">                key[i]=graph[u][i];</span><br><span class="line">                parent[i]=u;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printMST(parent, graph);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> graph[V][V] = &#123; </span><br><span class="line">                       &#123; <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span> &#125;,  </span><br><span class="line">                        &#123; <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span> &#125;,  </span><br><span class="line">                        &#123; <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span> &#125;,  </span><br><span class="line">                        &#123; <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span> &#125;,  </span><br><span class="line">                        &#123; <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">0</span> &#125; </span><br><span class="line">                       &#125;;  </span><br><span class="line">  </span><br><span class="line">    primMST(graph);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="kruskul核心代码"><a href="#kruskul核心代码" class="headerlink" title="kruskul核心代码"></a>kruskul核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><h4 id="dijkstra核心代码"><a href="#dijkstra核心代码" class="headerlink" title="dijkstra核心代码"></a>dijkstra核心代码</h4><p>今天脑子有点昏，还是怎么了，把这个算法想成了多源的最短路径</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跟prim算法有点像，其中不一样的地方就是在更新</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(graph[u][i]&amp;&amp;!sptSet[i]&amp;&amp;dist[u]!=INT_MAX&amp;&amp;graph[u][i]+dist[u]&lt;dist[i]&#123;</span><br><span class="line">        dist[i]=graph[u][i]+dist[u];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V 9 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(<span class="keyword">int</span> dist[V],<span class="keyword">bool</span> sptSet[V])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=INT_MAX,min_index;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sptSet[i]==<span class="literal">false</span>&amp;&amp;dist[i]&lt;<span class="built_in">min</span>)&#123;</span><br><span class="line">            <span class="built_in">min</span>=dist[i],min_index=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min_index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printSolution</span><span class="params">(<span class="keyword">int</span> dist[], <span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Vertex   Distance from Source\n"</span>); </span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++) </span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d tt %d\n"</span>, i, dist[i]); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> graph[V][V],<span class="keyword">int</span> src)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dist[V];</span><br><span class="line">    <span class="keyword">bool</span> sptSet[V];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        dist[i]=INT_MAX,sptSet[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dist[src]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> count=<span class="number">0</span>;count&lt;V<span class="number">-1</span>;count++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=minDistance(dist,sptSet);</span><br><span class="line"></span><br><span class="line">        sptSet[u]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(graph[u][i]&amp;&amp;!sptSet[i]&amp;&amp;dist[u]!=INT_MAX&amp;&amp;dist[u]+graph[u][i]&lt;dist[i])&#123;</span><br><span class="line">                dist[i]=dist[u]+graph[u][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printSolution(dist, V); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> graph[V][V] = &#123;</span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">4</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">8</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>&#125;, </span><br><span class="line">                      &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>&#125; </span><br><span class="line">                     &#125;; </span><br><span class="line">    dijkstra(graph,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="floyd核心代码"><a href="#floyd核心代码" class="headerlink" title="floyd核心代码"></a>floyd核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;V;k++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;V;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dist[i][k]+dist[k][j]&lt;dist[i][j])</span><br><span class="line">                dist[i][j]=dist[i][k]+dist[k][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="floyd全部代码"><a href="#floyd全部代码" class="headerlink" title="floyd全部代码"></a>floyd全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 99999  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSolution</span><span class="params">(<span class="keyword">int</span> dist[][V])</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"The following matrix shows the shortest distances"</span></span><br><span class="line">            <span class="string">" between every pair of vertices \n"</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; V; j++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (dist[i][j] == INF)  </span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"INF"</span>&lt;&lt;<span class="string">"   "</span>;  </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;dist[i][j]&lt;&lt;<span class="string">"  "</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">(<span class="keyword">int</span> graph[V][V])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dist[V][V];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;V;j++)&#123;</span><br><span class="line">            dist[i][j]=graph[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;V;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;V;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dist[i][k]+dist[k][j]&lt;dist[i][j])</span><br><span class="line">                 dist[i][j]=dist[i][k]+dist[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     printSolution(dist);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> graph[V][V] = &#123; &#123;<span class="number">0</span>, <span class="number">5</span>, INF, <span class="number">10</span>&#125;,  </span><br><span class="line">                        &#123;INF, <span class="number">0</span>, <span class="number">3</span>, INF&#125;,  </span><br><span class="line">                        &#123;INF, INF, <span class="number">0</span>, <span class="number">1</span>&#125;,  </span><br><span class="line">                        &#123;INF, INF, INF, <span class="number">0</span>&#125;  </span><br><span class="line">                    &#125;;  </span><br><span class="line"></span><br><span class="line">    floyd(graph);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><p>//原本的想法是通过度，用一个表存放度的表，然后更新这个表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">topologicalSort:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)</span><br><span class="line">    <span class="keyword">if</span>(!visited[i])</span><br><span class="line">        topologicalSortUtil(i,visited,<span class="built_in">stack</span>)</span><br><span class="line">        </span><br><span class="line">topologicalSortUtil:</span><br><span class="line">&#123;</span><br><span class="line">    visited[v]=<span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator i;</span><br><span class="line">    <span class="keyword">for</span>(i=adj[i].<span class="built_in">begin</span>();i!=adj.<span class="built_in">end</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[*i])</span><br><span class="line">            topologicalSortUtil(*i,visited,<span class="built_in">stack</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span>.push(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在核心代码里我们看不到度，但是其实用了栈和递归，通过这种方法的存储，使得v的邻接的点总是比v先入栈，然后利用栈的“先进后出”得到我们的拓扑排序序列</span></span><br></pre></td></tr></table></figure>

<h4 id="全部代码-1"><a href="#全部代码-1" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//topological</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> V;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; *adj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">topologicalSortUtil</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">bool</span> visited[],<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; &amp;<span class="built_in">stack</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> V);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">topologicalSort</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Graph::Graph(<span class="keyword">int</span> V)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;V=V;</span><br><span class="line">    adj=<span class="keyword">new</span> <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;[V];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Graph::addEdge</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    adj[v].push_back(w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Graph::topologicalSortUtil</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">bool</span> visited[],<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; &amp;<span class="built_in">stack</span>)</span></span>&#123;</span><br><span class="line">    visited[v]=<span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=adj[v].<span class="built_in">begin</span>();i!=adj[v].<span class="built_in">end</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[*i])</span><br><span class="line">            topologicalSortUtil(*i,visited,<span class="built_in">stack</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span>.push(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Graph::topologicalSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> *visited=<span class="keyword">new</span> <span class="keyword">bool</span>[V];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        visited[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visited[i]==<span class="literal">false</span>)</span><br><span class="line">            topologicalSortUtil(i,visited,<span class="built_in">stack</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">stack</span>.empty()==<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">stack</span>.top()&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">stack</span>.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">// Create a graph given in the above diagram </span></span><br><span class="line">    <span class="function">Graph <span class="title">g</span><span class="params">(<span class="number">6</span>)</span></span>; </span><br><span class="line">    g.addEdge(<span class="number">5</span>, <span class="number">2</span>); </span><br><span class="line">    g.addEdge(<span class="number">5</span>, <span class="number">0</span>); </span><br><span class="line">    g.addEdge(<span class="number">4</span>, <span class="number">0</span>); </span><br><span class="line">    g.addEdge(<span class="number">4</span>, <span class="number">1</span>); </span><br><span class="line">    g.addEdge(<span class="number">2</span>, <span class="number">3</span>); </span><br><span class="line">    g.addEdge(<span class="number">3</span>, <span class="number">1</span>); </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Following is a Topological Sort of the given graph \n"</span>; </span><br><span class="line">    g.topologicalSort(); </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>攻克链表难关</title>
    <url>/205465454.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>链表一直是我比较怕的东西，其实应该是我没有理解指针的定义。</p>
<p>我需要从机器的角度思考，机器可不会存储“箭头”，机器存储的是“地址”。当我明白了这个的时候，我瞬间感觉自己好像有点恍然大悟。</p>
<h4 id="反转单链表"><a href="#反转单链表" class="headerlink" title="反转单链表"></a>反转单链表</h4><p>#####思路</p>
<p>每一个节点都可以通过其的前驱节点找到，即pre-&gt;next表示的就是当前节点 pre-&gt;next-&gt;next表示当前节点的要存储的地址，如果是反转的话应该就是 pre-&gt;next-&gt;next=pre;这样就反转了。</p>
<h5 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h5><p>通过上面思路，很容易想到我们可以通过递归的方法，从后往前，因为后面的节点总能够被前面节点找到，如果前面节点没有发生改变。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(head==<span class="literal">NULL</span>||head-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">       </span><br><span class="line">       ListNode* p=reverseList(head-&gt;next);</span><br><span class="line">       </span><br><span class="line">       head-&gt;next-&gt;next=head;</span><br><span class="line">       head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">       <span class="keyword">return</span> p;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>还可以不通过使用递归的方法，这个时候我们从头开始遍历，但是呢会出现一个问题，那就是你前面节点改变了，你后面的节点可能就找不到了，所以这个时候要存下两个节点，即当前节点和pre</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">      ListNode *pre=<span class="literal">NULL</span>;</span><br><span class="line">      ListNode *curr=head;</span><br><span class="line">       </span><br><span class="line">      <span class="keyword">while</span>(curr!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">          ListNode *nextNode=curr-&gt;next;</span><br><span class="line">          curr-&gt;next=pre;</span><br><span class="line">          pre=curr;</span><br><span class="line">          curr=nextNode;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> pre;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="链表中环的检测"><a href="#链表中环的检测" class="headerlink" title="链表中环的检测"></a>链表中环的检测</h4><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p>使用快慢指针，类似于跑步，当两个人的速度一快一慢的时候，总能够在环形跑道上相遇，利用这个特点，可以很好的用来判断链表中是否有环。</p>
<h5 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>||head-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ListNode *slow=head;</span><br><span class="line">        ListNode *fast=head-&gt;next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(fast!=slow)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast==<span class="literal">NULL</span>||fast-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">            fast=fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h4><h5 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h5><p>合并有序链表，其实跟排序中的归并排序类似，不过呢这里是通过链表存储的数据，对于单链表来说，如果没有头结点的话，是找不到这个单链表，所以对于单链表来说头结点很重要。</p>
<h5 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode *preHead=<span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        ListNode *pre=preHead;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">NULL</span>&amp;&amp;l2!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1-&gt;val&lt;l2-&gt;val)&#123;</span><br><span class="line">                pre-&gt;next=l1;</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre-&gt;next=l2;</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            pre=pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next=l1!=<span class="literal">NULL</span>?l1:l2;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> preHead-&gt;next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="删除链表倒数第N个节点"><a href="#删除链表倒数第N个节点" class="headerlink" title="删除链表倒数第N个节点"></a>删除链表倒数第N个节点</h4><h5 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h5><p>删除链表节点好做，但是我需要找到倒数的第N+1个节点，可以通过双指针，这两个指针相差N个节点，当一个指针走到最后一个节点的时候，前一个指针正好走到倒数第N个节点，在进行微调一下。</p>
<h5 id="核心代码-3"><a href="#核心代码-3" class="headerlink" title="核心代码"></a>核心代码</h5><p>思路虽然想出来了，但是实现中却也碰到一些问题，那就是如果只有一个节点呢，参考了题解，恍然大悟，增加一个哨兵，可以解决这个问题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy-&gt;next=head;</span><br><span class="line">        ListNode* first=dummy;</span><br><span class="line">        ListNode* second=dummy;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            first=first-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(first!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            first=first-&gt;next;</span><br><span class="line">            second=second-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        second-&gt;next=second-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="求链表的中间节点"><a href="#求链表的中间节点" class="headerlink" title="求链表的中间节点"></a>求链表的中间节点</h4><h5 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h5><p>继续使用快慢指针，快的指针每次会比慢指针多走一步，这样当快指针到达链表尾部时，慢指针正好在链表的中间</p>
<h5 id="核心代码-4"><a href="#核心代码-4" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *fast=head;</span><br><span class="line">        ListNode *slow=head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">NULL</span>&amp;&amp;fast-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">            fast=fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h4><p>通过以上的训练，我们基本上理清楚了链表的Next存的是什么，是地址所以只要把握这个原则就可以很好的理解很多链表相关的东西。</p>
<h4 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h4><p>LeetCode 206,141,21,19,876</p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>排序(Sort)</title>
    <url>/3705732943.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>将一些常见的排序算法，通过c++实现。</p>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(ElementType &amp;A[],<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        k=i;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;N;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[j]&lt;A[k]) k=j;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(&amp;A[i],&amp;A[k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findmin</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> start,<span class="keyword">int</span> <span class="built_in">end</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=pre_sort[start];</span><br><span class="line">    <span class="keyword">int</span> minindex=start;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;<span class="built_in">end</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre_sort[i]&lt;<span class="built_in">min</span>)&#123;</span><br><span class="line">            <span class="built_in">min</span>=pre_sort[i];</span><br><span class="line">            minindex=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minindex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=pre_sort[i];</span><br><span class="line">    pre_sort[i]=pre_sort[j];</span><br><span class="line">    pre_sort[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">choose_sort</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> minindex=findmin(pre_sort,i,n);</span><br><span class="line">        <span class="keyword">if</span>(minindex!=i)&#123;</span><br><span class="line">            swap(pre_sort,i,minindex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pre_sort[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    choose_sort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这段代码以有边界为key</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(itemType a[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    ItemType v;</span><br><span class="line">    <span class="keyword">if</span>(right&gt;left)&#123;</span><br><span class="line">        v=a[right];</span><br><span class="line">        i=left<span class="number">-1</span>;</span><br><span class="line">        j=right;</span><br><span class="line">        <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">            <span class="keyword">while</span>(a[++i]&lt;v);</span><br><span class="line">            <span class="keyword">while</span>(a[--j]&gt;v);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=j) <span class="keyword">break</span>;</span><br><span class="line">            swap(a,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a,i,right);</span><br><span class="line">        quicksort(a,left,i<span class="number">-1</span>);</span><br><span class="line">        quicksort(a,i+<span class="number">1</span>,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码-1"><a href="#全部代码-1" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partion</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> startindex=left;</span><br><span class="line">    <span class="keyword">int</span> key=pre_sort[left];</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="keyword">while</span>(pre_sort[left+<span class="number">1</span>]&lt;key) left++;</span><br><span class="line">        <span class="keyword">while</span>(pre_sort[right]&gt;key) right--;</span><br><span class="line">        <span class="keyword">if</span>(left&lt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp=pre_sort[left];</span><br><span class="line">            pre_sort[left]=pre_sort[right];</span><br><span class="line">            pre_sort[right]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left==right||left&gt;right)&#123;</span><br><span class="line">            pre_sort[startindex]=pre_sort[left];</span><br><span class="line">            pre_sort[left]=key;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">int</span> p=partion(pre_sort,left,right);</span><br><span class="line">        quick_sort(pre_sort,left,p<span class="number">-1</span>);</span><br><span class="line">        quick_sort(pre_sort,p+<span class="number">1</span>,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;  <span class="comment">//对于这种有序的 快速排序的效率并不高</span></span><br><span class="line">    quick_sort(pre_sort,<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h4 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(DataType A[])</span></span>&#123;</span><br><span class="line">    DataType temp;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N<span class="number">-1</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i]&lt;A[i<span class="number">-1</span>])&#123;</span><br><span class="line">            temp=A[i];</span><br><span class="line">            <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;temp&lt;A[j];--j)</span><br><span class="line">                A[j+<span class="number">1</span>]=A[j];</span><br><span class="line">            A[j+<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//这段核心代码真的精简</span></span><br></pre></td></tr></table></figure>

<h4 id="全部代码-2"><a href="#全部代码-2" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre_sort[i]&lt;pre_sort[i<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="keyword">int</span> j,temp=pre_sort[i];</span><br><span class="line">            <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;temp&lt;pre_sort[j];--j)&#123;</span><br><span class="line">                pre_sort[j+<span class="number">1</span>]=pre_sort[j];</span><br><span class="line">            &#125;</span><br><span class="line">            pre_sort[j+<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    insertSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><h4 id="核心代码-3"><a href="#核心代码-3" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> incre[],<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,temp,increment;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        increment=incre[i];</span><br><span class="line">        <span class="keyword">for</span>(j=increment;j&lt;n;j++)&#123;</span><br><span class="line">            temp=a[j];</span><br><span class="line">            <span class="keyword">for</span>(k=j;k-incremnt&gt;=<span class="number">0</span>;k-=increment)&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp&gt;=a[k-increment]) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> a[k]=a[k-increment];</span><br><span class="line">            &#125;</span><br><span class="line">            a[k]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码-3"><a href="#全部代码-3" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n,<span class="keyword">int</span> incre[],<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,increment,temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        increment=incre[i];</span><br><span class="line">        <span class="keyword">for</span>(j=increment;j&lt;n;j++)&#123;</span><br><span class="line">            temp=pre_sort[j];</span><br><span class="line">            <span class="keyword">for</span>(k=j;k-increment&gt;=<span class="number">0</span>;k-=increment)&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp&gt;=pre_sort[k-increment]) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> pre_sort[k]=pre_sort[k-increment];</span><br><span class="line">            &#125;</span><br><span class="line">            pre_sort[k]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> *pre_sort,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pre_sort[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> increment[<span class="number">3</span>]=&#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    shell_sort(pre_sort,<span class="number">10</span>,increment,<span class="number">3</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h4 id="核心代码-4"><a href="#核心代码-4" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从前往后</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre_sort[j]&gt;pre_sort[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        swap(&amp;pre_sort[j],&amp;pre_sort[j+<span class="number">1</span>]);</span><br><span class="line">            flag=<span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码-4"><a href="#全部代码-4" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=pre_sort[i];</span><br><span class="line">    pre_sort[i]=pre_sort[j];</span><br><span class="line">    pre_sort[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pre_sort[j]&gt;pre_sort[j+<span class="number">1</span>])&#123;</span><br><span class="line">                swap(pre_sort,j,j+<span class="number">1</span>);</span><br><span class="line">                flag=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pre_sort[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    bubbleSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><h4 id="核心代码-5"><a href="#核心代码-5" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//堆化过程</span></span><br><span class="line"><span class="comment">//从i开始堆化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> largest=i;</span><br><span class="line">    <span class="keyword">int</span> l=i*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> r=i*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;n&amp;&amp;arr[l]&gt;arr[largest]) largest=l;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;n&amp;&amp;arr[r]&gt;arr[largest]) largest=r;</span><br><span class="line">    <span class="keyword">if</span>(largest!=i)&#123;</span><br><span class="line">        swap(&amp;arr[i],&amp;arr[largest]);</span><br><span class="line">        heapify(arr,n,largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="较简洁代码"><a href="#较简洁代码" class="headerlink" title="较简洁代码"></a>较简洁代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> largeset=i;</span><br><span class="line">    <span class="keyword">int</span> l=i*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> r=i*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;n&amp;&amp;arr[l]&gt;arr[largeset]) largeset=l;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;n&amp;&amp;arr[r]&gt;arr[largeset]) largeset=r;</span><br><span class="line">    <span class="keyword">if</span>(largeset!=i)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=arr[largeset];</span><br><span class="line">        arr[largeset]=arr[i];</span><br><span class="line">        arr[i]=temp;</span><br><span class="line">        heapify(arr,n,largeset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">//进行堆化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        heapify(arr,n,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=arr[i];</span><br><span class="line">        arr[i]=arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>]=temp;</span><br><span class="line">        heapify(arr,i,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    heapSort(arr,n);</span><br><span class="line">    printSort(arr,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=pre_sort[i];</span><br><span class="line">        <span class="keyword">int</span> child=i*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(child&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(child+<span class="number">1</span>&lt;n&amp;&amp;pre_sort[child]&lt;pre_sort[child+<span class="number">1</span>]) child+=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(temp&lt;pre_sort[child])&#123;</span><br><span class="line">                pre_sort[(child<span class="number">-1</span>)/<span class="number">2</span>]=pre_sort[child];</span><br><span class="line">                child=child*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pre_sort[(child<span class="number">-1</span>)/<span class="number">2</span>]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify2</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> i,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> child=i*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> temp=pre_sort[i];</span><br><span class="line">    <span class="keyword">while</span>(child&lt;n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(child+<span class="number">1</span>&lt;n&amp;&amp;pre_sort[child]&lt;pre_sort[child+<span class="number">1</span>]) child+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp&lt;pre_sort[child])&#123;</span><br><span class="line">            pre_sort[(child<span class="number">-1</span>)/<span class="number">2</span>]=pre_sort[child];</span><br><span class="line">            child=child*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pre_sort[(child<span class="number">-1</span>)/<span class="number">2</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">       <span class="keyword">int</span> temp=pre_sort[i];</span><br><span class="line">       pre_sort[i]=pre_sort[<span class="number">0</span>];</span><br><span class="line">       pre_sort[<span class="number">0</span>]=temp;</span><br><span class="line">       heapify2(pre_sort,<span class="number">0</span>,i);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    heapify(pre_sort,<span class="number">10</span>);</span><br><span class="line">    heapSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    printSort(pre_sort,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><h4 id="核心代码-6"><a href="#核心代码-6" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//merge是核心代码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> presort[],<span class="keyword">int</span> l,<span class="keyword">int</span> m,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=l,j=m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> result[r-l+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=m&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(presort[i]&lt;presort[j])&#123;</span><br><span class="line">            result[num]=presort[i];</span><br><span class="line">            i++,num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result[num]=presort[j];</span><br><span class="line">            j++,num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=m)&#123;</span><br><span class="line">        result[num]=presort[i];</span><br><span class="line">        num++,i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)&#123;</span><br><span class="line">        result[num]=presort[j];</span><br><span class="line">        num++,j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=l;j&lt;=r;i++,j++)&#123;</span><br><span class="line">        presort[j]=result[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码-5"><a href="#全部代码-5" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> l,<span class="keyword">int</span> m,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result[r-l+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i=l,j=m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=m&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre_sort[i]&lt;pre_sort[j])&#123;</span><br><span class="line">            result[num]=pre_sort[i];</span><br><span class="line">            i++;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result[num]=pre_sort[j];</span><br><span class="line">            j++;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=m)&#123;</span><br><span class="line">            result[num]=pre_sort[i];</span><br><span class="line">            num++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(j&lt;=r)&#123;</span><br><span class="line">            result[num]=pre_sort[j];</span><br><span class="line">            num++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>,y=l;y&lt;=r;x++,y++)&#123;</span><br><span class="line">            pre_sort[y]=result[x];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> start,<span class="keyword">int</span> <span class="built_in">end</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//先取中点</span></span><br><span class="line">    <span class="keyword">int</span> mid=(start+<span class="built_in">end</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(start&lt;<span class="built_in">end</span>)&#123;</span><br><span class="line">        mergeSort(pre_sort,start,mid);</span><br><span class="line">        mergeSort(pre_sort,mid+<span class="number">1</span>,<span class="built_in">end</span>);</span><br><span class="line">        merge(pre_sort,start,mid,<span class="built_in">end</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pre_sort[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="keyword">sizeof</span>(pre_sort)/<span class="keyword">sizeof</span>(pre_sort[<span class="number">0</span>]);</span><br><span class="line">    mergeSort(pre_sort,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    printSort(pre_sort,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><h4 id="核心代码-7"><a href="#核心代码-7" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//countSort</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">countSort</span><span class="params">(<span class="keyword">int</span> sort[],<span class="keyword">int</span> n,<span class="keyword">int</span> <span class="built_in">exp</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,output[n],count[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        count[(sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]++;</span><br><span class="line">   	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        count[i]+=count[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        output[count[(sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]<span class="number">-1</span>]=sort[i];</span><br><span class="line">    	count[(sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        sort[i]=output[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全部代码-6"><a href="#全部代码-6" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mx=pre_sort[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre_sort[i]&gt;mx) mx=pre_sort[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">countSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n,<span class="keyword">int</span> <span class="built_in">exp</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,output[n],count[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        count[(pre_sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        count[i]+=count[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        output[count[(pre_sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]<span class="number">-1</span>]=pre_sort[i];</span><br><span class="line">        count[(pre_sort[i]/<span class="built_in">exp</span>)%<span class="number">10</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        pre_sort[i]=output[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="keyword">int</span> pre_sort[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> m=getMax(pre_sort,n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> <span class="built_in">exp</span>=<span class="number">1</span>;m/<span class="built_in">exp</span>&gt;<span class="number">0</span>;<span class="built_in">exp</span>*=<span class="number">10</span>)</span><br><span class="line">        countSort(pre_sort,n,<span class="built_in">exp</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre_sort[]=&#123;<span class="number">170</span>, <span class="number">45</span>, <span class="number">75</span>, <span class="number">90</span>, <span class="number">802</span>, <span class="number">24</span>, <span class="number">2</span>, <span class="number">66</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="keyword">sizeof</span>(pre_sort)/<span class="keyword">sizeof</span>(pre_sort[<span class="number">0</span>]);</span><br><span class="line">    radixSort(pre_sort,n);</span><br><span class="line">    <span class="built_in">print</span>(pre_sort,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>说实话，我原本不是很喜欢算法，觉得很枯燥，但是就在今天，我发现同一算法，我实现起来很啰嗦，代码重复度高。通过看优秀代码，才恍然大悟，可以这么简洁，这个理解了原来是这么用的。才发现算法真的很有趣，可以发现自己脑中思维的漏洞，逻辑的缺陷。</p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>用工程的思维学习SpringBoot</title>
    <url>/1567761082.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然写过Spring Boot，但是只是作为一个代码的搬运工，很多东西都不懂，所以就只能<strong>扫盲</strong>，通过工程来学习的思维确实不错，不过[真的好的东西不懂]，只能慢慢学了。</p>
<p>####actuator</p>
<p>可以监控应用的健康信息、统计应用的瞬间信息、发现应用挂掉了，发现应用瞬间信息不正常都可以发送报警信息，也可以将信息拉倒监控系统的数据系统中。</p>
<h4 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h4><blockquote>
<p>Lombok是一种Java实用工具，可用来帮助开发人员消除Java的冗长，尤其是对于简单的Java对象(POJO)。它通过<strong>注解</strong>实现这一目的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mountain</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> longitude;</span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要使用上述的这个类需要写 getter 和 setter方法，可能还要写一个构造器、equals方法等等<strong>样板式代码</strong>。</p>
<p>但是只是使用一个@Date就解决了这个问题</p>
<p><a href="https://blog.csdn.net/u010695794/article/details/70441432" target="_blank" rel="noopener">参考资料</a>   |  <a href="https://projectlombok.org/features/all" target="_blank" rel="noopener">官网</a></p>
<h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><blockquote>
<p>Maven是基于项目对象模型(POM project object model),可以通过一小段描述信息(配置)来管理项目的构建，报告和文档的软件项目管理工具</p>
</blockquote>
<p>通俗点就是：通过<strong>pom.xml</strong>文件的配置获取jar包，而不用手动去添加jar包</p>
<p><a href="https://www.cnblogs.com/whgk/p/7112560.html" target="_blank" rel="noopener">参考资料</a></p>
<h4 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h4><p>就是连接<strong>数据库</strong>的意思</p>
<p><strong>数据库连接池</strong>先打开一定数量的数据库连接，当使用的时候分配给调用者，调用完毕后返回给连接池，注意返回给连接池后并不关闭，而是等待分配给下一个调用者</p>
<p><a href="https://www.jianshu.com/p/68c8b934e26e" target="_blank" rel="noopener">参考资料</a></p>
<h4 id="SpringBoot常用的Bean注解"><a href="#SpringBoot常用的Bean注解" class="headerlink" title="SpringBoot常用的Bean注解"></a>SpringBoot常用的Bean注解</h4><p>Bean是什么？Bean可以理解为Spring容器实例化的一个对象，Spring容器也就是一个bean工厂。在简单点就是：保存数据的实体，通常与数据库中的表对应。</p>
<p><a href="https://www.cnblogs.com/ViviChan/p/4981712.html" target="_blank" rel="noopener">参考资料</a></p>
<p>什么是容器？打个比方</p>
<blockquote>
<p><strong>集装箱运载</strong></p>
<p>我把货物一辆兰博基尼跑车（好比开发好的应用APP），打包放到一容器集装箱里，它通过货轮可以轻而易举的从上海码头（CentOS7.2环境）运送到纽约码头（Ubuntu14.04环境）。而且运输期间，我的兰博基尼（APP）没有受到任何的损坏（文件没有丢失），在另外一个码头卸货后，依然可以完美风骚的赛跑（启动正常）。</p>
</blockquote>
<p>容器(Linux Container)就是解决了IT世界里“集装箱运输”问题</p>
<p><a href="https://www.cnblogs.com/qcloud1001/p/9273549.html" target="_blank" rel="noopener">参考资料</a></p>
<ul>
<li><p>Repository在数据访问层(DAO层)使用</p>
<ul>
<li>DAO是一个数据访问接口，数据访问：就是与数据库打交道。夹在业务逻辑与数据库资源中间</li>
</ul>
<p><a href="https://www.cnblogs.com/nicuty/p/6265303.html" target="_blank" rel="noopener">JpaRepository</a></p>
<p>ps:竟然有个分页功能，以后项目涉及到的到时候可以拿来用用</p>
</li>
<li><p>@Service在业务逻辑层(Service层)使用</p>
<ul>
<li>@Service(“serviceBeanId”)或@Service(value=”serviceBeanId”)使用value作为Bean名字</li>
</ul>
</li>
<li><p>@Controller用于标注控制层组件</p>
<ul>
<li>用于标注Web中控制层组件</li>
<li>和@RequestMapping、@RequestParam注解共同处理URL的映射</li>
<li>@RestController<ul>
<li>是一个组合注解 =@Controller+@ResponseBody</li>
<li>直接将返回的对象输出到客户端</li>
<li>如果返回字符串，直接返回</li>
<li>如果返回不是字符串，默认使用Jackson将对象序列化成JSON字符串后输出</li>
</ul>
</li>
</ul>
<p>[补充一个概念，序列化：为了把对象的状态保持下来，就需要把对象保存下来–后面会补充Serializable]</p>
<blockquote>
<p>小结：这几个注解其实效果都一样，不过如果按照他们的含义来注解的话，对于分层结构的WEB框架很有好处</p>
</blockquote>
<p><a href="https://blog.csdn.net/lipinganq/article/details/79155072" target="_blank" rel="noopener">参考资料</a></p>
<h4 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h4><blockquote>
<p>将大量的SQL打包成一个批次，发送给服务器，服务器接收到数据，打开批，一次执行批里的sql，这样减少与数据库的交互，提高程序的效率</p>
</blockquote>
</li>
</ul>
<hr>
<p>后续继续扫盲</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>扫盲行动</tag>
      </tags>
  </entry>
  <entry>
    <title>散列表(HashMap)</title>
    <url>/3201554798.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近学习到了散列表，这个数据结构用的很经常，所以需要在这里整理下笔记。</p>
<h4 id="散列表-Hash-Table"><a href="#散列表-Hash-Table" class="headerlink" title="散列表-Hash Table"></a>散列表-Hash Table</h4><p>散列表用的是<strong>数组</strong>支持按照<strong>下标随机访问</strong>数据的特征，可以说是一种数组的扩展。</p>
<blockquote>
<p>Hashing is a technique that is used to uniquely identify a specific object from a group of similar objects.</p>
<p>Assume that you have an object and you want to assign a key to it to make searching easy.To store the key/value pair,you can use a simple array like a data structure where keys(integers) can be used directly as an index to store values.</p>
<p>However,in case where the keys are large and cannot be used directly as an index,you should use <strong>hashing</strong></p>
<p>In hashing,large keys are converted into small keys by using hash functions.The values are then stored in a data structure called hash table. </p>
</blockquote>
<h4 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h4><h5 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h5><ol>
<li>散列函数计算得到的散列值是一个非负整数</li>
<li>if key1==key2 则 hash(key1)==hash(key2)</li>
<li>if key1=/=key2 则 hash(key1)=/=hash(key2)</li>
</ol>
<h5 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h5><p>简单的散列函数设计</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>列子</th>
</tr>
</thead>
<tbody><tr>
<td>数据分析法</td>
<td>对于手机号，因为前几位重复的可能性很大，但是后面几位比较随机，所以可取后面几位作为散列值</td>
</tr>
<tr>
<td>除留法</td>
<td>可以通过对哈希表的长度取模</td>
</tr>
</tbody></table>
<p>####散列冲突</p>
<p>描述 ：<strong>装载因子</strong> 散列表的装载因子=填入表中的元素个数/散列表的长度</p>
<ol>
<li>开放寻址法</li>
</ol>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="left">做法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">线形探测</td>
<td align="left">1.计算hash(key)值 查找 如果该值已经有填充数据 则从当前位置出发，一次往后查找，直到找到空闲位置为止                                                                                                                         2.查找值的时候 先计算hash(key) 如果该位置是要查找的值 则结束 否则一直向后面找 直到找到空闲位置 (表示该值不在表中)                                                                                        3.删除值的时候 不可以简单直接删除 而是应该给个标记deleted</td>
</tr>
<tr>
<td align="center">二次探测</td>
<td align="left">跟线性探测很像，不同的地方就是 线性探测每次是 一个步长 二次探测的步长是原来步长的二次方</td>
</tr>
<tr>
<td align="center">双重探测</td>
<td align="left">有很多个散列函数 如果hash1(key)算出来的位置有数值 则用hash2(key)依次类推</td>
</tr>
</tbody></table>
<ol start="2">
<li><p>链表法</p>
<p>在散列表中，每个“bucket”或者”slot”会对应一条链表，所有散列值相同的元素都放到相同槽位对应的链表中。</p>
</li>
</ol>
<h4 id="工业级散列表源码分析—面试必问"><a href="#工业级散列表源码分析—面试必问" class="headerlink" title="工业级散列表源码分析—面试必问"></a>工业级散列表源码分析—面试必问</h4><p>构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                              initialCapacity);</span><br><span class="line">       <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">           initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">       <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                              loadFactor);</span><br><span class="line">       <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">       <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">       putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>初始化了三个参数</p>
<ul>
<li>initialCapacity 初始容量(默认16)</li>
<li>threshold阀值，hashMap所能容纳的最大价值对数量，超过则需要扩容</li>
<li>loadFactor装载因子</li>
</ul>
<p>Put方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">       <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//如果table尚未初始化，则此处进行初始化数组，并赋值初始容量，重新计算阈值</span></span><br><span class="line">           n = (tab = resize()).length;</span><br><span class="line">       <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">           <span class="comment">//通过hash找到下标，如果hash值指定的位置数据为空，则直接将数据存放进去</span></span><br><span class="line">           tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">       <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//如果通过hash找到的位置有数据，发生碰撞</span></span><br><span class="line">           Node&lt;K,V&gt; e; K k;</span><br><span class="line">           <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">               ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">               <span class="comment">//如果需要插入的key和当前hash值指定下标的key一样，先将e数组中已有的数据</span></span><br><span class="line">               e = p;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">               <span class="comment">//如果此时桶中数据类型为 treeNode，使用红黑树进行插入</span></span><br><span class="line">               e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//此时桶中数据类型为链表</span></span><br><span class="line">               <span class="comment">// 进行循环</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                   <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                       <span class="comment">//如果链表中没有最新插入的节点，将新放入的数据放到链表的末尾</span></span><br><span class="line">                       p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                       <span class="comment">//如果链表过长，达到树化阈值，将链表转化成红黑树</span></span><br><span class="line">                       <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                           treeifyBin(tab, hash);</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">//如果链表中有新插入的节点位置数据不为空，则此时e 赋值为节点的值，跳出循环</span></span><br><span class="line">                   <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                       ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   p = e;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//经过上面的循环后，如果e不为空，则说明上面插入的值已经存在于当前的hashMap中，那么更新指定位置的键值对</span></span><br><span class="line">           <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">               V oldValue = e.value;</span><br><span class="line">               <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                   e.value = value;</span><br><span class="line">               afterNodeAccess(e);</span><br><span class="line">               <span class="keyword">return</span> oldValue;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       ++modCount;</span><br><span class="line">       <span class="comment">//如果此时hashMap size大于阈值，则进行扩容</span></span><br><span class="line">       <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">           resize();</span><br><span class="line">       afterNodeInsertion(evict);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>分为三种情况</p>
<ul>
<li>table尚未初始化，对数据进行初始化</li>
<li>table已经初始化，且散列值的位置为空，直接将数据存放到指定位置</li>
<li>table已经初始化，发生hash冲突<ul>
<li>判断插入的值是否与该值相等</li>
<li>如果此时桶中数据类型为treeNode，使用红黑树进行插入</li>
<li>如果是列表则进行循环判断，并且判断是否需要转为红黑树</li>
</ul>
</li>
</ul>
<p>Get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt; e;</span><br><span class="line">       <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">       <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">           (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//1、根据hash算法找到对应位置的第一个数据，如果是指定的key，则直接返回</span></span><br><span class="line">           <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">               ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">               <span class="keyword">return</span> first;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">//如果该节点为红黑树，则通过树进行查找</span></span><br><span class="line">               <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                   <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">               <span class="comment">//如果该节点是链表，则遍历查找到数据</span></span><br><span class="line">               <span class="keyword">do</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                       ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                       <span class="keyword">return</span> e;</span><br><span class="line">               &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>逻辑</p>
<ol>
<li>通过hash查找，如果第一个值为查找的值，则直接放回</li>
<li>如果数据是TreeNode,则通过红黑树查找</li>
<li>如果是链表，则遍历查找</li>
<li>没有找到，返回null</li>
</ol>
<p>hash(key)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>key.hashCode()如果不进行重写的话返回的是根据内存地址得到的一个int值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt; e;</span><br><span class="line">       <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">           <span class="keyword">null</span> : e.value;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//根据key和key的hash值，查找到对应的元素</span></span><br><span class="line">       <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">           (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;</span><br><span class="line">           <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">               ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">               node = p;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                   node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">do</span> &#123;</span><br><span class="line">                       <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                           ((k = e.key) == key ||</span><br><span class="line">                            (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                           node = e;</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       p = e;</span><br><span class="line">                   &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//如果查找的了元素node，移除即可</span></span><br><span class="line">           <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                                (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">               <span class="comment">//如果是TreeNode，通过树进行移除</span></span><br><span class="line">               <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                   ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">               <span class="comment">//如果是第一个节点，移除第一个节点，将index下标的位置指向第二个节点</span></span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                   tab[index] = node.next;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   <span class="comment">//如果不是链表的第一个节点，则移除该节点</span></span><br><span class="line">                   p.next = node.next;</span><br><span class="line">               ++modCount;</span><br><span class="line">               --size;</span><br><span class="line">               afterNodeRemoval(node);</span><br><span class="line">               <span class="keyword">return</span> node;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>与get()方法的逻辑几乎一样</p>
<p>注意的点：</p>
<p>hashMap的容量是2的n次幂，无论初始化的时候传入的初始容量是多少，最终多会转为2的n次幂，为了使用&amp;操作</p>
<p><a href="https://mp.weixin.qq.com/s/SHJzWpZ0MscuJhPLRwWQxg" target="_blank" rel="noopener">参考文章</a></p>
<h4 id="找点题练下手"><a href="#找点题练下手" class="headerlink" title="找点题练下手"></a>找点题练下手</h4><p><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">leetcode1</a></p>
<p><strong>暴力法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]==target-nums[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i,j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>两遍哈希表</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> findNumber=target-nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(findNumber)&amp;&amp;map.get(findNumber)!=i)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i,map.get(findNumber)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>一遍哈希表</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> findNumber=target-nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(findNumber))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(findNumber),i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"no "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>####后记</p>
<p>这次，先到这里。过两天会再练几题，不过呢今天是第一次读源代码(虽然是看别人的文章)，也算是迈出了第一步。</p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>散列表</tag>
      </tags>
  </entry>
  <entry>
    <title>集合(Set)</title>
    <url>/2719220805.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>集合这个数据结构，需要了解一下，因为对于一些数据只能用集合来存储,没有特定的顺序，并且数据不重复。</p>
<p>【这部分，我只找到一点材料，所以今天补充一下】</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote>
<p>A set is an abstract data type that can store certain values,without any particular order,and no repeated values.</p>
<p>The Sets data structure is usually used to test whether elements belong to set of values.</p>
</blockquote>
<p>这个定义说明，集合经常用来验证<strong>某个值是否在这里面</strong>。</p>
<h4 id="集合的表示"><a href="#集合的表示" class="headerlink" title="集合的表示"></a>集合的表示</h4><p>用一个数组表示，数组的index表示存储的值，数组存储的值表示 该集合的代表，如果就是集合的代表，则为-1</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Put</span><span class="params">(<span class="keyword">int</span> []set)</span></span>&#123;</span><br><span class="line">       <span class="comment">//以每个集合的第一个数为代表</span></span><br><span class="line">       Set[set[<span class="number">0</span>]]=-<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;set.length;i++)&#123;</span><br><span class="line">           Set[set[i]]=set[<span class="number">0</span>];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h4><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><p>沿当前节点往上查，当查到某个节点的值为-1时，就是其所在的集合</p>
<p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找某个元素所在的集合</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">       <span class="keyword">for</span>(;Set[num]&gt;=<span class="number">0</span>;num=Set[num]);</span><br><span class="line">       <span class="keyword">return</span> num;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h5 id="集合的并运算"><a href="#集合的并运算" class="headerlink" title="集合的并运算"></a>集合的并运算</h5><p>直接将另外一个集合接到当前集合下</p>
<p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//集合并运算</span></span><br><span class="line">   <span class="comment">//直接将第二个集合的代表元素接在第一个集合的代表元素后面</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> []set1,<span class="keyword">int</span> []set2)</span></span>&#123;</span><br><span class="line">       Set[set2[<span class="number">0</span>]]=set1[<span class="number">0</span>];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>改进版</strong></p>
<p>按秩合并</p>
<p>就是判断两个集合的大小，小的接到大的下面</p>
<p>路径压缩</p>
<p>查找某个值的时候，直接将这个值接到根节点下面</p>
<p>全部代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetPractice</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] Set;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> MAXN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化容量为MAXN</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SetPractice</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MAXN=<span class="number">16</span>;</span><br><span class="line">        Set=<span class="keyword">new</span> <span class="keyword">int</span>[MAXN];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Put</span><span class="params">(<span class="keyword">int</span> []set)</span></span>&#123;</span><br><span class="line">        <span class="comment">//以每个集合的第一个数为代表</span></span><br><span class="line">        Set[set[<span class="number">0</span>]]=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;set.length;i++)&#123;</span><br><span class="line">            Set[set[i]]=set[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查找某个元素所在的集合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(;Set[num]&gt;=<span class="number">0</span>;num=Set[num]);</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//集合并运算</span></span><br><span class="line">    <span class="comment">//直接将第二个集合的代表元素接在第一个集合的代表元素后面</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> []set1,<span class="keyword">int</span> []set2)</span></span>&#123;</span><br><span class="line">        Set[set2[<span class="number">0</span>]]=set1[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//按秩合并</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnionBysize</span><span class="params">(<span class="keyword">int</span> []set1,<span class="keyword">int</span> []set2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(set1.length&lt;set2.length)</span><br><span class="line">            Set[set2[<span class="number">0</span>]]=set1[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Set[set1[<span class="number">0</span>]]=set2[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//路径压缩</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FindAndShorten</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Set[num]&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> Set[num]=FindAndShorten(Set[num]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> set1[]=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> set2[]=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> set3[]=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        SetPractice setPractice=<span class="keyword">new</span> SetPractice();</span><br><span class="line">        setPractice.Put(set1);</span><br><span class="line">        setPractice.Put(set2);</span><br><span class="line">        setPractice.Put(set3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>我也奇怪，为什么集合没有好的材料？？？</p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>堆</title>
    <url>/4206121381.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对于堆的数据结构，虽然上课听了，但是还是不熟悉。所以今天以这一篇文章来督促自己学习“堆”</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote>
<p>A heap is a complete binary tree.Heaps can be of two types: Max-Heap and Min-Heap</p>
<p><strong>Max-Heap</strong></p>
<p>the key present at the root node must be greatest among the keys present at all of it’s children.</p>
<p><strong>Min-Heap</strong></p>
<p>the key present at the root node must be minimum among the keys present at all of it’s children.</p>
</blockquote>
<p>看到这里，应该有点知道“堆”是啥玩意了。堆是利用<strong>完全二叉树</strong>的结构来维护的一组数据</p>
<p>下面的所有操作都是以<strong>小根堆</strong>为例</p>
<h4 id="上浮shift-up"><a href="#上浮shift-up" class="headerlink" title="上浮shift_up"></a>上浮shift_up</h4><p><strong>操作过程</strong>：</p>
<ol>
<li>从当前节点 i 开始，和它的父亲节点 i&gt;&gt;1(i/2) 比较，如果是比父亲节点小，则跟父亲节点交换</li>
<li>将当前节点 i 改为 i/2 </li>
</ol>
<p>否则退出</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line">shift_up(i)&#123;</span><br><span class="line">    <span class="keyword">while</span>((i/<span class="number">2</span>)&gt;<span class="number">1</span>)  <span class="comment">//根节点是1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">queue</span>[i]&lt;<span class="built_in">queue</span>[i&gt;&gt;<span class="number">1</span>])&#123;</span><br><span class="line">            swap(<span class="built_in">queue</span>[i],<span class="built_in">queue</span>[i&gt;&gt;<span class="number">1</span>]);</span><br><span class="line">            i=i&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="下浮shift-down"><a href="#下浮shift-down" class="headerlink" title="下浮shift_down"></a>下浮shift_down</h4><p><strong>操作过程</strong>：</p>
<ol>
<li>让当前节点的 i 开始跟它的左 2i 右 2i+1 孩子(如果有)比较 那个比较小就跟它交换</li>
<li>更新当前节点的下标 （谁跟它换就换成谁)</li>
</ol>
<p>否则退出</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line">shift_down(i)&#123;</span><br><span class="line">    <span class="keyword">while</span>((i&lt;&lt;<span class="number">1</span>)&lt;=<span class="built_in">size</span>)<span class="comment">//判断是否有左右孩子</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//进行比较</span></span><br><span class="line">        <span class="keyword">int</span> next=i&lt;&lt;<span class="number">1</span>; </span><br><span class="line">        <span class="keyword">if</span>(next+<span class="number">1</span>&lt;=<span class="built_in">size</span>&amp;&amp;<span class="built_in">queue</span>[next+<span class="number">1</span>]&lt;<span class="built_in">queue</span>[next])  <span class="comment">//如果右孩子的值小于左孩子</span></span><br><span class="line">            next++;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">queue</span>[i]&gt;<span class="built_in">queue</span>[next])<span class="comment">//如果孩子节点比父节点要小</span></span><br><span class="line">        &#123;</span><br><span class="line">            swap(<span class="built_in">queue</span>[i],<span class="built_in">queue</span>[next]);</span><br><span class="line">            i=next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;  <span class="comment">//退出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p><strong>操作过程</strong>:</p>
<p>每次插入到最后一个 即queue[++size]=insertnum 然后上浮 shift_up(size)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line">push(x)&#123;</span><br><span class="line">	<span class="built_in">queue</span>[++<span class="built_in">size</span>]=x;</span><br><span class="line">    shift_up(<span class="built_in">size</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="弹出"><a href="#弹出" class="headerlink" title="弹出"></a>弹出</h4><p><strong>操作过程</strong>：</p>
<p>让根节点跟尾节点进行交换，然后当当前的根节点元素下沉就可以了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line">Pop(x)&#123;</span><br><span class="line">    swap(<span class="built_in">queue</span>[<span class="number">1</span>],<span class="built_in">queue</span>[<span class="built_in">size</span>]);</span><br><span class="line">    <span class="built_in">size</span>--;  <span class="comment">//弹出</span></span><br><span class="line">    shift_down(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上我们已经讲了堆的基本操作，所以稍微懂了点</p>
<p>现在我们出发找点题练手啊<del>~</del></p>
<p>额，还不行。但目前为止，我们只是讲了堆的操作，但是并没有说一些应用</p>
<h4 id="堆排序算法"><a href="#堆排序算法" class="headerlink" title="堆排序算法"></a>堆排序算法</h4><p><strong>操作过程</strong>：</p>
<ol>
<li>建堆 两种方法<ol>
<li>假设只包含一个数据，就是下标为1的数据，然后通过不断插入。这样就可以得到n个数据的堆【这个想法还是比较好理解的】</li>
<li>利用下沉操作，从上往下的建立这个堆【这里我们详细的讲】</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为了区别上面，这里建立最大堆</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=size/<span class="number">2</span>;i&gt;=<span class="number">1</span>;--i)   <span class="comment">//size/2这个下标是第一个非叶子节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        shift_down(a,size,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shift_down</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> size,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>((i&lt;&lt;<span class="number">1</span>)&lt;=size)&#123;</span><br><span class="line">        <span class="keyword">int</span> next=i&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(next+<span class="number">1</span>&lt;=size&amp;&amp;a[next+<span class="number">1</span>]&gt;a[next])</span><br><span class="line">            next++;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;a[next])  <span class="comment">//父节点小于孩子节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            swap(a,i,next);</span><br><span class="line">            i=next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>排序</p>
<ol>
<li>就是不断删除堆顶的操作</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    buildHeap(a,n);</span><br><span class="line">    <span class="keyword">int</span> k=n;</span><br><span class="line">    <span class="keyword">while</span>(k&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        swap(a,<span class="number">1</span>,k);</span><br><span class="line">        --k;</span><br><span class="line">        shift_down(a,k,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里掌握的差不多了，不过呢！我们还是需要实现下堆的基本操作，然后我们上手练习，砍柴不过磨刀功。</p>
<p>####全部代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10010  <span class="comment">//可以自己定义堆的最大长度 </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//max-heap </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Heap</span>&#123;</span></span><br><span class="line">	<span class="comment">//定义结构</span></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>,heap[maxn];</span><br><span class="line">	<span class="comment">//初始化</span></span><br><span class="line">	Heap()&#123;</span><br><span class="line">		<span class="built_in">size</span>=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=maxn;i++)&#123;</span><br><span class="line">			heap[i]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//堆化</span></span><br><span class="line">	<span class="comment">//这里用从上往下的堆化 </span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>((i&lt;&lt;<span class="number">1</span>)&lt;=<span class="built_in">size</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> next=i&lt;&lt;<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(next+<span class="number">1</span>&lt;=<span class="built_in">size</span>&amp;&amp;heap[next+<span class="number">1</span>]&gt;heap[next])</span><br><span class="line">				next++;</span><br><span class="line">			<span class="keyword">if</span>(heap[i]&lt;heap[next])&#123;</span><br><span class="line">				<span class="keyword">int</span> temp=heap[i];</span><br><span class="line">				heap[i]=heap[next];</span><br><span class="line">				heap[next]=temp;</span><br><span class="line">				i=next;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//上浮</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">shift_up</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(i&gt;<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(heap[i]&gt;heap[(i&gt;&gt;<span class="number">1</span>)])&#123;</span><br><span class="line">				<span class="keyword">int</span> temp=heap[i/<span class="number">2</span>];</span><br><span class="line">				heap[i/<span class="number">2</span>]=heap[i];</span><br><span class="line">				heap[i]=temp;</span><br><span class="line">				i=i/<span class="number">2</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//下沉 见堆化</span></span><br><span class="line">	<span class="comment">//删除堆顶元素</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">		heap[i]=heap[<span class="built_in">size</span>];</span><br><span class="line">		<span class="built_in">size</span>--;</span><br><span class="line">		heapify(<span class="number">1</span>);<span class="comment">//重新堆化 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="comment">//先插入末尾</span></span><br><span class="line">		heap[++<span class="built_in">size</span>]=x;</span><br><span class="line">		shift_up(<span class="built_in">size</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">heapisempty</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">size</span>&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//堆排序</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">heapsort</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(heapisempty())&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;heap[<span class="number">1</span>]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">			pop(<span class="number">1</span>);</span><br><span class="line">			heapsort();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试样例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Heap Q;</span><br><span class="line">	<span class="keyword">int</span> n,a,i,j,l;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入堆的大小 不要操作10010"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">		Q.insert(a);</span><br><span class="line">	&#125;</span><br><span class="line">	Q.heapsort();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//不知道为什么有点小bug 现在用java试一遍</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Heap</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        a=<span class="keyword">new</span> <span class="keyword">int</span>[capacity+<span class="number">1</span>];</span><br><span class="line">        n=capacity;</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(count&gt;=n) <span class="keyword">return</span> ;</span><br><span class="line">        ++count;</span><br><span class="line">        a[count]=data;</span><br><span class="line">        <span class="keyword">int</span> i=count;</span><br><span class="line">        <span class="keyword">while</span>(i/<span class="number">2</span>&gt;<span class="number">0</span>&amp;&amp;a[i]&gt;a[i/<span class="number">2</span>])&#123;</span><br><span class="line">            swap(a,i,i/<span class="number">2</span>);</span><br><span class="line">            i=i/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        a[<span class="number">1</span>]=a[count];</span><br><span class="line">        --count;</span><br><span class="line">        heapify(a,count,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> count, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">while</span>((i&lt;&lt;<span class="number">1</span>)&lt;=count)&#123;</span><br><span class="line">           <span class="keyword">int</span> next=i&lt;&lt;<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span>(next+<span class="number">1</span>&lt;=count&amp;&amp;a[next+<span class="number">1</span>]&gt;a[next])</span><br><span class="line">               next++;</span><br><span class="line">           <span class="keyword">if</span>(a[i]&lt;a[next])&#123;</span><br><span class="line">               swap(a,i,next);</span><br><span class="line">               i=next;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(<span class="keyword">int</span> [] a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">            heapify(a,n,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        buildHeap(a,n);</span><br><span class="line">        <span class="keyword">int</span> k=n;</span><br><span class="line">        <span class="keyword">while</span>(k&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(a[<span class="number">1</span>]);</span><br><span class="line">            swap(a,<span class="number">1</span>,k);</span><br><span class="line">            --k;</span><br><span class="line">            heapify(a,k,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> i1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t=a[i];</span><br><span class="line">        a[i]=a[i1];</span><br><span class="line">        a[i1]=t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"建立堆"</span>);</span><br><span class="line">       Heap heap=<span class="keyword">new</span> Heap(<span class="number">10</span>);</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">           heap.a[i]=i;</span><br><span class="line">       &#125;</span><br><span class="line">       buildHeap(heap.a,<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">            System.out.println(heap.a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有bug的代码 待我静下心来认真研读</span></span><br></pre></td></tr></table></figure>

<h4 id="堆的应用"><a href="#堆的应用" class="headerlink" title="堆的应用"></a>堆的应用</h4><p>哈哈哈臭不要脸的，前面代码都有bug，不过呢，我相信我往后做，就可以发现和找到bug</p>
<p>这里留个坑，留到后面收个尾</p>
<p>####利用优先级队列合并 K 个有序数组</p>
<p>####求一组动态数据集合的最大 Top K</p>
]]></content>
      <tags>
        <tag>堆</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>树</title>
    <url>/2065787451.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为什么写这个系列，因为数据结构是计算机的基础课，而数据结构单单看是学不会的，所以需要练，并且这个系列中的每个专题都会不断更新。如有疑问欢迎提出</p>
<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul>
<li><input checked="" disabled="" type="checkbox"> <p>2019-04-20首发日志</p>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>2019-04-21更新<a href="#20190421">“有序数组构造二叉搜索树”</a></p>
</li>
<li><input disabled="" type="checkbox"> <p>2019-0-29更新<a href="#20190429">“二叉树的最大宽度”</a></p>
</li>
</ul>
<h3 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h3><p>简单说一些概念[容易跟《离散数学》混淆的定义]</p>
<ul>
<li>节点的度：节点拥有的子树数，在离散数学中即指的是 <strong>出度</strong></li>
<li>树的度：max(节点的度)</li>
</ul>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h4><ol>
<li>对任何一棵二叉树T，如果其叶子数为n0,度为2的节点数为n2,则<strong>n0=n2+1</strong></li>
<li>具有n个节点的完全二叉树的深度为[log2(2)]+1</li>
</ol>
<h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><p>#####前序遍历</p>
<p><strong>前序遍历</strong>指的是根节点、左节点、右节点</p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="noopener">leetcode114</a></p>
<p><strong>递归法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        preorderTraversal(root.left);</span><br><span class="line">        preorderTraversal(root.right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>迭代法</strong></p>
<p>迭代法主要是利用到栈的结构，通过遍历我们可以看到 二叉树首先是 root 然后是root.left 当root.left==null的时候才是root.right; 这很符合栈的结构 <strong>先进后出</strong>。所以就是朝左节点遍历到最低，然后遍历右节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//先判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="keyword">null</span>||!stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                list.add(root.val);</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root=root.left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                root=stack.pop();</span><br><span class="line">                root=root.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><p><strong>中序遍历</strong>左节点、根节点、右节点</p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener">leetcode94</a></p>
<p><strong>递归法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">        inorderTraversal(root.left);</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        inorderTraversal(root.right);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>迭代法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="keyword">null</span>||!stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root=root.left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                root=stack.pop();</span><br><span class="line">                list.add(root.val);</span><br><span class="line">                root=root.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><p><strong>后序遍历</strong>左节点、右节点、根节点</p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/" target="_blank" rel="noopener">leetcode145</a></p>
<p><strong>递归</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">        postorderTraversal(root.left);</span><br><span class="line">        postorderTraversal(root.right);</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>迭代法</strong></p>
<h5 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h5><p><strong>层序遍历</strong>顾名思义就是一层一层的遍历，从左往右的遍历.用到了队列的数据结构FIFO。先将根节点加入到队列中，然后遍历其左节点和右节点，如果不为空将其加入到队列中。</p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">leetcode102</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> count=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)</span><br><span class="line">                    queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)</span><br><span class="line">                    queue.add(node.right);</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/" target="_blank" rel="noopener">leetcode107</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;List&lt;Integer&gt;&gt; stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt;queue =<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> count=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)</span><br><span class="line">                    queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)</span><br><span class="line">                    queue.add(node.right);</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            res.add(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解法二</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;List&lt;Integer&gt;&gt; stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt;queue =<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> count=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)</span><br><span class="line">                    queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)</span><br><span class="line">                    queue.add(node.right);</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>,j=res.size()-<span class="number">1</span>;i&lt;j;i++,j--)&#123;</span><br><span class="line">            List&lt;Integer&gt; temp=res.get(i);</span><br><span class="line">            res.set(i,res.get(j));</span><br><span class="line">            res.set(j,temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二叉树深度问题"><a href="#二叉树深度问题" class="headerlink" title="二叉树深度问题"></a>二叉树深度问题</h3><p>二叉树深度问题，其实就是用递归，刚才笔者又犯了个错误[递归如果如果去想清楚每一步怎么走是想不出来的]</p>
<ol>
<li>递归停止的 root==null</li>
<li>递归方程 depth=max(ld,rd)+1</li>
</ol>
<p>[递归的思想真的很巧妙，还是要多训练:smile:]</p>
<p><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">leetcode104</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ld=maxDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> rd=maxDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(ld,rd)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/" target="_blank" rel="noopener">leetcode111</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="keyword">null</span>&amp;&amp;root.right==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="keyword">null</span>&amp;&amp;root.right==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> minDepth(root.left)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="keyword">null</span>&amp;&amp;root.left==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> minDepth(root.right)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> Math.min(minDepth(root.left),minDepth(root.right))+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="确定二叉树"><a href="#确定二叉树" class="headerlink" title="确定二叉树"></a>确定二叉树</h3><h4 id="中序遍历-前序遍历确定二叉树"><a href="#中序遍历-前序遍历确定二叉树" class="headerlink" title="中序遍历+前序遍历确定二叉树"></a>中序遍历+前序遍历确定二叉树</h4><p>解决步骤</p>
<ol>
<li>找到中序遍历跟前序遍历的第一个节点相等的地方</li>
<li>将中序遍历和前序遍历分为左右子树【这个地方特别小心】小心数组越界</li>
<li>递归</li>
</ol>
<p><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/" target="_blank" rel="noopener">leetcode105</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        TreeNode head=solu(preorder,inorder,<span class="number">0</span>,preorder.length-<span class="number">1</span>,<span class="number">0</span>,inorder.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">solu</span><span class="params">(<span class="keyword">int</span>[] pre,<span class="keyword">int</span>[] in,<span class="keyword">int</span> prestart,<span class="keyword">int</span> preend,<span class="keyword">int</span> instart,<span class="keyword">int</span> inend)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prestart&gt;preend) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(prestart==preend) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(pre[prestart]);</span><br><span class="line">        <span class="comment">//开始构建 首先是前序遍历的第一个节点就是树或者（子树）的根节点</span></span><br><span class="line">        TreeNode head=<span class="keyword">new</span> TreeNode(pre[prestart]);</span><br><span class="line">        <span class="comment">//从中序遍历中找到这个根节点 将其分为左右子树</span></span><br><span class="line">        <span class="keyword">int</span> low=instart;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=low;i&lt;=inend;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(in[i]==pre[prestart])&#123;</span><br><span class="line">                head.left=solu(pre,in,prestart+<span class="number">1</span>,prestart+i-instart,instart,i-<span class="number">1</span>);</span><br><span class="line">                head.right=solu(pre,in,prestart+i-instart+<span class="number">1</span>,preend,i+<span class="number">1</span>,inend);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">其中特别注意的是 prestart+i-instart.这个地方没有想到，因为你后面子树的结尾是要从你开头加起来，具体加多少，要看你移动了多少</span><br></pre></td></tr></table></figure>

<p>####中序遍历+后序遍历确定二叉树</p>
<p>解决方案</p>
<ol>
<li>从中序遍历中找到跟后序遍历的尾节点相同的点</li>
<li>将中序遍历和后序遍历分为左右两个子树</li>
<li>递归</li>
</ol>
<p><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/" target="_blank" rel="noopener">leetcode106</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line">        TreeNode head=solu(inorder,postorder,<span class="number">0</span>,inorder.length-<span class="number">1</span>,<span class="number">0</span>,postorder.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">solu</span><span class="params">(<span class="keyword">int</span>[] inorder,<span class="keyword">int</span>[] postorder,<span class="keyword">int</span> instart,<span class="keyword">int</span> inend,<span class="keyword">int</span> poststart,<span class="keyword">int</span> postend)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(poststart&gt;postend) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(poststart==postend) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(postorder[poststart]);</span><br><span class="line">        <span class="comment">//现在开始构建树 后续遍历的最后一个就是根节点</span></span><br><span class="line">        TreeNode head=<span class="keyword">new</span> TreeNode(postorder[postend]);</span><br><span class="line">        <span class="comment">//遍历中序遍历找到根节点 然后将其分为左右子树</span></span><br><span class="line">        <span class="keyword">int</span> low=instart;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=low;i&lt;=inend;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(inorder[i]==postorder[postend])&#123;</span><br><span class="line">            head.left=solu(inorder,postorder,instart,i-<span class="number">1</span>,poststart,poststart+i-instart-<span class="number">1</span>);</span><br><span class="line">            head.right=solu(inorder,postorder,i+<span class="number">1</span>,inend,poststart+i-instart,postend-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="先序遍历构造二叉树"><a href="#先序遍历构造二叉树" class="headerlink" title="先序遍历构造二叉树"></a>先序遍历构造二叉树</h4><p>因为先序遍历无法确定，但是我们可以构造二叉树其中的一种特殊的树–二叉搜索树</p>
<p><a href="https://leetcode-cn.com/problems/construct-binary-search-tree-from-preorder-traversal/" target="_blank" rel="noopener">leetcode1008</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">bstFromPreorder</span><span class="params">(<span class="keyword">int</span>[] preorder)</span> </span>&#123;</span><br><span class="line">        TreeNode root=<span class="keyword">new</span> TreeNode(preorder[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;preorder.length;i++)&#123;</span><br><span class="line">            setTreeNode(root,preorder[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTreeNode</span><span class="params">(TreeNode root,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left!=<span class="keyword">null</span>) setTreeNode(root.left,i);</span><br><span class="line">            <span class="keyword">else</span> root.left=<span class="keyword">new</span> TreeNode(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.val&lt;i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.right!=<span class="keyword">null</span>) setTreeNode(root.right,i);</span><br><span class="line">            <span class="keyword">else</span> root.right=<span class="keyword">new</span> TreeNode(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="完全二叉树的节点个数"><a href="#完全二叉树的节点个数" class="headerlink" title="完全二叉树的节点个数"></a>完全二叉树的节点个数</h4><p>首先我们可以知道完全二叉树的形式，都是先满足左节点，然后在满足右节点。所以可以通过不断遍历其左节点，就可以知道其深度。</p>
<ol>
<li>当左右子树的深度相同时，就说明左子树是一颗<strong>满二叉树</strong>其节点个数为(1&lt;&lt;ld) 其中ld为其深度+右子树的节点个数</li>
<li>当左右子树的深度不相同时，就说明右子树是一颗<strong>满二叉树</strong>其节点个数为(1&lt;&lt;rd)其中rd为其深度+左子树的节点个数</li>
</ol>
<p><a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/submissions/" target="_blank" rel="noopener">LeetCode222</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countNodes</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过不断查找左节点可以得到其节点个数</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ld=getDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> rd=getDepth(root.right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(ld==rd) <span class="keyword">return</span> (<span class="number">1</span>&lt;&lt;ld)+countNodes(root.right);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> (<span class="number">1</span>&lt;&lt;rd)+countNodes(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDepth</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> depth=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            depth++;</span><br><span class="line">            root=root.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二叉树其他问题"><a href="#二叉树其他问题" class="headerlink" title="二叉树其他问题"></a>二叉树其他问题</h3><h4 id="二叉树最近的公共祖先问题"><a href="#二叉树最近的公共祖先问题" class="headerlink" title="二叉树最近的公共祖先问题"></a>二叉树最近的公共祖先问题</h4><p>[占个坑 LCA问题]</p>
<h4 id="二叉树的最大宽度"><a href="#二叉树的最大宽度" class="headerlink" title="二叉树的最大宽度"></a><span id="20190429">二叉树的最大宽度</span></h4><p>思路：原先想用层序遍历，不过呢，这个最大宽度有涉及到Null节点。</p>
<p>​    所以需要对其用数组下标来遍历，对于任意的下标 i 节点，它的左节点下标为2*i 右节点下标为 2i+1</p>
<pre><code>用一个list来存储每一层的最左边的节点，然后通过 用右节点的下标位置-左节点下标位置，修改max</code></pre><p><a href="https://leetcode-cn.com/problems/maximum-width-of-binary-tree/" target="_blank" rel="noopener">leetcode662</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxW=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">widthOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        dfs(root,<span class="number">1</span>,<span class="number">1</span>,<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> maxW;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode r,<span class="keyword">int</span> level,<span class="keyword">int</span> index,List&lt;Integer&gt; left)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(r==<span class="keyword">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(level&gt;left.size()) left.add(index);</span><br><span class="line">        maxW=Math.max(maxW,index-left.get(level-<span class="number">1</span>)+<span class="number">1</span>);</span><br><span class="line">        dfs(r.left,level+<span class="number">1</span>,index*<span class="number">2</span>,left);</span><br><span class="line">        dfs(r.right,level+<span class="number">1</span>,index*<span class="number">2</span>+<span class="number">1</span>,left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><blockquote>
<p>A Binary Search Tree (BST) is a tree in which all the nodes follow the bellow-mentions propries-</p>
<ul>
<li>the left sub-tree of a node  has a key less than or equal to its parent node’s key</li>
<li>the right sub-tree of a node has a key greater than  to its parent node’s key </li>
</ul>
</blockquote>
<h4 id="二叉搜索树的插入操作"><a href="#二叉搜索树的插入操作" class="headerlink" title="二叉搜索树的插入操作"></a>二叉搜索树的插入操作</h4><p>通过二叉搜索树的结构特征，可以观察到。其<strong>左节点值&lt;根节点值&lt;右节点值</strong>。所以其插入的判断较为简单[当然是在原二叉树中没有该值的时候]。不过，在实现的过程中确犯了两个错误，虽然通过调试都找到了</p>
<ol>
<li>return  root.我将root用来进行操作，这样就找不到原先的那棵树的根节点，而根节点一旦找不到，这棵树就“vanish”</li>
<li>while(true)  我只判断if，这样做是不行的，因为你得不断判断。将新值插入到二叉树中为止</li>
</ol>
<p><a href="https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/submissions/" target="_blank" rel="noopener">leetcode701</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">insertIntoBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">        TreeNode cur=root;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(val&gt;cur.val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                cur.right=<span class="keyword">new</span> TreeNode(val);</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">                cur.left=<span class="keyword">new</span> TreeNode(val);</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二叉搜索树的删除操作"><a href="#二叉搜索树的删除操作" class="headerlink" title="二叉搜索树的删除操作"></a>二叉搜索树的删除操作</h4><p>通过二叉搜索树的结构特征，删除操作主要有这三种情况</p>
<ol>
<li>要删除的节点，其左子树为空，那么这个时候<strong>右子树</strong>就作为其根节点</li>
<li>要删除的节点，其右子树为空，那么这个时候<strong>左子树</strong>就作为其根节点</li>
<li>要删除的节点其左右子树都不为空，这个时候需要右子树中最小的值(即右子树中最左的节点)作为其根节点</li>
</ol>
<p>在进行编写代码的时候，笔者又不小心翻了车(找到最小的点的时候 应该先删除 然后在进 successor.left=root.left,不理解的可以拿起笔来画画)</p>
<p><a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/submissions/" target="_blank" rel="noopener">leetcode450</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deleteNode</span><span class="params">(TreeNode root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;key)&#123;</span><br><span class="line">            <span class="comment">//删除的节点在左子树</span></span><br><span class="line">            root.left=deleteNode(root.left,key);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;key)&#123;</span><br><span class="line">            <span class="comment">//删除的节点在右子树</span></span><br><span class="line">            root.right=deleteNode(root.right,key);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//当前节点即为删除的节点</span></span><br><span class="line">            <span class="keyword">if</span>(root.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> root.left;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> root.right;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                TreeNode successor=min(root.right);</span><br><span class="line">                successor.right=delete(root.right);   <span class="comment">//笔者翻车的地方就在这里</span></span><br><span class="line">                successor.left=root.left;            <span class="comment">//可以把这两行代码对调一下</span></span><br><span class="line">                <span class="keyword">return</span> successor;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">min</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min(node.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">delete</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> node.right;</span><br><span class="line">        &#125;</span><br><span class="line">        node.left=delete(node.left);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二叉搜索树的搜索操作"><a href="#二叉搜索树的搜索操作" class="headerlink" title="二叉搜索树的搜索操作"></a>二叉搜索树的搜索操作</h4><p>二叉搜索树的搜索操作，依据这其结构特征<strong>左节点&lt;根节点&lt;右节点</strong>+<strong>递归</strong>，可以很好的找到要搜索的值。</p>
<p><a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/" target="_blank" rel="noopener">leetcode700</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">searchBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;val)&#123;</span><br><span class="line">            <span class="comment">//要查找的值在左子树</span></span><br><span class="line">            <span class="keyword">return</span> searchBST(root.left,val);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;val)&#123;</span><br><span class="line">            <span class="comment">//要查找的值在右子树</span></span><br><span class="line">            <span class="keyword">return</span> searchBST(root.right,val);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是不满足于递归解决，我要用非递归的方法去解决,说实话一开始没有想到这么简单的方法，还是向上面那样，先来三个if然后在while。这个时候代码就非常庞大并且丑陋。[还是需要多看别人写的代码]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">searchBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.val&gt;val) root=root.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;val) root=root.right;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否是BST"><a href="#判断是否是BST" class="headerlink" title="判断是否是BST"></a>判断是否是BST</h4><p>由前中序遍历和BST的结构可以得出，如果是一棵BST其中序遍历为升序</p>
<p><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/" target="_blank" rel="noopener">leetcode98</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> last=-Double.MAX_VALUE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(isValidBST(root.left))&#123;</span><br><span class="line">            <span class="keyword">if</span>(last&lt;root.val)&#123;</span><br><span class="line">                last=root.val;</span><br><span class="line">                <span class="keyword">return</span> isValidBST(root.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="将有序数组转为二叉搜索树"><a href="#将有序数组转为二叉搜索树" class="headerlink" title="将有序数组转为二叉搜索树"></a><span id="20190421">将有序数组转为二叉搜索树</span></h4><p>有序数组其实对应着二叉树的中序遍历，所以这个应该属于二叉搜索树中序遍历的一种逆序</p>
<p>因为题目要求要构造一颗平衡二叉树，所以这就需要充数组中间，将其分为左右子树，然后反复递归</p>
<p><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/" target="_blank" rel="noopener">leetcod108</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums==<span class="keyword">null</span>?<span class="keyword">null</span>:buildTree(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> m=l+(r-l)/<span class="number">2</span>;</span><br><span class="line">        TreeNode root=<span class="keyword">new</span> TreeNode(nums[m]);</span><br><span class="line">        root.left=buildTree(nums,l,m-<span class="number">1</span>);</span><br><span class="line">        root.right=buildTree(nums,m+<span class="number">1</span>,r);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><h4 id="验证是否是平衡二叉树"><a href="#验证是否是平衡二叉树" class="headerlink" title="验证是否是平衡二叉树"></a>验证是否是平衡二叉树</h4><blockquote>
<p>平衡二叉树的严格定义是，任一个节点的左右子树的深度差不能超过1</p>
<p>所以我们就需要求 深度 ，由前面解题来看，我们可以用递归来求深度</p>
<p>并且因为是任意节点所以这里也考虑递归</p>
</blockquote>
<p><a href="https://leetcode-cn.com/problems/balanced-binary-tree/" target="_blank" rel="noopener">leetcod110</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ld=deep(root.left);</span><br><span class="line">        <span class="keyword">int</span> rd=deep(root.right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Math.abs(ld-rd)&lt;=<span class="number">1</span>&amp;&amp;isBalanced(root.left)&amp;&amp;isBalanced(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deep</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ld=deep(root.left);</span><br><span class="line">        <span class="keyword">int</span> rd=deep(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(ld,rd)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
</search>
